// This is a generated file, please see: gen_functional_types.js
import  * as ifc from "./ifc-schema";
import {RawLineData} from "./web-ifc-api";
export class Handle<T> {
	value: number;
	label!: string | null;
	valueType!: number | null;
	constructor(id: number) { this.value = id; }
	toTape(args: unknown[]){ args.push({ type: 5, value: this.value }); }
}

export function Value(type: string, value: unknown): unknown { return { t: type, v: value }; }
export const FromRawLineData: any = {};
export const InversePropertyDef: any = {};
export const InheritanceDef: any = {};
FromRawLineData['IFC2X3'] = {};
InversePropertyDef['IFC2X3'] = {};
InheritanceDef['IFC2X3'] = {};
FromRawLineData['IFC2X3'][ifc.IFCACTORROLE] = (d: RawLineData) => { return IFC2X3.IfcActorRole.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCADDRESS] = (d: RawLineData) => { return IFC2X3.IfcAddress.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCADDRESS] = [ifc.IFCTELECOMADDRESS,ifc.IFCPOSTALADDRESS];
InversePropertyDef['IFC2X3'][ifc.IFCADDRESS] = [
		['OfPerson',ifc.IFCPERSON,7,true],
		['OfOrganization',ifc.IFCORGANIZATION,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAPPLICATION] = (d: RawLineData) => { return IFC2X3.IfcApplication.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCAPPLIEDVALUE] = (d: RawLineData) => { return IFC2X3.IfcAppliedValue.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCAPPLIEDVALUE] = [ifc.IFCENVIRONMENTALIMPACTVALUE,ifc.IFCCOSTVALUE];
InversePropertyDef['IFC2X3'][ifc.IFCAPPLIEDVALUE] = [
		['ValuesReferenced',ifc.IFCREFERENCESVALUEDOCUMENT,1,true],
		['ValueOfComponents',ifc.IFCAPPLIEDVALUERELATIONSHIP,0,true],
		['IsComponentIn',ifc.IFCAPPLIEDVALUERELATIONSHIP,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAPPLIEDVALUERELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcAppliedValueRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCAPPROVAL] = (d: RawLineData) => { return IFC2X3.IfcApproval.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAPPROVAL] = [
		['Actors',ifc.IFCAPPROVALACTORRELATIONSHIP,1,true],
		['IsRelatedWith',ifc.IFCAPPROVALRELATIONSHIP,0,true],
		['Relates',ifc.IFCAPPROVALRELATIONSHIP,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAPPROVALACTORRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcApprovalActorRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCAPPROVALPROPERTYRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcApprovalPropertyRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCAPPROVALRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcApprovalRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCBOUNDARYCONDITION] = (d: RawLineData) => { return IFC2X3.IfcBoundaryCondition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBOUNDARYCONDITION] = [ifc.IFCBOUNDARYNODECONDITIONWARPING,ifc.IFCBOUNDARYNODECONDITION,ifc.IFCBOUNDARYFACECONDITION,ifc.IFCBOUNDARYEDGECONDITION];
FromRawLineData['IFC2X3'][ifc.IFCBOUNDARYEDGECONDITION] = (d: RawLineData) => { return IFC2X3.IfcBoundaryEdgeCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCBOUNDARYFACECONDITION] = (d: RawLineData) => { return IFC2X3.IfcBoundaryFaceCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCBOUNDARYNODECONDITION] = (d: RawLineData) => { return IFC2X3.IfcBoundaryNodeCondition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBOUNDARYNODECONDITION] = [ifc.IFCBOUNDARYNODECONDITIONWARPING];
FromRawLineData['IFC2X3'][ifc.IFCBOUNDARYNODECONDITIONWARPING] = (d: RawLineData) => { return IFC2X3.IfcBoundaryNodeConditionWarping.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCALENDARDATE] = (d: RawLineData) => { return IFC2X3.IfcCalendarDate.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCLASSIFICATION] = (d: RawLineData) => { return IFC2X3.IfcClassification.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCLASSIFICATION] = [
		['Contains',ifc.IFCCLASSIFICATIONITEM,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCLASSIFICATIONITEM] = (d: RawLineData) => { return IFC2X3.IfcClassificationItem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCLASSIFICATIONITEM] = [
		['IsClassifiedItemIn',ifc.IFCCLASSIFICATIONITEMRELATIONSHIP,1,true],
		['IsClassifyingItemIn',ifc.IFCCLASSIFICATIONITEMRELATIONSHIP,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCLASSIFICATIONITEMRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcClassificationItemRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCLASSIFICATIONNOTATION] = (d: RawLineData) => { return IFC2X3.IfcClassificationNotation.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCLASSIFICATIONNOTATIONFACET] = (d: RawLineData) => { return IFC2X3.IfcClassificationNotationFacet.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCOLOURSPECIFICATION] = (d: RawLineData) => { return IFC2X3.IfcColourSpecification.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCOLOURSPECIFICATION] = [ifc.IFCCOLOURRGB];
FromRawLineData['IFC2X3'][ifc.IFCCONNECTIONGEOMETRY] = (d: RawLineData) => { return IFC2X3.IfcConnectionGeometry.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONNECTIONGEOMETRY] = [ifc.IFCCONNECTIONCURVEGEOMETRY,ifc.IFCCONNECTIONSURFACEGEOMETRY,ifc.IFCCONNECTIONPORTGEOMETRY,ifc.IFCCONNECTIONPOINTECCENTRICITY,ifc.IFCCONNECTIONPOINTGEOMETRY];
FromRawLineData['IFC2X3'][ifc.IFCCONNECTIONPOINTGEOMETRY] = (d: RawLineData) => { return IFC2X3.IfcConnectionPointGeometry.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONNECTIONPOINTGEOMETRY] = [ifc.IFCCONNECTIONPOINTECCENTRICITY];
FromRawLineData['IFC2X3'][ifc.IFCCONNECTIONPORTGEOMETRY] = (d: RawLineData) => { return IFC2X3.IfcConnectionPortGeometry.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONNECTIONSURFACEGEOMETRY] = (d: RawLineData) => { return IFC2X3.IfcConnectionSurfaceGeometry.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONSTRAINT] = (d: RawLineData) => { return IFC2X3.IfcConstraint.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONSTRAINT] = [ifc.IFCOBJECTIVE,ifc.IFCMETRIC];
InversePropertyDef['IFC2X3'][ifc.IFCCONSTRAINT] = [
		['ClassifiedAs',ifc.IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP,0,true],
		['RelatesConstraints',ifc.IFCCONSTRAINTRELATIONSHIP,2,true],
		['IsRelatedWith',ifc.IFCCONSTRAINTRELATIONSHIP,3,true],
		['PropertiesForConstraint',ifc.IFCPROPERTYCONSTRAINTRELATIONSHIP,0,true],
		['Aggregates',ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP,2,true],
		['IsAggregatedIn',ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcConstraintAggregationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcConstraintClassificationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONSTRAINTRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcConstraintRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCOORDINATEDUNIVERSALTIMEOFFSET] = (d: RawLineData) => { return IFC2X3.IfcCoordinatedUniversalTimeOffset.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCOSTVALUE] = (d: RawLineData) => { return IFC2X3.IfcCostValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOSTVALUE] = [
		['ValuesReferenced',ifc.IFCREFERENCESVALUEDOCUMENT,1,true],
		['ValueOfComponents',ifc.IFCAPPLIEDVALUERELATIONSHIP,0,true],
		['IsComponentIn',ifc.IFCAPPLIEDVALUERELATIONSHIP,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCURRENCYRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcCurrencyRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCURVESTYLEFONT] = (d: RawLineData) => { return IFC2X3.IfcCurveStyleFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCURVESTYLEFONTANDSCALING] = (d: RawLineData) => { return IFC2X3.IfcCurveStyleFontAndScaling.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCURVESTYLEFONTPATTERN] = (d: RawLineData) => { return IFC2X3.IfcCurveStyleFontPattern.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDATEANDTIME] = (d: RawLineData) => { return IFC2X3.IfcDateAndTime.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDERIVEDUNIT] = (d: RawLineData) => { return IFC2X3.IfcDerivedUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDERIVEDUNITELEMENT] = (d: RawLineData) => { return IFC2X3.IfcDerivedUnitElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDIMENSIONALEXPONENTS] = (d: RawLineData) => { return IFC2X3.IfcDimensionalExponents.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDOCUMENTELECTRONICFORMAT] = (d: RawLineData) => { return IFC2X3.IfcDocumentElectronicFormat.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDOCUMENTINFORMATION] = (d: RawLineData) => { return IFC2X3.IfcDocumentInformation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDOCUMENTINFORMATION] = [
		['IsPointedTo',ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP,1,true],
		['IsPointer',ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcDocumentInformationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcDraughtingCalloutRelationship.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP] = [ifc.IFCDIMENSIONPAIR,ifc.IFCDIMENSIONCALLOUTRELATIONSHIP];
FromRawLineData['IFC2X3'][ifc.IFCENVIRONMENTALIMPACTVALUE] = (d: RawLineData) => { return IFC2X3.IfcEnvironmentalImpactValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCENVIRONMENTALIMPACTVALUE] = [
		['ValuesReferenced',ifc.IFCREFERENCESVALUEDOCUMENT,1,true],
		['ValueOfComponents',ifc.IFCAPPLIEDVALUERELATIONSHIP,0,true],
		['IsComponentIn',ifc.IFCAPPLIEDVALUERELATIONSHIP,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEXTERNALREFERENCE] = (d: RawLineData) => { return IFC2X3.IfcExternalReference.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCEXTERNALREFERENCE] = [ifc.IFCDOCUMENTREFERENCE,ifc.IFCCLASSIFICATIONREFERENCE,ifc.IFCLIBRARYREFERENCE,ifc.IFCEXTERNALLYDEFINEDTEXTFONT,ifc.IFCEXTERNALLYDEFINEDSYMBOL,ifc.IFCEXTERNALLYDEFINEDSURFACESTYLE,ifc.IFCEXTERNALLYDEFINEDHATCHSTYLE];
FromRawLineData['IFC2X3'][ifc.IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d: RawLineData) => { return IFC2X3.IfcExternallyDefinedHatchStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d: RawLineData) => { return IFC2X3.IfcExternallyDefinedSurfaceStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCEXTERNALLYDEFINEDSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcExternallyDefinedSymbol.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCEXTERNALLYDEFINEDTEXTFONT] = (d: RawLineData) => { return IFC2X3.IfcExternallyDefinedTextFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCGRIDAXIS] = (d: RawLineData) => { return IFC2X3.IfcGridAxis.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCGRIDAXIS] = [
		['PartOfW',ifc.IFCGRID,9,true],
		['PartOfV',ifc.IFCGRID,8,true],
		['PartOfU',ifc.IFCGRID,7,true],
		['HasIntersections',ifc.IFCVIRTUALGRIDINTERSECTION,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCIRREGULARTIMESERIESVALUE] = (d: RawLineData) => { return IFC2X3.IfcIrregularTimeSeriesValue.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCLIBRARYINFORMATION] = (d: RawLineData) => { return IFC2X3.IfcLibraryInformation.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCLIBRARYREFERENCE] = (d: RawLineData) => { return IFC2X3.IfcLibraryReference.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLIBRARYREFERENCE] = [
		['ReferenceIntoLibrary',ifc.IFCLIBRARYINFORMATION,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTDISTRIBUTIONDATA] = (d: RawLineData) => { return IFC2X3.IfcLightDistributionData.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCLIGHTINTENSITYDISTRIBUTION] = (d: RawLineData) => { return IFC2X3.IfcLightIntensityDistribution.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCLOCALTIME] = (d: RawLineData) => { return IFC2X3.IfcLocalTime.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMATERIAL] = (d: RawLineData) => { return IFC2X3.IfcMaterial.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMATERIAL] = [
		['HasRepresentation',ifc.IFCMATERIALDEFINITIONREPRESENTATION,3,true],
		['ClassifiedAs',ifc.IFCMATERIALCLASSIFICATIONRELATIONSHIP,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcMaterialClassificationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMATERIALLAYER] = (d: RawLineData) => { return IFC2X3.IfcMaterialLayer.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMATERIALLAYER] = [
		['ToMaterialLayerSet',ifc.IFCMATERIALLAYERSET,0,false],
];
FromRawLineData['IFC2X3'][ifc.IFCMATERIALLAYERSET] = (d: RawLineData) => { return IFC2X3.IfcMaterialLayerSet.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMATERIALLAYERSETUSAGE] = (d: RawLineData) => { return IFC2X3.IfcMaterialLayerSetUsage.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMATERIALLIST] = (d: RawLineData) => { return IFC2X3.IfcMaterialList.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCMATERIALPROPERTIES] = [ifc.IFCHYGROSCOPICMATERIALPROPERTIES,ifc.IFCGENERALMATERIALPROPERTIES,ifc.IFCFUELPROPERTIES,ifc.IFCEXTENDEDMATERIALPROPERTIES,ifc.IFCWATERPROPERTIES,ifc.IFCTHERMALMATERIALPROPERTIES,ifc.IFCPRODUCTSOFCOMBUSTIONPROPERTIES,ifc.IFCOPTICALMATERIALPROPERTIES,ifc.IFCMECHANICALCONCRETEMATERIALPROPERTIES,ifc.IFCMECHANICALSTEELMATERIALPROPERTIES,ifc.IFCMECHANICALMATERIALPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCMEASUREWITHUNIT] = (d: RawLineData) => { return IFC2X3.IfcMeasureWithUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMECHANICALMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcMechanicalMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCMECHANICALMATERIALPROPERTIES] = [ifc.IFCMECHANICALCONCRETEMATERIALPROPERTIES,ifc.IFCMECHANICALSTEELMATERIALPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCMECHANICALSTEELMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcMechanicalSteelMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMETRIC] = (d: RawLineData) => { return IFC2X3.IfcMetric.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMETRIC] = [
		['ClassifiedAs',ifc.IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP,0,true],
		['RelatesConstraints',ifc.IFCCONSTRAINTRELATIONSHIP,2,true],
		['IsRelatedWith',ifc.IFCCONSTRAINTRELATIONSHIP,3,true],
		['PropertiesForConstraint',ifc.IFCPROPERTYCONSTRAINTRELATIONSHIP,0,true],
		['Aggregates',ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP,2,true],
		['IsAggregatedIn',ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMONETARYUNIT] = (d: RawLineData) => { return IFC2X3.IfcMonetaryUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCNAMEDUNIT] = (d: RawLineData) => { return IFC2X3.IfcNamedUnit.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCNAMEDUNIT] = [ifc.IFCCONVERSIONBASEDUNIT,ifc.IFCCONTEXTDEPENDENTUNIT,ifc.IFCSIUNIT];
FromRawLineData['IFC2X3'][ifc.IFCOBJECTPLACEMENT] = (d: RawLineData) => { return IFC2X3.IfcObjectPlacement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCOBJECTPLACEMENT] = [ifc.IFCLOCALPLACEMENT,ifc.IFCGRIDPLACEMENT];
InversePropertyDef['IFC2X3'][ifc.IFCOBJECTPLACEMENT] = [
		['PlacesObject',ifc.IFCPRODUCT,5,true],
		['ReferencedByPlacements',ifc.IFCLOCALPLACEMENT,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOBJECTIVE] = (d: RawLineData) => { return IFC2X3.IfcObjective.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOBJECTIVE] = [
		['ClassifiedAs',ifc.IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP,0,true],
		['RelatesConstraints',ifc.IFCCONSTRAINTRELATIONSHIP,2,true],
		['IsRelatedWith',ifc.IFCCONSTRAINTRELATIONSHIP,3,true],
		['PropertiesForConstraint',ifc.IFCPROPERTYCONSTRAINTRELATIONSHIP,0,true],
		['Aggregates',ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP,2,true],
		['IsAggregatedIn',ifc.IFCCONSTRAINTAGGREGATIONRELATIONSHIP,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOPTICALMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcOpticalMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCORGANIZATION] = (d: RawLineData) => { return IFC2X3.IfcOrganization.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCORGANIZATION] = [
		['IsRelatedBy',ifc.IFCORGANIZATIONRELATIONSHIP,3,true],
		['Relates',ifc.IFCORGANIZATIONRELATIONSHIP,2,true],
		['Engages',ifc.IFCPERSONANDORGANIZATION,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCORGANIZATIONRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcOrganizationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCOWNERHISTORY] = (d: RawLineData) => { return IFC2X3.IfcOwnerHistory.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPERSON] = (d: RawLineData) => { return IFC2X3.IfcPerson.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPERSON] = [
		['EngagedIn',ifc.IFCPERSONANDORGANIZATION,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPERSONANDORGANIZATION] = (d: RawLineData) => { return IFC2X3.IfcPersonAndOrganization.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPHYSICALQUANTITY] = (d: RawLineData) => { return IFC2X3.IfcPhysicalQuantity.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPHYSICALQUANTITY] = [ifc.IFCPHYSICALCOMPLEXQUANTITY,ifc.IFCQUANTITYWEIGHT,ifc.IFCQUANTITYVOLUME,ifc.IFCQUANTITYTIME,ifc.IFCQUANTITYLENGTH,ifc.IFCQUANTITYCOUNT,ifc.IFCQUANTITYAREA,ifc.IFCPHYSICALSIMPLEQUANTITY];
InversePropertyDef['IFC2X3'][ifc.IFCPHYSICALQUANTITY] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPHYSICALSIMPLEQUANTITY] = (d: RawLineData) => { return IFC2X3.IfcPhysicalSimpleQuantity.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPHYSICALSIMPLEQUANTITY] = [ifc.IFCQUANTITYWEIGHT,ifc.IFCQUANTITYVOLUME,ifc.IFCQUANTITYTIME,ifc.IFCQUANTITYLENGTH,ifc.IFCQUANTITYCOUNT,ifc.IFCQUANTITYAREA];
InversePropertyDef['IFC2X3'][ifc.IFCPHYSICALSIMPLEQUANTITY] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOSTALADDRESS] = (d: RawLineData) => { return IFC2X3.IfcPostalAddress.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPOSTALADDRESS] = [
		['OfPerson',ifc.IFCPERSON,7,true],
		['OfOrganization',ifc.IFCORGANIZATION,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDITEM] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPREDEFINEDITEM] = [ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT,ifc.IFCPREDEFINEDCURVEFONT,ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR,ifc.IFCPREDEFINEDCOLOUR,ifc.IFCDRAUGHTINGPREDEFINEDTEXTFONT,ifc.IFCTEXTSTYLEFONTMODEL,ifc.IFCPREDEFINEDTEXTFONT,ifc.IFCPREDEFINEDPOINTMARKERSYMBOL,ifc.IFCPREDEFINEDDIMENSIONSYMBOL,ifc.IFCPREDEFINEDTERMINATORSYMBOL,ifc.IFCPREDEFINEDSYMBOL];
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedSymbol.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPREDEFINEDSYMBOL] = [ifc.IFCPREDEFINEDPOINTMARKERSYMBOL,ifc.IFCPREDEFINEDDIMENSIONSYMBOL,ifc.IFCPREDEFINEDTERMINATORSYMBOL];
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDTERMINATORSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedTerminatorSymbol.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDTEXTFONT] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedTextFont.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPREDEFINEDTEXTFONT] = [ifc.IFCDRAUGHTINGPREDEFINEDTEXTFONT,ifc.IFCTEXTSTYLEFONTMODEL];
FromRawLineData['IFC2X3'][ifc.IFCPRESENTATIONLAYERASSIGNMENT] = (d: RawLineData) => { return IFC2X3.IfcPresentationLayerAssignment.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPRESENTATIONLAYERASSIGNMENT] = [ifc.IFCPRESENTATIONLAYERWITHSTYLE];
FromRawLineData['IFC2X3'][ifc.IFCPRESENTATIONLAYERWITHSTYLE] = (d: RawLineData) => { return IFC2X3.IfcPresentationLayerWithStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPRESENTATIONSTYLE] = (d: RawLineData) => { return IFC2X3.IfcPresentationStyle.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPRESENTATIONSTYLE] = [ifc.IFCFILLAREASTYLE,ifc.IFCCURVESTYLE,ifc.IFCTEXTSTYLE,ifc.IFCSYMBOLSTYLE,ifc.IFCSURFACESTYLE];
FromRawLineData['IFC2X3'][ifc.IFCPRESENTATIONSTYLEASSIGNMENT] = (d: RawLineData) => { return IFC2X3.IfcPresentationStyleAssignment.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPRODUCTREPRESENTATION] = (d: RawLineData) => { return IFC2X3.IfcProductRepresentation.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPRODUCTREPRESENTATION] = [ifc.IFCPRODUCTDEFINITIONSHAPE,ifc.IFCMATERIALDEFINITIONREPRESENTATION];
FromRawLineData['IFC2X3'][ifc.IFCPRODUCTSOFCOMBUSTIONPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcProductsOfCombustionProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPROFILEDEF] = [ifc.IFCLSHAPEPROFILEDEF,ifc.IFCASYMMETRICISHAPEPROFILEDEF,ifc.IFCISHAPEPROFILEDEF,ifc.IFCELLIPSEPROFILEDEF,ifc.IFCCRANERAILFSHAPEPROFILEDEF,ifc.IFCCRANERAILASHAPEPROFILEDEF,ifc.IFCCIRCLEHOLLOWPROFILEDEF,ifc.IFCCIRCLEPROFILEDEF,ifc.IFCCSHAPEPROFILEDEF,ifc.IFCZSHAPEPROFILEDEF,ifc.IFCUSHAPEPROFILEDEF,ifc.IFCTRAPEZIUMPROFILEDEF,ifc.IFCTSHAPEPROFILEDEF,ifc.IFCRECTANGLEHOLLOWPROFILEDEF,ifc.IFCROUNDEDRECTANGLEPROFILEDEF,ifc.IFCRECTANGLEPROFILEDEF,ifc.IFCPARAMETERIZEDPROFILEDEF,ifc.IFCDERIVEDPROFILEDEF,ifc.IFCCOMPOSITEPROFILEDEF,ifc.IFCCENTERLINEPROFILEDEF,ifc.IFCARBITRARYOPENPROFILEDEF,ifc.IFCARBITRARYPROFILEDEFWITHVOIDS,ifc.IFCARBITRARYCLOSEDPROFILEDEF];
FromRawLineData['IFC2X3'][ifc.IFCPROFILEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcProfileProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPROFILEPROPERTIES] = [ifc.IFCSTRUCTURALSTEELPROFILEPROPERTIES,ifc.IFCSTRUCTURALPROFILEPROPERTIES,ifc.IFCGENERALPROFILEPROPERTIES,ifc.IFCRIBPLATEPROFILEPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTY] = (d: RawLineData) => { return IFC2X3.IfcProperty.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPROPERTY] = [ifc.IFCCOMPLEXPROPERTY,ifc.IFCPROPERTYTABLEVALUE,ifc.IFCPROPERTYSINGLEVALUE,ifc.IFCPROPERTYREFERENCEVALUE,ifc.IFCPROPERTYLISTVALUE,ifc.IFCPROPERTYENUMERATEDVALUE,ifc.IFCPROPERTYBOUNDEDVALUE,ifc.IFCSIMPLEPROPERTY];
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTY] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYCONSTRAINTRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcPropertyConstraintRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcPropertyDependencyRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYENUMERATION] = (d: RawLineData) => { return IFC2X3.IfcPropertyEnumeration.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCQUANTITYAREA] = (d: RawLineData) => { return IFC2X3.IfcQuantityArea.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCQUANTITYAREA] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCQUANTITYCOUNT] = (d: RawLineData) => { return IFC2X3.IfcQuantityCount.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCQUANTITYCOUNT] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCQUANTITYLENGTH] = (d: RawLineData) => { return IFC2X3.IfcQuantityLength.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCQUANTITYLENGTH] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCQUANTITYTIME] = (d: RawLineData) => { return IFC2X3.IfcQuantityTime.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCQUANTITYTIME] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCQUANTITYVOLUME] = (d: RawLineData) => { return IFC2X3.IfcQuantityVolume.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCQUANTITYVOLUME] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCQUANTITYWEIGHT] = (d: RawLineData) => { return IFC2X3.IfcQuantityWeight.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCQUANTITYWEIGHT] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREFERENCESVALUEDOCUMENT] = (d: RawLineData) => { return IFC2X3.IfcReferencesValueDocument.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCREINFORCEMENTBARPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcReinforcementBarProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELAXATION] = (d: RawLineData) => { return IFC2X3.IfcRelaxation.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCREPRESENTATION] = (d: RawLineData) => { return IFC2X3.IfcRepresentation.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCREPRESENTATION] = [ifc.IFCSTYLEDREPRESENTATION,ifc.IFCSTYLEMODEL,ifc.IFCTOPOLOGYREPRESENTATION,ifc.IFCSHAPEREPRESENTATION,ifc.IFCSHAPEMODEL];
InversePropertyDef['IFC2X3'][ifc.IFCREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREPRESENTATIONCONTEXT] = (d: RawLineData) => { return IFC2X3.IfcRepresentationContext.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCREPRESENTATIONCONTEXT] = [ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT,ifc.IFCGEOMETRICREPRESENTATIONCONTEXT];
InversePropertyDef['IFC2X3'][ifc.IFCREPRESENTATIONCONTEXT] = [
		['RepresentationsInContext',ifc.IFCREPRESENTATION,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREPRESENTATIONITEM] = (d: RawLineData) => { return IFC2X3.IfcRepresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCREPRESENTATIONITEM] = [ifc.IFCMAPPEDITEM,ifc.IFCFILLAREASTYLETILES,ifc.IFCFILLAREASTYLETILESYMBOLWITHSTYLE,ifc.IFCFILLAREASTYLEHATCHING,ifc.IFCFACEBASEDSURFACEMODEL,ifc.IFCDIAMETERDIMENSION,ifc.IFCANGULARDIMENSION,ifc.IFCRADIUSDIMENSION,ifc.IFCLINEARDIMENSION,ifc.IFCDIMENSIONCURVEDIRECTEDCALLOUT,ifc.IFCSTRUCTUREDDIMENSIONCALLOUT,ifc.IFCDRAUGHTINGCALLOUT,ifc.IFCDIRECTION,ifc.IFCDEFINEDSYMBOL,ifc.IFCCIRCLE,ifc.IFCELLIPSE,ifc.IFCCONIC,ifc.IFCRATIONALBEZIERCURVE,ifc.IFCBEZIERCURVE,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFC2DCOMPOSITECURVE,ifc.IFCCOMPOSITECURVE,ifc.IFCBOUNDEDCURVE,ifc.IFCOFFSETCURVE3D,ifc.IFCOFFSETCURVE2D,ifc.IFCLINE,ifc.IFCCURVE,ifc.IFCBLOCK,ifc.IFCSPHERE,ifc.IFCRIGHTCIRCULARCYLINDER,ifc.IFCRIGHTCIRCULARCONE,ifc.IFCRECTANGULARPYRAMID,ifc.IFCCSGPRIMITIVE3D,ifc.IFCCOMPOSITECURVESEGMENT,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR,ifc.IFCBOUNDINGBOX,ifc.IFCBOOLEANCLIPPINGRESULT,ifc.IFCBOOLEANRESULT,ifc.IFCANNOTATIONSURFACE,ifc.IFCANNOTATIONFILLAREA,ifc.IFCVECTOR,ifc.IFCTEXTLITERALWITHEXTENT,ifc.IFCTEXTLITERAL,ifc.IFCPLANE,ifc.IFCELEMENTARYSURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE,ifc.IFCBOUNDEDSURFACE,ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION,ifc.IFCSWEPTSURFACE,ifc.IFCSURFACE,ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCMANIFOLDSOLIDBREP,ifc.IFCCSGSOLID,ifc.IFCSWEPTDISKSOLID,ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLID,ifc.IFCEXTRUDEDAREASOLID,ifc.IFCSWEPTAREASOLID,ifc.IFCSOLIDMODEL,ifc.IFCSHELLBASEDSURFACEMODEL,ifc.IFCSECTIONEDSPINE,ifc.IFCCARTESIANPOINT,ifc.IFCPOINTONSURFACE,ifc.IFCPOINTONCURVE,ifc.IFCPOINT,ifc.IFCPLANARBOX,ifc.IFCPLANAREXTENT,ifc.IFCAXIS2PLACEMENT3D,ifc.IFCAXIS2PLACEMENT2D,ifc.IFCAXIS1PLACEMENT,ifc.IFCPLACEMENT,ifc.IFCTWODIRECTIONREPEATFACTOR,ifc.IFCONEDIRECTIONREPEATFACTOR,ifc.IFCLIGHTSOURCESPOT,ifc.IFCLIGHTSOURCEPOSITIONAL,ifc.IFCLIGHTSOURCEGONIOMETRIC,ifc.IFCLIGHTSOURCEDIRECTIONAL,ifc.IFCLIGHTSOURCEAMBIENT,ifc.IFCLIGHTSOURCE,ifc.IFCBOXEDHALFSPACE,ifc.IFCPOLYGONALBOUNDEDHALFSPACE,ifc.IFCHALFSPACESOLID,ifc.IFCGEOMETRICCURVESET,ifc.IFCGEOMETRICSET,ifc.IFCGEOMETRICREPRESENTATIONITEM,ifc.IFCPATH,ifc.IFCEDGELOOP,ifc.IFCVERTEXLOOP,ifc.IFCPOLYLOOP,ifc.IFCLOOP,ifc.IFCFACEOUTERBOUND,ifc.IFCFACEBOUND,ifc.IFCFACESURFACE,ifc.IFCFACE,ifc.IFCSUBEDGE,ifc.IFCORIENTEDEDGE,ifc.IFCEDGECURVE,ifc.IFCEDGE,ifc.IFCCLOSEDSHELL,ifc.IFCOPENSHELL,ifc.IFCCONNECTEDFACESET,ifc.IFCVERTEXPOINT,ifc.IFCVERTEX,ifc.IFCTOPOLOGICALREPRESENTATIONITEM,ifc.IFCANNOTATIONFILLAREAOCCURRENCE,ifc.IFCPROJECTIONCURVE,ifc.IFCDIMENSIONCURVE,ifc.IFCANNOTATIONCURVEOCCURRENCE,ifc.IFCANNOTATIONTEXTOCCURRENCE,ifc.IFCDIMENSIONCURVETERMINATOR,ifc.IFCTERMINATORSYMBOL,ifc.IFCANNOTATIONSYMBOLOCCURRENCE,ifc.IFCANNOTATIONSURFACEOCCURRENCE,ifc.IFCANNOTATIONOCCURRENCE,ifc.IFCSTYLEDITEM];
InversePropertyDef['IFC2X3'][ifc.IFCREPRESENTATIONITEM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREPRESENTATIONMAP] = (d: RawLineData) => { return IFC2X3.IfcRepresentationMap.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCREPRESENTATIONMAP] = [
		['MapUsage',ifc.IFCMAPPEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRIBPLATEPROFILEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcRibPlateProfileProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCROOT] = (d: RawLineData) => { return IFC2X3.IfcRoot.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCROOT] = [ifc.IFCRELDEFINESBYTYPE,ifc.IFCRELOVERRIDESPROPERTIES,ifc.IFCRELDEFINESBYPROPERTIES,ifc.IFCRELDEFINES,ifc.IFCRELAGGREGATES,ifc.IFCRELNESTS,ifc.IFCRELDECOMPOSES,ifc.IFCRELVOIDSELEMENT,ifc.IFCRELSPACEBOUNDARY,ifc.IFCRELSERVICESBUILDINGS,ifc.IFCRELSEQUENCE,ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,ifc.IFCRELPROJECTSELEMENT,ifc.IFCRELINTERACTIONREQUIREMENTS,ifc.IFCRELFLOWCONTROLELEMENTS,ifc.IFCRELFILLSELEMENT,ifc.IFCRELCOVERSSPACES,ifc.IFCRELCOVERSBLDGELEMENTS,ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,ifc.IFCRELCONNECTSWITHECCENTRICITY,ifc.IFCRELCONNECTSSTRUCTURALMEMBER,ifc.IFCRELCONNECTSSTRUCTURALELEMENT,ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,ifc.IFCRELCONNECTSPORTS,ifc.IFCRELCONNECTSPORTTOELEMENT,ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS,ifc.IFCRELCONNECTSELEMENTS,ifc.IFCRELCONNECTS,ifc.IFCRELASSOCIATESPROFILEPROPERTIES,ifc.IFCRELASSOCIATESMATERIAL,ifc.IFCRELASSOCIATESLIBRARY,ifc.IFCRELASSOCIATESDOCUMENT,ifc.IFCRELASSOCIATESCONSTRAINT,ifc.IFCRELASSOCIATESCLASSIFICATION,ifc.IFCRELASSOCIATESAPPROVAL,ifc.IFCRELASSOCIATESAPPLIEDVALUE,ifc.IFCRELASSOCIATES,ifc.IFCRELASSIGNSTORESOURCE,ifc.IFCRELASSIGNSTOPRODUCT,ifc.IFCRELASSIGNSTOPROCESS,ifc.IFCRELASSIGNSTOGROUP,ifc.IFCRELASSIGNSTASKS,ifc.IFCRELSCHEDULESCOSTITEMS,ifc.IFCRELASSIGNSTOPROJECTORDER,ifc.IFCRELASSIGNSTOCONTROL,ifc.IFCRELOCCUPIESSPACES,ifc.IFCRELASSIGNSTOACTOR,ifc.IFCRELASSIGNS,ifc.IFCRELATIONSHIP,ifc.IFCPROPERTYSET,ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCFLUIDFLOWPROPERTIES,ifc.IFCELECTRICALBASEPROPERTIES,ifc.IFCENERGYPROPERTIES,ifc.IFCELEMENTQUANTITY,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCSPACETHERMALLOADPROPERTIES,ifc.IFCSOUNDVALUE,ifc.IFCSOUNDPROPERTIES,ifc.IFCSERVICELIFEFACTOR,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES,ifc.IFCPROPERTYSETDEFINITION,ifc.IFCPROPERTYDEFINITION,ifc.IFCCONDITION,ifc.IFCASSET,ifc.IFCZONE,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCELECTRICALCIRCUIT,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY,ifc.IFCGROUP,ifc.IFCCONDITIONCRITERION,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCTIMESERIESSCHEDULE,ifc.IFCSPACEPROGRAM,ifc.IFCSERVICELIFE,ifc.IFCSCHEDULETIMECONTROL,ifc.IFCPROJECTORDERRECORD,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCFURNITURESTANDARD,ifc.IFCEQUIPMENTSTANDARD,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM,ifc.IFCCONTROL,ifc.IFCOCCUPANT,ifc.IFCACTOR,ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE,ifc.IFCRESOURCE,ifc.IFCPROJECT,ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCELECTRICALELEMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCBEAM,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLAB,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMN,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART,ifc.IFCBUILDINGELEMENTCOMPONENT,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCFURNISHINGELEMENT,ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCEQUIPMENTELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALPLANARACTIONVARYING,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALLINEARACTIONVARYING,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCPROXY,ifc.IFCPRODUCT,ifc.IFCPROCEDURE,ifc.IFCORDERACTION,ifc.IFCMOVE,ifc.IFCTASK,ifc.IFCPROCESS,ifc.IFCOBJECT,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCMEMBERTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE,ifc.IFCTYPEPRODUCT,ifc.IFCTYPEOBJECT,ifc.IFCOBJECTDEFINITION];
FromRawLineData['IFC2X3'][ifc.IFCSIUNIT] = (d: RawLineData) => { return IFC2X3.IfcSIUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSECTIONPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcSectionProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSECTIONREINFORCEMENTPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcSectionReinforcementProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSHAPEASPECT] = (d: RawLineData) => { return IFC2X3.IfcShapeAspect.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSHAPEMODEL] = (d: RawLineData) => { return IFC2X3.IfcShapeModel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSHAPEMODEL] = [ifc.IFCTOPOLOGYREPRESENTATION,ifc.IFCSHAPEREPRESENTATION];
InversePropertyDef['IFC2X3'][ifc.IFCSHAPEMODEL] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
		['OfShapeAspect',ifc.IFCSHAPEASPECT,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSHAPEREPRESENTATION] = (d: RawLineData) => { return IFC2X3.IfcShapeRepresentation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSHAPEREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
		['OfShapeAspect',ifc.IFCSHAPEASPECT,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSIMPLEPROPERTY] = (d: RawLineData) => { return IFC2X3.IfcSimpleProperty.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSIMPLEPROPERTY] = [ifc.IFCPROPERTYTABLEVALUE,ifc.IFCPROPERTYSINGLEVALUE,ifc.IFCPROPERTYREFERENCEVALUE,ifc.IFCPROPERTYLISTVALUE,ifc.IFCPROPERTYENUMERATEDVALUE,ifc.IFCPROPERTYBOUNDEDVALUE];
InversePropertyDef['IFC2X3'][ifc.IFCSIMPLEPROPERTY] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALCONNECTIONCONDITION] = (d: RawLineData) => { return IFC2X3.IfcStructuralConnectionCondition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALCONNECTIONCONDITION] = [ifc.IFCSLIPPAGECONNECTIONCONDITION,ifc.IFCFAILURECONNECTIONCONDITION];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOAD] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoad.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALLOAD] = [ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING,ifc.IFCSTRUCTURALLOADSINGLEFORCE,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT,ifc.IFCSTRUCTURALLOADPLANARFORCE,ifc.IFCSTRUCTURALLOADLINEARFORCE,ifc.IFCSTRUCTURALLOADTEMPERATURE,ifc.IFCSTRUCTURALLOADSTATIC];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADSTATIC] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadStatic.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALLOADSTATIC] = [ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING,ifc.IFCSTRUCTURALLOADSINGLEFORCE,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT,ifc.IFCSTRUCTURALLOADPLANARFORCE,ifc.IFCSTRUCTURALLOADLINEARFORCE,ifc.IFCSTRUCTURALLOADTEMPERATURE];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADTEMPERATURE] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadTemperature.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSTYLEMODEL] = (d: RawLineData) => { return IFC2X3.IfcStyleModel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTYLEMODEL] = [ifc.IFCSTYLEDREPRESENTATION];
InversePropertyDef['IFC2X3'][ifc.IFCSTYLEMODEL] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTYLEDITEM] = (d: RawLineData) => { return IFC2X3.IfcStyledItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTYLEDITEM] = [ifc.IFCANNOTATIONFILLAREAOCCURRENCE,ifc.IFCPROJECTIONCURVE,ifc.IFCDIMENSIONCURVE,ifc.IFCANNOTATIONCURVEOCCURRENCE,ifc.IFCANNOTATIONTEXTOCCURRENCE,ifc.IFCDIMENSIONCURVETERMINATOR,ifc.IFCTERMINATORSYMBOL,ifc.IFCANNOTATIONSYMBOLOCCURRENCE,ifc.IFCANNOTATIONSURFACEOCCURRENCE,ifc.IFCANNOTATIONOCCURRENCE];
InversePropertyDef['IFC2X3'][ifc.IFCSTYLEDITEM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTYLEDREPRESENTATION] = (d: RawLineData) => { return IFC2X3.IfcStyledRepresentation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTYLEDREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSURFACESTYLE] = (d: RawLineData) => { return IFC2X3.IfcSurfaceStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSURFACESTYLELIGHTING] = (d: RawLineData) => { return IFC2X3.IfcSurfaceStyleLighting.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSURFACESTYLEREFRACTION] = (d: RawLineData) => { return IFC2X3.IfcSurfaceStyleRefraction.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSURFACESTYLESHADING] = (d: RawLineData) => { return IFC2X3.IfcSurfaceStyleShading.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSURFACESTYLESHADING] = [ifc.IFCSURFACESTYLERENDERING];
FromRawLineData['IFC2X3'][ifc.IFCSURFACESTYLEWITHTEXTURES] = (d: RawLineData) => { return IFC2X3.IfcSurfaceStyleWithTextures.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSURFACETEXTURE] = (d: RawLineData) => { return IFC2X3.IfcSurfaceTexture.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSURFACETEXTURE] = [ifc.IFCPIXELTEXTURE,ifc.IFCIMAGETEXTURE,ifc.IFCBLOBTEXTURE];
FromRawLineData['IFC2X3'][ifc.IFCSYMBOLSTYLE] = (d: RawLineData) => { return IFC2X3.IfcSymbolStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTABLE] = (d: RawLineData) => { return IFC2X3.IfcTable.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTABLEROW] = (d: RawLineData) => { return IFC2X3.IfcTableRow.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTABLEROW] = [
		['OfTable',ifc.IFCTABLE,1,false],
];
FromRawLineData['IFC2X3'][ifc.IFCTELECOMADDRESS] = (d: RawLineData) => { return IFC2X3.IfcTelecomAddress.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTELECOMADDRESS] = [
		['OfPerson',ifc.IFCPERSON,7,true],
		['OfOrganization',ifc.IFCORGANIZATION,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTEXTSTYLE] = (d: RawLineData) => { return IFC2X3.IfcTextStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTEXTSTYLEFONTMODEL] = (d: RawLineData) => { return IFC2X3.IfcTextStyleFontModel.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTEXTSTYLEFORDEFINEDFONT] = (d: RawLineData) => { return IFC2X3.IfcTextStyleForDefinedFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTEXTSTYLETEXTMODEL] = (d: RawLineData) => { return IFC2X3.IfcTextStyleTextModel.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTEXTSTYLEWITHBOXCHARACTERISTICS] = (d: RawLineData) => { return IFC2X3.IfcTextStyleWithBoxCharacteristics.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTEXTURECOORDINATE] = (d: RawLineData) => { return IFC2X3.IfcTextureCoordinate.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTEXTURECOORDINATE] = [ifc.IFCTEXTUREMAP,ifc.IFCTEXTURECOORDINATEGENERATOR];
InversePropertyDef['IFC2X3'][ifc.IFCTEXTURECOORDINATE] = [
		['AnnotatedSurface',ifc.IFCANNOTATIONSURFACE,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTEXTURECOORDINATEGENERATOR] = (d: RawLineData) => { return IFC2X3.IfcTextureCoordinateGenerator.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTEXTURECOORDINATEGENERATOR] = [
		['AnnotatedSurface',ifc.IFCANNOTATIONSURFACE,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTEXTUREMAP] = (d: RawLineData) => { return IFC2X3.IfcTextureMap.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTEXTUREMAP] = [
		['AnnotatedSurface',ifc.IFCANNOTATIONSURFACE,1,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTEXTUREVERTEX] = (d: RawLineData) => { return IFC2X3.IfcTextureVertex.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTHERMALMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcThermalMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTIMESERIES] = (d: RawLineData) => { return IFC2X3.IfcTimeSeries.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTIMESERIES] = [ifc.IFCREGULARTIMESERIES,ifc.IFCIRREGULARTIMESERIES];
InversePropertyDef['IFC2X3'][ifc.IFCTIMESERIES] = [
		['DocumentedBy',ifc.IFCTIMESERIESREFERENCERELATIONSHIP,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTIMESERIESREFERENCERELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcTimeSeriesReferenceRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTIMESERIESVALUE] = (d: RawLineData) => { return IFC2X3.IfcTimeSeriesValue.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTOPOLOGICALREPRESENTATIONITEM] = (d: RawLineData) => { return IFC2X3.IfcTopologicalRepresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTOPOLOGICALREPRESENTATIONITEM] = [ifc.IFCPATH,ifc.IFCEDGELOOP,ifc.IFCVERTEXLOOP,ifc.IFCPOLYLOOP,ifc.IFCLOOP,ifc.IFCFACEOUTERBOUND,ifc.IFCFACEBOUND,ifc.IFCFACESURFACE,ifc.IFCFACE,ifc.IFCSUBEDGE,ifc.IFCORIENTEDEDGE,ifc.IFCEDGECURVE,ifc.IFCEDGE,ifc.IFCCLOSEDSHELL,ifc.IFCOPENSHELL,ifc.IFCCONNECTEDFACESET,ifc.IFCVERTEXPOINT,ifc.IFCVERTEX];
InversePropertyDef['IFC2X3'][ifc.IFCTOPOLOGICALREPRESENTATIONITEM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTOPOLOGYREPRESENTATION] = (d: RawLineData) => { return IFC2X3.IfcTopologyRepresentation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTOPOLOGYREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
		['OfShapeAspect',ifc.IFCSHAPEASPECT,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCUNITASSIGNMENT] = (d: RawLineData) => { return IFC2X3.IfcUnitAssignment.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCVERTEX] = (d: RawLineData) => { return IFC2X3.IfcVertex.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCVERTEX] = [ifc.IFCVERTEXPOINT];
InversePropertyDef['IFC2X3'][ifc.IFCVERTEX] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCVERTEXBASEDTEXTUREMAP] = (d: RawLineData) => { return IFC2X3.IfcVertexBasedTextureMap.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCVERTEXPOINT] = (d: RawLineData) => { return IFC2X3.IfcVertexPoint.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCVERTEXPOINT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCVIRTUALGRIDINTERSECTION] = (d: RawLineData) => { return IFC2X3.IfcVirtualGridIntersection.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCWATERPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcWaterProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONOCCURRENCE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationOccurrence.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCANNOTATIONOCCURRENCE] = [ifc.IFCANNOTATIONFILLAREAOCCURRENCE,ifc.IFCPROJECTIONCURVE,ifc.IFCDIMENSIONCURVE,ifc.IFCANNOTATIONCURVEOCCURRENCE,ifc.IFCANNOTATIONTEXTOCCURRENCE,ifc.IFCDIMENSIONCURVETERMINATOR,ifc.IFCTERMINATORSYMBOL,ifc.IFCANNOTATIONSYMBOLOCCURRENCE,ifc.IFCANNOTATIONSURFACEOCCURRENCE];
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONOCCURRENCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONSURFACEOCCURRENCE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationSurfaceOccurrence.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONSURFACEOCCURRENCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONSYMBOLOCCURRENCE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationSymbolOccurrence.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCANNOTATIONSYMBOLOCCURRENCE] = [ifc.IFCDIMENSIONCURVETERMINATOR,ifc.IFCTERMINATORSYMBOL];
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONSYMBOLOCCURRENCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONTEXTOCCURRENCE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationTextOccurrence.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONTEXTOCCURRENCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCARBITRARYCLOSEDPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcArbitraryClosedProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCARBITRARYCLOSEDPROFILEDEF] = [ifc.IFCARBITRARYPROFILEDEFWITHVOIDS];
FromRawLineData['IFC2X3'][ifc.IFCARBITRARYOPENPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcArbitraryOpenProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCARBITRARYOPENPROFILEDEF] = [ifc.IFCCENTERLINEPROFILEDEF];
FromRawLineData['IFC2X3'][ifc.IFCARBITRARYPROFILEDEFWITHVOIDS] = (d: RawLineData) => { return IFC2X3.IfcArbitraryProfileDefWithVoids.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCBLOBTEXTURE] = (d: RawLineData) => { return IFC2X3.IfcBlobTexture.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCENTERLINEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCenterLineProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCLASSIFICATIONREFERENCE] = (d: RawLineData) => { return IFC2X3.IfcClassificationReference.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCOLOURRGB] = (d: RawLineData) => { return IFC2X3.IfcColourRgb.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCOMPLEXPROPERTY] = (d: RawLineData) => { return IFC2X3.IfcComplexProperty.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOMPLEXPROPERTY] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOMPOSITEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCompositeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONNECTEDFACESET] = (d: RawLineData) => { return IFC2X3.IfcConnectedFaceSet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONNECTEDFACESET] = [ifc.IFCCLOSEDSHELL,ifc.IFCOPENSHELL];
InversePropertyDef['IFC2X3'][ifc.IFCCONNECTEDFACESET] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONNECTIONCURVEGEOMETRY] = (d: RawLineData) => { return IFC2X3.IfcConnectionCurveGeometry.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONNECTIONPOINTECCENTRICITY] = (d: RawLineData) => { return IFC2X3.IfcConnectionPointEccentricity.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONTEXTDEPENDENTUNIT] = (d: RawLineData) => { return IFC2X3.IfcContextDependentUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCONVERSIONBASEDUNIT] = (d: RawLineData) => { return IFC2X3.IfcConversionBasedUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCURVESTYLE] = (d: RawLineData) => { return IFC2X3.IfcCurveStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDERIVEDPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcDerivedProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDIMENSIONCALLOUTRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcDimensionCalloutRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDIMENSIONPAIR] = (d: RawLineData) => { return IFC2X3.IfcDimensionPair.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDOCUMENTREFERENCE] = (d: RawLineData) => { return IFC2X3.IfcDocumentReference.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDOCUMENTREFERENCE] = [
		['ReferenceToDocument',ifc.IFCDOCUMENTINFORMATION,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDRAUGHTINGPREDEFINEDTEXTFONT] = (d: RawLineData) => { return IFC2X3.IfcDraughtingPreDefinedTextFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCEDGE] = (d: RawLineData) => { return IFC2X3.IfcEdge.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCEDGE] = [ifc.IFCSUBEDGE,ifc.IFCORIENTEDEDGE,ifc.IFCEDGECURVE];
InversePropertyDef['IFC2X3'][ifc.IFCEDGE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEDGECURVE] = (d: RawLineData) => { return IFC2X3.IfcEdgeCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEDGECURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEXTENDEDMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcExtendedMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCFACE] = (d: RawLineData) => { return IFC2X3.IfcFace.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFACE] = [ifc.IFCFACESURFACE];
InversePropertyDef['IFC2X3'][ifc.IFCFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFACEBOUND] = (d: RawLineData) => { return IFC2X3.IfcFaceBound.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFACEBOUND] = [ifc.IFCFACEOUTERBOUND];
InversePropertyDef['IFC2X3'][ifc.IFCFACEBOUND] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFACEOUTERBOUND] = (d: RawLineData) => { return IFC2X3.IfcFaceOuterBound.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFACEOUTERBOUND] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFACESURFACE] = (d: RawLineData) => { return IFC2X3.IfcFaceSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFACESURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFAILURECONNECTIONCONDITION] = (d: RawLineData) => { return IFC2X3.IfcFailureConnectionCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCFILLAREASTYLE] = (d: RawLineData) => { return IFC2X3.IfcFillAreaStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCFUELPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcFuelProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCGENERALMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcGeneralMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCGENERALPROFILEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcGeneralProfileProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCGENERALPROFILEPROPERTIES] = [ifc.IFCSTRUCTURALSTEELPROFILEPROPERTIES,ifc.IFCSTRUCTURALPROFILEPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONCONTEXT] = (d: RawLineData) => { return IFC2X3.IfcGeometricRepresentationContext.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONCONTEXT] = [ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT];
InversePropertyDef['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONCONTEXT] = [
		['RepresentationsInContext',ifc.IFCREPRESENTATION,0,true],
		['HasSubContexts',ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONITEM] = (d: RawLineData) => { return IFC2X3.IfcGeometricRepresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONITEM] = [ifc.IFCFILLAREASTYLETILES,ifc.IFCFILLAREASTYLETILESYMBOLWITHSTYLE,ifc.IFCFILLAREASTYLEHATCHING,ifc.IFCFACEBASEDSURFACEMODEL,ifc.IFCDIAMETERDIMENSION,ifc.IFCANGULARDIMENSION,ifc.IFCRADIUSDIMENSION,ifc.IFCLINEARDIMENSION,ifc.IFCDIMENSIONCURVEDIRECTEDCALLOUT,ifc.IFCSTRUCTUREDDIMENSIONCALLOUT,ifc.IFCDRAUGHTINGCALLOUT,ifc.IFCDIRECTION,ifc.IFCDEFINEDSYMBOL,ifc.IFCCIRCLE,ifc.IFCELLIPSE,ifc.IFCCONIC,ifc.IFCRATIONALBEZIERCURVE,ifc.IFCBEZIERCURVE,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFC2DCOMPOSITECURVE,ifc.IFCCOMPOSITECURVE,ifc.IFCBOUNDEDCURVE,ifc.IFCOFFSETCURVE3D,ifc.IFCOFFSETCURVE2D,ifc.IFCLINE,ifc.IFCCURVE,ifc.IFCBLOCK,ifc.IFCSPHERE,ifc.IFCRIGHTCIRCULARCYLINDER,ifc.IFCRIGHTCIRCULARCONE,ifc.IFCRECTANGULARPYRAMID,ifc.IFCCSGPRIMITIVE3D,ifc.IFCCOMPOSITECURVESEGMENT,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR,ifc.IFCBOUNDINGBOX,ifc.IFCBOOLEANCLIPPINGRESULT,ifc.IFCBOOLEANRESULT,ifc.IFCANNOTATIONSURFACE,ifc.IFCANNOTATIONFILLAREA,ifc.IFCVECTOR,ifc.IFCTEXTLITERALWITHEXTENT,ifc.IFCTEXTLITERAL,ifc.IFCPLANE,ifc.IFCELEMENTARYSURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE,ifc.IFCBOUNDEDSURFACE,ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION,ifc.IFCSWEPTSURFACE,ifc.IFCSURFACE,ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCMANIFOLDSOLIDBREP,ifc.IFCCSGSOLID,ifc.IFCSWEPTDISKSOLID,ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLID,ifc.IFCEXTRUDEDAREASOLID,ifc.IFCSWEPTAREASOLID,ifc.IFCSOLIDMODEL,ifc.IFCSHELLBASEDSURFACEMODEL,ifc.IFCSECTIONEDSPINE,ifc.IFCCARTESIANPOINT,ifc.IFCPOINTONSURFACE,ifc.IFCPOINTONCURVE,ifc.IFCPOINT,ifc.IFCPLANARBOX,ifc.IFCPLANAREXTENT,ifc.IFCAXIS2PLACEMENT3D,ifc.IFCAXIS2PLACEMENT2D,ifc.IFCAXIS1PLACEMENT,ifc.IFCPLACEMENT,ifc.IFCTWODIRECTIONREPEATFACTOR,ifc.IFCONEDIRECTIONREPEATFACTOR,ifc.IFCLIGHTSOURCESPOT,ifc.IFCLIGHTSOURCEPOSITIONAL,ifc.IFCLIGHTSOURCEGONIOMETRIC,ifc.IFCLIGHTSOURCEDIRECTIONAL,ifc.IFCLIGHTSOURCEAMBIENT,ifc.IFCLIGHTSOURCE,ifc.IFCBOXEDHALFSPACE,ifc.IFCPOLYGONALBOUNDEDHALFSPACE,ifc.IFCHALFSPACESOLID,ifc.IFCGEOMETRICCURVESET,ifc.IFCGEOMETRICSET];
InversePropertyDef['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONITEM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d: RawLineData) => { return IFC2X3.IfcGeometricRepresentationSubContext.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = [
		['RepresentationsInContext',ifc.IFCREPRESENTATION,0,true],
		['HasSubContexts',ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGEOMETRICSET] = (d: RawLineData) => { return IFC2X3.IfcGeometricSet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCGEOMETRICSET] = [ifc.IFCGEOMETRICCURVESET];
InversePropertyDef['IFC2X3'][ifc.IFCGEOMETRICSET] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGRIDPLACEMENT] = (d: RawLineData) => { return IFC2X3.IfcGridPlacement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCGRIDPLACEMENT] = [
		['PlacesObject',ifc.IFCPRODUCT,5,true],
		['ReferencedByPlacements',ifc.IFCLOCALPLACEMENT,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCHALFSPACESOLID] = (d: RawLineData) => { return IFC2X3.IfcHalfSpaceSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCHALFSPACESOLID] = [ifc.IFCBOXEDHALFSPACE,ifc.IFCPOLYGONALBOUNDEDHALFSPACE];
InversePropertyDef['IFC2X3'][ifc.IFCHALFSPACESOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCHYGROSCOPICMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcHygroscopicMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCIMAGETEXTURE] = (d: RawLineData) => { return IFC2X3.IfcImageTexture.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCIRREGULARTIMESERIES] = (d: RawLineData) => { return IFC2X3.IfcIrregularTimeSeries.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCIRREGULARTIMESERIES] = [
		['DocumentedBy',ifc.IFCTIMESERIESREFERENCERELATIONSHIP,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTSOURCE] = (d: RawLineData) => { return IFC2X3.IfcLightSource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCLIGHTSOURCE] = [ifc.IFCLIGHTSOURCESPOT,ifc.IFCLIGHTSOURCEPOSITIONAL,ifc.IFCLIGHTSOURCEGONIOMETRIC,ifc.IFCLIGHTSOURCEDIRECTIONAL,ifc.IFCLIGHTSOURCEAMBIENT];
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTSOURCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTSOURCEAMBIENT] = (d: RawLineData) => { return IFC2X3.IfcLightSourceAmbient.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTSOURCEAMBIENT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTSOURCEDIRECTIONAL] = (d: RawLineData) => { return IFC2X3.IfcLightSourceDirectional.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTSOURCEDIRECTIONAL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTSOURCEGONIOMETRIC] = (d: RawLineData) => { return IFC2X3.IfcLightSourceGoniometric.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTSOURCEGONIOMETRIC] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTSOURCEPOSITIONAL] = (d: RawLineData) => { return IFC2X3.IfcLightSourcePositional.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCLIGHTSOURCEPOSITIONAL] = [ifc.IFCLIGHTSOURCESPOT];
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTSOURCEPOSITIONAL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTSOURCESPOT] = (d: RawLineData) => { return IFC2X3.IfcLightSourceSpot.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTSOURCESPOT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLOCALPLACEMENT] = (d: RawLineData) => { return IFC2X3.IfcLocalPlacement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLOCALPLACEMENT] = [
		['PlacesObject',ifc.IFCPRODUCT,5,true],
		['ReferencedByPlacements',ifc.IFCLOCALPLACEMENT,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLOOP] = (d: RawLineData) => { return IFC2X3.IfcLoop.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCLOOP] = [ifc.IFCEDGELOOP,ifc.IFCVERTEXLOOP,ifc.IFCPOLYLOOP];
InversePropertyDef['IFC2X3'][ifc.IFCLOOP] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMAPPEDITEM] = (d: RawLineData) => { return IFC2X3.IfcMappedItem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMAPPEDITEM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMATERIALDEFINITIONREPRESENTATION] = (d: RawLineData) => { return IFC2X3.IfcMaterialDefinitionRepresentation.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCMECHANICALCONCRETEMATERIALPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcMechanicalConcreteMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCOBJECTDEFINITION] = (d: RawLineData) => { return IFC2X3.IfcObjectDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCOBJECTDEFINITION] = [ifc.IFCCONDITION,ifc.IFCASSET,ifc.IFCZONE,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCELECTRICALCIRCUIT,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY,ifc.IFCGROUP,ifc.IFCCONDITIONCRITERION,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCTIMESERIESSCHEDULE,ifc.IFCSPACEPROGRAM,ifc.IFCSERVICELIFE,ifc.IFCSCHEDULETIMECONTROL,ifc.IFCPROJECTORDERRECORD,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCFURNITURESTANDARD,ifc.IFCEQUIPMENTSTANDARD,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM,ifc.IFCCONTROL,ifc.IFCOCCUPANT,ifc.IFCACTOR,ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE,ifc.IFCRESOURCE,ifc.IFCPROJECT,ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCELECTRICALELEMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCBEAM,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLAB,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMN,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART,ifc.IFCBUILDINGELEMENTCOMPONENT,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCFURNISHINGELEMENT,ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCEQUIPMENTELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALPLANARACTIONVARYING,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALLINEARACTIONVARYING,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCPROXY,ifc.IFCPRODUCT,ifc.IFCPROCEDURE,ifc.IFCORDERACTION,ifc.IFCMOVE,ifc.IFCTASK,ifc.IFCPROCESS,ifc.IFCOBJECT,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCMEMBERTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE,ifc.IFCTYPEPRODUCT,ifc.IFCTYPEOBJECT];
InversePropertyDef['IFC2X3'][ifc.IFCOBJECTDEFINITION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCONEDIRECTIONREPEATFACTOR] = (d: RawLineData) => { return IFC2X3.IfcOneDirectionRepeatFactor.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCONEDIRECTIONREPEATFACTOR] = [ifc.IFCTWODIRECTIONREPEATFACTOR];
InversePropertyDef['IFC2X3'][ifc.IFCONEDIRECTIONREPEATFACTOR] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOPENSHELL] = (d: RawLineData) => { return IFC2X3.IfcOpenShell.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOPENSHELL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCORIENTEDEDGE] = (d: RawLineData) => { return IFC2X3.IfcOrientedEdge.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCORIENTEDEDGE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPARAMETERIZEDPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcParameterizedProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPARAMETERIZEDPROFILEDEF] = [ifc.IFCLSHAPEPROFILEDEF,ifc.IFCASYMMETRICISHAPEPROFILEDEF,ifc.IFCISHAPEPROFILEDEF,ifc.IFCELLIPSEPROFILEDEF,ifc.IFCCRANERAILFSHAPEPROFILEDEF,ifc.IFCCRANERAILASHAPEPROFILEDEF,ifc.IFCCIRCLEHOLLOWPROFILEDEF,ifc.IFCCIRCLEPROFILEDEF,ifc.IFCCSHAPEPROFILEDEF,ifc.IFCZSHAPEPROFILEDEF,ifc.IFCUSHAPEPROFILEDEF,ifc.IFCTRAPEZIUMPROFILEDEF,ifc.IFCTSHAPEPROFILEDEF,ifc.IFCRECTANGLEHOLLOWPROFILEDEF,ifc.IFCROUNDEDRECTANGLEPROFILEDEF,ifc.IFCRECTANGLEPROFILEDEF];
FromRawLineData['IFC2X3'][ifc.IFCPATH] = (d: RawLineData) => { return IFC2X3.IfcPath.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPATH] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPHYSICALCOMPLEXQUANTITY] = (d: RawLineData) => { return IFC2X3.IfcPhysicalComplexQuantity.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPHYSICALCOMPLEXQUANTITY] = [
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPIXELTEXTURE] = (d: RawLineData) => { return IFC2X3.IfcPixelTexture.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPLACEMENT] = (d: RawLineData) => { return IFC2X3.IfcPlacement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPLACEMENT] = [ifc.IFCAXIS2PLACEMENT3D,ifc.IFCAXIS2PLACEMENT2D,ifc.IFCAXIS1PLACEMENT];
InversePropertyDef['IFC2X3'][ifc.IFCPLACEMENT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPLANAREXTENT] = (d: RawLineData) => { return IFC2X3.IfcPlanarExtent.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPLANAREXTENT] = [ifc.IFCPLANARBOX];
InversePropertyDef['IFC2X3'][ifc.IFCPLANAREXTENT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOINT] = (d: RawLineData) => { return IFC2X3.IfcPoint.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPOINT] = [ifc.IFCCARTESIANPOINT,ifc.IFCPOINTONSURFACE,ifc.IFCPOINTONCURVE];
InversePropertyDef['IFC2X3'][ifc.IFCPOINT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOINTONCURVE] = (d: RawLineData) => { return IFC2X3.IfcPointOnCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPOINTONCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOINTONSURFACE] = (d: RawLineData) => { return IFC2X3.IfcPointOnSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPOINTONSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOLYLOOP] = (d: RawLineData) => { return IFC2X3.IfcPolyLoop.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPOLYLOOP] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOLYGONALBOUNDEDHALFSPACE] = (d: RawLineData) => { return IFC2X3.IfcPolygonalBoundedHalfSpace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPOLYGONALBOUNDEDHALFSPACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDCOLOUR] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedColour.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPREDEFINEDCOLOUR] = [ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR];
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDCURVEFONT] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPREDEFINEDCURVEFONT] = [ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT];
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDDIMENSIONSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedDimensionSymbol.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPREDEFINEDPOINTMARKERSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcPreDefinedPointMarkerSymbol.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCPRODUCTDEFINITIONSHAPE] = (d: RawLineData) => { return IFC2X3.IfcProductDefinitionShape.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPRODUCTDEFINITIONSHAPE] = [
		['ShapeOfProduct',ifc.IFCPRODUCT,6,true],
		['HasShapeAspects',ifc.IFCSHAPEASPECT,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYBOUNDEDVALUE] = (d: RawLineData) => { return IFC2X3.IfcPropertyBoundedValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYBOUNDEDVALUE] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYDEFINITION] = (d: RawLineData) => { return IFC2X3.IfcPropertyDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPROPERTYDEFINITION] = [ifc.IFCPROPERTYSET,ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCFLUIDFLOWPROPERTIES,ifc.IFCELECTRICALBASEPROPERTIES,ifc.IFCENERGYPROPERTIES,ifc.IFCELEMENTQUANTITY,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCSPACETHERMALLOADPROPERTIES,ifc.IFCSOUNDVALUE,ifc.IFCSOUNDPROPERTIES,ifc.IFCSERVICELIFEFACTOR,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES,ifc.IFCPROPERTYSETDEFINITION];
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYDEFINITION] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYENUMERATEDVALUE] = (d: RawLineData) => { return IFC2X3.IfcPropertyEnumeratedValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYENUMERATEDVALUE] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYLISTVALUE] = (d: RawLineData) => { return IFC2X3.IfcPropertyListValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYLISTVALUE] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYREFERENCEVALUE] = (d: RawLineData) => { return IFC2X3.IfcPropertyReferenceValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYREFERENCEVALUE] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYSETDEFINITION] = (d: RawLineData) => { return IFC2X3.IfcPropertySetDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPROPERTYSETDEFINITION] = [ifc.IFCPROPERTYSET,ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCFLUIDFLOWPROPERTIES,ifc.IFCELECTRICALBASEPROPERTIES,ifc.IFCENERGYPROPERTIES,ifc.IFCELEMENTQUANTITY,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCSPACETHERMALLOADPROPERTIES,ifc.IFCSOUNDVALUE,ifc.IFCSOUNDPROPERTIES,ifc.IFCSERVICELIFEFACTOR,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES];
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYSETDEFINITION] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYSINGLEVALUE] = (d: RawLineData) => { return IFC2X3.IfcPropertySingleValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYSINGLEVALUE] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYTABLEVALUE] = (d: RawLineData) => { return IFC2X3.IfcPropertyTableValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYTABLEVALUE] = [
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRECTANGLEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcRectangleProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRECTANGLEPROFILEDEF] = [ifc.IFCRECTANGLEHOLLOWPROFILEDEF,ifc.IFCROUNDEDRECTANGLEPROFILEDEF];
FromRawLineData['IFC2X3'][ifc.IFCREGULARTIMESERIES] = (d: RawLineData) => { return IFC2X3.IfcRegularTimeSeries.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCREGULARTIMESERIES] = [
		['DocumentedBy',ifc.IFCTIMESERIESREFERENCERELATIONSHIP,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcReinforcementDefinitionProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRELATIONSHIP] = (d: RawLineData) => { return IFC2X3.IfcRelationship.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELATIONSHIP] = [ifc.IFCRELDEFINESBYTYPE,ifc.IFCRELOVERRIDESPROPERTIES,ifc.IFCRELDEFINESBYPROPERTIES,ifc.IFCRELDEFINES,ifc.IFCRELAGGREGATES,ifc.IFCRELNESTS,ifc.IFCRELDECOMPOSES,ifc.IFCRELVOIDSELEMENT,ifc.IFCRELSPACEBOUNDARY,ifc.IFCRELSERVICESBUILDINGS,ifc.IFCRELSEQUENCE,ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,ifc.IFCRELPROJECTSELEMENT,ifc.IFCRELINTERACTIONREQUIREMENTS,ifc.IFCRELFLOWCONTROLELEMENTS,ifc.IFCRELFILLSELEMENT,ifc.IFCRELCOVERSSPACES,ifc.IFCRELCOVERSBLDGELEMENTS,ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,ifc.IFCRELCONNECTSWITHECCENTRICITY,ifc.IFCRELCONNECTSSTRUCTURALMEMBER,ifc.IFCRELCONNECTSSTRUCTURALELEMENT,ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,ifc.IFCRELCONNECTSPORTS,ifc.IFCRELCONNECTSPORTTOELEMENT,ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS,ifc.IFCRELCONNECTSELEMENTS,ifc.IFCRELCONNECTS,ifc.IFCRELASSOCIATESPROFILEPROPERTIES,ifc.IFCRELASSOCIATESMATERIAL,ifc.IFCRELASSOCIATESLIBRARY,ifc.IFCRELASSOCIATESDOCUMENT,ifc.IFCRELASSOCIATESCONSTRAINT,ifc.IFCRELASSOCIATESCLASSIFICATION,ifc.IFCRELASSOCIATESAPPROVAL,ifc.IFCRELASSOCIATESAPPLIEDVALUE,ifc.IFCRELASSOCIATES,ifc.IFCRELASSIGNSTORESOURCE,ifc.IFCRELASSIGNSTOPRODUCT,ifc.IFCRELASSIGNSTOPROCESS,ifc.IFCRELASSIGNSTOGROUP,ifc.IFCRELASSIGNSTASKS,ifc.IFCRELSCHEDULESCOSTITEMS,ifc.IFCRELASSIGNSTOPROJECTORDER,ifc.IFCRELASSIGNSTOCONTROL,ifc.IFCRELOCCUPIESSPACES,ifc.IFCRELASSIGNSTOACTOR,ifc.IFCRELASSIGNS];
FromRawLineData['IFC2X3'][ifc.IFCROUNDEDRECTANGLEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcRoundedRectangleProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSECTIONEDSPINE] = (d: RawLineData) => { return IFC2X3.IfcSectionedSpine.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSECTIONEDSPINE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSERVICELIFEFACTOR] = (d: RawLineData) => { return IFC2X3.IfcServiceLifeFactor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSERVICELIFEFACTOR] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSHELLBASEDSURFACEMODEL] = (d: RawLineData) => { return IFC2X3.IfcShellBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSHELLBASEDSURFACEMODEL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSLIPPAGECONNECTIONCONDITION] = (d: RawLineData) => { return IFC2X3.IfcSlippageConnectionCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSOLIDMODEL] = (d: RawLineData) => { return IFC2X3.IfcSolidModel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSOLIDMODEL] = [ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCMANIFOLDSOLIDBREP,ifc.IFCCSGSOLID,ifc.IFCSWEPTDISKSOLID,ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLID,ifc.IFCEXTRUDEDAREASOLID,ifc.IFCSWEPTAREASOLID];
InversePropertyDef['IFC2X3'][ifc.IFCSOLIDMODEL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSOUNDPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcSoundProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSOUNDPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSOUNDVALUE] = (d: RawLineData) => { return IFC2X3.IfcSoundValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSOUNDVALUE] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPACETHERMALLOADPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcSpaceThermalLoadProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSPACETHERMALLOADPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADLINEARFORCE] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadLinearForce.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADPLANARFORCE] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadPlanarForce.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadSingleDisplacement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = [ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadSingleDisplacementDistortion.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADSINGLEFORCE] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadSingleForce.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALLOADSINGLEFORCE] = [ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadSingleForceWarping.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALPROFILEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcStructuralProfileProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALPROFILEPROPERTIES] = [ifc.IFCSTRUCTURALSTEELPROFILEPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALSTEELPROFILEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcStructuralSteelProfileProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSUBEDGE] = (d: RawLineData) => { return IFC2X3.IfcSubedge.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSUBEDGE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSURFACE] = (d: RawLineData) => { return IFC2X3.IfcSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSURFACE] = [ifc.IFCPLANE,ifc.IFCELEMENTARYSURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE,ifc.IFCBOUNDEDSURFACE,ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION,ifc.IFCSWEPTSURFACE];
InversePropertyDef['IFC2X3'][ifc.IFCSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSURFACESTYLERENDERING] = (d: RawLineData) => { return IFC2X3.IfcSurfaceStyleRendering.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSWEPTAREASOLID] = (d: RawLineData) => { return IFC2X3.IfcSweptAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSWEPTAREASOLID] = [ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLID,ifc.IFCEXTRUDEDAREASOLID];
InversePropertyDef['IFC2X3'][ifc.IFCSWEPTAREASOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSWEPTDISKSOLID] = (d: RawLineData) => { return IFC2X3.IfcSweptDiskSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSWEPTDISKSOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSWEPTSURFACE] = (d: RawLineData) => { return IFC2X3.IfcSweptSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSWEPTSURFACE] = [ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION];
InversePropertyDef['IFC2X3'][ifc.IFCSWEPTSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcTShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTERMINATORSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcTerminatorSymbol.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTERMINATORSYMBOL] = [ifc.IFCDIMENSIONCURVETERMINATOR];
InversePropertyDef['IFC2X3'][ifc.IFCTERMINATORSYMBOL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTEXTLITERAL] = (d: RawLineData) => { return IFC2X3.IfcTextLiteral.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTEXTLITERAL] = [ifc.IFCTEXTLITERALWITHEXTENT];
InversePropertyDef['IFC2X3'][ifc.IFCTEXTLITERAL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTEXTLITERALWITHEXTENT] = (d: RawLineData) => { return IFC2X3.IfcTextLiteralWithExtent.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTEXTLITERALWITHEXTENT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTRAPEZIUMPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcTrapeziumProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCTWODIRECTIONREPEATFACTOR] = (d: RawLineData) => { return IFC2X3.IfcTwoDirectionRepeatFactor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTWODIRECTIONREPEATFACTOR] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTYPEOBJECT] = (d: RawLineData) => { return IFC2X3.IfcTypeObject.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTYPEOBJECT] = [ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCMEMBERTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE,ifc.IFCTYPEPRODUCT];
InversePropertyDef['IFC2X3'][ifc.IFCTYPEOBJECT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTYPEPRODUCT] = (d: RawLineData) => { return IFC2X3.IfcTypeProduct.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTYPEPRODUCT] = [ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCMEMBERTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE];
InversePropertyDef['IFC2X3'][ifc.IFCTYPEPRODUCT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCUSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcUShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCVECTOR] = (d: RawLineData) => { return IFC2X3.IfcVector.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCVECTOR] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCVERTEXLOOP] = (d: RawLineData) => { return IFC2X3.IfcVertexLoop.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCVERTEXLOOP] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWINDOWLININGPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcWindowLiningProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWINDOWLININGPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWINDOWPANELPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcWindowPanelProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWINDOWPANELPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWINDOWSTYLE] = (d: RawLineData) => { return IFC2X3.IfcWindowStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWINDOWSTYLE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCZSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcZShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONCURVEOCCURRENCE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationCurveOccurrence.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCANNOTATIONCURVEOCCURRENCE] = [ifc.IFCPROJECTIONCURVE,ifc.IFCDIMENSIONCURVE];
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONCURVEOCCURRENCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONFILLAREA] = (d: RawLineData) => { return IFC2X3.IfcAnnotationFillArea.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONFILLAREA] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONFILLAREAOCCURRENCE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationFillAreaOccurrence.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONFILLAREAOCCURRENCE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATIONSURFACE] = (d: RawLineData) => { return IFC2X3.IfcAnnotationSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATIONSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAXIS1PLACEMENT] = (d: RawLineData) => { return IFC2X3.IfcAxis1Placement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAXIS1PLACEMENT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAXIS2PLACEMENT2D] = (d: RawLineData) => { return IFC2X3.IfcAxis2Placement2D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAXIS2PLACEMENT2D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAXIS2PLACEMENT3D] = (d: RawLineData) => { return IFC2X3.IfcAxis2Placement3D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAXIS2PLACEMENT3D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOOLEANRESULT] = (d: RawLineData) => { return IFC2X3.IfcBooleanResult.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBOOLEANRESULT] = [ifc.IFCBOOLEANCLIPPINGRESULT];
InversePropertyDef['IFC2X3'][ifc.IFCBOOLEANRESULT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOUNDEDSURFACE] = (d: RawLineData) => { return IFC2X3.IfcBoundedSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBOUNDEDSURFACE] = [ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE];
InversePropertyDef['IFC2X3'][ifc.IFCBOUNDEDSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOUNDINGBOX] = (d: RawLineData) => { return IFC2X3.IfcBoundingBox.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBOUNDINGBOX] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOXEDHALFSPACE] = (d: RawLineData) => { return IFC2X3.IfcBoxedHalfSpace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBOXEDHALFSPACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCARTESIANPOINT] = (d: RawLineData) => { return IFC2X3.IfcCartesianPoint.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCARTESIANPOINT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR] = (d: RawLineData) => { return IFC2X3.IfcCartesianTransformationOperator.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR] = [ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D];
InversePropertyDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d: RawLineData) => { return IFC2X3.IfcCartesianTransformationOperator2D.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM];
InversePropertyDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d: RawLineData) => { return IFC2X3.IfcCartesianTransformationOperator2DnonUniform.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d: RawLineData) => { return IFC2X3.IfcCartesianTransformationOperator3D.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM];
InversePropertyDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d: RawLineData) => { return IFC2X3.IfcCartesianTransformationOperator3DnonUniform.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCIRCLEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCircleProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCIRCLEPROFILEDEF] = [ifc.IFCCIRCLEHOLLOWPROFILEDEF];
FromRawLineData['IFC2X3'][ifc.IFCCLOSEDSHELL] = (d: RawLineData) => { return IFC2X3.IfcClosedShell.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCLOSEDSHELL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOMPOSITECURVESEGMENT] = (d: RawLineData) => { return IFC2X3.IfcCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOMPOSITECURVESEGMENT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['UsingCurves',ifc.IFCCOMPOSITECURVE,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCRANERAILASHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCraneRailAShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCRANERAILFSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCraneRailFShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCSGPRIMITIVE3D] = (d: RawLineData) => { return IFC2X3.IfcCsgPrimitive3D.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCSGPRIMITIVE3D] = [ifc.IFCBLOCK,ifc.IFCSPHERE,ifc.IFCRIGHTCIRCULARCYLINDER,ifc.IFCRIGHTCIRCULARCONE,ifc.IFCRECTANGULARPYRAMID];
InversePropertyDef['IFC2X3'][ifc.IFCCSGPRIMITIVE3D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCSGSOLID] = (d: RawLineData) => { return IFC2X3.IfcCsgSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCSGSOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCURVE] = (d: RawLineData) => { return IFC2X3.IfcCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCURVE] = [ifc.IFCCIRCLE,ifc.IFCELLIPSE,ifc.IFCCONIC,ifc.IFCRATIONALBEZIERCURVE,ifc.IFCBEZIERCURVE,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFC2DCOMPOSITECURVE,ifc.IFCCOMPOSITECURVE,ifc.IFCBOUNDEDCURVE,ifc.IFCOFFSETCURVE3D,ifc.IFCOFFSETCURVE2D,ifc.IFCLINE];
InversePropertyDef['IFC2X3'][ifc.IFCCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCURVEBOUNDEDPLANE] = (d: RawLineData) => { return IFC2X3.IfcCurveBoundedPlane.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCURVEBOUNDEDPLANE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDEFINEDSYMBOL] = (d: RawLineData) => { return IFC2X3.IfcDefinedSymbol.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDEFINEDSYMBOL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDIMENSIONCURVE] = (d: RawLineData) => { return IFC2X3.IfcDimensionCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDIMENSIONCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['AnnotatedBySymbols',ifc.IFCTERMINATORSYMBOL,3,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDIMENSIONCURVETERMINATOR] = (d: RawLineData) => { return IFC2X3.IfcDimensionCurveTerminator.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDIMENSIONCURVETERMINATOR] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDIRECTION] = (d: RawLineData) => { return IFC2X3.IfcDirection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDIRECTION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDOORLININGPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcDoorLiningProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDOORLININGPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDOORPANELPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcDoorPanelProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDOORPANELPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDOORSTYLE] = (d: RawLineData) => { return IFC2X3.IfcDoorStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDOORSTYLE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDRAUGHTINGCALLOUT] = (d: RawLineData) => { return IFC2X3.IfcDraughtingCallout.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDRAUGHTINGCALLOUT] = [ifc.IFCDIAMETERDIMENSION,ifc.IFCANGULARDIMENSION,ifc.IFCRADIUSDIMENSION,ifc.IFCLINEARDIMENSION,ifc.IFCDIMENSIONCURVEDIRECTEDCALLOUT,ifc.IFCSTRUCTUREDDIMENSIONCALLOUT];
InversePropertyDef['IFC2X3'][ifc.IFCDRAUGHTINGCALLOUT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d: RawLineData) => { return IFC2X3.IfcDraughtingPreDefinedColour.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d: RawLineData) => { return IFC2X3.IfcDraughtingPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCEDGELOOP] = (d: RawLineData) => { return IFC2X3.IfcEdgeLoop.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEDGELOOP] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENTQUANTITY] = (d: RawLineData) => { return IFC2X3.IfcElementQuantity.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELEMENTQUANTITY] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCELEMENTTYPE] = [ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCMEMBERTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENTARYSURFACE] = (d: RawLineData) => { return IFC2X3.IfcElementarySurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCELEMENTARYSURFACE] = [ifc.IFCPLANE];
InversePropertyDef['IFC2X3'][ifc.IFCELEMENTARYSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELLIPSEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcEllipseProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCENERGYPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcEnergyProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCENERGYPROPERTIES] = [ifc.IFCELECTRICALBASEPROPERTIES];
InversePropertyDef['IFC2X3'][ifc.IFCENERGYPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEXTRUDEDAREASOLID] = (d: RawLineData) => { return IFC2X3.IfcExtrudedAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEXTRUDEDAREASOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFACEBASEDSURFACEMODEL] = (d: RawLineData) => { return IFC2X3.IfcFaceBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFACEBASEDSURFACEMODEL] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFILLAREASTYLEHATCHING] = (d: RawLineData) => { return IFC2X3.IfcFillAreaStyleHatching.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFILLAREASTYLEHATCHING] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFILLAREASTYLETILESYMBOLWITHSTYLE] = (d: RawLineData) => { return IFC2X3.IfcFillAreaStyleTileSymbolWithStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFILLAREASTYLETILESYMBOLWITHSTYLE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFILLAREASTYLETILES] = (d: RawLineData) => { return IFC2X3.IfcFillAreaStyleTiles.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFILLAREASTYLETILES] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLUIDFLOWPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcFluidFlowProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLUIDFLOWPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFURNISHINGELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcFurnishingElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFURNISHINGELEMENTTYPE] = [ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFURNISHINGELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFURNITURETYPE] = (d: RawLineData) => { return IFC2X3.IfcFurnitureType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFURNITURETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGEOMETRICCURVESET] = (d: RawLineData) => { return IFC2X3.IfcGeometricCurveSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCGEOMETRICCURVESET] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCISHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcIShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCISHAPEPROFILEDEF] = [ifc.IFCASYMMETRICISHAPEPROFILEDEF];
FromRawLineData['IFC2X3'][ifc.IFCLSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcLShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCLINE] = (d: RawLineData) => { return IFC2X3.IfcLine.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLINE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMANIFOLDSOLIDBREP] = (d: RawLineData) => { return IFC2X3.IfcManifoldSolidBrep.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCMANIFOLDSOLIDBREP] = [ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP];
InversePropertyDef['IFC2X3'][ifc.IFCMANIFOLDSOLIDBREP] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOBJECT] = (d: RawLineData) => { return IFC2X3.IfcObject.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCOBJECT] = [ifc.IFCCONDITION,ifc.IFCASSET,ifc.IFCZONE,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCELECTRICALCIRCUIT,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY,ifc.IFCGROUP,ifc.IFCCONDITIONCRITERION,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCTIMESERIESSCHEDULE,ifc.IFCSPACEPROGRAM,ifc.IFCSERVICELIFE,ifc.IFCSCHEDULETIMECONTROL,ifc.IFCPROJECTORDERRECORD,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCFURNITURESTANDARD,ifc.IFCEQUIPMENTSTANDARD,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM,ifc.IFCCONTROL,ifc.IFCOCCUPANT,ifc.IFCACTOR,ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE,ifc.IFCRESOURCE,ifc.IFCPROJECT,ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCELECTRICALELEMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCBEAM,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLAB,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMN,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART,ifc.IFCBUILDINGELEMENTCOMPONENT,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCFURNISHINGELEMENT,ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCEQUIPMENTELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALPLANARACTIONVARYING,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALLINEARACTIONVARYING,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCPROXY,ifc.IFCPRODUCT,ifc.IFCPROCEDURE,ifc.IFCORDERACTION,ifc.IFCMOVE,ifc.IFCTASK,ifc.IFCPROCESS];
InversePropertyDef['IFC2X3'][ifc.IFCOBJECT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOFFSETCURVE2D] = (d: RawLineData) => { return IFC2X3.IfcOffsetCurve2D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOFFSETCURVE2D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOFFSETCURVE3D] = (d: RawLineData) => { return IFC2X3.IfcOffsetCurve3D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOFFSETCURVE3D] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPERMEABLECOVERINGPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcPermeableCoveringProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPERMEABLECOVERINGPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPLANARBOX] = (d: RawLineData) => { return IFC2X3.IfcPlanarBox.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPLANARBOX] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPLANE] = (d: RawLineData) => { return IFC2X3.IfcPlane.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPLANE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROCESS] = (d: RawLineData) => { return IFC2X3.IfcProcess.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPROCESS] = [ifc.IFCPROCEDURE,ifc.IFCORDERACTION,ifc.IFCMOVE,ifc.IFCTASK];
InversePropertyDef['IFC2X3'][ifc.IFCPROCESS] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPRODUCT] = (d: RawLineData) => { return IFC2X3.IfcProduct.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPRODUCT] = [ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCELECTRICALELEMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCBEAM,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLAB,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMN,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART,ifc.IFCBUILDINGELEMENTCOMPONENT,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCFURNISHINGELEMENT,ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCEQUIPMENTELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALPLANARACTIONVARYING,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALLINEARACTIONVARYING,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCPROXY];
InversePropertyDef['IFC2X3'][ifc.IFCPRODUCT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROJECT] = (d: RawLineData) => { return IFC2X3.IfcProject.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROJECT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROJECTIONCURVE] = (d: RawLineData) => { return IFC2X3.IfcProjectionCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROJECTIONCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROPERTYSET] = (d: RawLineData) => { return IFC2X3.IfcPropertySet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROPERTYSET] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROXY] = (d: RawLineData) => { return IFC2X3.IfcProxy.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROXY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRECTANGLEHOLLOWPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcRectangleHollowProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRECTANGULARPYRAMID] = (d: RawLineData) => { return IFC2X3.IfcRectangularPyramid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRECTANGULARPYRAMID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRECTANGULARTRIMMEDSURFACE] = (d: RawLineData) => { return IFC2X3.IfcRectangularTrimmedSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRECTANGULARTRIMMEDSURFACE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNS] = (d: RawLineData) => { return IFC2X3.IfcRelAssigns.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELASSIGNS] = [ifc.IFCRELASSIGNSTORESOURCE,ifc.IFCRELASSIGNSTOPRODUCT,ifc.IFCRELASSIGNSTOPROCESS,ifc.IFCRELASSIGNSTOGROUP,ifc.IFCRELASSIGNSTASKS,ifc.IFCRELSCHEDULESCOSTITEMS,ifc.IFCRELASSIGNSTOPROJECTORDER,ifc.IFCRELASSIGNSTOCONTROL,ifc.IFCRELOCCUPIESSPACES,ifc.IFCRELASSIGNSTOACTOR];
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTOACTOR] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToActor.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELASSIGNSTOACTOR] = [ifc.IFCRELOCCUPIESSPACES];
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTOCONTROL] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToControl.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELASSIGNSTOCONTROL] = [ifc.IFCRELASSIGNSTASKS,ifc.IFCRELSCHEDULESCOSTITEMS,ifc.IFCRELASSIGNSTOPROJECTORDER];
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTOGROUP] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToGroup.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTOPROCESS] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToProcess.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTOPRODUCT] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToProduct.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTOPROJECTORDER] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToProjectOrder.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTORESOURCE] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsToResource.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATES] = (d: RawLineData) => { return IFC2X3.IfcRelAssociates.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELASSOCIATES] = [ifc.IFCRELASSOCIATESPROFILEPROPERTIES,ifc.IFCRELASSOCIATESMATERIAL,ifc.IFCRELASSOCIATESLIBRARY,ifc.IFCRELASSOCIATESDOCUMENT,ifc.IFCRELASSOCIATESCONSTRAINT,ifc.IFCRELASSOCIATESCLASSIFICATION,ifc.IFCRELASSOCIATESAPPROVAL,ifc.IFCRELASSOCIATESAPPLIEDVALUE];
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESAPPLIEDVALUE] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesAppliedValue.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESAPPROVAL] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesApproval.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESCLASSIFICATION] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesClassification.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESCONSTRAINT] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesConstraint.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESDOCUMENT] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesDocument.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESLIBRARY] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesLibrary.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESMATERIAL] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesMaterial.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSOCIATESPROFILEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcRelAssociatesProfileProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTS] = (d: RawLineData) => { return IFC2X3.IfcRelConnects.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELCONNECTS] = [ifc.IFCRELVOIDSELEMENT,ifc.IFCRELSPACEBOUNDARY,ifc.IFCRELSERVICESBUILDINGS,ifc.IFCRELSEQUENCE,ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,ifc.IFCRELPROJECTSELEMENT,ifc.IFCRELINTERACTIONREQUIREMENTS,ifc.IFCRELFLOWCONTROLELEMENTS,ifc.IFCRELFILLSELEMENT,ifc.IFCRELCOVERSSPACES,ifc.IFCRELCOVERSBLDGELEMENTS,ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,ifc.IFCRELCONNECTSWITHECCENTRICITY,ifc.IFCRELCONNECTSSTRUCTURALMEMBER,ifc.IFCRELCONNECTSSTRUCTURALELEMENT,ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,ifc.IFCRELCONNECTSPORTS,ifc.IFCRELCONNECTSPORTTOELEMENT,ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS,ifc.IFCRELCONNECTSELEMENTS];
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSELEMENTS] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsElements.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELCONNECTSELEMENTS] = [ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS];
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSPATHELEMENTS] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsPathElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSPORTTOELEMENT] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsPortToElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSPORTS] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsPorts.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSSTRUCTURALACTIVITY] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsStructuralActivity.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSSTRUCTURALELEMENT] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsStructuralElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSSTRUCTURALMEMBER] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsStructuralMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELCONNECTSSTRUCTURALMEMBER] = [ifc.IFCRELCONNECTSWITHECCENTRICITY];
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSWITHECCENTRICITY] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsWithEccentricity.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d: RawLineData) => { return IFC2X3.IfcRelConnectsWithRealizingElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d: RawLineData) => { return IFC2X3.IfcRelContainedInSpatialStructure.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCOVERSBLDGELEMENTS] = (d: RawLineData) => { return IFC2X3.IfcRelCoversBldgElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELCOVERSSPACES] = (d: RawLineData) => { return IFC2X3.IfcRelCoversSpaces.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELDECOMPOSES] = (d: RawLineData) => { return IFC2X3.IfcRelDecomposes.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELDECOMPOSES] = [ifc.IFCRELAGGREGATES,ifc.IFCRELNESTS];
FromRawLineData['IFC2X3'][ifc.IFCRELDEFINES] = (d: RawLineData) => { return IFC2X3.IfcRelDefines.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELDEFINES] = [ifc.IFCRELDEFINESBYTYPE,ifc.IFCRELOVERRIDESPROPERTIES,ifc.IFCRELDEFINESBYPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCRELDEFINESBYPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcRelDefinesByProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRELDEFINESBYPROPERTIES] = [ifc.IFCRELOVERRIDESPROPERTIES];
FromRawLineData['IFC2X3'][ifc.IFCRELDEFINESBYTYPE] = (d: RawLineData) => { return IFC2X3.IfcRelDefinesByType.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELFILLSELEMENT] = (d: RawLineData) => { return IFC2X3.IfcRelFillsElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELFLOWCONTROLELEMENTS] = (d: RawLineData) => { return IFC2X3.IfcRelFlowControlElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELINTERACTIONREQUIREMENTS] = (d: RawLineData) => { return IFC2X3.IfcRelInteractionRequirements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELNESTS] = (d: RawLineData) => { return IFC2X3.IfcRelNests.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELOCCUPIESSPACES] = (d: RawLineData) => { return IFC2X3.IfcRelOccupiesSpaces.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELOVERRIDESPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcRelOverridesProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELPROJECTSELEMENT] = (d: RawLineData) => { return IFC2X3.IfcRelProjectsElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d: RawLineData) => { return IFC2X3.IfcRelReferencedInSpatialStructure.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELSCHEDULESCOSTITEMS] = (d: RawLineData) => { return IFC2X3.IfcRelSchedulesCostItems.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELSEQUENCE] = (d: RawLineData) => { return IFC2X3.IfcRelSequence.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELSERVICESBUILDINGS] = (d: RawLineData) => { return IFC2X3.IfcRelServicesBuildings.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELSPACEBOUNDARY] = (d: RawLineData) => { return IFC2X3.IfcRelSpaceBoundary.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELVOIDSELEMENT] = (d: RawLineData) => { return IFC2X3.IfcRelVoidsElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcResource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCRESOURCE] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE];
InversePropertyDef['IFC2X3'][ifc.IFCRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREVOLVEDAREASOLID] = (d: RawLineData) => { return IFC2X3.IfcRevolvedAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCREVOLVEDAREASOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRIGHTCIRCULARCONE] = (d: RawLineData) => { return IFC2X3.IfcRightCircularCone.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRIGHTCIRCULARCONE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRIGHTCIRCULARCYLINDER] = (d: RawLineData) => { return IFC2X3.IfcRightCircularCylinder.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRIGHTCIRCULARCYLINDER] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { return IFC2X3.IfcSpatialStructureElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSPATIALSTRUCTUREELEMENT] = [ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING];
InversePropertyDef['IFC2X3'][ifc.IFCSPATIALSTRUCTUREELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPATIALSTRUCTUREELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcSpatialStructureElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSPATIALSTRUCTUREELEMENTTYPE] = [ifc.IFCSPACETYPE];
InversePropertyDef['IFC2X3'][ifc.IFCSPATIALSTRUCTUREELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPHERE] = (d: RawLineData) => { return IFC2X3.IfcSphere.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSPHERE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALACTIVITY] = (d: RawLineData) => { return IFC2X3.IfcStructuralActivity.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALACTIVITY] = [ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALPLANARACTIONVARYING,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALLINEARACTIONVARYING,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALREACTION];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALACTIVITY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALITEM] = (d: RawLineData) => { return IFC2X3.IfcStructuralItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALITEM] = [ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALITEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALMEMBER] = (d: RawLineData) => { return IFC2X3.IfcStructuralMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALMEMBER] = [ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ReferencesElement',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,5,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALREACTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralReaction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALREACTION] = [ifc.IFCSTRUCTURALPOINTREACTION];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALREACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
		['Causes',ifc.IFCSTRUCTURALACTION,10,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALSURFACEMEMBER] = (d: RawLineData) => { return IFC2X3.IfcStructuralSurfaceMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALSURFACEMEMBER] = [ifc.IFCSTRUCTURALSURFACEMEMBERVARYING];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALSURFACEMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ReferencesElement',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,5,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALSURFACEMEMBERVARYING] = (d: RawLineData) => { return IFC2X3.IfcStructuralSurfaceMemberVarying.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALSURFACEMEMBERVARYING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ReferencesElement',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,5,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTUREDDIMENSIONCALLOUT] = (d: RawLineData) => { return IFC2X3.IfcStructuredDimensionCallout.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTUREDDIMENSIONCALLOUT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSURFACECURVESWEPTAREASOLID] = (d: RawLineData) => { return IFC2X3.IfcSurfaceCurveSweptAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSURFACECURVESWEPTAREASOLID] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSURFACEOFLINEAREXTRUSION] = (d: RawLineData) => { return IFC2X3.IfcSurfaceOfLinearExtrusion.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSURFACEOFLINEAREXTRUSION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSURFACEOFREVOLUTION] = (d: RawLineData) => { return IFC2X3.IfcSurfaceOfRevolution.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSURFACEOFREVOLUTION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSYSTEMFURNITUREELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcSystemFurnitureElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSYSTEMFURNITUREELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTASK] = (d: RawLineData) => { return IFC2X3.IfcTask.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCTASK] = [ifc.IFCORDERACTION,ifc.IFCMOVE];
InversePropertyDef['IFC2X3'][ifc.IFCTASK] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTRANSPORTELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcTransportElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTRANSPORTELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCACTOR] = (d: RawLineData) => { return IFC2X3.IfcActor.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCACTOR] = [ifc.IFCOCCUPANT];
InversePropertyDef['IFC2X3'][ifc.IFCACTOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsActingUpon',ifc.IFCRELASSIGNSTOACTOR,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANNOTATION] = (d: RawLineData) => { return IFC2X3.IfcAnnotation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANNOTATION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCASYMMETRICISHAPEPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcAsymmetricIShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCBLOCK] = (d: RawLineData) => { return IFC2X3.IfcBlock.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBLOCK] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOOLEANCLIPPINGRESULT] = (d: RawLineData) => { return IFC2X3.IfcBooleanClippingResult.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBOOLEANCLIPPINGRESULT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOUNDEDCURVE] = (d: RawLineData) => { return IFC2X3.IfcBoundedCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBOUNDEDCURVE] = [ifc.IFCRATIONALBEZIERCURVE,ifc.IFCBEZIERCURVE,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFC2DCOMPOSITECURVE,ifc.IFCCOMPOSITECURVE];
InversePropertyDef['IFC2X3'][ifc.IFCBOUNDEDCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDING] = (d: RawLineData) => { return IFC2X3.IfcBuilding.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBUILDING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcBuildingElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBUILDINGELEMENTTYPE] = [ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCMEMBERTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGSTOREY] = (d: RawLineData) => { return IFC2X3.IfcBuildingStorey.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGSTOREY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCIRCLEHOLLOWPROFILEDEF] = (d: RawLineData) => { return IFC2X3.IfcCircleHollowProfileDef.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCCOLUMNTYPE] = (d: RawLineData) => { return IFC2X3.IfcColumnType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOLUMNTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOMPOSITECURVE] = (d: RawLineData) => { return IFC2X3.IfcCompositeCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCOMPOSITECURVE] = [ifc.IFC2DCOMPOSITECURVE];
InversePropertyDef['IFC2X3'][ifc.IFCCOMPOSITECURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONIC] = (d: RawLineData) => { return IFC2X3.IfcConic.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONIC] = [ifc.IFCCIRCLE,ifc.IFCELLIPSE];
InversePropertyDef['IFC2X3'][ifc.IFCCONIC] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONSTRUCTIONRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcConstructionResource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONSTRUCTIONRESOURCE] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE];
InversePropertyDef['IFC2X3'][ifc.IFCCONSTRUCTIONRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONTROL] = (d: RawLineData) => { return IFC2X3.IfcControl.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCCONTROL] = [ifc.IFCCONDITIONCRITERION,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCTIMESERIESSCHEDULE,ifc.IFCSPACEPROGRAM,ifc.IFCSERVICELIFE,ifc.IFCSCHEDULETIMECONTROL,ifc.IFCPROJECTORDERRECORD,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCFURNITURESTANDARD,ifc.IFCEQUIPMENTSTANDARD,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM];
InversePropertyDef['IFC2X3'][ifc.IFCCONTROL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOSTITEM] = (d: RawLineData) => { return IFC2X3.IfcCostItem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOSTITEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOSTSCHEDULE] = (d: RawLineData) => { return IFC2X3.IfcCostSchedule.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOSTSCHEDULE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOVERINGTYPE] = (d: RawLineData) => { return IFC2X3.IfcCoveringType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOVERINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCREWRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcCrewResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCREWRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCURTAINWALLTYPE] = (d: RawLineData) => { return IFC2X3.IfcCurtainWallType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCURTAINWALLTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDIMENSIONCURVEDIRECTEDCALLOUT] = (d: RawLineData) => { return IFC2X3.IfcDimensionCurveDirectedCallout.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDIMENSIONCURVEDIRECTEDCALLOUT] = [ifc.IFCDIAMETERDIMENSION,ifc.IFCANGULARDIMENSION,ifc.IFCRADIUSDIMENSION,ifc.IFCLINEARDIMENSION];
InversePropertyDef['IFC2X3'][ifc.IFCDIMENSIONCURVEDIRECTEDCALLOUT] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcDistributionElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDISTRIBUTIONELEMENTTYPE] = [ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcDistributionFlowElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE] = [ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE];
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICALBASEPROPERTIES] = (d: RawLineData) => { return IFC2X3.IfcElectricalBaseProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICALBASEPROPERTIES] = [
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PropertyDefinitionOf',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENT] = (d: RawLineData) => { return IFC2X3.IfcElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCELEMENT] = [ifc.IFCELECTRICALELEMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCBEAM,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLAB,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMN,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART,ifc.IFCBUILDINGELEMENTCOMPONENT,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCFURNISHINGELEMENT,ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCEQUIPMENTELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY];
InversePropertyDef['IFC2X3'][ifc.IFCELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENTASSEMBLY] = (d: RawLineData) => { return IFC2X3.IfcElementAssembly.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELEMENTASSEMBLY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENTCOMPONENT] = (d: RawLineData) => { return IFC2X3.IfcElementComponent.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCELEMENTCOMPONENT] = [ifc.IFCDISCRETEACCESSORY,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER];
InversePropertyDef['IFC2X3'][ifc.IFCELEMENTCOMPONENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELEMENTCOMPONENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcElementComponentType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCELEMENTCOMPONENTTYPE] = [ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCELEMENTCOMPONENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELLIPSE] = (d: RawLineData) => { return IFC2X3.IfcEllipse.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELLIPSE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCENERGYCONVERSIONDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcEnergyConversionDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCENERGYCONVERSIONDEVICETYPE] = [ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCENERGYCONVERSIONDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEQUIPMENTELEMENT] = (d: RawLineData) => { return IFC2X3.IfcEquipmentElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEQUIPMENTELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEQUIPMENTSTANDARD] = (d: RawLineData) => { return IFC2X3.IfcEquipmentStandard.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEQUIPMENTSTANDARD] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEVAPORATIVECOOLERTYPE] = (d: RawLineData) => { return IFC2X3.IfcEvaporativeCoolerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEVAPORATIVECOOLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEVAPORATORTYPE] = (d: RawLineData) => { return IFC2X3.IfcEvaporatorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCEVAPORATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFACETEDBREP] = (d: RawLineData) => { return IFC2X3.IfcFacetedBrep.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFACETEDBREP] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFACETEDBREPWITHVOIDS] = (d: RawLineData) => { return IFC2X3.IfcFacetedBrepWithVoids.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFACETEDBREPWITHVOIDS] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFASTENER] = (d: RawLineData) => { return IFC2X3.IfcFastener.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFASTENER] = [ifc.IFCMECHANICALFASTENER];
InversePropertyDef['IFC2X3'][ifc.IFCFASTENER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFASTENERTYPE] = (d: RawLineData) => { return IFC2X3.IfcFastenerType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFASTENERTYPE] = [ifc.IFCMECHANICALFASTENERTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFASTENERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFEATUREELEMENT] = (d: RawLineData) => { return IFC2X3.IfcFeatureElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFEATUREELEMENT] = [ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION];
InversePropertyDef['IFC2X3'][ifc.IFCFEATUREELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFEATUREELEMENTADDITION] = (d: RawLineData) => { return IFC2X3.IfcFeatureElementAddition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFEATUREELEMENTADDITION] = [ifc.IFCPROJECTIONELEMENT];
InversePropertyDef['IFC2X3'][ifc.IFCFEATUREELEMENTADDITION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['ProjectsElements',ifc.IFCRELPROJECTSELEMENT,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCFEATUREELEMENTSUBTRACTION] = (d: RawLineData) => { return IFC2X3.IfcFeatureElementSubtraction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFEATUREELEMENTSUBTRACTION] = [ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE,ifc.IFCEDGEFEATURE,ifc.IFCOPENINGELEMENT];
InversePropertyDef['IFC2X3'][ifc.IFCFEATUREELEMENTSUBTRACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWCONTROLLERTYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowControllerType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWCONTROLLERTYPE] = [ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWCONTROLLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWFITTINGTYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowFittingType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWFITTINGTYPE] = [ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWMETERTYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowMeterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWMETERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWMOVINGDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowMovingDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWMOVINGDEVICETYPE] = [ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWMOVINGDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWSEGMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowSegmentType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWSEGMENTTYPE] = [ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWSEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWSTORAGEDEVICETYPE] = [ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWSTORAGEDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWTERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowTerminalType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWTERMINALTYPE] = [ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICHEATERTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCGASTERMINALTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWTREATMENTDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowTreatmentDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWTREATMENTDEVICETYPE] = [ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWTREATMENTDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFURNISHINGELEMENT] = (d: RawLineData) => { return IFC2X3.IfcFurnishingElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFURNISHINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFURNITURESTANDARD] = (d: RawLineData) => { return IFC2X3.IfcFurnitureStandard.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFURNITURESTANDARD] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGASTERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcGasTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCGASTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGRID] = (d: RawLineData) => { return IFC2X3.IfcGrid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCGRID] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCGROUP] = (d: RawLineData) => { return IFC2X3.IfcGroup.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCGROUP] = [ifc.IFCCONDITION,ifc.IFCASSET,ifc.IFCZONE,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCELECTRICALCIRCUIT,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY];
InversePropertyDef['IFC2X3'][ifc.IFCGROUP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
];
FromRawLineData['IFC2X3'][ifc.IFCHEATEXCHANGERTYPE] = (d: RawLineData) => { return IFC2X3.IfcHeatExchangerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCHEATEXCHANGERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCHUMIDIFIERTYPE] = (d: RawLineData) => { return IFC2X3.IfcHumidifierType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCHUMIDIFIERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCINVENTORY] = (d: RawLineData) => { return IFC2X3.IfcInventory.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCINVENTORY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
];
FromRawLineData['IFC2X3'][ifc.IFCJUNCTIONBOXTYPE] = (d: RawLineData) => { return IFC2X3.IfcJunctionBoxType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCJUNCTIONBOXTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLABORRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcLaborResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLABORRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLAMPTYPE] = (d: RawLineData) => { return IFC2X3.IfcLampType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLAMPTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLIGHTFIXTURETYPE] = (d: RawLineData) => { return IFC2X3.IfcLightFixtureType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLIGHTFIXTURETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCLINEARDIMENSION] = (d: RawLineData) => { return IFC2X3.IfcLinearDimension.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCLINEARDIMENSION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMECHANICALFASTENER] = (d: RawLineData) => { return IFC2X3.IfcMechanicalFastener.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMECHANICALFASTENER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMECHANICALFASTENERTYPE] = (d: RawLineData) => { return IFC2X3.IfcMechanicalFastenerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMECHANICALFASTENERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMEMBERTYPE] = (d: RawLineData) => { return IFC2X3.IfcMemberType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMEMBERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMOTORCONNECTIONTYPE] = (d: RawLineData) => { return IFC2X3.IfcMotorConnectionType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMOTORCONNECTIONTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMOVE] = (d: RawLineData) => { return IFC2X3.IfcMove.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMOVE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOCCUPANT] = (d: RawLineData) => { return IFC2X3.IfcOccupant.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOCCUPANT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsActingUpon',ifc.IFCRELASSIGNSTOACTOR,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOPENINGELEMENT] = (d: RawLineData) => { return IFC2X3.IfcOpeningElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOPENINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
		['HasFillings',ifc.IFCRELFILLSELEMENT,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCORDERACTION] = (d: RawLineData) => { return IFC2X3.IfcOrderAction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCORDERACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCOUTLETTYPE] = (d: RawLineData) => { return IFC2X3.IfcOutletType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCOUTLETTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPERFORMANCEHISTORY] = (d: RawLineData) => { return IFC2X3.IfcPerformanceHistory.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPERFORMANCEHISTORY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPERMIT] = (d: RawLineData) => { return IFC2X3.IfcPermit.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPERMIT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPIPEFITTINGTYPE] = (d: RawLineData) => { return IFC2X3.IfcPipeFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPIPEFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPIPESEGMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcPipeSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPIPESEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPLATETYPE] = (d: RawLineData) => { return IFC2X3.IfcPlateType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPLATETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPOLYLINE] = (d: RawLineData) => { return IFC2X3.IfcPolyline.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPOLYLINE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPORT] = (d: RawLineData) => { return IFC2X3.IfcPort.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCPORT] = [ifc.IFCDISTRIBUTIONPORT];
InversePropertyDef['IFC2X3'][ifc.IFCPORT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedIn',ifc.IFCRELCONNECTSPORTTOELEMENT,4,false],
		['ConnectedFrom',ifc.IFCRELCONNECTSPORTS,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSPORTS,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROCEDURE] = (d: RawLineData) => { return IFC2X3.IfcProcedure.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROCEDURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROJECTORDER] = (d: RawLineData) => { return IFC2X3.IfcProjectOrder.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROJECTORDER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROJECTORDERRECORD] = (d: RawLineData) => { return IFC2X3.IfcProjectOrderRecord.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROJECTORDERRECORD] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPROJECTIONELEMENT] = (d: RawLineData) => { return IFC2X3.IfcProjectionElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROJECTIONELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['ProjectsElements',ifc.IFCRELPROJECTSELEMENT,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCPROTECTIVEDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcProtectiveDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPROTECTIVEDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPUMPTYPE] = (d: RawLineData) => { return IFC2X3.IfcPumpType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPUMPTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRADIUSDIMENSION] = (d: RawLineData) => { return IFC2X3.IfcRadiusDimension.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRADIUSDIMENSION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRAILINGTYPE] = (d: RawLineData) => { return IFC2X3.IfcRailingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRAILINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRAMPFLIGHTTYPE] = (d: RawLineData) => { return IFC2X3.IfcRampFlightType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRAMPFLIGHTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRELAGGREGATES] = (d: RawLineData) => { return IFC2X3.IfcRelAggregates.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCRELASSIGNSTASKS] = (d: RawLineData) => { return IFC2X3.IfcRelAssignsTasks.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC2X3'][ifc.IFCSANITARYTERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcSanitaryTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSANITARYTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSCHEDULETIMECONTROL] = (d: RawLineData) => { return IFC2X3.IfcScheduleTimeControl.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSCHEDULETIMECONTROL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
		['ScheduleTimeControlAssigned',ifc.IFCRELASSIGNSTASKS,7,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSERVICELIFE] = (d: RawLineData) => { return IFC2X3.IfcServiceLife.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSERVICELIFE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSITE] = (d: RawLineData) => { return IFC2X3.IfcSite.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSITE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSLABTYPE] = (d: RawLineData) => { return IFC2X3.IfcSlabType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSLABTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPACE] = (d: RawLineData) => { return IFC2X3.IfcSpace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSPACE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['HasCoverings',ifc.IFCRELCOVERSSPACES,4,true],
		['BoundedBy',ifc.IFCRELSPACEBOUNDARY,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPACEHEATERTYPE] = (d: RawLineData) => { return IFC2X3.IfcSpaceHeaterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSPACEHEATERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPACEPROGRAM] = (d: RawLineData) => { return IFC2X3.IfcSpaceProgram.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSPACEPROGRAM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
		['HasInteractionReqsFrom',ifc.IFCRELINTERACTIONREQUIREMENTS,7,true],
		['HasInteractionReqsTo',ifc.IFCRELINTERACTIONREQUIREMENTS,8,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSPACETYPE] = (d: RawLineData) => { return IFC2X3.IfcSpaceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSPACETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTACKTERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcStackTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTACKTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTAIRFLIGHTTYPE] = (d: RawLineData) => { return IFC2X3.IfcStairFlightType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTAIRFLIGHTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALACTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralAction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALACTION] = [ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALPLANARACTIONVARYING,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALLINEARACTIONVARYING,ifc.IFCSTRUCTURALLINEARACTION];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALCONNECTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralConnection.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALCONNECTION] = [ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALCONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALCURVECONNECTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralCurveConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALCURVECONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALCURVEMEMBER] = (d: RawLineData) => { return IFC2X3.IfcStructuralCurveMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALCURVEMEMBER] = [ifc.IFCSTRUCTURALCURVEMEMBERVARYING];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALCURVEMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ReferencesElement',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,5,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALCURVEMEMBERVARYING] = (d: RawLineData) => { return IFC2X3.IfcStructuralCurveMemberVarying.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALCURVEMEMBERVARYING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ReferencesElement',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,5,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLINEARACTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralLinearAction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALLINEARACTION] = [ifc.IFCSTRUCTURALLINEARACTIONVARYING];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALLINEARACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLINEARACTIONVARYING] = (d: RawLineData) => { return IFC2X3.IfcStructuralLinearActionVarying.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALLINEARACTIONVARYING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALLOADGROUP] = (d: RawLineData) => { return IFC2X3.IfcStructuralLoadGroup.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALLOADGROUP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
		['SourceOfResultGroup',ifc.IFCSTRUCTURALRESULTGROUP,6,true],
		['LoadGroupFor',ifc.IFCSTRUCTURALANALYSISMODEL,7,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALPLANARACTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralPlanarAction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSTRUCTURALPLANARACTION] = [ifc.IFCSTRUCTURALPLANARACTIONVARYING];
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALPLANARACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALPLANARACTIONVARYING] = (d: RawLineData) => { return IFC2X3.IfcStructuralPlanarActionVarying.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALPLANARACTIONVARYING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALPOINTACTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralPointAction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALPOINTACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALPOINTCONNECTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralPointConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALPOINTCONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALPOINTREACTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralPointReaction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALPOINTREACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],
		['Causes',ifc.IFCSTRUCTURALACTION,10,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALRESULTGROUP] = (d: RawLineData) => { return IFC2X3.IfcStructuralResultGroup.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALRESULTGROUP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
		['ResultGroupFor',ifc.IFCSTRUCTURALANALYSISMODEL,8,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALSURFACECONNECTION] = (d: RawLineData) => { return IFC2X3.IfcStructuralSurfaceConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALSURFACECONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSUBCONTRACTRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcSubContractResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSUBCONTRACTRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSWITCHINGDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcSwitchingDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSWITCHINGDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSYSTEM] = (d: RawLineData) => { return IFC2X3.IfcSystem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCSYSTEM] = [ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCELECTRICALCIRCUIT];
InversePropertyDef['IFC2X3'][ifc.IFCSYSTEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTANKTYPE] = (d: RawLineData) => { return IFC2X3.IfcTankType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTANKTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTIMESERIESSCHEDULE] = (d: RawLineData) => { return IFC2X3.IfcTimeSeriesSchedule.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTIMESERIESSCHEDULE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTRANSFORMERTYPE] = (d: RawLineData) => { return IFC2X3.IfcTransformerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTRANSFORMERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTRANSPORTELEMENT] = (d: RawLineData) => { return IFC2X3.IfcTransportElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTRANSPORTELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTRIMMEDCURVE] = (d: RawLineData) => { return IFC2X3.IfcTrimmedCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTRIMMEDCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTUBEBUNDLETYPE] = (d: RawLineData) => { return IFC2X3.IfcTubeBundleType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTUBEBUNDLETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCUNITARYEQUIPMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcUnitaryEquipmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCUNITARYEQUIPMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCVALVETYPE] = (d: RawLineData) => { return IFC2X3.IfcValveType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCVALVETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCVIRTUALELEMENT] = (d: RawLineData) => { return IFC2X3.IfcVirtualElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCVIRTUALELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWALLTYPE] = (d: RawLineData) => { return IFC2X3.IfcWallType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWALLTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWASTETERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcWasteTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWASTETERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWORKCONTROL] = (d: RawLineData) => { return IFC2X3.IfcWorkControl.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCWORKCONTROL] = [ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN];
InversePropertyDef['IFC2X3'][ifc.IFCWORKCONTROL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWORKPLAN] = (d: RawLineData) => { return IFC2X3.IfcWorkPlan.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWORKPLAN] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWORKSCHEDULE] = (d: RawLineData) => { return IFC2X3.IfcWorkSchedule.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWORKSCHEDULE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCZONE] = (d: RawLineData) => { return IFC2X3.IfcZone.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCZONE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
];
FromRawLineData['IFC2X3'][ifc.IFC2DCOMPOSITECURVE] = (d: RawLineData) => { return IFC2X3.Ifc2DCompositeCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFC2DCOMPOSITECURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCACTIONREQUEST] = (d: RawLineData) => { return IFC2X3.IfcActionRequest.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCACTIONREQUEST] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAIRTERMINALBOXTYPE] = (d: RawLineData) => { return IFC2X3.IfcAirTerminalBoxType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAIRTERMINALBOXTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAIRTERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcAirTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAIRTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCAIRTOAIRHEATRECOVERYTYPE] = (d: RawLineData) => { return IFC2X3.IfcAirToAirHeatRecoveryType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCAIRTOAIRHEATRECOVERYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCANGULARDIMENSION] = (d: RawLineData) => { return IFC2X3.IfcAngularDimension.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCANGULARDIMENSION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCASSET] = (d: RawLineData) => { return IFC2X3.IfcAsset.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCASSET] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
];
FromRawLineData['IFC2X3'][ifc.IFCBSPLINECURVE] = (d: RawLineData) => { return IFC2X3.IfcBSplineCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBSPLINECURVE] = [ifc.IFCRATIONALBEZIERCURVE,ifc.IFCBEZIERCURVE];
InversePropertyDef['IFC2X3'][ifc.IFCBSPLINECURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBEAMTYPE] = (d: RawLineData) => { return IFC2X3.IfcBeamType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBEAMTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBEZIERCURVE] = (d: RawLineData) => { return IFC2X3.IfcBezierCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBEZIERCURVE] = [ifc.IFCRATIONALBEZIERCURVE];
InversePropertyDef['IFC2X3'][ifc.IFCBEZIERCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBOILERTYPE] = (d: RawLineData) => { return IFC2X3.IfcBoilerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBOILERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGELEMENT] = (d: RawLineData) => { return IFC2X3.IfcBuildingElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBUILDINGELEMENT] = [ifc.IFCBEAM,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLAB,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMN,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART,ifc.IFCBUILDINGELEMENTCOMPONENT];
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGELEMENTCOMPONENT] = (d: RawLineData) => { return IFC2X3.IfcBuildingElementComponent.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCBUILDINGELEMENTCOMPONENT] = [ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCBUILDINGELEMENTPART];
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGELEMENTCOMPONENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGELEMENTPART] = (d: RawLineData) => { return IFC2X3.IfcBuildingElementPart.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGELEMENTPART] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGELEMENTPROXY] = (d: RawLineData) => { return IFC2X3.IfcBuildingElementProxy.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGELEMENTPROXY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBUILDINGELEMENTPROXYTYPE] = (d: RawLineData) => { return IFC2X3.IfcBuildingElementProxyType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBUILDINGELEMENTPROXYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCABLECARRIERFITTINGTYPE] = (d: RawLineData) => { return IFC2X3.IfcCableCarrierFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCABLECARRIERFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCABLECARRIERSEGMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcCableCarrierSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCABLECARRIERSEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCABLESEGMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcCableSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCABLESEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCHILLERTYPE] = (d: RawLineData) => { return IFC2X3.IfcChillerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCHILLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCIRCLE] = (d: RawLineData) => { return IFC2X3.IfcCircle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCIRCLE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOILTYPE] = (d: RawLineData) => { return IFC2X3.IfcCoilType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOILTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOLUMN] = (d: RawLineData) => { return IFC2X3.IfcColumn.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOLUMN] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOMPRESSORTYPE] = (d: RawLineData) => { return IFC2X3.IfcCompressorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOMPRESSORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONDENSERTYPE] = (d: RawLineData) => { return IFC2X3.IfcCondenserType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONDENSERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONDITION] = (d: RawLineData) => { return IFC2X3.IfcCondition.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONDITION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
];
FromRawLineData['IFC2X3'][ifc.IFCCONDITIONCRITERION] = (d: RawLineData) => { return IFC2X3.IfcConditionCriterion.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONDITIONCRITERION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcConstructionEquipmentResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONSTRUCTIONMATERIALRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcConstructionMaterialResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONSTRUCTIONMATERIALRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCONSTRUCTIONPRODUCTRESOURCE] = (d: RawLineData) => { return IFC2X3.IfcConstructionProductResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONSTRUCTIONPRODUCTRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOOLEDBEAMTYPE] = (d: RawLineData) => { return IFC2X3.IfcCooledBeamType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOOLEDBEAMTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOOLINGTOWERTYPE] = (d: RawLineData) => { return IFC2X3.IfcCoolingTowerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOOLINGTOWERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCOVERING] = (d: RawLineData) => { return IFC2X3.IfcCovering.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCOVERING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['CoversSpaces',ifc.IFCRELCOVERSSPACES,5,true],
		['Covers',ifc.IFCRELCOVERSBLDGELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCURTAINWALL] = (d: RawLineData) => { return IFC2X3.IfcCurtainWall.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCURTAINWALL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDAMPERTYPE] = (d: RawLineData) => { return IFC2X3.IfcDamperType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDAMPERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDIAMETERDIMENSION] = (d: RawLineData) => { return IFC2X3.IfcDiameterDimension.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDIAMETERDIMENSION] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['IsRelatedFromCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],
		['IsRelatedToCallout',ifc.IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISCRETEACCESSORY] = (d: RawLineData) => { return IFC2X3.IfcDiscreteAccessory.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDISCRETEACCESSORY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISCRETEACCESSORYTYPE] = (d: RawLineData) => { return IFC2X3.IfcDiscreteAccessoryType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDISCRETEACCESSORYTYPE] = [ifc.IFCVIBRATIONISOLATORTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCDISCRETEACCESSORYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcDistributionChamberElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcDistributionControlElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCSENSORTYPE,ifc.IFCFLOWINSTRUMENTTYPE];
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONELEMENT] = (d: RawLineData) => { return IFC2X3.IfcDistributionElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDISTRIBUTIONELEMENT] = [ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT];
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONFLOWELEMENT] = (d: RawLineData) => { return IFC2X3.IfcDistributionFlowElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCDISTRIBUTIONFLOWELEMENT] = [ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFLOWTERMINAL,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCFLOWSEGMENT,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCFLOWFITTING,ifc.IFCELECTRICDISTRIBUTIONPOINT,ifc.IFCFLOWCONTROLLER,ifc.IFCENERGYCONVERSIONDEVICE];
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONFLOWELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONPORT] = (d: RawLineData) => { return IFC2X3.IfcDistributionPort.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONPORT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedIn',ifc.IFCRELCONNECTSPORTTOELEMENT,4,false],
		['ConnectedFrom',ifc.IFCRELCONNECTSPORTS,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSPORTS,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDOOR] = (d: RawLineData) => { return IFC2X3.IfcDoor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDOOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDUCTFITTINGTYPE] = (d: RawLineData) => { return IFC2X3.IfcDuctFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDUCTFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDUCTSEGMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcDuctSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDUCTSEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDUCTSILENCERTYPE] = (d: RawLineData) => { return IFC2X3.IfcDuctSilencerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDUCTSILENCERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCEDGEFEATURE] = (d: RawLineData) => { return IFC2X3.IfcEdgeFeature.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCEDGEFEATURE] = [ifc.IFCCHAMFEREDGEFEATURE,ifc.IFCROUNDEDEDGEFEATURE];
InversePropertyDef['IFC2X3'][ifc.IFCEDGEFEATURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICAPPLIANCETYPE] = (d: RawLineData) => { return IFC2X3.IfcElectricApplianceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICAPPLIANCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { return IFC2X3.IfcElectricFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICGENERATORTYPE] = (d: RawLineData) => { return IFC2X3.IfcElectricGeneratorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICGENERATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICHEATERTYPE] = (d: RawLineData) => { return IFC2X3.IfcElectricHeaterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICHEATERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICMOTORTYPE] = (d: RawLineData) => { return IFC2X3.IfcElectricMotorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICMOTORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICTIMECONTROLTYPE] = (d: RawLineData) => { return IFC2X3.IfcElectricTimeControlType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICTIMECONTROLTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICALCIRCUIT] = (d: RawLineData) => { return IFC2X3.IfcElectricalCircuit.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICALCIRCUIT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICALELEMENT] = (d: RawLineData) => { return IFC2X3.IfcElectricalElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICALELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCENERGYCONVERSIONDEVICE] = (d: RawLineData) => { return IFC2X3.IfcEnergyConversionDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCENERGYCONVERSIONDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFANTYPE] = (d: RawLineData) => { return IFC2X3.IfcFanType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFANTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFILTERTYPE] = (d: RawLineData) => { return IFC2X3.IfcFilterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFILTERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFIRESUPPRESSIONTERMINALTYPE] = (d: RawLineData) => { return IFC2X3.IfcFireSuppressionTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFIRESUPPRESSIONTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWCONTROLLER] = (d: RawLineData) => { return IFC2X3.IfcFlowController.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCFLOWCONTROLLER] = [ifc.IFCELECTRICDISTRIBUTIONPOINT];
InversePropertyDef['IFC2X3'][ifc.IFCFLOWCONTROLLER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWFITTING] = (d: RawLineData) => { return IFC2X3.IfcFlowFitting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWFITTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWINSTRUMENTTYPE] = (d: RawLineData) => { return IFC2X3.IfcFlowInstrumentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWINSTRUMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWMOVINGDEVICE] = (d: RawLineData) => { return IFC2X3.IfcFlowMovingDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWMOVINGDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWSEGMENT] = (d: RawLineData) => { return IFC2X3.IfcFlowSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWSEGMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWSTORAGEDEVICE] = (d: RawLineData) => { return IFC2X3.IfcFlowStorageDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWSTORAGEDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWTERMINAL] = (d: RawLineData) => { return IFC2X3.IfcFlowTerminal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWTERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFLOWTREATMENTDEVICE] = (d: RawLineData) => { return IFC2X3.IfcFlowTreatmentDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFLOWTREATMENTDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCFOOTING] = (d: RawLineData) => { return IFC2X3.IfcFooting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCFOOTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCMEMBER] = (d: RawLineData) => { return IFC2X3.IfcMember.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPILE] = (d: RawLineData) => { return IFC2X3.IfcPile.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPILE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCPLATE] = (d: RawLineData) => { return IFC2X3.IfcPlate.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCPLATE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRAILING] = (d: RawLineData) => { return IFC2X3.IfcRailing.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRAILING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRAMP] = (d: RawLineData) => { return IFC2X3.IfcRamp.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRAMP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRAMPFLIGHT] = (d: RawLineData) => { return IFC2X3.IfcRampFlight.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRAMPFLIGHT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCRATIONALBEZIERCURVE] = (d: RawLineData) => { return IFC2X3.IfcRationalBezierCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCRATIONALBEZIERCURVE] = [
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREINFORCINGELEMENT] = (d: RawLineData) => { return IFC2X3.IfcReinforcingElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCREINFORCINGELEMENT] = [ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH];
InversePropertyDef['IFC2X3'][ifc.IFCREINFORCINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREINFORCINGMESH] = (d: RawLineData) => { return IFC2X3.IfcReinforcingMesh.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCREINFORCINGMESH] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCROOF] = (d: RawLineData) => { return IFC2X3.IfcRoof.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCROOF] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCROUNDEDEDGEFEATURE] = (d: RawLineData) => { return IFC2X3.IfcRoundedEdgeFeature.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCROUNDEDEDGEFEATURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCSENSORTYPE] = (d: RawLineData) => { return IFC2X3.IfcSensorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSENSORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSLAB] = (d: RawLineData) => { return IFC2X3.IfcSlab.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSLAB] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTAIR] = (d: RawLineData) => { return IFC2X3.IfcStair.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTAIR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTAIRFLIGHT] = (d: RawLineData) => { return IFC2X3.IfcStairFlight.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTAIRFLIGHT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCSTRUCTURALANALYSISMODEL] = (d: RawLineData) => { return IFC2X3.IfcStructuralAnalysisModel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCSTRUCTURALANALYSISMODEL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,false],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTENDON] = (d: RawLineData) => { return IFC2X3.IfcTendon.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTENDON] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCTENDONANCHOR] = (d: RawLineData) => { return IFC2X3.IfcTendonAnchor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCTENDONANCHOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCVIBRATIONISOLATORTYPE] = (d: RawLineData) => { return IFC2X3.IfcVibrationIsolatorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCVIBRATIONISOLATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWALL] = (d: RawLineData) => { return IFC2X3.IfcWall.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC2X3'][ifc.IFCWALL] = [ifc.IFCWALLSTANDARDCASE];
InversePropertyDef['IFC2X3'][ifc.IFCWALL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWALLSTANDARDCASE] = (d: RawLineData) => { return IFC2X3.IfcWallStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWALLSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCWINDOW] = (d: RawLineData) => { return IFC2X3.IfcWindow.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCWINDOW] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCACTUATORTYPE] = (d: RawLineData) => { return IFC2X3.IfcActuatorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCACTUATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCALARMTYPE] = (d: RawLineData) => { return IFC2X3.IfcAlarmType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCALARMTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCBEAM] = (d: RawLineData) => { return IFC2X3.IfcBeam.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCBEAM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCCHAMFEREDGEFEATURE] = (d: RawLineData) => { return IFC2X3.IfcChamferEdgeFeature.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCHAMFEREDGEFEATURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
];
FromRawLineData['IFC2X3'][ifc.IFCCONTROLLERTYPE] = (d: RawLineData) => { return IFC2X3.IfcControllerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCCONTROLLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['ObjectTypeOf',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONCHAMBERELEMENT] = (d: RawLineData) => { return IFC2X3.IfcDistributionChamberElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONCHAMBERELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCDISTRIBUTIONCONTROLELEMENT] = (d: RawLineData) => { return IFC2X3.IfcDistributionControlElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCDISTRIBUTIONCONTROLELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC2X3'][ifc.IFCELECTRICDISTRIBUTIONPOINT] = (d: RawLineData) => { return IFC2X3.IfcElectricDistributionPoint.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCELECTRICDISTRIBUTIONPOINT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC2X3'][ifc.IFCREINFORCINGBAR] = (d: RawLineData) => { return IFC2X3.IfcReinforcingBar.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC2X3'][ifc.IFCREINFORCINGBAR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['IsDecomposedBy',ifc.IFCRELDECOMPOSES,4,true],
		['Decomposes',ifc.IFCRELDECOMPOSES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['HasStructuralMember',ifc.IFCRELCONNECTSSTRUCTURALELEMENT,4,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC4'] = {};
InversePropertyDef['IFC4'] = {};
InheritanceDef['IFC4'] = {};
FromRawLineData['IFC4'][ifc.IFCACTORROLE] = (d: RawLineData) => { return IFC4.IfcActorRole.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCACTORROLE] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCADDRESS] = (d: RawLineData) => { return IFC4.IfcAddress.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCADDRESS] = [ifc.IFCTELECOMADDRESS,ifc.IFCPOSTALADDRESS];
InversePropertyDef['IFC4'][ifc.IFCADDRESS] = [
		['OfPerson',ifc.IFCPERSON,7,true],
		['OfOrganization',ifc.IFCORGANIZATION,4,true],
];
FromRawLineData['IFC4'][ifc.IFCAPPLICATION] = (d: RawLineData) => { return IFC4.IfcApplication.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCAPPLIEDVALUE] = (d: RawLineData) => { return IFC4.IfcAppliedValue.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCAPPLIEDVALUE] = [ifc.IFCCOSTVALUE];
InversePropertyDef['IFC4'][ifc.IFCAPPLIEDVALUE] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCAPPROVAL] = (d: RawLineData) => { return IFC4.IfcApproval.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAPPROVAL] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['ApprovedObjects',ifc.IFCRELASSOCIATESAPPROVAL,5,true],
		['ApprovedResources',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,3,true],
		['IsRelatedWith',ifc.IFCAPPROVALRELATIONSHIP,3,true],
		['Relates',ifc.IFCAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCBOUNDARYCONDITION] = (d: RawLineData) => { return IFC4.IfcBoundaryCondition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBOUNDARYCONDITION] = [ifc.IFCBOUNDARYNODECONDITIONWARPING,ifc.IFCBOUNDARYNODECONDITION,ifc.IFCBOUNDARYFACECONDITION,ifc.IFCBOUNDARYEDGECONDITION];
FromRawLineData['IFC4'][ifc.IFCBOUNDARYEDGECONDITION] = (d: RawLineData) => { return IFC4.IfcBoundaryEdgeCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCBOUNDARYFACECONDITION] = (d: RawLineData) => { return IFC4.IfcBoundaryFaceCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCBOUNDARYNODECONDITION] = (d: RawLineData) => { return IFC4.IfcBoundaryNodeCondition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBOUNDARYNODECONDITION] = [ifc.IFCBOUNDARYNODECONDITIONWARPING];
FromRawLineData['IFC4'][ifc.IFCBOUNDARYNODECONDITIONWARPING] = (d: RawLineData) => { return IFC4.IfcBoundaryNodeConditionWarping.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCONNECTIONGEOMETRY] = (d: RawLineData) => { return IFC4.IfcConnectionGeometry.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONNECTIONGEOMETRY] = [ifc.IFCCONNECTIONCURVEGEOMETRY,ifc.IFCCONNECTIONVOLUMEGEOMETRY,ifc.IFCCONNECTIONSURFACEGEOMETRY,ifc.IFCCONNECTIONPOINTECCENTRICITY,ifc.IFCCONNECTIONPOINTGEOMETRY];
FromRawLineData['IFC4'][ifc.IFCCONNECTIONPOINTGEOMETRY] = (d: RawLineData) => { return IFC4.IfcConnectionPointGeometry.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONNECTIONPOINTGEOMETRY] = [ifc.IFCCONNECTIONPOINTECCENTRICITY];
FromRawLineData['IFC4'][ifc.IFCCONNECTIONSURFACEGEOMETRY] = (d: RawLineData) => { return IFC4.IfcConnectionSurfaceGeometry.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCONNECTIONVOLUMEGEOMETRY] = (d: RawLineData) => { return IFC4.IfcConnectionVolumeGeometry.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCONSTRAINT] = (d: RawLineData) => { return IFC4.IfcConstraint.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONSTRAINT] = [ifc.IFCOBJECTIVE,ifc.IFCMETRIC];
InversePropertyDef['IFC4'][ifc.IFCCONSTRAINT] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PropertiesForConstraint',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCCOORDINATEOPERATION] = (d: RawLineData) => { return IFC4.IfcCoordinateOperation.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOORDINATEOPERATION] = [ifc.IFCMAPCONVERSION];
FromRawLineData['IFC4'][ifc.IFCCOORDINATEREFERENCESYSTEM] = (d: RawLineData) => { return IFC4.IfcCoordinateReferenceSystem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOORDINATEREFERENCESYSTEM] = [ifc.IFCPROJECTEDCRS];
InversePropertyDef['IFC4'][ifc.IFCCOORDINATEREFERENCESYSTEM] = [
		['HasCoordinateOperation',ifc.IFCCOORDINATEOPERATION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCOSTVALUE] = (d: RawLineData) => { return IFC4.IfcCostValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOSTVALUE] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCDERIVEDUNIT] = (d: RawLineData) => { return IFC4.IfcDerivedUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCDERIVEDUNITELEMENT] = (d: RawLineData) => { return IFC4.IfcDerivedUnitElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCDIMENSIONALEXPONENTS] = (d: RawLineData) => { return IFC4.IfcDimensionalExponents.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCEXTERNALINFORMATION] = (d: RawLineData) => { return IFC4.IfcExternalInformation.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCEXTERNALINFORMATION] = [ifc.IFCDOCUMENTINFORMATION,ifc.IFCCLASSIFICATION,ifc.IFCLIBRARYINFORMATION];
FromRawLineData['IFC4'][ifc.IFCEXTERNALREFERENCE] = (d: RawLineData) => { return IFC4.IfcExternalReference.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCEXTERNALREFERENCE] = [ifc.IFCDOCUMENTREFERENCE,ifc.IFCCLASSIFICATIONREFERENCE,ifc.IFCLIBRARYREFERENCE,ifc.IFCEXTERNALLYDEFINEDTEXTFONT,ifc.IFCEXTERNALLYDEFINEDSURFACESTYLE,ifc.IFCEXTERNALLYDEFINEDHATCHSTYLE];
InversePropertyDef['IFC4'][ifc.IFCEXTERNALREFERENCE] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d: RawLineData) => { return IFC4.IfcExternallyDefinedHatchStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEXTERNALLYDEFINEDHATCHSTYLE] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d: RawLineData) => { return IFC4.IfcExternallyDefinedSurfaceStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEXTERNALLYDEFINEDSURFACESTYLE] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTERNALLYDEFINEDTEXTFONT] = (d: RawLineData) => { return IFC4.IfcExternallyDefinedTextFont.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEXTERNALLYDEFINEDTEXTFONT] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCGRIDAXIS] = (d: RawLineData) => { return IFC4.IfcGridAxis.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGRIDAXIS] = [
		['PartOfW',ifc.IFCGRID,9,true],
		['PartOfV',ifc.IFCGRID,8,true],
		['PartOfU',ifc.IFCGRID,7,true],
		['HasIntersections',ifc.IFCVIRTUALGRIDINTERSECTION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCIRREGULARTIMESERIESVALUE] = (d: RawLineData) => { return IFC4.IfcIrregularTimeSeriesValue.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCLIBRARYINFORMATION] = (d: RawLineData) => { return IFC4.IfcLibraryInformation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIBRARYINFORMATION] = [
		['LibraryInfoForObjects',ifc.IFCRELASSOCIATESLIBRARY,5,true],
		['HasLibraryReferences',ifc.IFCLIBRARYREFERENCE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCLIBRARYREFERENCE] = (d: RawLineData) => { return IFC4.IfcLibraryReference.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIBRARYREFERENCE] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
		['LibraryRefForObjects',ifc.IFCRELASSOCIATESLIBRARY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTDISTRIBUTIONDATA] = (d: RawLineData) => { return IFC4.IfcLightDistributionData.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCLIGHTINTENSITYDISTRIBUTION] = (d: RawLineData) => { return IFC4.IfcLightIntensityDistribution.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMAPCONVERSION] = (d: RawLineData) => { return IFC4.IfcMapConversion.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcMaterialClassificationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMATERIALDEFINITION] = (d: RawLineData) => { return IFC4.IfcMaterialDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMATERIALDEFINITION] = [ifc.IFCMATERIALCONSTITUENTSET,ifc.IFCMATERIALCONSTITUENT,ifc.IFCMATERIAL,ifc.IFCMATERIALPROFILESET,ifc.IFCMATERIALPROFILEWITHOFFSETS,ifc.IFCMATERIALPROFILE,ifc.IFCMATERIALLAYERSET,ifc.IFCMATERIALLAYERWITHOFFSETS,ifc.IFCMATERIALLAYER];
InversePropertyDef['IFC4'][ifc.IFCMATERIALDEFINITION] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALLAYER] = (d: RawLineData) => { return IFC4.IfcMaterialLayer.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMATERIALLAYER] = [ifc.IFCMATERIALLAYERWITHOFFSETS];
InversePropertyDef['IFC4'][ifc.IFCMATERIALLAYER] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
		['ToMaterialLayerSet',ifc.IFCMATERIALLAYERSET,0,false],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALLAYERSET] = (d: RawLineData) => { return IFC4.IfcMaterialLayerSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALLAYERSET] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALLAYERWITHOFFSETS] = (d: RawLineData) => { return IFC4.IfcMaterialLayerWithOffsets.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALLAYERWITHOFFSETS] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
		['ToMaterialLayerSet',ifc.IFCMATERIALLAYERSET,0,false],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALLIST] = (d: RawLineData) => { return IFC4.IfcMaterialList.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMATERIALPROFILE] = (d: RawLineData) => { return IFC4.IfcMaterialProfile.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMATERIALPROFILE] = [ifc.IFCMATERIALPROFILEWITHOFFSETS];
InversePropertyDef['IFC4'][ifc.IFCMATERIALPROFILE] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
		['ToMaterialProfileSet',ifc.IFCMATERIALPROFILESET,2,false],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALPROFILESET] = (d: RawLineData) => { return IFC4.IfcMaterialProfileSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALPROFILESET] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALPROFILEWITHOFFSETS] = (d: RawLineData) => { return IFC4.IfcMaterialProfileWithOffsets.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALPROFILEWITHOFFSETS] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
		['ToMaterialProfileSet',ifc.IFCMATERIALPROFILESET,2,false],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALUSAGEDEFINITION] = (d: RawLineData) => { return IFC4.IfcMaterialUsageDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMATERIALUSAGEDEFINITION] = [ifc.IFCMATERIALPROFILESETUSAGETAPERING,ifc.IFCMATERIALPROFILESETUSAGE,ifc.IFCMATERIALLAYERSETUSAGE];
InversePropertyDef['IFC4'][ifc.IFCMATERIALUSAGEDEFINITION] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
];
FromRawLineData['IFC4'][ifc.IFCMEASUREWITHUNIT] = (d: RawLineData) => { return IFC4.IfcMeasureWithUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMETRIC] = (d: RawLineData) => { return IFC4.IfcMetric.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMETRIC] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PropertiesForConstraint',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCMONETARYUNIT] = (d: RawLineData) => { return IFC4.IfcMonetaryUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCNAMEDUNIT] = (d: RawLineData) => { return IFC4.IfcNamedUnit.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCNAMEDUNIT] = [ifc.IFCCONVERSIONBASEDUNITWITHOFFSET,ifc.IFCCONVERSIONBASEDUNIT,ifc.IFCCONTEXTDEPENDENTUNIT,ifc.IFCSIUNIT];
FromRawLineData['IFC4'][ifc.IFCOBJECTPLACEMENT] = (d: RawLineData) => { return IFC4.IfcObjectPlacement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCOBJECTPLACEMENT] = [ifc.IFCLOCALPLACEMENT,ifc.IFCGRIDPLACEMENT];
InversePropertyDef['IFC4'][ifc.IFCOBJECTPLACEMENT] = [
		['PlacesObject',ifc.IFCPRODUCT,5,true],
		['ReferencedByPlacements',ifc.IFCLOCALPLACEMENT,0,true],
];
FromRawLineData['IFC4'][ifc.IFCOBJECTIVE] = (d: RawLineData) => { return IFC4.IfcObjective.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOBJECTIVE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PropertiesForConstraint',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCORGANIZATION] = (d: RawLineData) => { return IFC4.IfcOrganization.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCORGANIZATION] = [
		['IsRelatedBy',ifc.IFCORGANIZATIONRELATIONSHIP,3,true],
		['Relates',ifc.IFCORGANIZATIONRELATIONSHIP,2,true],
		['Engages',ifc.IFCPERSONANDORGANIZATION,1,true],
];
FromRawLineData['IFC4'][ifc.IFCOWNERHISTORY] = (d: RawLineData) => { return IFC4.IfcOwnerHistory.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCPERSON] = (d: RawLineData) => { return IFC4.IfcPerson.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPERSON] = [
		['EngagedIn',ifc.IFCPERSONANDORGANIZATION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPERSONANDORGANIZATION] = (d: RawLineData) => { return IFC4.IfcPersonAndOrganization.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCPHYSICALQUANTITY] = (d: RawLineData) => { return IFC4.IfcPhysicalQuantity.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPHYSICALQUANTITY] = [ifc.IFCPHYSICALCOMPLEXQUANTITY,ifc.IFCQUANTITYWEIGHT,ifc.IFCQUANTITYVOLUME,ifc.IFCQUANTITYTIME,ifc.IFCQUANTITYLENGTH,ifc.IFCQUANTITYCOUNT,ifc.IFCQUANTITYAREA,ifc.IFCPHYSICALSIMPLEQUANTITY];
InversePropertyDef['IFC4'][ifc.IFCPHYSICALQUANTITY] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPHYSICALSIMPLEQUANTITY] = (d: RawLineData) => { return IFC4.IfcPhysicalSimpleQuantity.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPHYSICALSIMPLEQUANTITY] = [ifc.IFCQUANTITYWEIGHT,ifc.IFCQUANTITYVOLUME,ifc.IFCQUANTITYTIME,ifc.IFCQUANTITYLENGTH,ifc.IFCQUANTITYCOUNT,ifc.IFCQUANTITYAREA];
InversePropertyDef['IFC4'][ifc.IFCPHYSICALSIMPLEQUANTITY] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPOSTALADDRESS] = (d: RawLineData) => { return IFC4.IfcPostalAddress.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOSTALADDRESS] = [
		['OfPerson',ifc.IFCPERSON,7,true],
		['OfOrganization',ifc.IFCORGANIZATION,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPRESENTATIONITEM] = (d: RawLineData) => { return IFC4.IfcPresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPRESENTATIONITEM] = [ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT,ifc.IFCPREDEFINEDCURVEFONT,ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR,ifc.IFCPREDEFINEDCOLOUR,ifc.IFCTEXTSTYLEFONTMODEL,ifc.IFCPREDEFINEDTEXTFONT,ifc.IFCPREDEFINEDITEM,ifc.IFCINDEXEDCOLOURMAP,ifc.IFCCURVESTYLEFONTPATTERN,ifc.IFCCURVESTYLEFONTANDSCALING,ifc.IFCCURVESTYLEFONT,ifc.IFCCOLOURRGB,ifc.IFCCOLOURSPECIFICATION,ifc.IFCCOLOURRGBLIST,ifc.IFCTEXTUREVERTEXLIST,ifc.IFCTEXTUREVERTEX,ifc.IFCINDEXEDTRIANGLETEXTUREMAP,ifc.IFCINDEXEDTEXTUREMAP,ifc.IFCTEXTUREMAP,ifc.IFCTEXTURECOORDINATEGENERATOR,ifc.IFCTEXTURECOORDINATE,ifc.IFCTEXTSTYLETEXTMODEL,ifc.IFCTEXTSTYLEFORDEFINEDFONT,ifc.IFCPIXELTEXTURE,ifc.IFCIMAGETEXTURE,ifc.IFCBLOBTEXTURE,ifc.IFCSURFACETEXTURE,ifc.IFCSURFACESTYLEWITHTEXTURES,ifc.IFCSURFACESTYLERENDERING,ifc.IFCSURFACESTYLESHADING,ifc.IFCSURFACESTYLEREFRACTION,ifc.IFCSURFACESTYLELIGHTING];
FromRawLineData['IFC4'][ifc.IFCPRESENTATIONLAYERASSIGNMENT] = (d: RawLineData) => { return IFC4.IfcPresentationLayerAssignment.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPRESENTATIONLAYERASSIGNMENT] = [ifc.IFCPRESENTATIONLAYERWITHSTYLE];
FromRawLineData['IFC4'][ifc.IFCPRESENTATIONLAYERWITHSTYLE] = (d: RawLineData) => { return IFC4.IfcPresentationLayerWithStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCPRESENTATIONSTYLE] = (d: RawLineData) => { return IFC4.IfcPresentationStyle.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPRESENTATIONSTYLE] = [ifc.IFCFILLAREASTYLE,ifc.IFCCURVESTYLE,ifc.IFCTEXTSTYLE,ifc.IFCSURFACESTYLE];
FromRawLineData['IFC4'][ifc.IFCPRESENTATIONSTYLEASSIGNMENT] = (d: RawLineData) => { return IFC4.IfcPresentationStyleAssignment.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCPRODUCTREPRESENTATION] = (d: RawLineData) => { return IFC4.IfcProductRepresentation.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPRODUCTREPRESENTATION] = [ifc.IFCPRODUCTDEFINITIONSHAPE,ifc.IFCMATERIALDEFINITIONREPRESENTATION];
FromRawLineData['IFC4'][ifc.IFCPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROFILEDEF] = [ifc.IFCLSHAPEPROFILEDEF,ifc.IFCISHAPEPROFILEDEF,ifc.IFCELLIPSEPROFILEDEF,ifc.IFCCIRCLEHOLLOWPROFILEDEF,ifc.IFCCIRCLEPROFILEDEF,ifc.IFCCSHAPEPROFILEDEF,ifc.IFCASYMMETRICISHAPEPROFILEDEF,ifc.IFCZSHAPEPROFILEDEF,ifc.IFCUSHAPEPROFILEDEF,ifc.IFCTRAPEZIUMPROFILEDEF,ifc.IFCTSHAPEPROFILEDEF,ifc.IFCRECTANGLEHOLLOWPROFILEDEF,ifc.IFCROUNDEDRECTANGLEPROFILEDEF,ifc.IFCRECTANGLEPROFILEDEF,ifc.IFCPARAMETERIZEDPROFILEDEF,ifc.IFCMIRROREDPROFILEDEF,ifc.IFCDERIVEDPROFILEDEF,ifc.IFCCOMPOSITEPROFILEDEF,ifc.IFCCENTERLINEPROFILEDEF,ifc.IFCARBITRARYOPENPROFILEDEF,ifc.IFCARBITRARYPROFILEDEFWITHVOIDS,ifc.IFCARBITRARYCLOSEDPROFILEDEF];
InversePropertyDef['IFC4'][ifc.IFCPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCPROJECTEDCRS] = (d: RawLineData) => { return IFC4.IfcProjectedCRS.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROJECTEDCRS] = [
		['HasCoordinateOperation',ifc.IFCCOORDINATEOPERATION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYABSTRACTION] = (d: RawLineData) => { return IFC4.IfcPropertyAbstraction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROPERTYABSTRACTION] = [ifc.IFCCOMPLEXPROPERTY,ifc.IFCPROPERTYTABLEVALUE,ifc.IFCPROPERTYSINGLEVALUE,ifc.IFCPROPERTYREFERENCEVALUE,ifc.IFCPROPERTYLISTVALUE,ifc.IFCPROPERTYENUMERATEDVALUE,ifc.IFCPROPERTYBOUNDEDVALUE,ifc.IFCSIMPLEPROPERTY,ifc.IFCPROPERTY,ifc.IFCSECTIONREINFORCEMENTPROPERTIES,ifc.IFCSECTIONPROPERTIES,ifc.IFCREINFORCEMENTBARPROPERTIES,ifc.IFCPREDEFINEDPROPERTIES,ifc.IFCPROFILEPROPERTIES,ifc.IFCMATERIALPROPERTIES,ifc.IFCEXTENDEDPROPERTIES,ifc.IFCPROPERTYENUMERATION];
InversePropertyDef['IFC4'][ifc.IFCPROPERTYABSTRACTION] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYENUMERATION] = (d: RawLineData) => { return IFC4.IfcPropertyEnumeration.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYENUMERATION] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYAREA] = (d: RawLineData) => { return IFC4.IfcQuantityArea.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCQUANTITYAREA] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYCOUNT] = (d: RawLineData) => { return IFC4.IfcQuantityCount.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCQUANTITYCOUNT] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYLENGTH] = (d: RawLineData) => { return IFC4.IfcQuantityLength.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCQUANTITYLENGTH] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYTIME] = (d: RawLineData) => { return IFC4.IfcQuantityTime.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCQUANTITYTIME] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYVOLUME] = (d: RawLineData) => { return IFC4.IfcQuantityVolume.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCQUANTITYVOLUME] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYWEIGHT] = (d: RawLineData) => { return IFC4.IfcQuantityWeight.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCQUANTITYWEIGHT] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCRECURRENCEPATTERN] = (d: RawLineData) => { return IFC4.IfcRecurrencePattern.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCREFERENCE] = (d: RawLineData) => { return IFC4.IfcReference.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCREPRESENTATION] = (d: RawLineData) => { return IFC4.IfcRepresentation.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCREPRESENTATION] = [ifc.IFCSTYLEDREPRESENTATION,ifc.IFCSTYLEMODEL,ifc.IFCTOPOLOGYREPRESENTATION,ifc.IFCSHAPEREPRESENTATION,ifc.IFCSHAPEMODEL];
InversePropertyDef['IFC4'][ifc.IFCREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
];
FromRawLineData['IFC4'][ifc.IFCREPRESENTATIONCONTEXT] = (d: RawLineData) => { return IFC4.IfcRepresentationContext.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCREPRESENTATIONCONTEXT] = [ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT,ifc.IFCGEOMETRICREPRESENTATIONCONTEXT];
InversePropertyDef['IFC4'][ifc.IFCREPRESENTATIONCONTEXT] = [
		['RepresentationsInContext',ifc.IFCREPRESENTATION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCREPRESENTATIONITEM] = (d: RawLineData) => { return IFC4.IfcRepresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCREPRESENTATIONITEM] = [ifc.IFCMAPPEDITEM,ifc.IFCFILLAREASTYLETILES,ifc.IFCFILLAREASTYLEHATCHING,ifc.IFCFACEBASEDSURFACEMODEL,ifc.IFCDIRECTION,ifc.IFCCIRCLE,ifc.IFCELLIPSE,ifc.IFCCONIC,ifc.IFCRATIONALBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFCINDEXEDPOLYCURVE,ifc.IFCOUTERBOUNDARYCURVE,ifc.IFCBOUNDARYCURVE,ifc.IFCCOMPOSITECURVEONSURFACE,ifc.IFCCOMPOSITECURVE,ifc.IFCBOUNDEDCURVE,ifc.IFCSEAMCURVE,ifc.IFCINTERSECTIONCURVE,ifc.IFCSURFACECURVE,ifc.IFCPCURVE,ifc.IFCOFFSETCURVE3D,ifc.IFCOFFSETCURVE2D,ifc.IFCLINE,ifc.IFCCURVE,ifc.IFCBLOCK,ifc.IFCSPHERE,ifc.IFCRIGHTCIRCULARCYLINDER,ifc.IFCRIGHTCIRCULARCONE,ifc.IFCRECTANGULARPYRAMID,ifc.IFCCSGPRIMITIVE3D,ifc.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,ifc.IFCCOMPOSITECURVESEGMENT,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR,ifc.IFCCARTESIANPOINTLIST3D,ifc.IFCCARTESIANPOINTLIST2D,ifc.IFCCARTESIANPOINTLIST,ifc.IFCBOUNDINGBOX,ifc.IFCBOOLEANCLIPPINGRESULT,ifc.IFCBOOLEANRESULT,ifc.IFCANNOTATIONFILLAREA,ifc.IFCVECTOR,ifc.IFCTEXTLITERALWITHEXTENT,ifc.IFCTEXTLITERAL,ifc.IFCPOLYGONALFACESET,ifc.IFCTRIANGULATEDFACESET,ifc.IFCTESSELLATEDFACESET,ifc.IFCINDEXEDPOLYGONALFACEWITHVOIDS,ifc.IFCINDEXEDPOLYGONALFACE,ifc.IFCTESSELLATEDITEM,ifc.IFCCYLINDRICALSURFACE,ifc.IFCTOROIDALSURFACE,ifc.IFCSPHERICALSURFACE,ifc.IFCPLANE,ifc.IFCELEMENTARYSURFACE,ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE,ifc.IFCBOUNDEDSURFACE,ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION,ifc.IFCSWEPTSURFACE,ifc.IFCSURFACE,ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCADVANCEDBREPWITHVOIDS,ifc.IFCADVANCEDBREP,ifc.IFCMANIFOLDSOLIDBREP,ifc.IFCCSGSOLID,ifc.IFCSWEPTDISKSOLIDPOLYGONAL,ifc.IFCSWEPTDISKSOLID,ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLIDTAPERED,ifc.IFCREVOLVEDAREASOLID,ifc.IFCFIXEDREFERENCESWEPTAREASOLID,ifc.IFCEXTRUDEDAREASOLIDTAPERED,ifc.IFCEXTRUDEDAREASOLID,ifc.IFCSWEPTAREASOLID,ifc.IFCSOLIDMODEL,ifc.IFCSHELLBASEDSURFACEMODEL,ifc.IFCSECTIONEDSPINE,ifc.IFCCARTESIANPOINT,ifc.IFCPOINTONSURFACE,ifc.IFCPOINTONCURVE,ifc.IFCPOINT,ifc.IFCPLANARBOX,ifc.IFCPLANAREXTENT,ifc.IFCAXIS2PLACEMENT3D,ifc.IFCAXIS2PLACEMENT2D,ifc.IFCAXIS1PLACEMENT,ifc.IFCPLACEMENT,ifc.IFCLIGHTSOURCESPOT,ifc.IFCLIGHTSOURCEPOSITIONAL,ifc.IFCLIGHTSOURCEGONIOMETRIC,ifc.IFCLIGHTSOURCEDIRECTIONAL,ifc.IFCLIGHTSOURCEAMBIENT,ifc.IFCLIGHTSOURCE,ifc.IFCBOXEDHALFSPACE,ifc.IFCPOLYGONALBOUNDEDHALFSPACE,ifc.IFCHALFSPACESOLID,ifc.IFCGEOMETRICCURVESET,ifc.IFCGEOMETRICSET,ifc.IFCGEOMETRICREPRESENTATIONITEM,ifc.IFCPATH,ifc.IFCEDGELOOP,ifc.IFCVERTEXLOOP,ifc.IFCPOLYLOOP,ifc.IFCLOOP,ifc.IFCFACEOUTERBOUND,ifc.IFCFACEBOUND,ifc.IFCADVANCEDFACE,ifc.IFCFACESURFACE,ifc.IFCFACE,ifc.IFCSUBEDGE,ifc.IFCORIENTEDEDGE,ifc.IFCEDGECURVE,ifc.IFCEDGE,ifc.IFCCLOSEDSHELL,ifc.IFCOPENSHELL,ifc.IFCCONNECTEDFACESET,ifc.IFCVERTEXPOINT,ifc.IFCVERTEX,ifc.IFCTOPOLOGICALREPRESENTATIONITEM,ifc.IFCSTYLEDITEM];
InversePropertyDef['IFC4'][ifc.IFCREPRESENTATIONITEM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCREPRESENTATIONMAP] = (d: RawLineData) => { return IFC4.IfcRepresentationMap.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREPRESENTATIONMAP] = [
		['HasShapeAspects',ifc.IFCSHAPEASPECT,4,true],
		['MapUsage',ifc.IFCMAPPEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCRESOURCELEVELRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcResourceLevelRelationship.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRESOURCELEVELRELATIONSHIP] = [ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,ifc.IFCRESOURCEAPPROVALRELATIONSHIP,ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,ifc.IFCORGANIZATIONRELATIONSHIP,ifc.IFCMATERIALRELATIONSHIP,ifc.IFCEXTERNALREFERENCERELATIONSHIP,ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP,ifc.IFCCURRENCYRELATIONSHIP,ifc.IFCAPPROVALRELATIONSHIP];
FromRawLineData['IFC4'][ifc.IFCROOT] = (d: RawLineData) => { return IFC4.IfcRoot.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCROOT] = [ifc.IFCRELDEFINESBYTYPE,ifc.IFCRELDEFINESBYTEMPLATE,ifc.IFCRELDEFINESBYPROPERTIES,ifc.IFCRELDEFINESBYOBJECT,ifc.IFCRELDEFINES,ifc.IFCRELAGGREGATES,ifc.IFCRELVOIDSELEMENT,ifc.IFCRELPROJECTSELEMENT,ifc.IFCRELNESTS,ifc.IFCRELDECOMPOSES,ifc.IFCRELDECLARES,ifc.IFCRELSPACEBOUNDARY2NDLEVEL,ifc.IFCRELSPACEBOUNDARY1STLEVEL,ifc.IFCRELSPACEBOUNDARY,ifc.IFCRELSERVICESBUILDINGS,ifc.IFCRELSEQUENCE,ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,ifc.IFCRELINTERFERESELEMENTS,ifc.IFCRELFLOWCONTROLELEMENTS,ifc.IFCRELFILLSELEMENT,ifc.IFCRELCOVERSSPACES,ifc.IFCRELCOVERSBLDGELEMENTS,ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,ifc.IFCRELCONNECTSWITHECCENTRICITY,ifc.IFCRELCONNECTSSTRUCTURALMEMBER,ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,ifc.IFCRELCONNECTSPORTS,ifc.IFCRELCONNECTSPORTTOELEMENT,ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS,ifc.IFCRELCONNECTSELEMENTS,ifc.IFCRELCONNECTS,ifc.IFCRELASSOCIATESMATERIAL,ifc.IFCRELASSOCIATESLIBRARY,ifc.IFCRELASSOCIATESDOCUMENT,ifc.IFCRELASSOCIATESCONSTRAINT,ifc.IFCRELASSOCIATESCLASSIFICATION,ifc.IFCRELASSOCIATESAPPROVAL,ifc.IFCRELASSOCIATES,ifc.IFCRELASSIGNSTORESOURCE,ifc.IFCRELASSIGNSTOPRODUCT,ifc.IFCRELASSIGNSTOPROCESS,ifc.IFCRELASSIGNSTOGROUPBYFACTOR,ifc.IFCRELASSIGNSTOGROUP,ifc.IFCRELASSIGNSTOCONTROL,ifc.IFCRELASSIGNSTOACTOR,ifc.IFCRELASSIGNS,ifc.IFCRELATIONSHIP,ifc.IFCCOMPLEXPROPERTYTEMPLATE,ifc.IFCSIMPLEPROPERTYTEMPLATE,ifc.IFCPROPERTYTEMPLATE,ifc.IFCPROPERTYSETTEMPLATE,ifc.IFCPROPERTYTEMPLATEDEFINITION,ifc.IFCPROPERTYSET,ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES,ifc.IFCPREDEFINEDPROPERTYSET,ifc.IFCELEMENTQUANTITY,ifc.IFCQUANTITYSET,ifc.IFCPROPERTYSETDEFINITION,ifc.IFCPROPERTYDEFINITION,ifc.IFCASSET,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCDISTRIBUTIONCIRCUIT,ifc.IFCDISTRIBUTIONSYSTEM,ifc.IFCBUILDINGSYSTEM,ifc.IFCZONE,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADCASE,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY,ifc.IFCGROUP,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCWORKCALENDAR,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM,ifc.IFCCONTROL,ifc.IFCOCCUPANT,ifc.IFCACTOR,ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE,ifc.IFCRESOURCE,ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCCIVILELEMENT,ifc.IFCBEAMSTANDARDCASE,ifc.IFCBEAM,ifc.IFCWINDOWSTANDARDCASE,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE,ifc.IFCSLAB,ifc.IFCSHADINGDEVICE,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATESTANDARDCASE,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBERSTANDARDCASE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOORSTANDARDCASE,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMNSTANDARDCASE,ifc.IFCCOLUMN,ifc.IFCCHIMNEY,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCGEOGRAPHICELEMENT,ifc.IFCSYSTEMFURNITUREELEMENT,ifc.IFCFURNITURE,ifc.IFCFURNISHINGELEMENT,ifc.IFCSURFACEFEATURE,ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCBUILDINGELEMENTPART,ifc.IFCVIBRATIONISOLATOR,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALSURFACEACTION,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALCURVEACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALCURVEREACTION,ifc.IFCSTRUCTURALSURFACEREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCEXTERNALSPATIALELEMENT,ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALZONE,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALELEMENT,ifc.IFCPROXY,ifc.IFCPRODUCT,ifc.IFCPROCEDURE,ifc.IFCEVENT,ifc.IFCTASK,ifc.IFCPROCESS,ifc.IFCOBJECT,ifc.IFCPROJECTLIBRARY,ifc.IFCPROJECT,ifc.IFCCONTEXT,ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE,ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,ifc.IFCSUBCONTRACTRESOURCETYPE,ifc.IFCLABORRESOURCETYPE,ifc.IFCCREWRESOURCETYPE,ifc.IFCCONSTRUCTIONRESOURCETYPE,ifc.IFCTYPERESOURCE,ifc.IFCSPATIALZONETYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSPATIALELEMENTTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCBUILDINGELEMENTPARTTYPE,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE,ifc.IFCREINFORCINGELEMENTTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCELEMENTASSEMBLYTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCCIVILELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWINDOWTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCSHADINGDEVICETYPE,ifc.IFCROOFTYPE,ifc.IFCRAMPTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCPILETYPE,ifc.IFCMEMBERTYPE,ifc.IFCFOOTINGTYPE,ifc.IFCDOORTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCCHIMNEYTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCGEOGRAPHICELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE,ifc.IFCTYPEPRODUCT,ifc.IFCTASKTYPE,ifc.IFCPROCEDURETYPE,ifc.IFCEVENTTYPE,ifc.IFCTYPEPROCESS,ifc.IFCTYPEOBJECT,ifc.IFCOBJECTDEFINITION];
FromRawLineData['IFC4'][ifc.IFCSIUNIT] = (d: RawLineData) => { return IFC4.IfcSIUnit.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSCHEDULINGTIME] = (d: RawLineData) => { return IFC4.IfcSchedulingTime.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSCHEDULINGTIME] = [ifc.IFCRESOURCETIME,ifc.IFCLAGTIME,ifc.IFCEVENTTIME,ifc.IFCWORKTIME,ifc.IFCTASKTIMERECURRING,ifc.IFCTASKTIME];
FromRawLineData['IFC4'][ifc.IFCSHAPEASPECT] = (d: RawLineData) => { return IFC4.IfcShapeAspect.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSHAPEMODEL] = (d: RawLineData) => { return IFC4.IfcShapeModel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSHAPEMODEL] = [ifc.IFCTOPOLOGYREPRESENTATION,ifc.IFCSHAPEREPRESENTATION];
InversePropertyDef['IFC4'][ifc.IFCSHAPEMODEL] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
		['OfShapeAspect',ifc.IFCSHAPEASPECT,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSHAPEREPRESENTATION] = (d: RawLineData) => { return IFC4.IfcShapeRepresentation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSHAPEREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
		['OfShapeAspect',ifc.IFCSHAPEASPECT,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCONNECTIONCONDITION] = (d: RawLineData) => { return IFC4.IfcStructuralConnectionCondition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALCONNECTIONCONDITION] = [ifc.IFCSLIPPAGECONNECTIONCONDITION,ifc.IFCFAILURECONNECTIONCONDITION];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOAD] = (d: RawLineData) => { return IFC4.IfcStructuralLoad.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALLOAD] = [ifc.IFCSURFACEREINFORCEMENTAREA,ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING,ifc.IFCSTRUCTURALLOADSINGLEFORCE,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT,ifc.IFCSTRUCTURALLOADPLANARFORCE,ifc.IFCSTRUCTURALLOADLINEARFORCE,ifc.IFCSTRUCTURALLOADTEMPERATURE,ifc.IFCSTRUCTURALLOADSTATIC,ifc.IFCSTRUCTURALLOADORRESULT,ifc.IFCSTRUCTURALLOADCONFIGURATION];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADCONFIGURATION] = (d: RawLineData) => { return IFC4.IfcStructuralLoadConfiguration.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADORRESULT] = (d: RawLineData) => { return IFC4.IfcStructuralLoadOrResult.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALLOADORRESULT] = [ifc.IFCSURFACEREINFORCEMENTAREA,ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING,ifc.IFCSTRUCTURALLOADSINGLEFORCE,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT,ifc.IFCSTRUCTURALLOADPLANARFORCE,ifc.IFCSTRUCTURALLOADLINEARFORCE,ifc.IFCSTRUCTURALLOADTEMPERATURE,ifc.IFCSTRUCTURALLOADSTATIC];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADSTATIC] = (d: RawLineData) => { return IFC4.IfcStructuralLoadStatic.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALLOADSTATIC] = [ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING,ifc.IFCSTRUCTURALLOADSINGLEFORCE,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT,ifc.IFCSTRUCTURALLOADPLANARFORCE,ifc.IFCSTRUCTURALLOADLINEARFORCE,ifc.IFCSTRUCTURALLOADTEMPERATURE];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADTEMPERATURE] = (d: RawLineData) => { return IFC4.IfcStructuralLoadTemperature.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSTYLEMODEL] = (d: RawLineData) => { return IFC4.IfcStyleModel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTYLEMODEL] = [ifc.IFCSTYLEDREPRESENTATION];
InversePropertyDef['IFC4'][ifc.IFCSTYLEMODEL] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
];
FromRawLineData['IFC4'][ifc.IFCSTYLEDITEM] = (d: RawLineData) => { return IFC4.IfcStyledItem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTYLEDITEM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSTYLEDREPRESENTATION] = (d: RawLineData) => { return IFC4.IfcStyledRepresentation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTYLEDREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACEREINFORCEMENTAREA] = (d: RawLineData) => { return IFC4.IfcSurfaceReinforcementArea.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSURFACESTYLE] = (d: RawLineData) => { return IFC4.IfcSurfaceStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSURFACESTYLELIGHTING] = (d: RawLineData) => { return IFC4.IfcSurfaceStyleLighting.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSURFACESTYLEREFRACTION] = (d: RawLineData) => { return IFC4.IfcSurfaceStyleRefraction.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSURFACESTYLESHADING] = (d: RawLineData) => { return IFC4.IfcSurfaceStyleShading.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSURFACESTYLESHADING] = [ifc.IFCSURFACESTYLERENDERING];
FromRawLineData['IFC4'][ifc.IFCSURFACESTYLEWITHTEXTURES] = (d: RawLineData) => { return IFC4.IfcSurfaceStyleWithTextures.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSURFACETEXTURE] = (d: RawLineData) => { return IFC4.IfcSurfaceTexture.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSURFACETEXTURE] = [ifc.IFCPIXELTEXTURE,ifc.IFCIMAGETEXTURE,ifc.IFCBLOBTEXTURE];
InversePropertyDef['IFC4'][ifc.IFCSURFACETEXTURE] = [
		['IsMappedBy',ifc.IFCTEXTURECOORDINATE,0,true],
		['UsedInStyles',ifc.IFCSURFACESTYLEWITHTEXTURES,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTABLE] = (d: RawLineData) => { return IFC4.IfcTable.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTABLECOLUMN] = (d: RawLineData) => { return IFC4.IfcTableColumn.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTABLEROW] = (d: RawLineData) => { return IFC4.IfcTableRow.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTASKTIME] = (d: RawLineData) => { return IFC4.IfcTaskTime.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTASKTIME] = [ifc.IFCTASKTIMERECURRING];
FromRawLineData['IFC4'][ifc.IFCTASKTIMERECURRING] = (d: RawLineData) => { return IFC4.IfcTaskTimeRecurring.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTELECOMADDRESS] = (d: RawLineData) => { return IFC4.IfcTelecomAddress.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTELECOMADDRESS] = [
		['OfPerson',ifc.IFCPERSON,7,true],
		['OfOrganization',ifc.IFCORGANIZATION,4,true],
];
FromRawLineData['IFC4'][ifc.IFCTEXTSTYLE] = (d: RawLineData) => { return IFC4.IfcTextStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTEXTSTYLEFORDEFINEDFONT] = (d: RawLineData) => { return IFC4.IfcTextStyleForDefinedFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTEXTSTYLETEXTMODEL] = (d: RawLineData) => { return IFC4.IfcTextStyleTextModel.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTEXTURECOORDINATE] = (d: RawLineData) => { return IFC4.IfcTextureCoordinate.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTEXTURECOORDINATE] = [ifc.IFCINDEXEDTRIANGLETEXTUREMAP,ifc.IFCINDEXEDTEXTUREMAP,ifc.IFCTEXTUREMAP,ifc.IFCTEXTURECOORDINATEGENERATOR];
FromRawLineData['IFC4'][ifc.IFCTEXTURECOORDINATEGENERATOR] = (d: RawLineData) => { return IFC4.IfcTextureCoordinateGenerator.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTEXTUREMAP] = (d: RawLineData) => { return IFC4.IfcTextureMap.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTEXTUREVERTEX] = (d: RawLineData) => { return IFC4.IfcTextureVertex.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTEXTUREVERTEXLIST] = (d: RawLineData) => { return IFC4.IfcTextureVertexList.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTIMEPERIOD] = (d: RawLineData) => { return IFC4.IfcTimePeriod.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTIMESERIES] = (d: RawLineData) => { return IFC4.IfcTimeSeries.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTIMESERIES] = [ifc.IFCREGULARTIMESERIES,ifc.IFCIRREGULARTIMESERIES];
InversePropertyDef['IFC4'][ifc.IFCTIMESERIES] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCTIMESERIESVALUE] = (d: RawLineData) => { return IFC4.IfcTimeSeriesValue.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTOPOLOGICALREPRESENTATIONITEM] = (d: RawLineData) => { return IFC4.IfcTopologicalRepresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTOPOLOGICALREPRESENTATIONITEM] = [ifc.IFCPATH,ifc.IFCEDGELOOP,ifc.IFCVERTEXLOOP,ifc.IFCPOLYLOOP,ifc.IFCLOOP,ifc.IFCFACEOUTERBOUND,ifc.IFCFACEBOUND,ifc.IFCADVANCEDFACE,ifc.IFCFACESURFACE,ifc.IFCFACE,ifc.IFCSUBEDGE,ifc.IFCORIENTEDEDGE,ifc.IFCEDGECURVE,ifc.IFCEDGE,ifc.IFCCLOSEDSHELL,ifc.IFCOPENSHELL,ifc.IFCCONNECTEDFACESET,ifc.IFCVERTEXPOINT,ifc.IFCVERTEX];
InversePropertyDef['IFC4'][ifc.IFCTOPOLOGICALREPRESENTATIONITEM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTOPOLOGYREPRESENTATION] = (d: RawLineData) => { return IFC4.IfcTopologyRepresentation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTOPOLOGYREPRESENTATION] = [
		['RepresentationMap',ifc.IFCREPRESENTATIONMAP,1,true],
		['LayerAssignments',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['OfProductRepresentation',ifc.IFCPRODUCTREPRESENTATION,2,true],
		['OfShapeAspect',ifc.IFCSHAPEASPECT,0,true],
];
FromRawLineData['IFC4'][ifc.IFCUNITASSIGNMENT] = (d: RawLineData) => { return IFC4.IfcUnitAssignment.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCVERTEX] = (d: RawLineData) => { return IFC4.IfcVertex.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCVERTEX] = [ifc.IFCVERTEXPOINT];
InversePropertyDef['IFC4'][ifc.IFCVERTEX] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCVERTEXPOINT] = (d: RawLineData) => { return IFC4.IfcVertexPoint.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVERTEXPOINT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCVIRTUALGRIDINTERSECTION] = (d: RawLineData) => { return IFC4.IfcVirtualGridIntersection.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCWORKTIME] = (d: RawLineData) => { return IFC4.IfcWorkTime.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCAPPROVALRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcApprovalRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCARBITRARYCLOSEDPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcArbitraryClosedProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCARBITRARYCLOSEDPROFILEDEF] = [ifc.IFCARBITRARYPROFILEDEFWITHVOIDS];
InversePropertyDef['IFC4'][ifc.IFCARBITRARYCLOSEDPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCARBITRARYOPENPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcArbitraryOpenProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCARBITRARYOPENPROFILEDEF] = [ifc.IFCCENTERLINEPROFILEDEF];
InversePropertyDef['IFC4'][ifc.IFCARBITRARYOPENPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCARBITRARYPROFILEDEFWITHVOIDS] = (d: RawLineData) => { return IFC4.IfcArbitraryProfileDefWithVoids.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCARBITRARYPROFILEDEFWITHVOIDS] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCBLOBTEXTURE] = (d: RawLineData) => { return IFC4.IfcBlobTexture.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBLOBTEXTURE] = [
		['IsMappedBy',ifc.IFCTEXTURECOORDINATE,0,true],
		['UsedInStyles',ifc.IFCSURFACESTYLEWITHTEXTURES,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCENTERLINEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcCenterLineProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCENTERLINEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCLASSIFICATION] = (d: RawLineData) => { return IFC4.IfcClassification.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCLASSIFICATION] = [
		['ClassificationForObjects',ifc.IFCRELASSOCIATESCLASSIFICATION,5,true],
		['HasReferences',ifc.IFCCLASSIFICATIONREFERENCE,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCLASSIFICATIONREFERENCE] = (d: RawLineData) => { return IFC4.IfcClassificationReference.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCLASSIFICATIONREFERENCE] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
		['ClassificationRefForObjects',ifc.IFCRELASSOCIATESCLASSIFICATION,5,true],
		['HasReferences',ifc.IFCCLASSIFICATIONREFERENCE,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCOLOURRGBLIST] = (d: RawLineData) => { return IFC4.IfcColourRgbList.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCOLOURSPECIFICATION] = (d: RawLineData) => { return IFC4.IfcColourSpecification.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOLOURSPECIFICATION] = [ifc.IFCCOLOURRGB];
FromRawLineData['IFC4'][ifc.IFCCOMPOSITEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcCompositeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMPOSITEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCONNECTEDFACESET] = (d: RawLineData) => { return IFC4.IfcConnectedFaceSet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONNECTEDFACESET] = [ifc.IFCCLOSEDSHELL,ifc.IFCOPENSHELL];
InversePropertyDef['IFC4'][ifc.IFCCONNECTEDFACESET] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCONNECTIONCURVEGEOMETRY] = (d: RawLineData) => { return IFC4.IfcConnectionCurveGeometry.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCONNECTIONPOINTECCENTRICITY] = (d: RawLineData) => { return IFC4.IfcConnectionPointEccentricity.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCONTEXTDEPENDENTUNIT] = (d: RawLineData) => { return IFC4.IfcContextDependentUnit.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONTEXTDEPENDENTUNIT] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCONVERSIONBASEDUNIT] = (d: RawLineData) => { return IFC4.IfcConversionBasedUnit.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONVERSIONBASEDUNIT] = [ifc.IFCCONVERSIONBASEDUNITWITHOFFSET];
InversePropertyDef['IFC4'][ifc.IFCCONVERSIONBASEDUNIT] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCONVERSIONBASEDUNITWITHOFFSET] = (d: RawLineData) => { return IFC4.IfcConversionBasedUnitWithOffset.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONVERSIONBASEDUNITWITHOFFSET] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCURRENCYRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcCurrencyRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCURVESTYLE] = (d: RawLineData) => { return IFC4.IfcCurveStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCURVESTYLEFONT] = (d: RawLineData) => { return IFC4.IfcCurveStyleFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCURVESTYLEFONTANDSCALING] = (d: RawLineData) => { return IFC4.IfcCurveStyleFontAndScaling.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCURVESTYLEFONTPATTERN] = (d: RawLineData) => { return IFC4.IfcCurveStyleFontPattern.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCDERIVEDPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcDerivedProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDERIVEDPROFILEDEF] = [ifc.IFCMIRROREDPROFILEDEF];
InversePropertyDef['IFC4'][ifc.IFCDERIVEDPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCDOCUMENTINFORMATION] = (d: RawLineData) => { return IFC4.IfcDocumentInformation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOCUMENTINFORMATION] = [
		['DocumentInfoForObjects',ifc.IFCRELASSOCIATESDOCUMENT,5,true],
		['HasDocumentReferences',ifc.IFCDOCUMENTREFERENCE,4,true],
		['IsPointedTo',ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP,3,true],
		['IsPointer',ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcDocumentInformationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCDOCUMENTREFERENCE] = (d: RawLineData) => { return IFC4.IfcDocumentReference.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOCUMENTREFERENCE] = [
		['ExternalReferenceForResources',ifc.IFCEXTERNALREFERENCERELATIONSHIP,2,true],
		['DocumentRefForObjects',ifc.IFCRELASSOCIATESDOCUMENT,5,true],
];
FromRawLineData['IFC4'][ifc.IFCEDGE] = (d: RawLineData) => { return IFC4.IfcEdge.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCEDGE] = [ifc.IFCSUBEDGE,ifc.IFCORIENTEDEDGE,ifc.IFCEDGECURVE];
InversePropertyDef['IFC4'][ifc.IFCEDGE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCEDGECURVE] = (d: RawLineData) => { return IFC4.IfcEdgeCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEDGECURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCEVENTTIME] = (d: RawLineData) => { return IFC4.IfcEventTime.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCEXTENDEDPROPERTIES] = (d: RawLineData) => { return IFC4.IfcExtendedProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCEXTENDEDPROPERTIES] = [ifc.IFCPROFILEPROPERTIES,ifc.IFCMATERIALPROPERTIES];
InversePropertyDef['IFC4'][ifc.IFCEXTENDEDPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTERNALREFERENCERELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcExternalReferenceRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCFACE] = (d: RawLineData) => { return IFC4.IfcFace.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFACE] = [ifc.IFCADVANCEDFACE,ifc.IFCFACESURFACE];
InversePropertyDef['IFC4'][ifc.IFCFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['HasTextureMaps',ifc.IFCTEXTUREMAP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCFACEBOUND] = (d: RawLineData) => { return IFC4.IfcFaceBound.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFACEBOUND] = [ifc.IFCFACEOUTERBOUND];
InversePropertyDef['IFC4'][ifc.IFCFACEBOUND] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFACEOUTERBOUND] = (d: RawLineData) => { return IFC4.IfcFaceOuterBound.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFACEOUTERBOUND] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFACESURFACE] = (d: RawLineData) => { return IFC4.IfcFaceSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFACESURFACE] = [ifc.IFCADVANCEDFACE];
InversePropertyDef['IFC4'][ifc.IFCFACESURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['HasTextureMaps',ifc.IFCTEXTUREMAP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCFAILURECONNECTIONCONDITION] = (d: RawLineData) => { return IFC4.IfcFailureConnectionCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCFILLAREASTYLE] = (d: RawLineData) => { return IFC4.IfcFillAreaStyle.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONCONTEXT] = (d: RawLineData) => { return IFC4.IfcGeometricRepresentationContext.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONCONTEXT] = [ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT];
InversePropertyDef['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONCONTEXT] = [
		['RepresentationsInContext',ifc.IFCREPRESENTATION,0,true],
		['HasSubContexts',ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],
		['HasCoordinateOperation',ifc.IFCCOORDINATEOPERATION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONITEM] = (d: RawLineData) => { return IFC4.IfcGeometricRepresentationItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONITEM] = [ifc.IFCFILLAREASTYLETILES,ifc.IFCFILLAREASTYLEHATCHING,ifc.IFCFACEBASEDSURFACEMODEL,ifc.IFCDIRECTION,ifc.IFCCIRCLE,ifc.IFCELLIPSE,ifc.IFCCONIC,ifc.IFCRATIONALBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFCINDEXEDPOLYCURVE,ifc.IFCOUTERBOUNDARYCURVE,ifc.IFCBOUNDARYCURVE,ifc.IFCCOMPOSITECURVEONSURFACE,ifc.IFCCOMPOSITECURVE,ifc.IFCBOUNDEDCURVE,ifc.IFCSEAMCURVE,ifc.IFCINTERSECTIONCURVE,ifc.IFCSURFACECURVE,ifc.IFCPCURVE,ifc.IFCOFFSETCURVE3D,ifc.IFCOFFSETCURVE2D,ifc.IFCLINE,ifc.IFCCURVE,ifc.IFCBLOCK,ifc.IFCSPHERE,ifc.IFCRIGHTCIRCULARCYLINDER,ifc.IFCRIGHTCIRCULARCONE,ifc.IFCRECTANGULARPYRAMID,ifc.IFCCSGPRIMITIVE3D,ifc.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,ifc.IFCCOMPOSITECURVESEGMENT,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR,ifc.IFCCARTESIANPOINTLIST3D,ifc.IFCCARTESIANPOINTLIST2D,ifc.IFCCARTESIANPOINTLIST,ifc.IFCBOUNDINGBOX,ifc.IFCBOOLEANCLIPPINGRESULT,ifc.IFCBOOLEANRESULT,ifc.IFCANNOTATIONFILLAREA,ifc.IFCVECTOR,ifc.IFCTEXTLITERALWITHEXTENT,ifc.IFCTEXTLITERAL,ifc.IFCPOLYGONALFACESET,ifc.IFCTRIANGULATEDFACESET,ifc.IFCTESSELLATEDFACESET,ifc.IFCINDEXEDPOLYGONALFACEWITHVOIDS,ifc.IFCINDEXEDPOLYGONALFACE,ifc.IFCTESSELLATEDITEM,ifc.IFCCYLINDRICALSURFACE,ifc.IFCTOROIDALSURFACE,ifc.IFCSPHERICALSURFACE,ifc.IFCPLANE,ifc.IFCELEMENTARYSURFACE,ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE,ifc.IFCBOUNDEDSURFACE,ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION,ifc.IFCSWEPTSURFACE,ifc.IFCSURFACE,ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCADVANCEDBREPWITHVOIDS,ifc.IFCADVANCEDBREP,ifc.IFCMANIFOLDSOLIDBREP,ifc.IFCCSGSOLID,ifc.IFCSWEPTDISKSOLIDPOLYGONAL,ifc.IFCSWEPTDISKSOLID,ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLIDTAPERED,ifc.IFCREVOLVEDAREASOLID,ifc.IFCFIXEDREFERENCESWEPTAREASOLID,ifc.IFCEXTRUDEDAREASOLIDTAPERED,ifc.IFCEXTRUDEDAREASOLID,ifc.IFCSWEPTAREASOLID,ifc.IFCSOLIDMODEL,ifc.IFCSHELLBASEDSURFACEMODEL,ifc.IFCSECTIONEDSPINE,ifc.IFCCARTESIANPOINT,ifc.IFCPOINTONSURFACE,ifc.IFCPOINTONCURVE,ifc.IFCPOINT,ifc.IFCPLANARBOX,ifc.IFCPLANAREXTENT,ifc.IFCAXIS2PLACEMENT3D,ifc.IFCAXIS2PLACEMENT2D,ifc.IFCAXIS1PLACEMENT,ifc.IFCPLACEMENT,ifc.IFCLIGHTSOURCESPOT,ifc.IFCLIGHTSOURCEPOSITIONAL,ifc.IFCLIGHTSOURCEGONIOMETRIC,ifc.IFCLIGHTSOURCEDIRECTIONAL,ifc.IFCLIGHTSOURCEAMBIENT,ifc.IFCLIGHTSOURCE,ifc.IFCBOXEDHALFSPACE,ifc.IFCPOLYGONALBOUNDEDHALFSPACE,ifc.IFCHALFSPACESOLID,ifc.IFCGEOMETRICCURVESET,ifc.IFCGEOMETRICSET];
InversePropertyDef['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONITEM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d: RawLineData) => { return IFC4.IfcGeometricRepresentationSubContext.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = [
		['RepresentationsInContext',ifc.IFCREPRESENTATION,0,true],
		['HasSubContexts',ifc.IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],
		['HasCoordinateOperation',ifc.IFCCOORDINATEOPERATION,0,true],
];
FromRawLineData['IFC4'][ifc.IFCGEOMETRICSET] = (d: RawLineData) => { return IFC4.IfcGeometricSet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCGEOMETRICSET] = [ifc.IFCGEOMETRICCURVESET];
InversePropertyDef['IFC4'][ifc.IFCGEOMETRICSET] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCGRIDPLACEMENT] = (d: RawLineData) => { return IFC4.IfcGridPlacement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGRIDPLACEMENT] = [
		['PlacesObject',ifc.IFCPRODUCT,5,true],
		['ReferencedByPlacements',ifc.IFCLOCALPLACEMENT,0,true],
];
FromRawLineData['IFC4'][ifc.IFCHALFSPACESOLID] = (d: RawLineData) => { return IFC4.IfcHalfSpaceSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCHALFSPACESOLID] = [ifc.IFCBOXEDHALFSPACE,ifc.IFCPOLYGONALBOUNDEDHALFSPACE];
InversePropertyDef['IFC4'][ifc.IFCHALFSPACESOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCIMAGETEXTURE] = (d: RawLineData) => { return IFC4.IfcImageTexture.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCIMAGETEXTURE] = [
		['IsMappedBy',ifc.IFCTEXTURECOORDINATE,0,true],
		['UsedInStyles',ifc.IFCSURFACESTYLEWITHTEXTURES,0,true],
];
FromRawLineData['IFC4'][ifc.IFCINDEXEDCOLOURMAP] = (d: RawLineData) => { return IFC4.IfcIndexedColourMap.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCINDEXEDTEXTUREMAP] = (d: RawLineData) => { return IFC4.IfcIndexedTextureMap.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCINDEXEDTEXTUREMAP] = [ifc.IFCINDEXEDTRIANGLETEXTUREMAP];
FromRawLineData['IFC4'][ifc.IFCINDEXEDTRIANGLETEXTUREMAP] = (d: RawLineData) => { return IFC4.IfcIndexedTriangleTextureMap.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCIRREGULARTIMESERIES] = (d: RawLineData) => { return IFC4.IfcIrregularTimeSeries.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCIRREGULARTIMESERIES] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCLAGTIME] = (d: RawLineData) => { return IFC4.IfcLagTime.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCLIGHTSOURCE] = (d: RawLineData) => { return IFC4.IfcLightSource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCLIGHTSOURCE] = [ifc.IFCLIGHTSOURCESPOT,ifc.IFCLIGHTSOURCEPOSITIONAL,ifc.IFCLIGHTSOURCEGONIOMETRIC,ifc.IFCLIGHTSOURCEDIRECTIONAL,ifc.IFCLIGHTSOURCEAMBIENT];
InversePropertyDef['IFC4'][ifc.IFCLIGHTSOURCE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTSOURCEAMBIENT] = (d: RawLineData) => { return IFC4.IfcLightSourceAmbient.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIGHTSOURCEAMBIENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTSOURCEDIRECTIONAL] = (d: RawLineData) => { return IFC4.IfcLightSourceDirectional.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIGHTSOURCEDIRECTIONAL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTSOURCEGONIOMETRIC] = (d: RawLineData) => { return IFC4.IfcLightSourceGoniometric.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIGHTSOURCEGONIOMETRIC] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTSOURCEPOSITIONAL] = (d: RawLineData) => { return IFC4.IfcLightSourcePositional.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCLIGHTSOURCEPOSITIONAL] = [ifc.IFCLIGHTSOURCESPOT];
InversePropertyDef['IFC4'][ifc.IFCLIGHTSOURCEPOSITIONAL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTSOURCESPOT] = (d: RawLineData) => { return IFC4.IfcLightSourceSpot.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIGHTSOURCESPOT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLOCALPLACEMENT] = (d: RawLineData) => { return IFC4.IfcLocalPlacement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLOCALPLACEMENT] = [
		['PlacesObject',ifc.IFCPRODUCT,5,true],
		['ReferencedByPlacements',ifc.IFCLOCALPLACEMENT,0,true],
];
FromRawLineData['IFC4'][ifc.IFCLOOP] = (d: RawLineData) => { return IFC4.IfcLoop.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCLOOP] = [ifc.IFCEDGELOOP,ifc.IFCVERTEXLOOP,ifc.IFCPOLYLOOP];
InversePropertyDef['IFC4'][ifc.IFCLOOP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCMAPPEDITEM] = (d: RawLineData) => { return IFC4.IfcMappedItem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMAPPEDITEM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIAL] = (d: RawLineData) => { return IFC4.IfcMaterial.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIAL] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
		['HasRepresentation',ifc.IFCMATERIALDEFINITIONREPRESENTATION,3,true],
		['IsRelatedWith',ifc.IFCMATERIALRELATIONSHIP,3,true],
		['RelatesTo',ifc.IFCMATERIALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALCONSTITUENT] = (d: RawLineData) => { return IFC4.IfcMaterialConstituent.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALCONSTITUENT] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
		['ToMaterialConstituentSet',ifc.IFCMATERIALCONSTITUENTSET,2,false],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALCONSTITUENTSET] = (d: RawLineData) => { return IFC4.IfcMaterialConstituentSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALCONSTITUENTSET] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCMATERIALPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALDEFINITIONREPRESENTATION] = (d: RawLineData) => { return IFC4.IfcMaterialDefinitionRepresentation.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMATERIALLAYERSETUSAGE] = (d: RawLineData) => { return IFC4.IfcMaterialLayerSetUsage.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALLAYERSETUSAGE] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALPROFILESETUSAGE] = (d: RawLineData) => { return IFC4.IfcMaterialProfileSetUsage.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMATERIALPROFILESETUSAGE] = [ifc.IFCMATERIALPROFILESETUSAGETAPERING];
InversePropertyDef['IFC4'][ifc.IFCMATERIALPROFILESETUSAGE] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALPROFILESETUSAGETAPERING] = (d: RawLineData) => { return IFC4.IfcMaterialProfileSetUsageTapering.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALPROFILESETUSAGETAPERING] = [
		['AssociatedTo',ifc.IFCRELASSOCIATESMATERIAL,5,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALPROPERTIES] = (d: RawLineData) => { return IFC4.IfcMaterialProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMATERIALPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCMATERIALRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcMaterialRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCMIRROREDPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcMirroredProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMIRROREDPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCOBJECTDEFINITION] = (d: RawLineData) => { return IFC4.IfcObjectDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCOBJECTDEFINITION] = [ifc.IFCASSET,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCDISTRIBUTIONCIRCUIT,ifc.IFCDISTRIBUTIONSYSTEM,ifc.IFCBUILDINGSYSTEM,ifc.IFCZONE,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADCASE,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY,ifc.IFCGROUP,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCWORKCALENDAR,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM,ifc.IFCCONTROL,ifc.IFCOCCUPANT,ifc.IFCACTOR,ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE,ifc.IFCRESOURCE,ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCCIVILELEMENT,ifc.IFCBEAMSTANDARDCASE,ifc.IFCBEAM,ifc.IFCWINDOWSTANDARDCASE,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE,ifc.IFCSLAB,ifc.IFCSHADINGDEVICE,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATESTANDARDCASE,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBERSTANDARDCASE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOORSTANDARDCASE,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMNSTANDARDCASE,ifc.IFCCOLUMN,ifc.IFCCHIMNEY,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCGEOGRAPHICELEMENT,ifc.IFCSYSTEMFURNITUREELEMENT,ifc.IFCFURNITURE,ifc.IFCFURNISHINGELEMENT,ifc.IFCSURFACEFEATURE,ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCBUILDINGELEMENTPART,ifc.IFCVIBRATIONISOLATOR,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALSURFACEACTION,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALCURVEACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALCURVEREACTION,ifc.IFCSTRUCTURALSURFACEREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCEXTERNALSPATIALELEMENT,ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALZONE,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALELEMENT,ifc.IFCPROXY,ifc.IFCPRODUCT,ifc.IFCPROCEDURE,ifc.IFCEVENT,ifc.IFCTASK,ifc.IFCPROCESS,ifc.IFCOBJECT,ifc.IFCPROJECTLIBRARY,ifc.IFCPROJECT,ifc.IFCCONTEXT,ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE,ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,ifc.IFCSUBCONTRACTRESOURCETYPE,ifc.IFCLABORRESOURCETYPE,ifc.IFCCREWRESOURCETYPE,ifc.IFCCONSTRUCTIONRESOURCETYPE,ifc.IFCTYPERESOURCE,ifc.IFCSPATIALZONETYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSPATIALELEMENTTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCBUILDINGELEMENTPARTTYPE,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE,ifc.IFCREINFORCINGELEMENTTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCELEMENTASSEMBLYTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCCIVILELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWINDOWTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCSHADINGDEVICETYPE,ifc.IFCROOFTYPE,ifc.IFCRAMPTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCPILETYPE,ifc.IFCMEMBERTYPE,ifc.IFCFOOTINGTYPE,ifc.IFCDOORTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCCHIMNEYTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCGEOGRAPHICELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE,ifc.IFCTYPEPRODUCT,ifc.IFCTASKTYPE,ifc.IFCPROCEDURETYPE,ifc.IFCEVENTTYPE,ifc.IFCTYPEPROCESS,ifc.IFCTYPEOBJECT];
InversePropertyDef['IFC4'][ifc.IFCOBJECTDEFINITION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCOPENSHELL] = (d: RawLineData) => { return IFC4.IfcOpenShell.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOPENSHELL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCORGANIZATIONRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcOrganizationRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCORIENTEDEDGE] = (d: RawLineData) => { return IFC4.IfcOrientedEdge.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCORIENTEDEDGE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPARAMETERIZEDPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcParameterizedProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPARAMETERIZEDPROFILEDEF] = [ifc.IFCLSHAPEPROFILEDEF,ifc.IFCISHAPEPROFILEDEF,ifc.IFCELLIPSEPROFILEDEF,ifc.IFCCIRCLEHOLLOWPROFILEDEF,ifc.IFCCIRCLEPROFILEDEF,ifc.IFCCSHAPEPROFILEDEF,ifc.IFCASYMMETRICISHAPEPROFILEDEF,ifc.IFCZSHAPEPROFILEDEF,ifc.IFCUSHAPEPROFILEDEF,ifc.IFCTRAPEZIUMPROFILEDEF,ifc.IFCTSHAPEPROFILEDEF,ifc.IFCRECTANGLEHOLLOWPROFILEDEF,ifc.IFCROUNDEDRECTANGLEPROFILEDEF,ifc.IFCRECTANGLEPROFILEDEF];
InversePropertyDef['IFC4'][ifc.IFCPARAMETERIZEDPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCPATH] = (d: RawLineData) => { return IFC4.IfcPath.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPATH] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPHYSICALCOMPLEXQUANTITY] = (d: RawLineData) => { return IFC4.IfcPhysicalComplexQuantity.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPHYSICALCOMPLEXQUANTITY] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCPHYSICALCOMPLEXQUANTITY,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPIXELTEXTURE] = (d: RawLineData) => { return IFC4.IfcPixelTexture.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPIXELTEXTURE] = [
		['IsMappedBy',ifc.IFCTEXTURECOORDINATE,0,true],
		['UsedInStyles',ifc.IFCSURFACESTYLEWITHTEXTURES,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPLACEMENT] = (d: RawLineData) => { return IFC4.IfcPlacement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPLACEMENT] = [ifc.IFCAXIS2PLACEMENT3D,ifc.IFCAXIS2PLACEMENT2D,ifc.IFCAXIS1PLACEMENT];
InversePropertyDef['IFC4'][ifc.IFCPLACEMENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPLANAREXTENT] = (d: RawLineData) => { return IFC4.IfcPlanarExtent.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPLANAREXTENT] = [ifc.IFCPLANARBOX];
InversePropertyDef['IFC4'][ifc.IFCPLANAREXTENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPOINT] = (d: RawLineData) => { return IFC4.IfcPoint.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPOINT] = [ifc.IFCCARTESIANPOINT,ifc.IFCPOINTONSURFACE,ifc.IFCPOINTONCURVE];
InversePropertyDef['IFC4'][ifc.IFCPOINT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPOINTONCURVE] = (d: RawLineData) => { return IFC4.IfcPointOnCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOINTONCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPOINTONSURFACE] = (d: RawLineData) => { return IFC4.IfcPointOnSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOINTONSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPOLYLOOP] = (d: RawLineData) => { return IFC4.IfcPolyLoop.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOLYLOOP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPOLYGONALBOUNDEDHALFSPACE] = (d: RawLineData) => { return IFC4.IfcPolygonalBoundedHalfSpace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOLYGONALBOUNDEDHALFSPACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPREDEFINEDITEM] = (d: RawLineData) => { return IFC4.IfcPreDefinedItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPREDEFINEDITEM] = [ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT,ifc.IFCPREDEFINEDCURVEFONT,ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR,ifc.IFCPREDEFINEDCOLOUR,ifc.IFCTEXTSTYLEFONTMODEL,ifc.IFCPREDEFINEDTEXTFONT];
FromRawLineData['IFC4'][ifc.IFCPREDEFINEDPROPERTIES] = (d: RawLineData) => { return IFC4.IfcPreDefinedProperties.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPREDEFINEDPROPERTIES] = [ifc.IFCSECTIONREINFORCEMENTPROPERTIES,ifc.IFCSECTIONPROPERTIES,ifc.IFCREINFORCEMENTBARPROPERTIES];
InversePropertyDef['IFC4'][ifc.IFCPREDEFINEDPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCPREDEFINEDTEXTFONT] = (d: RawLineData) => { return IFC4.IfcPreDefinedTextFont.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPREDEFINEDTEXTFONT] = [ifc.IFCTEXTSTYLEFONTMODEL];
FromRawLineData['IFC4'][ifc.IFCPRODUCTDEFINITIONSHAPE] = (d: RawLineData) => { return IFC4.IfcProductDefinitionShape.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPRODUCTDEFINITIONSHAPE] = [
		['ShapeOfProduct',ifc.IFCPRODUCT,6,true],
		['HasShapeAspects',ifc.IFCSHAPEASPECT,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROFILEPROPERTIES] = (d: RawLineData) => { return IFC4.IfcProfileProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROFILEPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTY] = (d: RawLineData) => { return IFC4.IfcProperty.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROPERTY] = [ifc.IFCCOMPLEXPROPERTY,ifc.IFCPROPERTYTABLEVALUE,ifc.IFCPROPERTYSINGLEVALUE,ifc.IFCPROPERTYREFERENCEVALUE,ifc.IFCPROPERTYLISTVALUE,ifc.IFCPROPERTYENUMERATEDVALUE,ifc.IFCPROPERTYBOUNDEDVALUE,ifc.IFCSIMPLEPROPERTY];
InversePropertyDef['IFC4'][ifc.IFCPROPERTY] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYDEFINITION] = (d: RawLineData) => { return IFC4.IfcPropertyDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROPERTYDEFINITION] = [ifc.IFCCOMPLEXPROPERTYTEMPLATE,ifc.IFCSIMPLEPROPERTYTEMPLATE,ifc.IFCPROPERTYTEMPLATE,ifc.IFCPROPERTYSETTEMPLATE,ifc.IFCPROPERTYTEMPLATEDEFINITION,ifc.IFCPROPERTYSET,ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES,ifc.IFCPREDEFINEDPROPERTYSET,ifc.IFCELEMENTQUANTITY,ifc.IFCQUANTITYSET,ifc.IFCPROPERTYSETDEFINITION];
InversePropertyDef['IFC4'][ifc.IFCPROPERTYDEFINITION] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcPropertyDependencyRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCPROPERTYSETDEFINITION] = (d: RawLineData) => { return IFC4.IfcPropertySetDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROPERTYSETDEFINITION] = [ifc.IFCPROPERTYSET,ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES,ifc.IFCPREDEFINEDPROPERTYSET,ifc.IFCELEMENTQUANTITY,ifc.IFCQUANTITYSET];
InversePropertyDef['IFC4'][ifc.IFCPROPERTYSETDEFINITION] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYTEMPLATEDEFINITION] = (d: RawLineData) => { return IFC4.IfcPropertyTemplateDefinition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROPERTYTEMPLATEDEFINITION] = [ifc.IFCCOMPLEXPROPERTYTEMPLATE,ifc.IFCSIMPLEPROPERTYTEMPLATE,ifc.IFCPROPERTYTEMPLATE,ifc.IFCPROPERTYSETTEMPLATE];
InversePropertyDef['IFC4'][ifc.IFCPROPERTYTEMPLATEDEFINITION] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCQUANTITYSET] = (d: RawLineData) => { return IFC4.IfcQuantitySet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCQUANTITYSET] = [ifc.IFCELEMENTQUANTITY];
InversePropertyDef['IFC4'][ifc.IFCQUANTITYSET] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCRECTANGLEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcRectangleProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRECTANGLEPROFILEDEF] = [ifc.IFCRECTANGLEHOLLOWPROFILEDEF,ifc.IFCROUNDEDRECTANGLEPROFILEDEF];
InversePropertyDef['IFC4'][ifc.IFCRECTANGLEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCREGULARTIMESERIES] = (d: RawLineData) => { return IFC4.IfcRegularTimeSeries.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREGULARTIMESERIES] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCEMENTBARPROPERTIES] = (d: RawLineData) => { return IFC4.IfcReinforcementBarProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREINFORCEMENTBARPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcRelationship.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELATIONSHIP] = [ifc.IFCRELDEFINESBYTYPE,ifc.IFCRELDEFINESBYTEMPLATE,ifc.IFCRELDEFINESBYPROPERTIES,ifc.IFCRELDEFINESBYOBJECT,ifc.IFCRELDEFINES,ifc.IFCRELAGGREGATES,ifc.IFCRELVOIDSELEMENT,ifc.IFCRELPROJECTSELEMENT,ifc.IFCRELNESTS,ifc.IFCRELDECOMPOSES,ifc.IFCRELDECLARES,ifc.IFCRELSPACEBOUNDARY2NDLEVEL,ifc.IFCRELSPACEBOUNDARY1STLEVEL,ifc.IFCRELSPACEBOUNDARY,ifc.IFCRELSERVICESBUILDINGS,ifc.IFCRELSEQUENCE,ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,ifc.IFCRELINTERFERESELEMENTS,ifc.IFCRELFLOWCONTROLELEMENTS,ifc.IFCRELFILLSELEMENT,ifc.IFCRELCOVERSSPACES,ifc.IFCRELCOVERSBLDGELEMENTS,ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,ifc.IFCRELCONNECTSWITHECCENTRICITY,ifc.IFCRELCONNECTSSTRUCTURALMEMBER,ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,ifc.IFCRELCONNECTSPORTS,ifc.IFCRELCONNECTSPORTTOELEMENT,ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS,ifc.IFCRELCONNECTSELEMENTS,ifc.IFCRELCONNECTS,ifc.IFCRELASSOCIATESMATERIAL,ifc.IFCRELASSOCIATESLIBRARY,ifc.IFCRELASSOCIATESDOCUMENT,ifc.IFCRELASSOCIATESCONSTRAINT,ifc.IFCRELASSOCIATESCLASSIFICATION,ifc.IFCRELASSOCIATESAPPROVAL,ifc.IFCRELASSOCIATES,ifc.IFCRELASSIGNSTORESOURCE,ifc.IFCRELASSIGNSTOPRODUCT,ifc.IFCRELASSIGNSTOPROCESS,ifc.IFCRELASSIGNSTOGROUPBYFACTOR,ifc.IFCRELASSIGNSTOGROUP,ifc.IFCRELASSIGNSTOCONTROL,ifc.IFCRELASSIGNSTOACTOR,ifc.IFCRELASSIGNS];
FromRawLineData['IFC4'][ifc.IFCRESOURCEAPPROVALRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcResourceApprovalRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRESOURCECONSTRAINTRELATIONSHIP] = (d: RawLineData) => { return IFC4.IfcResourceConstraintRelationship.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRESOURCETIME] = (d: RawLineData) => { return IFC4.IfcResourceTime.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCROUNDEDRECTANGLEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcRoundedRectangleProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCROUNDEDRECTANGLEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCSECTIONPROPERTIES] = (d: RawLineData) => { return IFC4.IfcSectionProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSECTIONPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCSECTIONREINFORCEMENTPROPERTIES] = (d: RawLineData) => { return IFC4.IfcSectionReinforcementProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSECTIONREINFORCEMENTPROPERTIES] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
];
FromRawLineData['IFC4'][ifc.IFCSECTIONEDSPINE] = (d: RawLineData) => { return IFC4.IfcSectionedSpine.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSECTIONEDSPINE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSHELLBASEDSURFACEMODEL] = (d: RawLineData) => { return IFC4.IfcShellBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSHELLBASEDSURFACEMODEL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSIMPLEPROPERTY] = (d: RawLineData) => { return IFC4.IfcSimpleProperty.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSIMPLEPROPERTY] = [ifc.IFCPROPERTYTABLEVALUE,ifc.IFCPROPERTYSINGLEVALUE,ifc.IFCPROPERTYREFERENCEVALUE,ifc.IFCPROPERTYLISTVALUE,ifc.IFCPROPERTYENUMERATEDVALUE,ifc.IFCPROPERTYBOUNDEDVALUE];
InversePropertyDef['IFC4'][ifc.IFCSIMPLEPROPERTY] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCSLIPPAGECONNECTIONCONDITION] = (d: RawLineData) => { return IFC4.IfcSlippageConnectionCondition.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSOLIDMODEL] = (d: RawLineData) => { return IFC4.IfcSolidModel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSOLIDMODEL] = [ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCADVANCEDBREPWITHVOIDS,ifc.IFCADVANCEDBREP,ifc.IFCMANIFOLDSOLIDBREP,ifc.IFCCSGSOLID,ifc.IFCSWEPTDISKSOLIDPOLYGONAL,ifc.IFCSWEPTDISKSOLID,ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLIDTAPERED,ifc.IFCREVOLVEDAREASOLID,ifc.IFCFIXEDREFERENCESWEPTAREASOLID,ifc.IFCEXTRUDEDAREASOLIDTAPERED,ifc.IFCEXTRUDEDAREASOLID,ifc.IFCSWEPTAREASOLID];
InversePropertyDef['IFC4'][ifc.IFCSOLIDMODEL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADLINEARFORCE] = (d: RawLineData) => { return IFC4.IfcStructuralLoadLinearForce.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADPLANARFORCE] = (d: RawLineData) => { return IFC4.IfcStructuralLoadPlanarForce.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d: RawLineData) => { return IFC4.IfcStructuralLoadSingleDisplacement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = [ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d: RawLineData) => { return IFC4.IfcStructuralLoadSingleDisplacementDistortion.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADSINGLEFORCE] = (d: RawLineData) => { return IFC4.IfcStructuralLoadSingleForce.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALLOADSINGLEFORCE] = [ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d: RawLineData) => { return IFC4.IfcStructuralLoadSingleForceWarping.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSUBEDGE] = (d: RawLineData) => { return IFC4.IfcSubedge.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSUBEDGE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACE] = (d: RawLineData) => { return IFC4.IfcSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSURFACE] = [ifc.IFCCYLINDRICALSURFACE,ifc.IFCTOROIDALSURFACE,ifc.IFCSPHERICALSURFACE,ifc.IFCPLANE,ifc.IFCELEMENTARYSURFACE,ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE,ifc.IFCBOUNDEDSURFACE,ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION,ifc.IFCSWEPTSURFACE];
InversePropertyDef['IFC4'][ifc.IFCSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACESTYLERENDERING] = (d: RawLineData) => { return IFC4.IfcSurfaceStyleRendering.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCSWEPTAREASOLID] = (d: RawLineData) => { return IFC4.IfcSweptAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSWEPTAREASOLID] = [ifc.IFCSURFACECURVESWEPTAREASOLID,ifc.IFCREVOLVEDAREASOLIDTAPERED,ifc.IFCREVOLVEDAREASOLID,ifc.IFCFIXEDREFERENCESWEPTAREASOLID,ifc.IFCEXTRUDEDAREASOLIDTAPERED,ifc.IFCEXTRUDEDAREASOLID];
InversePropertyDef['IFC4'][ifc.IFCSWEPTAREASOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSWEPTDISKSOLID] = (d: RawLineData) => { return IFC4.IfcSweptDiskSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSWEPTDISKSOLID] = [ifc.IFCSWEPTDISKSOLIDPOLYGONAL];
InversePropertyDef['IFC4'][ifc.IFCSWEPTDISKSOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSWEPTDISKSOLIDPOLYGONAL] = (d: RawLineData) => { return IFC4.IfcSweptDiskSolidPolygonal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSWEPTDISKSOLIDPOLYGONAL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSWEPTSURFACE] = (d: RawLineData) => { return IFC4.IfcSweptSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSWEPTSURFACE] = [ifc.IFCSURFACEOFREVOLUTION,ifc.IFCSURFACEOFLINEAREXTRUSION];
InversePropertyDef['IFC4'][ifc.IFCSWEPTSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcTShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTSHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCTESSELLATEDITEM] = (d: RawLineData) => { return IFC4.IfcTessellatedItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTESSELLATEDITEM] = [ifc.IFCPOLYGONALFACESET,ifc.IFCTRIANGULATEDFACESET,ifc.IFCTESSELLATEDFACESET,ifc.IFCINDEXEDPOLYGONALFACEWITHVOIDS,ifc.IFCINDEXEDPOLYGONALFACE];
InversePropertyDef['IFC4'][ifc.IFCTESSELLATEDITEM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTEXTLITERAL] = (d: RawLineData) => { return IFC4.IfcTextLiteral.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTEXTLITERAL] = [ifc.IFCTEXTLITERALWITHEXTENT];
InversePropertyDef['IFC4'][ifc.IFCTEXTLITERAL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTEXTLITERALWITHEXTENT] = (d: RawLineData) => { return IFC4.IfcTextLiteralWithExtent.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTEXTLITERALWITHEXTENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTEXTSTYLEFONTMODEL] = (d: RawLineData) => { return IFC4.IfcTextStyleFontModel.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCTRAPEZIUMPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcTrapeziumProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRAPEZIUMPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCTYPEOBJECT] = (d: RawLineData) => { return IFC4.IfcTypeObject.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTYPEOBJECT] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE,ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,ifc.IFCSUBCONTRACTRESOURCETYPE,ifc.IFCLABORRESOURCETYPE,ifc.IFCCREWRESOURCETYPE,ifc.IFCCONSTRUCTIONRESOURCETYPE,ifc.IFCTYPERESOURCE,ifc.IFCSPATIALZONETYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSPATIALELEMENTTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCBUILDINGELEMENTPARTTYPE,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE,ifc.IFCREINFORCINGELEMENTTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCELEMENTASSEMBLYTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCCIVILELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWINDOWTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCSHADINGDEVICETYPE,ifc.IFCROOFTYPE,ifc.IFCRAMPTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCPILETYPE,ifc.IFCMEMBERTYPE,ifc.IFCFOOTINGTYPE,ifc.IFCDOORTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCCHIMNEYTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCGEOGRAPHICELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE,ifc.IFCTYPEPRODUCT,ifc.IFCTASKTYPE,ifc.IFCPROCEDURETYPE,ifc.IFCEVENTTYPE,ifc.IFCTYPEPROCESS];
InversePropertyDef['IFC4'][ifc.IFCTYPEOBJECT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCTYPEPROCESS] = (d: RawLineData) => { return IFC4.IfcTypeProcess.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTYPEPROCESS] = [ifc.IFCTASKTYPE,ifc.IFCPROCEDURETYPE,ifc.IFCEVENTTYPE];
InversePropertyDef['IFC4'][ifc.IFCTYPEPROCESS] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTYPEPRODUCT] = (d: RawLineData) => { return IFC4.IfcTypeProduct.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTYPEPRODUCT] = [ifc.IFCSPATIALZONETYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE,ifc.IFCSPATIALELEMENTTYPE,ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCBUILDINGELEMENTPARTTYPE,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE,ifc.IFCREINFORCINGELEMENTTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCELEMENTASSEMBLYTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCCIVILELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWINDOWTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCSHADINGDEVICETYPE,ifc.IFCROOFTYPE,ifc.IFCRAMPTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCPILETYPE,ifc.IFCMEMBERTYPE,ifc.IFCFOOTINGTYPE,ifc.IFCDOORTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCCHIMNEYTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCGEOGRAPHICELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE,ifc.IFCELEMENTTYPE,ifc.IFCDOORSTYLE,ifc.IFCWINDOWSTYLE];
InversePropertyDef['IFC4'][ifc.IFCTYPEPRODUCT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTYPERESOURCE] = (d: RawLineData) => { return IFC4.IfcTypeResource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTYPERESOURCE] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE,ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,ifc.IFCSUBCONTRACTRESOURCETYPE,ifc.IFCLABORRESOURCETYPE,ifc.IFCCREWRESOURCETYPE,ifc.IFCCONSTRUCTIONRESOURCETYPE];
InversePropertyDef['IFC4'][ifc.IFCTYPERESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCUSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcUShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCUSHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCVECTOR] = (d: RawLineData) => { return IFC4.IfcVector.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVECTOR] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCVERTEXLOOP] = (d: RawLineData) => { return IFC4.IfcVertexLoop.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVERTEXLOOP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCWINDOWSTYLE] = (d: RawLineData) => { return IFC4.IfcWindowStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWINDOWSTYLE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCZSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcZShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCZSHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCADVANCEDFACE] = (d: RawLineData) => { return IFC4.IfcAdvancedFace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCADVANCEDFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['HasTextureMaps',ifc.IFCTEXTUREMAP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCANNOTATIONFILLAREA] = (d: RawLineData) => { return IFC4.IfcAnnotationFillArea.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCANNOTATIONFILLAREA] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCASYMMETRICISHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcAsymmetricIShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCASYMMETRICISHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCAXIS1PLACEMENT] = (d: RawLineData) => { return IFC4.IfcAxis1Placement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAXIS1PLACEMENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCAXIS2PLACEMENT2D] = (d: RawLineData) => { return IFC4.IfcAxis2Placement2D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAXIS2PLACEMENT2D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCAXIS2PLACEMENT3D] = (d: RawLineData) => { return IFC4.IfcAxis2Placement3D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAXIS2PLACEMENT3D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBOOLEANRESULT] = (d: RawLineData) => { return IFC4.IfcBooleanResult.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBOOLEANRESULT] = [ifc.IFCBOOLEANCLIPPINGRESULT];
InversePropertyDef['IFC4'][ifc.IFCBOOLEANRESULT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBOUNDEDSURFACE] = (d: RawLineData) => { return IFC4.IfcBoundedSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBOUNDEDSURFACE] = [ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACE,ifc.IFCRECTANGULARTRIMMEDSURFACE,ifc.IFCCURVEBOUNDEDSURFACE,ifc.IFCCURVEBOUNDEDPLANE];
InversePropertyDef['IFC4'][ifc.IFCBOUNDEDSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBOUNDINGBOX] = (d: RawLineData) => { return IFC4.IfcBoundingBox.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBOUNDINGBOX] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBOXEDHALFSPACE] = (d: RawLineData) => { return IFC4.IfcBoxedHalfSpace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBOXEDHALFSPACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcCShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCSHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANPOINT] = (d: RawLineData) => { return IFC4.IfcCartesianPoint.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCARTESIANPOINT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANPOINTLIST] = (d: RawLineData) => { return IFC4.IfcCartesianPointList.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCARTESIANPOINTLIST] = [ifc.IFCCARTESIANPOINTLIST3D,ifc.IFCCARTESIANPOINTLIST2D];
InversePropertyDef['IFC4'][ifc.IFCCARTESIANPOINTLIST] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANPOINTLIST2D] = (d: RawLineData) => { return IFC4.IfcCartesianPointList2D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCARTESIANPOINTLIST2D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANPOINTLIST3D] = (d: RawLineData) => { return IFC4.IfcCartesianPointList3D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCARTESIANPOINTLIST3D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR] = (d: RawLineData) => { return IFC4.IfcCartesianTransformationOperator.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR] = [ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D];
InversePropertyDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d: RawLineData) => { return IFC4.IfcCartesianTransformationOperator2D.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM];
InversePropertyDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d: RawLineData) => { return IFC4.IfcCartesianTransformationOperator2DnonUniform.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d: RawLineData) => { return IFC4.IfcCartesianTransformationOperator3D.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM];
InversePropertyDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d: RawLineData) => { return IFC4.IfcCartesianTransformationOperator3DnonUniform.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCIRCLEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcCircleProfileDef.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCIRCLEPROFILEDEF] = [ifc.IFCCIRCLEHOLLOWPROFILEDEF];
InversePropertyDef['IFC4'][ifc.IFCCIRCLEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCLOSEDSHELL] = (d: RawLineData) => { return IFC4.IfcClosedShell.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCLOSEDSHELL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCOLOURRGB] = (d: RawLineData) => { return IFC4.IfcColourRgb.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCCOMPLEXPROPERTY] = (d: RawLineData) => { return IFC4.IfcComplexProperty.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMPLEXPROPERTY] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMPOSITECURVESEGMENT] = (d: RawLineData) => { return IFC4.IfcCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOMPOSITECURVESEGMENT] = [ifc.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT];
InversePropertyDef['IFC4'][ifc.IFCCOMPOSITECURVESEGMENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['UsingCurves',ifc.IFCCOMPOSITECURVE,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcConstructionResourceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONSTRUCTIONRESOURCETYPE] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE,ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,ifc.IFCSUBCONTRACTRESOURCETYPE,ifc.IFCLABORRESOURCETYPE,ifc.IFCCREWRESOURCETYPE];
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONTEXT] = (d: RawLineData) => { return IFC4.IfcContext.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONTEXT] = [ifc.IFCPROJECTLIBRARY,ifc.IFCPROJECT];
InversePropertyDef['IFC4'][ifc.IFCCONTEXT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Declares',ifc.IFCRELDECLARES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCCREWRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcCrewResourceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCREWRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCSGPRIMITIVE3D] = (d: RawLineData) => { return IFC4.IfcCsgPrimitive3D.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCSGPRIMITIVE3D] = [ifc.IFCBLOCK,ifc.IFCSPHERE,ifc.IFCRIGHTCIRCULARCYLINDER,ifc.IFCRIGHTCIRCULARCONE,ifc.IFCRECTANGULARPYRAMID];
InversePropertyDef['IFC4'][ifc.IFCCSGPRIMITIVE3D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCSGSOLID] = (d: RawLineData) => { return IFC4.IfcCsgSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCSGSOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCURVE] = (d: RawLineData) => { return IFC4.IfcCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCURVE] = [ifc.IFCCIRCLE,ifc.IFCELLIPSE,ifc.IFCCONIC,ifc.IFCRATIONALBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFCINDEXEDPOLYCURVE,ifc.IFCOUTERBOUNDARYCURVE,ifc.IFCBOUNDARYCURVE,ifc.IFCCOMPOSITECURVEONSURFACE,ifc.IFCCOMPOSITECURVE,ifc.IFCBOUNDEDCURVE,ifc.IFCSEAMCURVE,ifc.IFCINTERSECTIONCURVE,ifc.IFCSURFACECURVE,ifc.IFCPCURVE,ifc.IFCOFFSETCURVE3D,ifc.IFCOFFSETCURVE2D,ifc.IFCLINE];
InversePropertyDef['IFC4'][ifc.IFCCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCURVEBOUNDEDPLANE] = (d: RawLineData) => { return IFC4.IfcCurveBoundedPlane.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCURVEBOUNDEDPLANE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCURVEBOUNDEDSURFACE] = (d: RawLineData) => { return IFC4.IfcCurveBoundedSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCURVEBOUNDEDSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCDIRECTION] = (d: RawLineData) => { return IFC4.IfcDirection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDIRECTION] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCDOORSTYLE] = (d: RawLineData) => { return IFC4.IfcDoorStyle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOORSTYLE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCEDGELOOP] = (d: RawLineData) => { return IFC4.IfcEdgeLoop.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEDGELOOP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTQUANTITY] = (d: RawLineData) => { return IFC4.IfcElementQuantity.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELEMENTQUANTITY] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCELEMENTTYPE] = [ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCBUILDINGELEMENTPARTTYPE,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE,ifc.IFCREINFORCINGELEMENTTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE,ifc.IFCELEMENTCOMPONENTTYPE,ifc.IFCELEMENTASSEMBLYTYPE,ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE,ifc.IFCDISTRIBUTIONELEMENTTYPE,ifc.IFCCIVILELEMENTTYPE,ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWINDOWTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCSHADINGDEVICETYPE,ifc.IFCROOFTYPE,ifc.IFCRAMPTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCPILETYPE,ifc.IFCMEMBERTYPE,ifc.IFCFOOTINGTYPE,ifc.IFCDOORTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCCHIMNEYTYPE,ifc.IFCBUILDINGELEMENTTYPE,ifc.IFCTRANSPORTELEMENTTYPE,ifc.IFCGEOGRAPHICELEMENTTYPE,ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE,ifc.IFCFURNISHINGELEMENTTYPE];
InversePropertyDef['IFC4'][ifc.IFCELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTARYSURFACE] = (d: RawLineData) => { return IFC4.IfcElementarySurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCELEMENTARYSURFACE] = [ifc.IFCCYLINDRICALSURFACE,ifc.IFCTOROIDALSURFACE,ifc.IFCSPHERICALSURFACE,ifc.IFCPLANE];
InversePropertyDef['IFC4'][ifc.IFCELEMENTARYSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCELLIPSEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcEllipseProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELLIPSEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCEVENTTYPE] = (d: RawLineData) => { return IFC4.IfcEventType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEVENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTRUDEDAREASOLID] = (d: RawLineData) => { return IFC4.IfcExtrudedAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCEXTRUDEDAREASOLID] = [ifc.IFCEXTRUDEDAREASOLIDTAPERED];
InversePropertyDef['IFC4'][ifc.IFCEXTRUDEDAREASOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTRUDEDAREASOLIDTAPERED] = (d: RawLineData) => { return IFC4.IfcExtrudedAreaSolidTapered.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEXTRUDEDAREASOLIDTAPERED] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFACEBASEDSURFACEMODEL] = (d: RawLineData) => { return IFC4.IfcFaceBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFACEBASEDSURFACEMODEL] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFILLAREASTYLEHATCHING] = (d: RawLineData) => { return IFC4.IfcFillAreaStyleHatching.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFILLAREASTYLEHATCHING] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFILLAREASTYLETILES] = (d: RawLineData) => { return IFC4.IfcFillAreaStyleTiles.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFILLAREASTYLETILES] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFIXEDREFERENCESWEPTAREASOLID] = (d: RawLineData) => { return IFC4.IfcFixedReferenceSweptAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFIXEDREFERENCESWEPTAREASOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFURNISHINGELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcFurnishingElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFURNISHINGELEMENTTYPE] = [ifc.IFCSYSTEMFURNITUREELEMENTTYPE,ifc.IFCFURNITURETYPE];
InversePropertyDef['IFC4'][ifc.IFCFURNISHINGELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFURNITURETYPE] = (d: RawLineData) => { return IFC4.IfcFurnitureType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFURNITURETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCGEOGRAPHICELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcGeographicElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGEOGRAPHICELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCGEOMETRICCURVESET] = (d: RawLineData) => { return IFC4.IfcGeometricCurveSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGEOMETRICCURVESET] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCISHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcIShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCISHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCINDEXEDPOLYGONALFACE] = (d: RawLineData) => { return IFC4.IfcIndexedPolygonalFace.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCINDEXEDPOLYGONALFACE] = [ifc.IFCINDEXEDPOLYGONALFACEWITHVOIDS];
InversePropertyDef['IFC4'][ifc.IFCINDEXEDPOLYGONALFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['ToFaceSet',ifc.IFCPOLYGONALFACESET,2,true],
];
FromRawLineData['IFC4'][ifc.IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (d: RawLineData) => { return IFC4.IfcIndexedPolygonalFaceWithVoids.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCINDEXEDPOLYGONALFACEWITHVOIDS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['ToFaceSet',ifc.IFCPOLYGONALFACESET,2,true],
];
FromRawLineData['IFC4'][ifc.IFCLSHAPEPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcLShapeProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLSHAPEPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCLABORRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcLaborResourceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLABORRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCLINE] = (d: RawLineData) => { return IFC4.IfcLine.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLINE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCMANIFOLDSOLIDBREP] = (d: RawLineData) => { return IFC4.IfcManifoldSolidBrep.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMANIFOLDSOLIDBREP] = [ifc.IFCFACETEDBREPWITHVOIDS,ifc.IFCFACETEDBREP,ifc.IFCADVANCEDBREPWITHVOIDS,ifc.IFCADVANCEDBREP];
InversePropertyDef['IFC4'][ifc.IFCMANIFOLDSOLIDBREP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCOBJECT] = (d: RawLineData) => { return IFC4.IfcObject.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCOBJECT] = [ifc.IFCASSET,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCDISTRIBUTIONCIRCUIT,ifc.IFCDISTRIBUTIONSYSTEM,ifc.IFCBUILDINGSYSTEM,ifc.IFCZONE,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADCASE,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY,ifc.IFCGROUP,ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCWORKCALENDAR,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM,ifc.IFCCONTROL,ifc.IFCOCCUPANT,ifc.IFCACTOR,ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE,ifc.IFCRESOURCE,ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCCIVILELEMENT,ifc.IFCBEAMSTANDARDCASE,ifc.IFCBEAM,ifc.IFCWINDOWSTANDARDCASE,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE,ifc.IFCSLAB,ifc.IFCSHADINGDEVICE,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATESTANDARDCASE,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBERSTANDARDCASE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOORSTANDARDCASE,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMNSTANDARDCASE,ifc.IFCCOLUMN,ifc.IFCCHIMNEY,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCGEOGRAPHICELEMENT,ifc.IFCSYSTEMFURNITUREELEMENT,ifc.IFCFURNITURE,ifc.IFCFURNISHINGELEMENT,ifc.IFCSURFACEFEATURE,ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCBUILDINGELEMENTPART,ifc.IFCVIBRATIONISOLATOR,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALSURFACEACTION,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALCURVEACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALCURVEREACTION,ifc.IFCSTRUCTURALSURFACEREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCEXTERNALSPATIALELEMENT,ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALZONE,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALELEMENT,ifc.IFCPROXY,ifc.IFCPRODUCT,ifc.IFCPROCEDURE,ifc.IFCEVENT,ifc.IFCTASK,ifc.IFCPROCESS];
InversePropertyDef['IFC4'][ifc.IFCOBJECT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCOFFSETCURVE2D] = (d: RawLineData) => { return IFC4.IfcOffsetCurve2D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOFFSETCURVE2D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCOFFSETCURVE3D] = (d: RawLineData) => { return IFC4.IfcOffsetCurve3D.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOFFSETCURVE3D] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPCURVE] = (d: RawLineData) => { return IFC4.IfcPcurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPLANARBOX] = (d: RawLineData) => { return IFC4.IfcPlanarBox.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPLANARBOX] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPLANE] = (d: RawLineData) => { return IFC4.IfcPlane.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPLANE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPREDEFINEDCOLOUR] = (d: RawLineData) => { return IFC4.IfcPreDefinedColour.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPREDEFINEDCOLOUR] = [ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR];
FromRawLineData['IFC4'][ifc.IFCPREDEFINEDCURVEFONT] = (d: RawLineData) => { return IFC4.IfcPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPREDEFINEDCURVEFONT] = [ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT];
FromRawLineData['IFC4'][ifc.IFCPREDEFINEDPROPERTYSET] = (d: RawLineData) => { return IFC4.IfcPreDefinedPropertySet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPREDEFINEDPROPERTYSET] = [ifc.IFCPERMEABLECOVERINGPROPERTIES,ifc.IFCDOORPANELPROPERTIES,ifc.IFCDOORLININGPROPERTIES,ifc.IFCWINDOWPANELPROPERTIES,ifc.IFCWINDOWLININGPROPERTIES,ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES];
InversePropertyDef['IFC4'][ifc.IFCPREDEFINEDPROPERTYSET] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPROCEDURETYPE] = (d: RawLineData) => { return IFC4.IfcProcedureType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROCEDURETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPROCESS] = (d: RawLineData) => { return IFC4.IfcProcess.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROCESS] = [ifc.IFCPROCEDURE,ifc.IFCEVENT,ifc.IFCTASK];
InversePropertyDef['IFC4'][ifc.IFCPROCESS] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPRODUCT] = (d: RawLineData) => { return IFC4.IfcProduct.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPRODUCT] = [ifc.IFCDISTRIBUTIONPORT,ifc.IFCPORT,ifc.IFCGRID,ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCCIVILELEMENT,ifc.IFCBEAMSTANDARDCASE,ifc.IFCBEAM,ifc.IFCWINDOWSTANDARDCASE,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE,ifc.IFCSLAB,ifc.IFCSHADINGDEVICE,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATESTANDARDCASE,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBERSTANDARDCASE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOORSTANDARDCASE,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMNSTANDARDCASE,ifc.IFCCOLUMN,ifc.IFCCHIMNEY,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCGEOGRAPHICELEMENT,ifc.IFCSYSTEMFURNITUREELEMENT,ifc.IFCFURNITURE,ifc.IFCFURNISHINGELEMENT,ifc.IFCSURFACEFEATURE,ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCBUILDINGELEMENTPART,ifc.IFCVIBRATIONISOLATOR,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY,ifc.IFCELEMENT,ifc.IFCANNOTATION,ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER,ifc.IFCSTRUCTURALITEM,ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALSURFACEACTION,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALCURVEACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALCURVEREACTION,ifc.IFCSTRUCTURALSURFACEREACTION,ifc.IFCSTRUCTURALREACTION,ifc.IFCSTRUCTURALACTIVITY,ifc.IFCEXTERNALSPATIALELEMENT,ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALZONE,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALELEMENT,ifc.IFCPROXY];
InversePropertyDef['IFC4'][ifc.IFCPRODUCT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPROJECT] = (d: RawLineData) => { return IFC4.IfcProject.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROJECT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Declares',ifc.IFCRELDECLARES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROJECTLIBRARY] = (d: RawLineData) => { return IFC4.IfcProjectLibrary.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROJECTLIBRARY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Declares',ifc.IFCRELDECLARES,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYBOUNDEDVALUE] = (d: RawLineData) => { return IFC4.IfcPropertyBoundedValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYBOUNDEDVALUE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYENUMERATEDVALUE] = (d: RawLineData) => { return IFC4.IfcPropertyEnumeratedValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYENUMERATEDVALUE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYLISTVALUE] = (d: RawLineData) => { return IFC4.IfcPropertyListValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYLISTVALUE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYREFERENCEVALUE] = (d: RawLineData) => { return IFC4.IfcPropertyReferenceValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYREFERENCEVALUE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYSET] = (d: RawLineData) => { return IFC4.IfcPropertySet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYSET] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYSETTEMPLATE] = (d: RawLineData) => { return IFC4.IfcPropertySetTemplate.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYSETTEMPLATE] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Defines',ifc.IFCRELDEFINESBYTEMPLATE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYSINGLEVALUE] = (d: RawLineData) => { return IFC4.IfcPropertySingleValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYSINGLEVALUE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYTABLEVALUE] = (d: RawLineData) => { return IFC4.IfcPropertyTableValue.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROPERTYTABLEVALUE] = [
		['HasExternalReferences',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['PartOfPset',ifc.IFCPROPERTYSET,4,true],
		['PropertyForDependance',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],
		['PropertyDependsOn',ifc.IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],
		['PartOfComplex',ifc.IFCCOMPLEXPROPERTY,3,true],
		['HasConstraints',ifc.IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],
		['HasApprovals',ifc.IFCRESOURCEAPPROVALRELATIONSHIP,2,true],
];
FromRawLineData['IFC4'][ifc.IFCPROPERTYTEMPLATE] = (d: RawLineData) => { return IFC4.IfcPropertyTemplate.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPROPERTYTEMPLATE] = [ifc.IFCCOMPLEXPROPERTYTEMPLATE,ifc.IFCSIMPLEPROPERTYTEMPLATE];
InversePropertyDef['IFC4'][ifc.IFCPROPERTYTEMPLATE] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PartOfComplexTemplate',ifc.IFCCOMPLEXPROPERTYTEMPLATE,6,true],
		['PartOfPsetTemplate',ifc.IFCPROPERTYSETTEMPLATE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPROXY] = (d: RawLineData) => { return IFC4.IfcProxy.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROXY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCRECTANGLEHOLLOWPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcRectangleHollowProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRECTANGLEHOLLOWPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCRECTANGULARPYRAMID] = (d: RawLineData) => { return IFC4.IfcRectangularPyramid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRECTANGULARPYRAMID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCRECTANGULARTRIMMEDSURFACE] = (d: RawLineData) => { return IFC4.IfcRectangularTrimmedSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRECTANGULARTRIMMEDSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d: RawLineData) => { return IFC4.IfcReinforcementDefinitionProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREINFORCEMENTDEFINITIONPROPERTIES] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCRELASSIGNS] = (d: RawLineData) => { return IFC4.IfcRelAssigns.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELASSIGNS] = [ifc.IFCRELASSIGNSTORESOURCE,ifc.IFCRELASSIGNSTOPRODUCT,ifc.IFCRELASSIGNSTOPROCESS,ifc.IFCRELASSIGNSTOGROUPBYFACTOR,ifc.IFCRELASSIGNSTOGROUP,ifc.IFCRELASSIGNSTOCONTROL,ifc.IFCRELASSIGNSTOACTOR];
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTOACTOR] = (d: RawLineData) => { return IFC4.IfcRelAssignsToActor.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTOCONTROL] = (d: RawLineData) => { return IFC4.IfcRelAssignsToControl.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTOGROUP] = (d: RawLineData) => { return IFC4.IfcRelAssignsToGroup.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELASSIGNSTOGROUP] = [ifc.IFCRELASSIGNSTOGROUPBYFACTOR];
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTOGROUPBYFACTOR] = (d: RawLineData) => { return IFC4.IfcRelAssignsToGroupByFactor.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTOPROCESS] = (d: RawLineData) => { return IFC4.IfcRelAssignsToProcess.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTOPRODUCT] = (d: RawLineData) => { return IFC4.IfcRelAssignsToProduct.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSIGNSTORESOURCE] = (d: RawLineData) => { return IFC4.IfcRelAssignsToResource.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATES] = (d: RawLineData) => { return IFC4.IfcRelAssociates.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELASSOCIATES] = [ifc.IFCRELASSOCIATESMATERIAL,ifc.IFCRELASSOCIATESLIBRARY,ifc.IFCRELASSOCIATESDOCUMENT,ifc.IFCRELASSOCIATESCONSTRAINT,ifc.IFCRELASSOCIATESCLASSIFICATION,ifc.IFCRELASSOCIATESAPPROVAL];
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATESAPPROVAL] = (d: RawLineData) => { return IFC4.IfcRelAssociatesApproval.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATESCLASSIFICATION] = (d: RawLineData) => { return IFC4.IfcRelAssociatesClassification.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATESCONSTRAINT] = (d: RawLineData) => { return IFC4.IfcRelAssociatesConstraint.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATESDOCUMENT] = (d: RawLineData) => { return IFC4.IfcRelAssociatesDocument.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATESLIBRARY] = (d: RawLineData) => { return IFC4.IfcRelAssociatesLibrary.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELASSOCIATESMATERIAL] = (d: RawLineData) => { return IFC4.IfcRelAssociatesMaterial.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONNECTS] = (d: RawLineData) => { return IFC4.IfcRelConnects.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELCONNECTS] = [ifc.IFCRELSPACEBOUNDARY2NDLEVEL,ifc.IFCRELSPACEBOUNDARY1STLEVEL,ifc.IFCRELSPACEBOUNDARY,ifc.IFCRELSERVICESBUILDINGS,ifc.IFCRELSEQUENCE,ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,ifc.IFCRELINTERFERESELEMENTS,ifc.IFCRELFLOWCONTROLELEMENTS,ifc.IFCRELFILLSELEMENT,ifc.IFCRELCOVERSSPACES,ifc.IFCRELCOVERSBLDGELEMENTS,ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,ifc.IFCRELCONNECTSWITHECCENTRICITY,ifc.IFCRELCONNECTSSTRUCTURALMEMBER,ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,ifc.IFCRELCONNECTSPORTS,ifc.IFCRELCONNECTSPORTTOELEMENT,ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS,ifc.IFCRELCONNECTSELEMENTS];
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSELEMENTS] = (d: RawLineData) => { return IFC4.IfcRelConnectsElements.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELCONNECTSELEMENTS] = [ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,ifc.IFCRELCONNECTSPATHELEMENTS];
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSPATHELEMENTS] = (d: RawLineData) => { return IFC4.IfcRelConnectsPathElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSPORTTOELEMENT] = (d: RawLineData) => { return IFC4.IfcRelConnectsPortToElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSPORTS] = (d: RawLineData) => { return IFC4.IfcRelConnectsPorts.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSSTRUCTURALACTIVITY] = (d: RawLineData) => { return IFC4.IfcRelConnectsStructuralActivity.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSSTRUCTURALMEMBER] = (d: RawLineData) => { return IFC4.IfcRelConnectsStructuralMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELCONNECTSSTRUCTURALMEMBER] = [ifc.IFCRELCONNECTSWITHECCENTRICITY];
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSWITHECCENTRICITY] = (d: RawLineData) => { return IFC4.IfcRelConnectsWithEccentricity.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d: RawLineData) => { return IFC4.IfcRelConnectsWithRealizingElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d: RawLineData) => { return IFC4.IfcRelContainedInSpatialStructure.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCOVERSBLDGELEMENTS] = (d: RawLineData) => { return IFC4.IfcRelCoversBldgElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELCOVERSSPACES] = (d: RawLineData) => { return IFC4.IfcRelCoversSpaces.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELDECLARES] = (d: RawLineData) => { return IFC4.IfcRelDeclares.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELDECOMPOSES] = (d: RawLineData) => { return IFC4.IfcRelDecomposes.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELDECOMPOSES] = [ifc.IFCRELAGGREGATES,ifc.IFCRELVOIDSELEMENT,ifc.IFCRELPROJECTSELEMENT,ifc.IFCRELNESTS];
FromRawLineData['IFC4'][ifc.IFCRELDEFINES] = (d: RawLineData) => { return IFC4.IfcRelDefines.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELDEFINES] = [ifc.IFCRELDEFINESBYTYPE,ifc.IFCRELDEFINESBYTEMPLATE,ifc.IFCRELDEFINESBYPROPERTIES,ifc.IFCRELDEFINESBYOBJECT];
FromRawLineData['IFC4'][ifc.IFCRELDEFINESBYOBJECT] = (d: RawLineData) => { return IFC4.IfcRelDefinesByObject.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELDEFINESBYPROPERTIES] = (d: RawLineData) => { return IFC4.IfcRelDefinesByProperties.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELDEFINESBYTEMPLATE] = (d: RawLineData) => { return IFC4.IfcRelDefinesByTemplate.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELDEFINESBYTYPE] = (d: RawLineData) => { return IFC4.IfcRelDefinesByType.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELFILLSELEMENT] = (d: RawLineData) => { return IFC4.IfcRelFillsElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELFLOWCONTROLELEMENTS] = (d: RawLineData) => { return IFC4.IfcRelFlowControlElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELINTERFERESELEMENTS] = (d: RawLineData) => { return IFC4.IfcRelInterferesElements.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELNESTS] = (d: RawLineData) => { return IFC4.IfcRelNests.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELPROJECTSELEMENT] = (d: RawLineData) => { return IFC4.IfcRelProjectsElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d: RawLineData) => { return IFC4.IfcRelReferencedInSpatialStructure.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELSEQUENCE] = (d: RawLineData) => { return IFC4.IfcRelSequence.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELSERVICESBUILDINGS] = (d: RawLineData) => { return IFC4.IfcRelServicesBuildings.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCRELSPACEBOUNDARY] = (d: RawLineData) => { return IFC4.IfcRelSpaceBoundary.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELSPACEBOUNDARY] = [ifc.IFCRELSPACEBOUNDARY2NDLEVEL,ifc.IFCRELSPACEBOUNDARY1STLEVEL];
FromRawLineData['IFC4'][ifc.IFCRELSPACEBOUNDARY1STLEVEL] = (d: RawLineData) => { return IFC4.IfcRelSpaceBoundary1stLevel.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRELSPACEBOUNDARY1STLEVEL] = [ifc.IFCRELSPACEBOUNDARY2NDLEVEL];
InversePropertyDef['IFC4'][ifc.IFCRELSPACEBOUNDARY1STLEVEL] = [
		['InnerBoundaries',ifc.IFCRELSPACEBOUNDARY1STLEVEL,9,true],
];
FromRawLineData['IFC4'][ifc.IFCRELSPACEBOUNDARY2NDLEVEL] = (d: RawLineData) => { return IFC4.IfcRelSpaceBoundary2ndLevel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRELSPACEBOUNDARY2NDLEVEL] = [
		['InnerBoundaries',ifc.IFCRELSPACEBOUNDARY1STLEVEL,9,true],
		['Corresponds',ifc.IFCRELSPACEBOUNDARY2NDLEVEL,10,true],
];
FromRawLineData['IFC4'][ifc.IFCRELVOIDSELEMENT] = (d: RawLineData) => { return IFC4.IfcRelVoidsElement.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (d: RawLineData) => { return IFC4.IfcReparametrisedCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['UsingCurves',ifc.IFCCOMPOSITECURVE,0,true],
];
FromRawLineData['IFC4'][ifc.IFCRESOURCE] = (d: RawLineData) => { return IFC4.IfcResource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCRESOURCE] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE,ifc.IFCCONSTRUCTIONRESOURCE];
InversePropertyDef['IFC4'][ifc.IFCRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCREVOLVEDAREASOLID] = (d: RawLineData) => { return IFC4.IfcRevolvedAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCREVOLVEDAREASOLID] = [ifc.IFCREVOLVEDAREASOLIDTAPERED];
InversePropertyDef['IFC4'][ifc.IFCREVOLVEDAREASOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCREVOLVEDAREASOLIDTAPERED] = (d: RawLineData) => { return IFC4.IfcRevolvedAreaSolidTapered.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREVOLVEDAREASOLIDTAPERED] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCRIGHTCIRCULARCONE] = (d: RawLineData) => { return IFC4.IfcRightCircularCone.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRIGHTCIRCULARCONE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCRIGHTCIRCULARCYLINDER] = (d: RawLineData) => { return IFC4.IfcRightCircularCylinder.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRIGHTCIRCULARCYLINDER] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSIMPLEPROPERTYTEMPLATE] = (d: RawLineData) => { return IFC4.IfcSimplePropertyTemplate.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSIMPLEPROPERTYTEMPLATE] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PartOfComplexTemplate',ifc.IFCCOMPLEXPROPERTYTEMPLATE,6,true],
		['PartOfPsetTemplate',ifc.IFCPROPERTYSETTEMPLATE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSPATIALELEMENT] = (d: RawLineData) => { return IFC4.IfcSpatialElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSPATIALELEMENT] = [ifc.IFCEXTERNALSPATIALELEMENT,ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT,ifc.IFCSPATIALZONE,ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING,ifc.IFCSPATIALSTRUCTUREELEMENT];
InversePropertyDef['IFC4'][ifc.IFCSPATIALELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSPATIALELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcSpatialElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSPATIALELEMENTTYPE] = [ifc.IFCSPATIALZONETYPE,ifc.IFCSPACETYPE,ifc.IFCSPATIALSTRUCTUREELEMENTTYPE];
InversePropertyDef['IFC4'][ifc.IFCSPATIALELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { return IFC4.IfcSpatialStructureElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSPATIALSTRUCTUREELEMENT] = [ifc.IFCSPACE,ifc.IFCSITE,ifc.IFCBUILDINGSTOREY,ifc.IFCBUILDING];
InversePropertyDef['IFC4'][ifc.IFCSPATIALSTRUCTUREELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSPATIALSTRUCTUREELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcSpatialStructureElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSPATIALSTRUCTUREELEMENTTYPE] = [ifc.IFCSPACETYPE];
InversePropertyDef['IFC4'][ifc.IFCSPATIALSTRUCTUREELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSPATIALZONE] = (d: RawLineData) => { return IFC4.IfcSpatialZone.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPATIALZONE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSPATIALZONETYPE] = (d: RawLineData) => { return IFC4.IfcSpatialZoneType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPATIALZONETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSPHERE] = (d: RawLineData) => { return IFC4.IfcSphere.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPHERE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSPHERICALSURFACE] = (d: RawLineData) => { return IFC4.IfcSphericalSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPHERICALSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALACTIVITY] = (d: RawLineData) => { return IFC4.IfcStructuralActivity.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALACTIVITY] = [ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALSURFACEACTION,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALCURVEACTION,ifc.IFCSTRUCTURALACTION,ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALCURVEREACTION,ifc.IFCSTRUCTURALSURFACEREACTION,ifc.IFCSTRUCTURALREACTION];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALACTIVITY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALITEM] = (d: RawLineData) => { return IFC4.IfcStructuralItem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALITEM] = [ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION,ifc.IFCSTRUCTURALCONNECTION,ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER,ifc.IFCSTRUCTURALMEMBER];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALITEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALMEMBER] = (d: RawLineData) => { return IFC4.IfcStructuralMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALMEMBER] = [ifc.IFCSTRUCTURALCURVEMEMBERVARYING,ifc.IFCSTRUCTURALCURVEMEMBER,ifc.IFCSTRUCTURALSURFACEMEMBERVARYING,ifc.IFCSTRUCTURALSURFACEMEMBER];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALREACTION] = (d: RawLineData) => { return IFC4.IfcStructuralReaction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALREACTION] = [ifc.IFCSTRUCTURALPOINTREACTION,ifc.IFCSTRUCTURALCURVEREACTION,ifc.IFCSTRUCTURALSURFACEREACTION];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALREACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALSURFACEMEMBER] = (d: RawLineData) => { return IFC4.IfcStructuralSurfaceMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALSURFACEMEMBER] = [ifc.IFCSTRUCTURALSURFACEMEMBERVARYING];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALSURFACEMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALSURFACEMEMBERVARYING] = (d: RawLineData) => { return IFC4.IfcStructuralSurfaceMemberVarying.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALSURFACEMEMBERVARYING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALSURFACEREACTION] = (d: RawLineData) => { return IFC4.IfcStructuralSurfaceReaction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALSURFACEREACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSUBCONTRACTRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcSubContractResourceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSUBCONTRACTRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACECURVE] = (d: RawLineData) => { return IFC4.IfcSurfaceCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSURFACECURVE] = [ifc.IFCSEAMCURVE,ifc.IFCINTERSECTIONCURVE];
InversePropertyDef['IFC4'][ifc.IFCSURFACECURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACECURVESWEPTAREASOLID] = (d: RawLineData) => { return IFC4.IfcSurfaceCurveSweptAreaSolid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSURFACECURVESWEPTAREASOLID] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACEOFLINEAREXTRUSION] = (d: RawLineData) => { return IFC4.IfcSurfaceOfLinearExtrusion.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSURFACEOFLINEAREXTRUSION] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACEOFREVOLUTION] = (d: RawLineData) => { return IFC4.IfcSurfaceOfRevolution.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSURFACEOFREVOLUTION] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSYSTEMFURNITUREELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcSystemFurnitureElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSYSTEMFURNITUREELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTASK] = (d: RawLineData) => { return IFC4.IfcTask.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTASK] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTASKTYPE] = (d: RawLineData) => { return IFC4.IfcTaskType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTASKTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTESSELLATEDFACESET] = (d: RawLineData) => { return IFC4.IfcTessellatedFaceSet.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCTESSELLATEDFACESET] = [ifc.IFCPOLYGONALFACESET,ifc.IFCTRIANGULATEDFACESET];
InversePropertyDef['IFC4'][ifc.IFCTESSELLATEDFACESET] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['HasColours',ifc.IFCINDEXEDCOLOURMAP,0,true],
		['HasTextures',ifc.IFCINDEXEDTEXTUREMAP,1,true],
];
FromRawLineData['IFC4'][ifc.IFCTOROIDALSURFACE] = (d: RawLineData) => { return IFC4.IfcToroidalSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTOROIDALSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTRANSPORTELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcTransportElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRANSPORTELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTRIANGULATEDFACESET] = (d: RawLineData) => { return IFC4.IfcTriangulatedFaceSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRIANGULATEDFACESET] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['HasColours',ifc.IFCINDEXEDCOLOURMAP,0,true],
		['HasTextures',ifc.IFCINDEXEDTEXTUREMAP,1,true],
];
FromRawLineData['IFC4'][ifc.IFCWINDOWLININGPROPERTIES] = (d: RawLineData) => { return IFC4.IfcWindowLiningProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWINDOWLININGPROPERTIES] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCWINDOWPANELPROPERTIES] = (d: RawLineData) => { return IFC4.IfcWindowPanelProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWINDOWPANELPROPERTIES] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCACTOR] = (d: RawLineData) => { return IFC4.IfcActor.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCACTOR] = [ifc.IFCOCCUPANT];
InversePropertyDef['IFC4'][ifc.IFCACTOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsActingUpon',ifc.IFCRELASSIGNSTOACTOR,6,true],
];
FromRawLineData['IFC4'][ifc.IFCADVANCEDBREP] = (d: RawLineData) => { return IFC4.IfcAdvancedBrep.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCADVANCEDBREP] = [ifc.IFCADVANCEDBREPWITHVOIDS];
InversePropertyDef['IFC4'][ifc.IFCADVANCEDBREP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCADVANCEDBREPWITHVOIDS] = (d: RawLineData) => { return IFC4.IfcAdvancedBrepWithVoids.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCADVANCEDBREPWITHVOIDS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCANNOTATION] = (d: RawLineData) => { return IFC4.IfcAnnotation.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCANNOTATION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBSPLINESURFACE] = (d: RawLineData) => { return IFC4.IfcBSplineSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBSPLINESURFACE] = [ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS,ifc.IFCBSPLINESURFACEWITHKNOTS];
InversePropertyDef['IFC4'][ifc.IFCBSPLINESURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBSPLINESURFACEWITHKNOTS] = (d: RawLineData) => { return IFC4.IfcBSplineSurfaceWithKnots.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBSPLINESURFACEWITHKNOTS] = [ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS];
InversePropertyDef['IFC4'][ifc.IFCBSPLINESURFACEWITHKNOTS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBLOCK] = (d: RawLineData) => { return IFC4.IfcBlock.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBLOCK] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBOOLEANCLIPPINGRESULT] = (d: RawLineData) => { return IFC4.IfcBooleanClippingResult.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBOOLEANCLIPPINGRESULT] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBOUNDEDCURVE] = (d: RawLineData) => { return IFC4.IfcBoundedCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBOUNDEDCURVE] = [ifc.IFCRATIONALBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVE,ifc.IFCTRIMMEDCURVE,ifc.IFCPOLYLINE,ifc.IFCINDEXEDPOLYCURVE,ifc.IFCOUTERBOUNDARYCURVE,ifc.IFCBOUNDARYCURVE,ifc.IFCCOMPOSITECURVEONSURFACE,ifc.IFCCOMPOSITECURVE];
InversePropertyDef['IFC4'][ifc.IFCBOUNDEDCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDING] = (d: RawLineData) => { return IFC4.IfcBuilding.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcBuildingElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBUILDINGELEMENTTYPE] = [ifc.IFCBUILDINGELEMENTPROXYTYPE,ifc.IFCBEAMTYPE,ifc.IFCWINDOWTYPE,ifc.IFCWALLTYPE,ifc.IFCSTAIRTYPE,ifc.IFCSTAIRFLIGHTTYPE,ifc.IFCSLABTYPE,ifc.IFCSHADINGDEVICETYPE,ifc.IFCROOFTYPE,ifc.IFCRAMPTYPE,ifc.IFCRAMPFLIGHTTYPE,ifc.IFCRAILINGTYPE,ifc.IFCPLATETYPE,ifc.IFCPILETYPE,ifc.IFCMEMBERTYPE,ifc.IFCFOOTINGTYPE,ifc.IFCDOORTYPE,ifc.IFCCURTAINWALLTYPE,ifc.IFCCOVERINGTYPE,ifc.IFCCOLUMNTYPE,ifc.IFCCHIMNEYTYPE];
InversePropertyDef['IFC4'][ifc.IFCBUILDINGELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGSTOREY] = (d: RawLineData) => { return IFC4.IfcBuildingStorey.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDINGSTOREY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCHIMNEYTYPE] = (d: RawLineData) => { return IFC4.IfcChimneyType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCHIMNEYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCIRCLEHOLLOWPROFILEDEF] = (d: RawLineData) => { return IFC4.IfcCircleHollowProfileDef.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCIRCLEHOLLOWPROFILEDEF] = [
		['HasExternalReference',ifc.IFCEXTERNALREFERENCERELATIONSHIP,3,true],
		['HasProperties',ifc.IFCPROFILEPROPERTIES,3,true],
];
FromRawLineData['IFC4'][ifc.IFCCIVILELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcCivilElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCIVILELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOLUMNTYPE] = (d: RawLineData) => { return IFC4.IfcColumnType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOLUMNTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMPLEXPROPERTYTEMPLATE] = (d: RawLineData) => { return IFC4.IfcComplexPropertyTemplate.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMPLEXPROPERTYTEMPLATE] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['PartOfComplexTemplate',ifc.IFCCOMPLEXPROPERTYTEMPLATE,6,true],
		['PartOfPsetTemplate',ifc.IFCPROPERTYSETTEMPLATE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMPOSITECURVE] = (d: RawLineData) => { return IFC4.IfcCompositeCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOMPOSITECURVE] = [ifc.IFCOUTERBOUNDARYCURVE,ifc.IFCBOUNDARYCURVE,ifc.IFCCOMPOSITECURVEONSURFACE];
InversePropertyDef['IFC4'][ifc.IFCCOMPOSITECURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMPOSITECURVEONSURFACE] = (d: RawLineData) => { return IFC4.IfcCompositeCurveOnSurface.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOMPOSITECURVEONSURFACE] = [ifc.IFCOUTERBOUNDARYCURVE,ifc.IFCBOUNDARYCURVE];
InversePropertyDef['IFC4'][ifc.IFCCOMPOSITECURVEONSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCONIC] = (d: RawLineData) => { return IFC4.IfcConic.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONIC] = [ifc.IFCCIRCLE,ifc.IFCELLIPSE];
InversePropertyDef['IFC4'][ifc.IFCCONIC] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcConstructionEquipmentResourceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcConstructionMaterialResourceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONMATERIALRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (d: RawLineData) => { return IFC4.IfcConstructionProductResourceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONRESOURCE] = (d: RawLineData) => { return IFC4.IfcConstructionResource.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONSTRUCTIONRESOURCE] = [ifc.IFCCONSTRUCTIONPRODUCTRESOURCE,ifc.IFCCONSTRUCTIONMATERIALRESOURCE,ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE,ifc.IFCSUBCONTRACTRESOURCE,ifc.IFCLABORRESOURCE,ifc.IFCCREWRESOURCE];
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONTROL] = (d: RawLineData) => { return IFC4.IfcControl.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCONTROL] = [ifc.IFCACTIONREQUEST,ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN,ifc.IFCWORKCONTROL,ifc.IFCWORKCALENDAR,ifc.IFCPROJECTORDER,ifc.IFCPERMIT,ifc.IFCPERFORMANCEHISTORY,ifc.IFCCOSTSCHEDULE,ifc.IFCCOSTITEM];
InversePropertyDef['IFC4'][ifc.IFCCONTROL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOSTITEM] = (d: RawLineData) => { return IFC4.IfcCostItem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOSTITEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOSTSCHEDULE] = (d: RawLineData) => { return IFC4.IfcCostSchedule.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOSTSCHEDULE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOVERINGTYPE] = (d: RawLineData) => { return IFC4.IfcCoveringType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOVERINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCREWRESOURCE] = (d: RawLineData) => { return IFC4.IfcCrewResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCREWRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCURTAINWALLTYPE] = (d: RawLineData) => { return IFC4.IfcCurtainWallType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCURTAINWALLTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCYLINDRICALSURFACE] = (d: RawLineData) => { return IFC4.IfcCylindricalSurface.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCYLINDRICALSURFACE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcDistributionElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONELEMENTTYPE] = [ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE,ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE,ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE,ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcDistributionFlowElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE] = [ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE,ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE,ifc.IFCFLOWTREATMENTDEVICETYPE,ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE,ifc.IFCFLOWTERMINALTYPE,ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE,ifc.IFCFLOWSTORAGEDEVICETYPE,ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE,ifc.IFCFLOWSEGMENTTYPE,ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE,ifc.IFCFLOWMOVINGDEVICETYPE,ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE,ifc.IFCFLOWFITTINGTYPE,ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE,ifc.IFCFLOWCONTROLLERTYPE,ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE,ifc.IFCENERGYCONVERSIONDEVICETYPE];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONFLOWELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDOORLININGPROPERTIES] = (d: RawLineData) => { return IFC4.IfcDoorLiningProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOORLININGPROPERTIES] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDOORPANELPROPERTIES] = (d: RawLineData) => { return IFC4.IfcDoorPanelProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOORPANELPROPERTIES] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDOORTYPE] = (d: RawLineData) => { return IFC4.IfcDoorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d: RawLineData) => { return IFC4.IfcDraughtingPreDefinedColour.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d: RawLineData) => { return IFC4.IfcDraughtingPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCELEMENT] = (d: RawLineData) => { return IFC4.IfcElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCELEMENT] = [ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT,ifc.IFCDISTRIBUTIONELEMENT,ifc.IFCCIVILELEMENT,ifc.IFCBEAMSTANDARDCASE,ifc.IFCBEAM,ifc.IFCWINDOWSTANDARDCASE,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE,ifc.IFCSLAB,ifc.IFCSHADINGDEVICE,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATESTANDARDCASE,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBERSTANDARDCASE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOORSTANDARDCASE,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMNSTANDARDCASE,ifc.IFCCOLUMN,ifc.IFCCHIMNEY,ifc.IFCBUILDINGELEMENTPROXY,ifc.IFCBUILDINGELEMENT,ifc.IFCVIRTUALELEMENT,ifc.IFCTRANSPORTELEMENT,ifc.IFCGEOGRAPHICELEMENT,ifc.IFCSYSTEMFURNITUREELEMENT,ifc.IFCFURNITURE,ifc.IFCFURNISHINGELEMENT,ifc.IFCSURFACEFEATURE,ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION,ifc.IFCFEATUREELEMENT,ifc.IFCDISCRETEACCESSORY,ifc.IFCBUILDINGELEMENTPART,ifc.IFCVIBRATIONISOLATOR,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER,ifc.IFCELEMENTCOMPONENT,ifc.IFCELEMENTASSEMBLY];
InversePropertyDef['IFC4'][ifc.IFCELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTASSEMBLY] = (d: RawLineData) => { return IFC4.IfcElementAssembly.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELEMENTASSEMBLY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTASSEMBLYTYPE] = (d: RawLineData) => { return IFC4.IfcElementAssemblyType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELEMENTASSEMBLYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTCOMPONENT] = (d: RawLineData) => { return IFC4.IfcElementComponent.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCELEMENTCOMPONENT] = [ifc.IFCDISCRETEACCESSORY,ifc.IFCBUILDINGELEMENTPART,ifc.IFCVIBRATIONISOLATOR,ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH,ifc.IFCREINFORCINGELEMENT,ifc.IFCMECHANICALFASTENER,ifc.IFCFASTENER];
InversePropertyDef['IFC4'][ifc.IFCELEMENTCOMPONENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCELEMENTCOMPONENTTYPE] = (d: RawLineData) => { return IFC4.IfcElementComponentType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCELEMENTCOMPONENTTYPE] = [ifc.IFCDISCRETEACCESSORYTYPE,ifc.IFCBUILDINGELEMENTPARTTYPE,ifc.IFCVIBRATIONISOLATORTYPE,ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE,ifc.IFCREINFORCINGELEMENTTYPE,ifc.IFCMECHANICALFASTENERTYPE,ifc.IFCFASTENERTYPE];
InversePropertyDef['IFC4'][ifc.IFCELEMENTCOMPONENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELLIPSE] = (d: RawLineData) => { return IFC4.IfcEllipse.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELLIPSE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCENERGYCONVERSIONDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcEnergyConversionDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCENERGYCONVERSIONDEVICETYPE] = [ifc.IFCELECTRICMOTORTYPE,ifc.IFCELECTRICGENERATORTYPE,ifc.IFCCOOLINGTOWERTYPE,ifc.IFCCOOLEDBEAMTYPE,ifc.IFCCONDENSERTYPE,ifc.IFCCOILTYPE,ifc.IFCCHILLERTYPE,ifc.IFCBURNERTYPE,ifc.IFCBOILERTYPE,ifc.IFCAIRTOAIRHEATRECOVERYTYPE,ifc.IFCUNITARYEQUIPMENTTYPE,ifc.IFCTUBEBUNDLETYPE,ifc.IFCTRANSFORMERTYPE,ifc.IFCSOLARDEVICETYPE,ifc.IFCMOTORCONNECTIONTYPE,ifc.IFCHUMIDIFIERTYPE,ifc.IFCHEATEXCHANGERTYPE,ifc.IFCEVAPORATORTYPE,ifc.IFCEVAPORATIVECOOLERTYPE,ifc.IFCENGINETYPE];
InversePropertyDef['IFC4'][ifc.IFCENERGYCONVERSIONDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCENGINETYPE] = (d: RawLineData) => { return IFC4.IfcEngineType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCENGINETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCEVAPORATIVECOOLERTYPE] = (d: RawLineData) => { return IFC4.IfcEvaporativeCoolerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEVAPORATIVECOOLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCEVAPORATORTYPE] = (d: RawLineData) => { return IFC4.IfcEvaporatorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEVAPORATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCEVENT] = (d: RawLineData) => { return IFC4.IfcEvent.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEVENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { return IFC4.IfcExternalSpatialStructureElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT] = [ifc.IFCEXTERNALSPATIALELEMENT];
InversePropertyDef['IFC4'][ifc.IFCEXTERNALSPATIALSTRUCTUREELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFACETEDBREP] = (d: RawLineData) => { return IFC4.IfcFacetedBrep.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFACETEDBREP] = [ifc.IFCFACETEDBREPWITHVOIDS];
InversePropertyDef['IFC4'][ifc.IFCFACETEDBREP] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFACETEDBREPWITHVOIDS] = (d: RawLineData) => { return IFC4.IfcFacetedBrepWithVoids.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFACETEDBREPWITHVOIDS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCFASTENER] = (d: RawLineData) => { return IFC4.IfcFastener.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFASTENER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCFASTENERTYPE] = (d: RawLineData) => { return IFC4.IfcFastenerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFASTENERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFEATUREELEMENT] = (d: RawLineData) => { return IFC4.IfcFeatureElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFEATUREELEMENT] = [ifc.IFCSURFACEFEATURE,ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT,ifc.IFCFEATUREELEMENTSUBTRACTION,ifc.IFCPROJECTIONELEMENT,ifc.IFCFEATUREELEMENTADDITION];
InversePropertyDef['IFC4'][ifc.IFCFEATUREELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCFEATUREELEMENTADDITION] = (d: RawLineData) => { return IFC4.IfcFeatureElementAddition.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFEATUREELEMENTADDITION] = [ifc.IFCPROJECTIONELEMENT];
InversePropertyDef['IFC4'][ifc.IFCFEATUREELEMENTADDITION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['ProjectsElements',ifc.IFCRELPROJECTSELEMENT,5,false],
];
FromRawLineData['IFC4'][ifc.IFCFEATUREELEMENTSUBTRACTION] = (d: RawLineData) => { return IFC4.IfcFeatureElementSubtraction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFEATUREELEMENTSUBTRACTION] = [ifc.IFCVOIDINGFEATURE,ifc.IFCOPENINGSTANDARDCASE,ifc.IFCOPENINGELEMENT];
InversePropertyDef['IFC4'][ifc.IFCFEATUREELEMENTSUBTRACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
];
FromRawLineData['IFC4'][ifc.IFCFLOWCONTROLLERTYPE] = (d: RawLineData) => { return IFC4.IfcFlowControllerType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWCONTROLLERTYPE] = [ifc.IFCELECTRICTIMECONTROLTYPE,ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE,ifc.IFCDAMPERTYPE,ifc.IFCAIRTERMINALBOXTYPE,ifc.IFCVALVETYPE,ifc.IFCSWITCHINGDEVICETYPE,ifc.IFCPROTECTIVEDEVICETYPE,ifc.IFCFLOWMETERTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWCONTROLLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWFITTINGTYPE] = (d: RawLineData) => { return IFC4.IfcFlowFittingType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWFITTINGTYPE] = [ifc.IFCDUCTFITTINGTYPE,ifc.IFCCABLEFITTINGTYPE,ifc.IFCCABLECARRIERFITTINGTYPE,ifc.IFCPIPEFITTINGTYPE,ifc.IFCJUNCTIONBOXTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWMETERTYPE] = (d: RawLineData) => { return IFC4.IfcFlowMeterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFLOWMETERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWMOVINGDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcFlowMovingDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWMOVINGDEVICETYPE] = [ifc.IFCFANTYPE,ifc.IFCCOMPRESSORTYPE,ifc.IFCPUMPTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWMOVINGDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWSEGMENTTYPE] = (d: RawLineData) => { return IFC4.IfcFlowSegmentType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWSEGMENTTYPE] = [ifc.IFCDUCTSEGMENTTYPE,ifc.IFCCABLESEGMENTTYPE,ifc.IFCCABLECARRIERSEGMENTTYPE,ifc.IFCPIPESEGMENTTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWSEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWSTORAGEDEVICETYPE] = [ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE,ifc.IFCTANKTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWSTORAGEDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWTERMINALTYPE] = (d: RawLineData) => { return IFC4.IfcFlowTerminalType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWTERMINALTYPE] = [ifc.IFCFIRESUPPRESSIONTERMINALTYPE,ifc.IFCELECTRICAPPLIANCETYPE,ifc.IFCCOMMUNICATIONSAPPLIANCETYPE,ifc.IFCAUDIOVISUALAPPLIANCETYPE,ifc.IFCAIRTERMINALTYPE,ifc.IFCWASTETERMINALTYPE,ifc.IFCSTACKTERMINALTYPE,ifc.IFCSPACEHEATERTYPE,ifc.IFCSANITARYTERMINALTYPE,ifc.IFCOUTLETTYPE,ifc.IFCMEDICALDEVICETYPE,ifc.IFCLIGHTFIXTURETYPE,ifc.IFCLAMPTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWTREATMENTDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcFlowTreatmentDeviceType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWTREATMENTDEVICETYPE] = [ifc.IFCFILTERTYPE,ifc.IFCDUCTSILENCERTYPE,ifc.IFCINTERCEPTORTYPE];
InversePropertyDef['IFC4'][ifc.IFCFLOWTREATMENTDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFOOTINGTYPE] = (d: RawLineData) => { return IFC4.IfcFootingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFOOTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFURNISHINGELEMENT] = (d: RawLineData) => { return IFC4.IfcFurnishingElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFURNISHINGELEMENT] = [ifc.IFCSYSTEMFURNITUREELEMENT,ifc.IFCFURNITURE];
InversePropertyDef['IFC4'][ifc.IFCFURNISHINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCFURNITURE] = (d: RawLineData) => { return IFC4.IfcFurniture.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFURNITURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCGEOGRAPHICELEMENT] = (d: RawLineData) => { return IFC4.IfcGeographicElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGEOGRAPHICELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCGRID] = (d: RawLineData) => { return IFC4.IfcGrid.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCGRID] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
];
FromRawLineData['IFC4'][ifc.IFCGROUP] = (d: RawLineData) => { return IFC4.IfcGroup.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCGROUP] = [ifc.IFCASSET,ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCDISTRIBUTIONCIRCUIT,ifc.IFCDISTRIBUTIONSYSTEM,ifc.IFCBUILDINGSYSTEM,ifc.IFCZONE,ifc.IFCSYSTEM,ifc.IFCSTRUCTURALRESULTGROUP,ifc.IFCSTRUCTURALLOADCASE,ifc.IFCSTRUCTURALLOADGROUP,ifc.IFCINVENTORY];
InversePropertyDef['IFC4'][ifc.IFCGROUP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
];
FromRawLineData['IFC4'][ifc.IFCHEATEXCHANGERTYPE] = (d: RawLineData) => { return IFC4.IfcHeatExchangerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCHEATEXCHANGERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCHUMIDIFIERTYPE] = (d: RawLineData) => { return IFC4.IfcHumidifierType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCHUMIDIFIERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCINDEXEDPOLYCURVE] = (d: RawLineData) => { return IFC4.IfcIndexedPolyCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCINDEXEDPOLYCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCINTERCEPTORTYPE] = (d: RawLineData) => { return IFC4.IfcInterceptorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCINTERCEPTORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCINTERSECTIONCURVE] = (d: RawLineData) => { return IFC4.IfcIntersectionCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCINTERSECTIONCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCINVENTORY] = (d: RawLineData) => { return IFC4.IfcInventory.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCINVENTORY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
];
FromRawLineData['IFC4'][ifc.IFCJUNCTIONBOXTYPE] = (d: RawLineData) => { return IFC4.IfcJunctionBoxType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCJUNCTIONBOXTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCLABORRESOURCE] = (d: RawLineData) => { return IFC4.IfcLaborResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLABORRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCLAMPTYPE] = (d: RawLineData) => { return IFC4.IfcLampType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLAMPTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTFIXTURETYPE] = (d: RawLineData) => { return IFC4.IfcLightFixtureType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIGHTFIXTURETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCMECHANICALFASTENER] = (d: RawLineData) => { return IFC4.IfcMechanicalFastener.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMECHANICALFASTENER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCMECHANICALFASTENERTYPE] = (d: RawLineData) => { return IFC4.IfcMechanicalFastenerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMECHANICALFASTENERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCMEDICALDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcMedicalDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMEDICALDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCMEMBERTYPE] = (d: RawLineData) => { return IFC4.IfcMemberType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMEMBERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCMOTORCONNECTIONTYPE] = (d: RawLineData) => { return IFC4.IfcMotorConnectionType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMOTORCONNECTIONTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCOCCUPANT] = (d: RawLineData) => { return IFC4.IfcOccupant.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOCCUPANT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsActingUpon',ifc.IFCRELASSIGNSTOACTOR,6,true],
];
FromRawLineData['IFC4'][ifc.IFCOPENINGELEMENT] = (d: RawLineData) => { return IFC4.IfcOpeningElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCOPENINGELEMENT] = [ifc.IFCOPENINGSTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCOPENINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
		['HasFillings',ifc.IFCRELFILLSELEMENT,4,true],
];
FromRawLineData['IFC4'][ifc.IFCOPENINGSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcOpeningStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOPENINGSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
		['HasFillings',ifc.IFCRELFILLSELEMENT,4,true],
];
FromRawLineData['IFC4'][ifc.IFCOUTLETTYPE] = (d: RawLineData) => { return IFC4.IfcOutletType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOUTLETTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPERFORMANCEHISTORY] = (d: RawLineData) => { return IFC4.IfcPerformanceHistory.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPERFORMANCEHISTORY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPERMEABLECOVERINGPROPERTIES] = (d: RawLineData) => { return IFC4.IfcPermeableCoveringProperties.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPERMEABLECOVERINGPROPERTIES] = [
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['DefinesType',ifc.IFCTYPEOBJECT,5,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYTEMPLATE,4,true],
		['DefinesOccurrence',ifc.IFCRELDEFINESBYPROPERTIES,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPERMIT] = (d: RawLineData) => { return IFC4.IfcPermit.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPERMIT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPILETYPE] = (d: RawLineData) => { return IFC4.IfcPileType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPILETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPIPEFITTINGTYPE] = (d: RawLineData) => { return IFC4.IfcPipeFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPIPEFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPIPESEGMENTTYPE] = (d: RawLineData) => { return IFC4.IfcPipeSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPIPESEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPLATETYPE] = (d: RawLineData) => { return IFC4.IfcPlateType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPLATETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPOLYGONALFACESET] = (d: RawLineData) => { return IFC4.IfcPolygonalFaceSet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOLYGONALFACESET] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
		['HasColours',ifc.IFCINDEXEDCOLOURMAP,0,true],
		['HasTextures',ifc.IFCINDEXEDTEXTUREMAP,1,true],
];
FromRawLineData['IFC4'][ifc.IFCPOLYLINE] = (d: RawLineData) => { return IFC4.IfcPolyline.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPOLYLINE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCPORT] = (d: RawLineData) => { return IFC4.IfcPort.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPORT] = [ifc.IFCDISTRIBUTIONPORT];
InversePropertyDef['IFC4'][ifc.IFCPORT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedIn',ifc.IFCRELCONNECTSPORTTOELEMENT,4,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSPORTS,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSPORTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROCEDURE] = (d: RawLineData) => { return IFC4.IfcProcedure.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROCEDURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsPredecessorTo',ifc.IFCRELSEQUENCE,4,true],
		['IsSuccessorFrom',ifc.IFCRELSEQUENCE,5,true],
		['OperatesOn',ifc.IFCRELASSIGNSTOPROCESS,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPROJECTORDER] = (d: RawLineData) => { return IFC4.IfcProjectOrder.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROJECTORDER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPROJECTIONELEMENT] = (d: RawLineData) => { return IFC4.IfcProjectionElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROJECTIONELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['ProjectsElements',ifc.IFCRELPROJECTSELEMENT,5,false],
];
FromRawLineData['IFC4'][ifc.IFCPROTECTIVEDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcProtectiveDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROTECTIVEDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPUMPTYPE] = (d: RawLineData) => { return IFC4.IfcPumpType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPUMPTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCRAILINGTYPE] = (d: RawLineData) => { return IFC4.IfcRailingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRAILINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCRAMPFLIGHTTYPE] = (d: RawLineData) => { return IFC4.IfcRampFlightType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRAMPFLIGHTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCRAMPTYPE] = (d: RawLineData) => { return IFC4.IfcRampType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRAMPTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS] = (d: RawLineData) => { return IFC4.IfcRationalBSplineSurfaceWithKnots.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRATIONALBSPLINESURFACEWITHKNOTS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCINGELEMENT] = (d: RawLineData) => { return IFC4.IfcReinforcingElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCREINFORCINGELEMENT] = [ifc.IFCREINFORCINGBAR,ifc.IFCTENDONANCHOR,ifc.IFCTENDON,ifc.IFCREINFORCINGMESH];
InversePropertyDef['IFC4'][ifc.IFCREINFORCINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCINGELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcReinforcingElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCREINFORCINGELEMENTTYPE] = [ifc.IFCREINFORCINGBARTYPE,ifc.IFCTENDONTYPE,ifc.IFCTENDONANCHORTYPE,ifc.IFCREINFORCINGMESHTYPE];
InversePropertyDef['IFC4'][ifc.IFCREINFORCINGELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCINGMESH] = (d: RawLineData) => { return IFC4.IfcReinforcingMesh.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREINFORCINGMESH] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCINGMESHTYPE] = (d: RawLineData) => { return IFC4.IfcReinforcingMeshType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREINFORCINGMESHTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCRELAGGREGATES] = (d: RawLineData) => { return IFC4.IfcRelAggregates.FromTape(d.ID, d.type, d.arguments); }
FromRawLineData['IFC4'][ifc.IFCROOFTYPE] = (d: RawLineData) => { return IFC4.IfcRoofType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCROOFTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSANITARYTERMINALTYPE] = (d: RawLineData) => { return IFC4.IfcSanitaryTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSANITARYTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSEAMCURVE] = (d: RawLineData) => { return IFC4.IfcSeamCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSEAMCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCSHADINGDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcShadingDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSHADINGDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSITE] = (d: RawLineData) => { return IFC4.IfcSite.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSITE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSLABTYPE] = (d: RawLineData) => { return IFC4.IfcSlabType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSLABTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSOLARDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcSolarDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSOLARDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSPACE] = (d: RawLineData) => { return IFC4.IfcSpace.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPACE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['HasCoverings',ifc.IFCRELCOVERSSPACES,4,true],
		['BoundedBy',ifc.IFCRELSPACEBOUNDARY,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSPACEHEATERTYPE] = (d: RawLineData) => { return IFC4.IfcSpaceHeaterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPACEHEATERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSPACETYPE] = (d: RawLineData) => { return IFC4.IfcSpaceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPACETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSTACKTERMINALTYPE] = (d: RawLineData) => { return IFC4.IfcStackTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTACKTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSTAIRFLIGHTTYPE] = (d: RawLineData) => { return IFC4.IfcStairFlightType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTAIRFLIGHTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSTAIRTYPE] = (d: RawLineData) => { return IFC4.IfcStairType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTAIRTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALACTION] = (d: RawLineData) => { return IFC4.IfcStructuralAction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALACTION] = [ifc.IFCSTRUCTURALPLANARACTION,ifc.IFCSTRUCTURALSURFACEACTION,ifc.IFCSTRUCTURALPOINTACTION,ifc.IFCSTRUCTURALLINEARACTION,ifc.IFCSTRUCTURALCURVEACTION];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCONNECTION] = (d: RawLineData) => { return IFC4.IfcStructuralConnection.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALCONNECTION] = [ifc.IFCSTRUCTURALSURFACECONNECTION,ifc.IFCSTRUCTURALPOINTCONNECTION,ifc.IFCSTRUCTURALCURVECONNECTION];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALCONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCURVEACTION] = (d: RawLineData) => { return IFC4.IfcStructuralCurveAction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALCURVEACTION] = [ifc.IFCSTRUCTURALLINEARACTION];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALCURVEACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCURVECONNECTION] = (d: RawLineData) => { return IFC4.IfcStructuralCurveConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALCURVECONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCURVEMEMBER] = (d: RawLineData) => { return IFC4.IfcStructuralCurveMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALCURVEMEMBER] = [ifc.IFCSTRUCTURALCURVEMEMBERVARYING];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALCURVEMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCURVEMEMBERVARYING] = (d: RawLineData) => { return IFC4.IfcStructuralCurveMemberVarying.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALCURVEMEMBERVARYING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectedBy',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALCURVEREACTION] = (d: RawLineData) => { return IFC4.IfcStructuralCurveReaction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALCURVEREACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLINEARACTION] = (d: RawLineData) => { return IFC4.IfcStructuralLinearAction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALLINEARACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADGROUP] = (d: RawLineData) => { return IFC4.IfcStructuralLoadGroup.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALLOADGROUP] = [ifc.IFCSTRUCTURALLOADCASE];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALLOADGROUP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['SourceOfResultGroup',ifc.IFCSTRUCTURALRESULTGROUP,6,true],
		['LoadGroupFor',ifc.IFCSTRUCTURALANALYSISMODEL,7,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALPOINTACTION] = (d: RawLineData) => { return IFC4.IfcStructuralPointAction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALPOINTACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALPOINTCONNECTION] = (d: RawLineData) => { return IFC4.IfcStructuralPointConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALPOINTCONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALPOINTREACTION] = (d: RawLineData) => { return IFC4.IfcStructuralPointReaction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALPOINTREACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALRESULTGROUP] = (d: RawLineData) => { return IFC4.IfcStructuralResultGroup.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALRESULTGROUP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ResultGroupFor',ifc.IFCSTRUCTURALANALYSISMODEL,8,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALSURFACEACTION] = (d: RawLineData) => { return IFC4.IfcStructuralSurfaceAction.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSTRUCTURALSURFACEACTION] = [ifc.IFCSTRUCTURALPLANARACTION];
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALSURFACEACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALSURFACECONNECTION] = (d: RawLineData) => { return IFC4.IfcStructuralSurfaceConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALSURFACECONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedStructuralActivity',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],
		['ConnectsStructuralMembers',ifc.IFCRELCONNECTSSTRUCTURALMEMBER,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSUBCONTRACTRESOURCE] = (d: RawLineData) => { return IFC4.IfcSubContractResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSUBCONTRACTRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSURFACEFEATURE] = (d: RawLineData) => { return IFC4.IfcSurfaceFeature.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSURFACEFEATURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSWITCHINGDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcSwitchingDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSWITCHINGDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSYSTEM] = (d: RawLineData) => { return IFC4.IfcSystem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSYSTEM] = [ifc.IFCSTRUCTURALANALYSISMODEL,ifc.IFCDISTRIBUTIONCIRCUIT,ifc.IFCDISTRIBUTIONSYSTEM,ifc.IFCBUILDINGSYSTEM,ifc.IFCZONE];
InversePropertyDef['IFC4'][ifc.IFCSYSTEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSYSTEMFURNITUREELEMENT] = (d: RawLineData) => { return IFC4.IfcSystemFurnitureElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSYSTEMFURNITUREELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCTANKTYPE] = (d: RawLineData) => { return IFC4.IfcTankType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTANKTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTENDON] = (d: RawLineData) => { return IFC4.IfcTendon.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTENDON] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCTENDONANCHOR] = (d: RawLineData) => { return IFC4.IfcTendonAnchor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTENDONANCHOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCTENDONANCHORTYPE] = (d: RawLineData) => { return IFC4.IfcTendonAnchorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTENDONANCHORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTENDONTYPE] = (d: RawLineData) => { return IFC4.IfcTendonType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTENDONTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTRANSFORMERTYPE] = (d: RawLineData) => { return IFC4.IfcTransformerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRANSFORMERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCTRANSPORTELEMENT] = (d: RawLineData) => { return IFC4.IfcTransportElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRANSPORTELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCTRIMMEDCURVE] = (d: RawLineData) => { return IFC4.IfcTrimmedCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRIMMEDCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCTUBEBUNDLETYPE] = (d: RawLineData) => { return IFC4.IfcTubeBundleType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTUBEBUNDLETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCUNITARYEQUIPMENTTYPE] = (d: RawLineData) => { return IFC4.IfcUnitaryEquipmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCUNITARYEQUIPMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCVALVETYPE] = (d: RawLineData) => { return IFC4.IfcValveType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVALVETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCVIBRATIONISOLATOR] = (d: RawLineData) => { return IFC4.IfcVibrationIsolator.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVIBRATIONISOLATOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCVIBRATIONISOLATORTYPE] = (d: RawLineData) => { return IFC4.IfcVibrationIsolatorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVIBRATIONISOLATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCVIRTUALELEMENT] = (d: RawLineData) => { return IFC4.IfcVirtualElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVIRTUALELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCVOIDINGFEATURE] = (d: RawLineData) => { return IFC4.IfcVoidingFeature.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVOIDINGFEATURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['VoidsElements',ifc.IFCRELVOIDSELEMENT,5,false],
];
FromRawLineData['IFC4'][ifc.IFCWALLTYPE] = (d: RawLineData) => { return IFC4.IfcWallType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWALLTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCWASTETERMINALTYPE] = (d: RawLineData) => { return IFC4.IfcWasteTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWASTETERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCWINDOWTYPE] = (d: RawLineData) => { return IFC4.IfcWindowType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWINDOWTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCWORKCALENDAR] = (d: RawLineData) => { return IFC4.IfcWorkCalendar.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWORKCALENDAR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCWORKCONTROL] = (d: RawLineData) => { return IFC4.IfcWorkControl.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCWORKCONTROL] = [ifc.IFCWORKSCHEDULE,ifc.IFCWORKPLAN];
InversePropertyDef['IFC4'][ifc.IFCWORKCONTROL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCWORKPLAN] = (d: RawLineData) => { return IFC4.IfcWorkPlan.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWORKPLAN] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCWORKSCHEDULE] = (d: RawLineData) => { return IFC4.IfcWorkSchedule.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWORKSCHEDULE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCZONE] = (d: RawLineData) => { return IFC4.IfcZone.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCZONE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCACTIONREQUEST] = (d: RawLineData) => { return IFC4.IfcActionRequest.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCACTIONREQUEST] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['Controls',ifc.IFCRELASSIGNSTOCONTROL,6,true],
];
FromRawLineData['IFC4'][ifc.IFCAIRTERMINALBOXTYPE] = (d: RawLineData) => { return IFC4.IfcAirTerminalBoxType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAIRTERMINALBOXTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCAIRTERMINALTYPE] = (d: RawLineData) => { return IFC4.IfcAirTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAIRTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCAIRTOAIRHEATRECOVERYTYPE] = (d: RawLineData) => { return IFC4.IfcAirToAirHeatRecoveryType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAIRTOAIRHEATRECOVERYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCASSET] = (d: RawLineData) => { return IFC4.IfcAsset.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCASSET] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
];
FromRawLineData['IFC4'][ifc.IFCAUDIOVISUALAPPLIANCETYPE] = (d: RawLineData) => { return IFC4.IfcAudioVisualApplianceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAUDIOVISUALAPPLIANCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCBSPLINECURVE] = (d: RawLineData) => { return IFC4.IfcBSplineCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBSPLINECURVE] = [ifc.IFCRATIONALBSPLINECURVEWITHKNOTS,ifc.IFCBSPLINECURVEWITHKNOTS];
InversePropertyDef['IFC4'][ifc.IFCBSPLINECURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBSPLINECURVEWITHKNOTS] = (d: RawLineData) => { return IFC4.IfcBSplineCurveWithKnots.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBSPLINECURVEWITHKNOTS] = [ifc.IFCRATIONALBSPLINECURVEWITHKNOTS];
InversePropertyDef['IFC4'][ifc.IFCBSPLINECURVEWITHKNOTS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBEAMTYPE] = (d: RawLineData) => { return IFC4.IfcBeamType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBEAMTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCBOILERTYPE] = (d: RawLineData) => { return IFC4.IfcBoilerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBOILERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCBOUNDARYCURVE] = (d: RawLineData) => { return IFC4.IfcBoundaryCurve.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBOUNDARYCURVE] = [ifc.IFCOUTERBOUNDARYCURVE];
InversePropertyDef['IFC4'][ifc.IFCBOUNDARYCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGELEMENT] = (d: RawLineData) => { return IFC4.IfcBuildingElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBUILDINGELEMENT] = [ifc.IFCBEAMSTANDARDCASE,ifc.IFCBEAM,ifc.IFCWINDOWSTANDARDCASE,ifc.IFCWINDOW,ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE,ifc.IFCWALL,ifc.IFCSTAIRFLIGHT,ifc.IFCSTAIR,ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE,ifc.IFCSLAB,ifc.IFCSHADINGDEVICE,ifc.IFCROOF,ifc.IFCRAMPFLIGHT,ifc.IFCRAMP,ifc.IFCRAILING,ifc.IFCPLATESTANDARDCASE,ifc.IFCPLATE,ifc.IFCPILE,ifc.IFCMEMBERSTANDARDCASE,ifc.IFCMEMBER,ifc.IFCFOOTING,ifc.IFCDOORSTANDARDCASE,ifc.IFCDOOR,ifc.IFCCURTAINWALL,ifc.IFCCOVERING,ifc.IFCCOLUMNSTANDARDCASE,ifc.IFCCOLUMN,ifc.IFCCHIMNEY,ifc.IFCBUILDINGELEMENTPROXY];
InversePropertyDef['IFC4'][ifc.IFCBUILDINGELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGELEMENTPART] = (d: RawLineData) => { return IFC4.IfcBuildingElementPart.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDINGELEMENTPART] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGELEMENTPARTTYPE] = (d: RawLineData) => { return IFC4.IfcBuildingElementPartType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDINGELEMENTPARTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGELEMENTPROXY] = (d: RawLineData) => { return IFC4.IfcBuildingElementProxy.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDINGELEMENTPROXY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGELEMENTPROXYTYPE] = (d: RawLineData) => { return IFC4.IfcBuildingElementProxyType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDINGELEMENTPROXYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCBUILDINGSYSTEM] = (d: RawLineData) => { return IFC4.IfcBuildingSystem.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBUILDINGSYSTEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBURNERTYPE] = (d: RawLineData) => { return IFC4.IfcBurnerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBURNERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLECARRIERFITTINGTYPE] = (d: RawLineData) => { return IFC4.IfcCableCarrierFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLECARRIERFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLECARRIERSEGMENTTYPE] = (d: RawLineData) => { return IFC4.IfcCableCarrierSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLECARRIERSEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLEFITTINGTYPE] = (d: RawLineData) => { return IFC4.IfcCableFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLEFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLESEGMENTTYPE] = (d: RawLineData) => { return IFC4.IfcCableSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLESEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCHILLERTYPE] = (d: RawLineData) => { return IFC4.IfcChillerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCHILLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCHIMNEY] = (d: RawLineData) => { return IFC4.IfcChimney.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCHIMNEY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCCIRCLE] = (d: RawLineData) => { return IFC4.IfcCircle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCIRCLE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCCIVILELEMENT] = (d: RawLineData) => { return IFC4.IfcCivilElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCIVILELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCCOILTYPE] = (d: RawLineData) => { return IFC4.IfcCoilType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOILTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOLUMN] = (d: RawLineData) => { return IFC4.IfcColumn.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCCOLUMN] = [ifc.IFCCOLUMNSTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCCOLUMN] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCCOLUMNSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcColumnStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOLUMNSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMMUNICATIONSAPPLIANCETYPE] = (d: RawLineData) => { return IFC4.IfcCommunicationsApplianceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMMUNICATIONSAPPLIANCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMPRESSORTYPE] = (d: RawLineData) => { return IFC4.IfcCompressorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMPRESSORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONDENSERTYPE] = (d: RawLineData) => { return IFC4.IfcCondenserType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONDENSERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d: RawLineData) => { return IFC4.IfcConstructionEquipmentResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONEQUIPMENTRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONMATERIALRESOURCE] = (d: RawLineData) => { return IFC4.IfcConstructionMaterialResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONMATERIALRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCONSTRUCTIONPRODUCTRESOURCE] = (d: RawLineData) => { return IFC4.IfcConstructionProductResource.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONSTRUCTIONPRODUCTRESOURCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ResourceOf',ifc.IFCRELASSIGNSTORESOURCE,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOOLEDBEAMTYPE] = (d: RawLineData) => { return IFC4.IfcCooledBeamType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOOLEDBEAMTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOOLINGTOWERTYPE] = (d: RawLineData) => { return IFC4.IfcCoolingTowerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOOLINGTOWERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOVERING] = (d: RawLineData) => { return IFC4.IfcCovering.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOVERING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['CoversSpaces',ifc.IFCRELCOVERSSPACES,5,true],
		['CoversElements',ifc.IFCRELCOVERSBLDGELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCURTAINWALL] = (d: RawLineData) => { return IFC4.IfcCurtainWall.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCURTAINWALL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDAMPERTYPE] = (d: RawLineData) => { return IFC4.IfcDamperType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDAMPERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDISCRETEACCESSORY] = (d: RawLineData) => { return IFC4.IfcDiscreteAccessory.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDISCRETEACCESSORY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDISCRETEACCESSORYTYPE] = (d: RawLineData) => { return IFC4.IfcDiscreteAccessoryType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDISCRETEACCESSORYTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcDistributionChamberElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcDistributionControlElementType.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [ifc.IFCCONTROLLERTYPE,ifc.IFCALARMTYPE,ifc.IFCACTUATORTYPE,ifc.IFCUNITARYCONTROLELEMENTTYPE,ifc.IFCSENSORTYPE,ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,ifc.IFCFLOWINSTRUMENTTYPE];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONELEMENT] = (d: RawLineData) => { return IFC4.IfcDistributionElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONELEMENT] = [ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT,ifc.IFCDISTRIBUTIONCONTROLELEMENT,ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE,ifc.IFCDISTRIBUTIONFLOWELEMENT];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONFLOWELEMENT] = (d: RawLineData) => { return IFC4.IfcDistributionFlowElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONFLOWELEMENT] = [ifc.IFCDISTRIBUTIONCHAMBERELEMENT,ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR,ifc.IFCFLOWTREATMENTDEVICE,ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP,ifc.IFCFLOWTERMINAL,ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK,ifc.IFCFLOWSTORAGEDEVICE,ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT,ifc.IFCFLOWSEGMENT,ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP,ifc.IFCFLOWMOVINGDEVICE,ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX,ifc.IFCFLOWFITTING,ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER,ifc.IFCFLOWCONTROLLER,ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE,ifc.IFCENERGYCONVERSIONDEVICE];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONFLOWELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONPORT] = (d: RawLineData) => { return IFC4.IfcDistributionPort.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONPORT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainedIn',ifc.IFCRELCONNECTSPORTTOELEMENT,4,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSPORTS,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSPORTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONSYSTEM] = (d: RawLineData) => { return IFC4.IfcDistributionSystem.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONSYSTEM] = [ifc.IFCDISTRIBUTIONCIRCUIT];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONSYSTEM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDOOR] = (d: RawLineData) => { return IFC4.IfcDoor.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDOOR] = [ifc.IFCDOORSTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCDOOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDOORSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcDoorStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDOORSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDUCTFITTINGTYPE] = (d: RawLineData) => { return IFC4.IfcDuctFittingType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDUCTFITTINGTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDUCTSEGMENTTYPE] = (d: RawLineData) => { return IFC4.IfcDuctSegmentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDUCTSEGMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCDUCTSILENCERTYPE] = (d: RawLineData) => { return IFC4.IfcDuctSilencerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDUCTSILENCERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICAPPLIANCETYPE] = (d: RawLineData) => { return IFC4.IfcElectricApplianceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICAPPLIANCETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE] = (d: RawLineData) => { return IFC4.IfcElectricDistributionBoardType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICDISTRIBUTIONBOARDTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { return IFC4.IfcElectricFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICFLOWSTORAGEDEVICETYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICGENERATORTYPE] = (d: RawLineData) => { return IFC4.IfcElectricGeneratorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICGENERATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICMOTORTYPE] = (d: RawLineData) => { return IFC4.IfcElectricMotorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICMOTORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICTIMECONTROLTYPE] = (d: RawLineData) => { return IFC4.IfcElectricTimeControlType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICTIMECONTROLTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCENERGYCONVERSIONDEVICE] = (d: RawLineData) => { return IFC4.IfcEnergyConversionDevice.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCENERGYCONVERSIONDEVICE] = [ifc.IFCELECTRICMOTOR,ifc.IFCELECTRICGENERATOR,ifc.IFCCOOLINGTOWER,ifc.IFCCOOLEDBEAM,ifc.IFCCONDENSER,ifc.IFCCOIL,ifc.IFCCHILLER,ifc.IFCBURNER,ifc.IFCBOILER,ifc.IFCAIRTOAIRHEATRECOVERY,ifc.IFCUNITARYEQUIPMENT,ifc.IFCTUBEBUNDLE,ifc.IFCTRANSFORMER,ifc.IFCSOLARDEVICE,ifc.IFCMOTORCONNECTION,ifc.IFCHUMIDIFIER,ifc.IFCHEATEXCHANGER,ifc.IFCEVAPORATOR,ifc.IFCEVAPORATIVECOOLER,ifc.IFCENGINE];
InversePropertyDef['IFC4'][ifc.IFCENERGYCONVERSIONDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCENGINE] = (d: RawLineData) => { return IFC4.IfcEngine.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCENGINE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCEVAPORATIVECOOLER] = (d: RawLineData) => { return IFC4.IfcEvaporativeCooler.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEVAPORATIVECOOLER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCEVAPORATOR] = (d: RawLineData) => { return IFC4.IfcEvaporator.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEVAPORATOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCEXTERNALSPATIALELEMENT] = (d: RawLineData) => { return IFC4.IfcExternalSpatialElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCEXTERNALSPATIALELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['ContainsElements',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],
		['ServicedBySystems',ifc.IFCRELSERVICESBUILDINGS,5,true],
		['ReferencesElements',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],
		['BoundedBy',ifc.IFCRELSPACEBOUNDARY,4,true],
];
FromRawLineData['IFC4'][ifc.IFCFANTYPE] = (d: RawLineData) => { return IFC4.IfcFanType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFANTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFILTERTYPE] = (d: RawLineData) => { return IFC4.IfcFilterType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFILTERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFIRESUPPRESSIONTERMINALTYPE] = (d: RawLineData) => { return IFC4.IfcFireSuppressionTerminalType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFIRESUPPRESSIONTERMINALTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWCONTROLLER] = (d: RawLineData) => { return IFC4.IfcFlowController.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWCONTROLLER] = [ifc.IFCELECTRICTIMECONTROL,ifc.IFCELECTRICDISTRIBUTIONBOARD,ifc.IFCDAMPER,ifc.IFCAIRTERMINALBOX,ifc.IFCVALVE,ifc.IFCSWITCHINGDEVICE,ifc.IFCPROTECTIVEDEVICE,ifc.IFCFLOWMETER];
InversePropertyDef['IFC4'][ifc.IFCFLOWCONTROLLER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWFITTING] = (d: RawLineData) => { return IFC4.IfcFlowFitting.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWFITTING] = [ifc.IFCDUCTFITTING,ifc.IFCCABLEFITTING,ifc.IFCCABLECARRIERFITTING,ifc.IFCPIPEFITTING,ifc.IFCJUNCTIONBOX];
InversePropertyDef['IFC4'][ifc.IFCFLOWFITTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWINSTRUMENTTYPE] = (d: RawLineData) => { return IFC4.IfcFlowInstrumentType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFLOWINSTRUMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWMETER] = (d: RawLineData) => { return IFC4.IfcFlowMeter.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFLOWMETER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWMOVINGDEVICE] = (d: RawLineData) => { return IFC4.IfcFlowMovingDevice.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWMOVINGDEVICE] = [ifc.IFCFAN,ifc.IFCCOMPRESSOR,ifc.IFCPUMP];
InversePropertyDef['IFC4'][ifc.IFCFLOWMOVINGDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWSEGMENT] = (d: RawLineData) => { return IFC4.IfcFlowSegment.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWSEGMENT] = [ifc.IFCDUCTSEGMENT,ifc.IFCCABLESEGMENT,ifc.IFCCABLECARRIERSEGMENT,ifc.IFCPIPESEGMENT];
InversePropertyDef['IFC4'][ifc.IFCFLOWSEGMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWSTORAGEDEVICE] = (d: RawLineData) => { return IFC4.IfcFlowStorageDevice.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWSTORAGEDEVICE] = [ifc.IFCELECTRICFLOWSTORAGEDEVICE,ifc.IFCTANK];
InversePropertyDef['IFC4'][ifc.IFCFLOWSTORAGEDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWTERMINAL] = (d: RawLineData) => { return IFC4.IfcFlowTerminal.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWTERMINAL] = [ifc.IFCFIRESUPPRESSIONTERMINAL,ifc.IFCELECTRICAPPLIANCE,ifc.IFCCOMMUNICATIONSAPPLIANCE,ifc.IFCAUDIOVISUALAPPLIANCE,ifc.IFCAIRTERMINAL,ifc.IFCWASTETERMINAL,ifc.IFCSTACKTERMINAL,ifc.IFCSPACEHEATER,ifc.IFCSANITARYTERMINAL,ifc.IFCOUTLET,ifc.IFCMEDICALDEVICE,ifc.IFCLIGHTFIXTURE,ifc.IFCLAMP];
InversePropertyDef['IFC4'][ifc.IFCFLOWTERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWTREATMENTDEVICE] = (d: RawLineData) => { return IFC4.IfcFlowTreatmentDevice.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCFLOWTREATMENTDEVICE] = [ifc.IFCFILTER,ifc.IFCDUCTSILENCER,ifc.IFCINTERCEPTOR];
InversePropertyDef['IFC4'][ifc.IFCFLOWTREATMENTDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFOOTING] = (d: RawLineData) => { return IFC4.IfcFooting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFOOTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCHEATEXCHANGER] = (d: RawLineData) => { return IFC4.IfcHeatExchanger.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCHEATEXCHANGER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCHUMIDIFIER] = (d: RawLineData) => { return IFC4.IfcHumidifier.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCHUMIDIFIER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCINTERCEPTOR] = (d: RawLineData) => { return IFC4.IfcInterceptor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCINTERCEPTOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCJUNCTIONBOX] = (d: RawLineData) => { return IFC4.IfcJunctionBox.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCJUNCTIONBOX] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCLAMP] = (d: RawLineData) => { return IFC4.IfcLamp.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLAMP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCLIGHTFIXTURE] = (d: RawLineData) => { return IFC4.IfcLightFixture.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCLIGHTFIXTURE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCMEDICALDEVICE] = (d: RawLineData) => { return IFC4.IfcMedicalDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMEDICALDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCMEMBER] = (d: RawLineData) => { return IFC4.IfcMember.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCMEMBER] = [ifc.IFCMEMBERSTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCMEMBER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCMEMBERSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcMemberStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMEMBERSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCMOTORCONNECTION] = (d: RawLineData) => { return IFC4.IfcMotorConnection.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCMOTORCONNECTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCOUTERBOUNDARYCURVE] = (d: RawLineData) => { return IFC4.IfcOuterBoundaryCurve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOUTERBOUNDARYCURVE] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCOUTLET] = (d: RawLineData) => { return IFC4.IfcOutlet.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCOUTLET] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPILE] = (d: RawLineData) => { return IFC4.IfcPile.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPILE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPIPEFITTING] = (d: RawLineData) => { return IFC4.IfcPipeFitting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPIPEFITTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPIPESEGMENT] = (d: RawLineData) => { return IFC4.IfcPipeSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPIPESEGMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPLATE] = (d: RawLineData) => { return IFC4.IfcPlate.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCPLATE] = [ifc.IFCPLATESTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCPLATE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPLATESTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcPlateStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPLATESTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROTECTIVEDEVICE] = (d: RawLineData) => { return IFC4.IfcProtectiveDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROTECTIVEDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (d: RawLineData) => { return IFC4.IfcProtectiveDeviceTrippingUnitType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCPUMP] = (d: RawLineData) => { return IFC4.IfcPump.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPUMP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCRAILING] = (d: RawLineData) => { return IFC4.IfcRailing.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRAILING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCRAMP] = (d: RawLineData) => { return IFC4.IfcRamp.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRAMP] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCRAMPFLIGHT] = (d: RawLineData) => { return IFC4.IfcRampFlight.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRAMPFLIGHT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCRATIONALBSPLINECURVEWITHKNOTS] = (d: RawLineData) => { return IFC4.IfcRationalBSplineCurveWithKnots.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCRATIONALBSPLINECURVEWITHKNOTS] = [
		['LayerAssignment',ifc.IFCPRESENTATIONLAYERASSIGNMENT,2,true],
		['StyledByItem',ifc.IFCSTYLEDITEM,0,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCINGBAR] = (d: RawLineData) => { return IFC4.IfcReinforcingBar.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREINFORCINGBAR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCREINFORCINGBARTYPE] = (d: RawLineData) => { return IFC4.IfcReinforcingBarType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCREINFORCINGBARTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCROOF] = (d: RawLineData) => { return IFC4.IfcRoof.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCROOF] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSANITARYTERMINAL] = (d: RawLineData) => { return IFC4.IfcSanitaryTerminal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSANITARYTERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSENSORTYPE] = (d: RawLineData) => { return IFC4.IfcSensorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSENSORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCSHADINGDEVICE] = (d: RawLineData) => { return IFC4.IfcShadingDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSHADINGDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSLAB] = (d: RawLineData) => { return IFC4.IfcSlab.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCSLAB] = [ifc.IFCSLABSTANDARDCASE,ifc.IFCSLABELEMENTEDCASE];
InversePropertyDef['IFC4'][ifc.IFCSLAB] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSLABELEMENTEDCASE] = (d: RawLineData) => { return IFC4.IfcSlabElementedCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSLABELEMENTEDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSLABSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcSlabStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSLABSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSOLARDEVICE] = (d: RawLineData) => { return IFC4.IfcSolarDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSOLARDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSPACEHEATER] = (d: RawLineData) => { return IFC4.IfcSpaceHeater.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSPACEHEATER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTACKTERMINAL] = (d: RawLineData) => { return IFC4.IfcStackTerminal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTACKTERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSTAIR] = (d: RawLineData) => { return IFC4.IfcStair.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTAIR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTAIRFLIGHT] = (d: RawLineData) => { return IFC4.IfcStairFlight.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTAIRFLIGHT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALANALYSISMODEL] = (d: RawLineData) => { return IFC4.IfcStructuralAnalysisModel.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALANALYSISMODEL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALLOADCASE] = (d: RawLineData) => { return IFC4.IfcStructuralLoadCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALLOADCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['SourceOfResultGroup',ifc.IFCSTRUCTURALRESULTGROUP,6,true],
		['LoadGroupFor',ifc.IFCSTRUCTURALANALYSISMODEL,7,true],
];
FromRawLineData['IFC4'][ifc.IFCSTRUCTURALPLANARACTION] = (d: RawLineData) => { return IFC4.IfcStructuralPlanarAction.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSTRUCTURALPLANARACTION] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['AssignedToStructuralItem',ifc.IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],
];
FromRawLineData['IFC4'][ifc.IFCSWITCHINGDEVICE] = (d: RawLineData) => { return IFC4.IfcSwitchingDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSWITCHINGDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCTANK] = (d: RawLineData) => { return IFC4.IfcTank.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTANK] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCTRANSFORMER] = (d: RawLineData) => { return IFC4.IfcTransformer.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTRANSFORMER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCTUBEBUNDLE] = (d: RawLineData) => { return IFC4.IfcTubeBundle.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCTUBEBUNDLE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCUNITARYCONTROLELEMENTTYPE] = (d: RawLineData) => { return IFC4.IfcUnitaryControlElementType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCUNITARYCONTROLELEMENTTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCUNITARYEQUIPMENT] = (d: RawLineData) => { return IFC4.IfcUnitaryEquipment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCUNITARYEQUIPMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCVALVE] = (d: RawLineData) => { return IFC4.IfcValve.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCVALVE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCWALL] = (d: RawLineData) => { return IFC4.IfcWall.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCWALL] = [ifc.IFCWALLSTANDARDCASE,ifc.IFCWALLELEMENTEDCASE];
InversePropertyDef['IFC4'][ifc.IFCWALL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCWALLELEMENTEDCASE] = (d: RawLineData) => { return IFC4.IfcWallElementedCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWALLELEMENTEDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCWALLSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcWallStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWALLSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCWASTETERMINAL] = (d: RawLineData) => { return IFC4.IfcWasteTerminal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWASTETERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCWINDOW] = (d: RawLineData) => { return IFC4.IfcWindow.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCWINDOW] = [ifc.IFCWINDOWSTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCWINDOW] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCWINDOWSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcWindowStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCWINDOWSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCACTUATORTYPE] = (d: RawLineData) => { return IFC4.IfcActuatorType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCACTUATORTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCAIRTERMINAL] = (d: RawLineData) => { return IFC4.IfcAirTerminal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAIRTERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCAIRTERMINALBOX] = (d: RawLineData) => { return IFC4.IfcAirTerminalBox.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAIRTERMINALBOX] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCAIRTOAIRHEATRECOVERY] = (d: RawLineData) => { return IFC4.IfcAirToAirHeatRecovery.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAIRTOAIRHEATRECOVERY] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCALARMTYPE] = (d: RawLineData) => { return IFC4.IfcAlarmType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCALARMTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCAUDIOVISUALAPPLIANCE] = (d: RawLineData) => { return IFC4.IfcAudioVisualAppliance.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCAUDIOVISUALAPPLIANCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCBEAM] = (d: RawLineData) => { return IFC4.IfcBeam.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCBEAM] = [ifc.IFCBEAMSTANDARDCASE];
InversePropertyDef['IFC4'][ifc.IFCBEAM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBEAMSTANDARDCASE] = (d: RawLineData) => { return IFC4.IfcBeamStandardCase.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBEAMSTANDARDCASE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCBOILER] = (d: RawLineData) => { return IFC4.IfcBoiler.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBOILER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCBURNER] = (d: RawLineData) => { return IFC4.IfcBurner.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCBURNER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLECARRIERFITTING] = (d: RawLineData) => { return IFC4.IfcCableCarrierFitting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLECARRIERFITTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLECARRIERSEGMENT] = (d: RawLineData) => { return IFC4.IfcCableCarrierSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLECARRIERSEGMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLEFITTING] = (d: RawLineData) => { return IFC4.IfcCableFitting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLEFITTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCABLESEGMENT] = (d: RawLineData) => { return IFC4.IfcCableSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCABLESEGMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCHILLER] = (d: RawLineData) => { return IFC4.IfcChiller.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCHILLER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCOIL] = (d: RawLineData) => { return IFC4.IfcCoil.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOIL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMMUNICATIONSAPPLIANCE] = (d: RawLineData) => { return IFC4.IfcCommunicationsAppliance.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMMUNICATIONSAPPLIANCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCOMPRESSOR] = (d: RawLineData) => { return IFC4.IfcCompressor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOMPRESSOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCONDENSER] = (d: RawLineData) => { return IFC4.IfcCondenser.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONDENSER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCONTROLLERTYPE] = (d: RawLineData) => { return IFC4.IfcControllerType.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONTROLLERTYPE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['Types',ifc.IFCRELDEFINESBYTYPE,5,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
];
FromRawLineData['IFC4'][ifc.IFCCOOLEDBEAM] = (d: RawLineData) => { return IFC4.IfcCooledBeam.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOOLEDBEAM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCCOOLINGTOWER] = (d: RawLineData) => { return IFC4.IfcCoolingTower.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCOOLINGTOWER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDAMPER] = (d: RawLineData) => { return IFC4.IfcDamper.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDAMPER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONCHAMBERELEMENT] = (d: RawLineData) => { return IFC4.IfcDistributionChamberElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONCHAMBERELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONCIRCUIT] = (d: RawLineData) => { return IFC4.IfcDistributionCircuit.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONCIRCUIT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['IsGroupedBy',ifc.IFCRELASSIGNSTOGROUP,6,true],
		['ServicesBuildings',ifc.IFCRELSERVICESBUILDINGS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDISTRIBUTIONCONTROLELEMENT] = (d: RawLineData) => { return IFC4.IfcDistributionControlElement.FromTape(d.ID, d.type, d.arguments); }
InheritanceDef['IFC4'][ifc.IFCDISTRIBUTIONCONTROLELEMENT] = [ifc.IFCCONTROLLER,ifc.IFCALARM,ifc.IFCACTUATOR,ifc.IFCUNITARYCONTROLELEMENT,ifc.IFCSENSOR,ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT,ifc.IFCFLOWINSTRUMENT];
InversePropertyDef['IFC4'][ifc.IFCDISTRIBUTIONCONTROLELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCDUCTFITTING] = (d: RawLineData) => { return IFC4.IfcDuctFitting.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDUCTFITTING] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDUCTSEGMENT] = (d: RawLineData) => { return IFC4.IfcDuctSegment.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDUCTSEGMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCDUCTSILENCER] = (d: RawLineData) => { return IFC4.IfcDuctSilencer.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCDUCTSILENCER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICAPPLIANCE] = (d: RawLineData) => { return IFC4.IfcElectricAppliance.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICAPPLIANCE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICDISTRIBUTIONBOARD] = (d: RawLineData) => { return IFC4.IfcElectricDistributionBoard.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICDISTRIBUTIONBOARD] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICFLOWSTORAGEDEVICE] = (d: RawLineData) => { return IFC4.IfcElectricFlowStorageDevice.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICFLOWSTORAGEDEVICE] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICGENERATOR] = (d: RawLineData) => { return IFC4.IfcElectricGenerator.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICGENERATOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICMOTOR] = (d: RawLineData) => { return IFC4.IfcElectricMotor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICMOTOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCELECTRICTIMECONTROL] = (d: RawLineData) => { return IFC4.IfcElectricTimeControl.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCELECTRICTIMECONTROL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFAN] = (d: RawLineData) => { return IFC4.IfcFan.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFAN] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFILTER] = (d: RawLineData) => { return IFC4.IfcFilter.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFILTER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFIRESUPPRESSIONTERMINAL] = (d: RawLineData) => { return IFC4.IfcFireSuppressionTerminal.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFIRESUPPRESSIONTERMINAL] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['HasControlElements',ifc.IFCRELFLOWCONTROLELEMENTS,5,true],
];
FromRawLineData['IFC4'][ifc.IFCFLOWINSTRUMENT] = (d: RawLineData) => { return IFC4.IfcFlowInstrument.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCFLOWINSTRUMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT] = (d: RawLineData) => { return IFC4.IfcProtectiveDeviceTrippingUnit.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCPROTECTIVEDEVICETRIPPINGUNIT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCSENSOR] = (d: RawLineData) => { return IFC4.IfcSensor.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCSENSOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCUNITARYCONTROLELEMENT] = (d: RawLineData) => { return IFC4.IfcUnitaryControlElement.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCUNITARYCONTROLELEMENT] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCACTUATOR] = (d: RawLineData) => { return IFC4.IfcActuator.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCACTUATOR] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCALARM] = (d: RawLineData) => { return IFC4.IfcAlarm.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCALARM] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
FromRawLineData['IFC4'][ifc.IFCCONTROLLER] = (d: RawLineData) => { return IFC4.IfcController.FromTape(d.ID, d.type, d.arguments); }
InversePropertyDef['IFC4'][ifc.IFCCONTROLLER] = [
		['HasAssignments',ifc.IFCRELASSIGNS,4,true],
		['Nests',ifc.IFCRELNESTS,5,true],
		['IsNestedBy',ifc.IFCRELNESTS,4,true],
		['HasContext',ifc.IFCRELDECLARES,5,true],
		['IsDecomposedBy',ifc.IFCRELAGGREGATES,4,true],
		['Decomposes',ifc.IFCRELAGGREGATES,5,true],
		['HasAssociations',ifc.IFCRELASSOCIATES,4,true],
		['IsDeclaredBy',ifc.IFCRELDEFINESBYOBJECT,4,true],
		['Declares',ifc.IFCRELDEFINESBYOBJECT,5,true],
		['IsTypedBy',ifc.IFCRELDEFINESBYTYPE,4,true],
		['IsDefinedBy',ifc.IFCRELDEFINESBYPROPERTIES,4,true],
		['ReferencedBy',ifc.IFCRELASSIGNSTOPRODUCT,6,true],
		['FillsVoids',ifc.IFCRELFILLSELEMENT,5,true],
		['ConnectedTo',ifc.IFCRELCONNECTSELEMENTS,5,true],
		['IsInterferedByElements',ifc.IFCRELINTERFERESELEMENTS,5,true],
		['InterferesElements',ifc.IFCRELINTERFERESELEMENTS,4,true],
		['HasProjections',ifc.IFCRELPROJECTSELEMENT,4,true],
		['ReferencedInStructures',ifc.IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],
		['HasOpenings',ifc.IFCRELVOIDSELEMENT,4,true],
		['IsConnectionRealization',ifc.IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],
		['ProvidesBoundaries',ifc.IFCRELSPACEBOUNDARY,5,true],
		['ConnectedFrom',ifc.IFCRELCONNECTSELEMENTS,6,true],
		['ContainedInStructure',ifc.IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],
		['HasCoverings',ifc.IFCRELCOVERSBLDGELEMENTS,4,true],
		['HasPorts',ifc.IFCRELCONNECTSPORTTOELEMENT,5,true],
		['AssignedToFlowElement',ifc.IFCRELFLOWCONTROLELEMENTS,4,true],
];
export namespace IFC2X3 {
	export class IfcAbsorbedDoseMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAccelerationMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAmountOfSubstanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAngularVelocityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAreaMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcBoolean {
		value: boolean;
		label !: string| null;
		valueType !: number| null;
		constructor(v: boolean) { this.value = v;}
	}
	export class IfcBoxAlignment {
		value: IfcLabel;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcLabel) { this.value = v;}
	}
	export class IfcComplexNumber {
		valueType !: number | null;
		label !: string | null;
		value: Array<number>;
		constructor(v: Array<number>) { this.value = v;}
	};
	export class IfcCompoundPlaneAngleMeasure {
		valueType !: number | null;
		label !: string | null;
		value: Array<number>;
		constructor(v: Array<number>) { this.value = v;}
	};
	export class IfcContextDependentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcCountMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcCurvatureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDayInMonthNumber {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDaylightSavingHour {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDescriptiveMeasure {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcDimensionCount {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDoseEquivalentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDynamicViscosityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricCapacitanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricChargeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricConductanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricCurrentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricResistanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricVoltageMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcEnergyMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcFontStyle {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcFontVariant {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcFontWeight {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcForceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcFrequencyMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcGloballyUniqueId {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcHeatFluxDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcHeatingValueMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcHourInDay {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIdentifier {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcIlluminanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcInductanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcInteger {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIntegerCountRateMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIonConcentrationMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIsothermalMoistureCapacityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcKinematicViscosityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLabel {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcLengthMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearForceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearMomentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearStiffnessMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearVelocityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLogical {
		value: boolean;
		label !: string| null;
		valueType !: number| null;
		constructor(v: boolean) { this.value = v;}
	}
	export class IfcLuminousFluxMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLuminousIntensityDistributionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLuminousIntensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMagneticFluxDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMagneticFluxMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassFlowRateMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassPerLengthMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMinuteInHour {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfElasticityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfLinearSubgradeReactionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfRotationalSubgradeReactionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfSubgradeReactionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMoistureDiffusivityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMolecularWeightMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMomentOfInertiaMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMonetaryMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMonthInYearNumber {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcNormalisedRatioMeasure {
		value: IfcRatioMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcRatioMeasure) { this.value = v;}
	}
	export class IfcNumericMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPHMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcParameterValue {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPlanarForceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPlaneAngleMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPositiveLengthMeasure {
		value: IfcLengthMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcLengthMeasure) { this.value = v;}
	}
	export class IfcPositivePlaneAngleMeasure {
		value: IfcPlaneAngleMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcPlaneAngleMeasure) { this.value = v;}
	}
	export class IfcPositiveRatioMeasure {
		value: IfcRatioMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcRatioMeasure) { this.value = v;}
	}
	export class IfcPowerMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPresentableText {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcPressureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRadioActivityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRatioMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcReal {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRotationalFrequencyMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRotationalMassMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRotationalStiffnessMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSecondInMinute {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSectionModulusMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSectionalAreaIntegralMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcShearModulusMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSolidAngleMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSoundPowerMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSoundPressureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSpecificHeatCapacityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSpecularExponent {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSpecularRoughness {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTemperatureGradientMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcText {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextAlignment {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextDecoration {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextFontName {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextTransformation {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcThermalAdmittanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalConductivityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalExpansionCoefficientMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalResistanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalTransmittanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermodynamicTemperatureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTimeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTimeStamp {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTorqueMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcVaporPermeabilityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcVolumeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcVolumetricFlowRateMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcWarpingConstantMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcWarpingMomentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcYearNumber {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcActionSourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DEAD_LOAD_G = "DEAD_LOAD_G";
		static COMPLETION_G1 = "COMPLETION_G1";
		static LIVE_LOAD_Q = "LIVE_LOAD_Q";
		static SNOW_S = "SNOW_S";
		static WIND_W = "WIND_W";
		static PRESTRESSING_P = "PRESTRESSING_P";
		static SETTLEMENT_U = "SETTLEMENT_U";
		static TEMPERATURE_T = "TEMPERATURE_T";
		static EARTHQUAKE_E = "EARTHQUAKE_E";
		static FIRE = "FIRE";
		static IMPULSE = "IMPULSE";
		static IMPACT = "IMPACT";
		static TRANSPORT = "TRANSPORT";
		static ERECTION = "ERECTION";
		static PROPPING = "PROPPING";
		static SYSTEM_IMPERFECTION = "SYSTEM_IMPERFECTION";
		static SHRINKAGE = "SHRINKAGE";
		static CREEP = "CREEP";
		static LACK_OF_FIT = "LACK_OF_FIT";
		static BUOYANCY = "BUOYANCY";
		static ICE = "ICE";
		static CURRENT = "CURRENT";
		static WAVE = "WAVE";
		static RAIN = "RAIN";
		static BRAKES = "BRAKES";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcActionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PERMANENT_G = "PERMANENT_G";
		static VARIABLE_Q = "VARIABLE_Q";
		static EXTRAORDINARY_A = "EXTRAORDINARY_A";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcActuatorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELECTRICACTUATOR = "ELECTRICACTUATOR";
		static HANDOPERATEDACTUATOR = "HANDOPERATEDACTUATOR";
		static HYDRAULICACTUATOR = "HYDRAULICACTUATOR";
		static PNEUMATICACTUATOR = "PNEUMATICACTUATOR";
		static THERMOSTATICACTUATOR = "THERMOSTATICACTUATOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAddressTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static OFFICE = "OFFICE";
		static SITE = "SITE";
		static HOME = "HOME";
		static DISTRIBUTIONPOINT = "DISTRIBUTIONPOINT";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcAheadOrBehind {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AHEAD = "AHEAD";
		static BEHIND = "BEHIND";
	}
	export class IfcAirTerminalBoxTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONSTANTFLOW = "CONSTANTFLOW";
		static VARIABLEFLOWPRESSUREDEPENDANT = "VARIABLEFLOWPRESSUREDEPENDANT";
		static VARIABLEFLOWPRESSUREINDEPENDANT = "VARIABLEFLOWPRESSUREINDEPENDANT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAirTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GRILLE = "GRILLE";
		static REGISTER = "REGISTER";
		static DIFFUSER = "DIFFUSER";
		static EYEBALL = "EYEBALL";
		static IRIS = "IRIS";
		static LINEARGRILLE = "LINEARGRILLE";
		static LINEARDIFFUSER = "LINEARDIFFUSER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAirToAirHeatRecoveryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FIXEDPLATECOUNTERFLOWEXCHANGER = "FIXEDPLATECOUNTERFLOWEXCHANGER";
		static FIXEDPLATECROSSFLOWEXCHANGER = "FIXEDPLATECROSSFLOWEXCHANGER";
		static FIXEDPLATEPARALLELFLOWEXCHANGER = "FIXEDPLATEPARALLELFLOWEXCHANGER";
		static ROTARYWHEEL = "ROTARYWHEEL";
		static RUNAROUNDCOILLOOP = "RUNAROUNDCOILLOOP";
		static HEATPIPE = "HEATPIPE";
		static TWINTOWERENTHALPYRECOVERYLOOPS = "TWINTOWERENTHALPYRECOVERYLOOPS";
		static THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS";
		static THERMOSIPHONCOILTYPEHEATEXCHANGERS = "THERMOSIPHONCOILTYPEHEATEXCHANGERS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAlarmTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BELL = "BELL";
		static BREAKGLASSBUTTON = "BREAKGLASSBUTTON";
		static LIGHT = "LIGHT";
		static MANUALPULLBOX = "MANUALPULLBOX";
		static SIREN = "SIREN";
		static WHISTLE = "WHISTLE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAnalysisModelTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static IN_PLANE_LOADING_2D = "IN_PLANE_LOADING_2D";
		static OUT_PLANE_LOADING_2D = "OUT_PLANE_LOADING_2D";
		static LOADING_3D = "LOADING_3D";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAnalysisTheoryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FIRST_ORDER_THEORY = "FIRST_ORDER_THEORY";
		static SECOND_ORDER_THEORY = "SECOND_ORDER_THEORY";
		static THIRD_ORDER_THEORY = "THIRD_ORDER_THEORY";
		static FULL_NONLINEAR_THEORY = "FULL_NONLINEAR_THEORY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcArithmeticOperatorEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ADD = "ADD";
		static DIVIDE = "DIVIDE";
		static MULTIPLY = "MULTIPLY";
		static SUBTRACT = "SUBTRACT";
	}
	export class IfcAssemblyPlaceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SITE = "SITE";
		static FACTORY = "FACTORY";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBSplineCurveForm {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POLYLINE_FORM = "POLYLINE_FORM";
		static CIRCULAR_ARC = "CIRCULAR_ARC";
		static ELLIPTIC_ARC = "ELLIPTIC_ARC";
		static PARABOLIC_ARC = "PARABOLIC_ARC";
		static HYPERBOLIC_ARC = "HYPERBOLIC_ARC";
		static UNSPECIFIED = "UNSPECIFIED";
	}
	export class IfcBeamTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEAM = "BEAM";
		static JOIST = "JOIST";
		static LINTEL = "LINTEL";
		static T_BEAM = "T_BEAM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBenchmarkEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GREATERTHAN = "GREATERTHAN";
		static GREATERTHANOREQUALTO = "GREATERTHANOREQUALTO";
		static LESSTHAN = "LESSTHAN";
		static LESSTHANOREQUALTO = "LESSTHANOREQUALTO";
		static EQUALTO = "EQUALTO";
		static NOTEQUALTO = "NOTEQUALTO";
	}
	export class IfcBoilerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static WATER = "WATER";
		static STEAM = "STEAM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBooleanOperator {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static UNION = "UNION";
		static INTERSECTION = "INTERSECTION";
		static DIFFERENCE = "DIFFERENCE";
	}
	export class IfcBuildingElementProxyTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableCarrierFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEND = "BEND";
		static CROSS = "CROSS";
		static REDUCER = "REDUCER";
		static TEE = "TEE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableCarrierSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CABLELADDERSEGMENT = "CABLELADDERSEGMENT";
		static CABLETRAYSEGMENT = "CABLETRAYSEGMENT";
		static CABLETRUNKINGSEGMENT = "CABLETRUNKINGSEGMENT";
		static CONDUITSEGMENT = "CONDUITSEGMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CABLESEGMENT = "CABLESEGMENT";
		static CONDUCTORSEGMENT = "CONDUCTORSEGMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcChangeActionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static NOCHANGE = "NOCHANGE";
		static MODIFIED = "MODIFIED";
		static ADDED = "ADDED";
		static DELETED = "DELETED";
		static MODIFIEDADDED = "MODIFIEDADDED";
		static MODIFIEDDELETED = "MODIFIEDDELETED";
	}
	export class IfcChillerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRCOOLED = "AIRCOOLED";
		static WATERCOOLED = "WATERCOOLED";
		static HEATRECOVERY = "HEATRECOVERY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCoilTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DXCOOLINGCOIL = "DXCOOLINGCOIL";
		static WATERCOOLINGCOIL = "WATERCOOLINGCOIL";
		static STEAMHEATINGCOIL = "STEAMHEATINGCOIL";
		static WATERHEATINGCOIL = "WATERHEATINGCOIL";
		static ELECTRICHEATINGCOIL = "ELECTRICHEATINGCOIL";
		static GASHEATINGCOIL = "GASHEATINGCOIL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcColumnTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COLUMN = "COLUMN";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCompressorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DYNAMIC = "DYNAMIC";
		static RECIPROCATING = "RECIPROCATING";
		static ROTARY = "ROTARY";
		static SCROLL = "SCROLL";
		static TROCHOIDAL = "TROCHOIDAL";
		static SINGLESTAGE = "SINGLESTAGE";
		static BOOSTER = "BOOSTER";
		static OPENTYPE = "OPENTYPE";
		static HERMETIC = "HERMETIC";
		static SEMIHERMETIC = "SEMIHERMETIC";
		static WELDEDSHELLHERMETIC = "WELDEDSHELLHERMETIC";
		static ROLLINGPISTON = "ROLLINGPISTON";
		static ROTARYVANE = "ROTARYVANE";
		static SINGLESCREW = "SINGLESCREW";
		static TWINSCREW = "TWINSCREW";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCondenserTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static WATERCOOLEDSHELLTUBE = "WATERCOOLEDSHELLTUBE";
		static WATERCOOLEDSHELLCOIL = "WATERCOOLEDSHELLCOIL";
		static WATERCOOLEDTUBEINTUBE = "WATERCOOLEDTUBEINTUBE";
		static WATERCOOLEDBRAZEDPLATE = "WATERCOOLEDBRAZEDPLATE";
		static AIRCOOLED = "AIRCOOLED";
		static EVAPORATIVECOOLED = "EVAPORATIVECOOLED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcConnectionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ATPATH = "ATPATH";
		static ATSTART = "ATSTART";
		static ATEND = "ATEND";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcConstraintEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static HARD = "HARD";
		static SOFT = "SOFT";
		static ADVISORY = "ADVISORY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcControllerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLOATING = "FLOATING";
		static PROPORTIONAL = "PROPORTIONAL";
		static PROPORTIONALINTEGRAL = "PROPORTIONALINTEGRAL";
		static PROPORTIONALINTEGRALDERIVATIVE = "PROPORTIONALINTEGRALDERIVATIVE";
		static TIMEDTWOPOSITION = "TIMEDTWOPOSITION";
		static TWOPOSITION = "TWOPOSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCooledBeamTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACTIVE = "ACTIVE";
		static PASSIVE = "PASSIVE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCoolingTowerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static NATURALDRAFT = "NATURALDRAFT";
		static MECHANICALINDUCEDDRAFT = "MECHANICALINDUCEDDRAFT";
		static MECHANICALFORCEDDRAFT = "MECHANICALFORCEDDRAFT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCostScheduleTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BUDGET = "BUDGET";
		static COSTPLAN = "COSTPLAN";
		static ESTIMATE = "ESTIMATE";
		static TENDER = "TENDER";
		static PRICEDBILLOFQUANTITIES = "PRICEDBILLOFQUANTITIES";
		static UNPRICEDBILLOFQUANTITIES = "UNPRICEDBILLOFQUANTITIES";
		static SCHEDULEOFRATES = "SCHEDULEOFRATES";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCoveringTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CEILING = "CEILING";
		static FLOORING = "FLOORING";
		static CLADDING = "CLADDING";
		static ROOFING = "ROOFING";
		static INSULATION = "INSULATION";
		static MEMBRANE = "MEMBRANE";
		static SLEEVING = "SLEEVING";
		static WRAPPING = "WRAPPING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCurrencyEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AED = "AED";
		static AES = "AES";
		static ATS = "ATS";
		static AUD = "AUD";
		static BBD = "BBD";
		static BEG = "BEG";
		static BGL = "BGL";
		static BHD = "BHD";
		static BMD = "BMD";
		static BND = "BND";
		static BRL = "BRL";
		static BSD = "BSD";
		static BWP = "BWP";
		static BZD = "BZD";
		static CAD = "CAD";
		static CBD = "CBD";
		static CHF = "CHF";
		static CLP = "CLP";
		static CNY = "CNY";
		static CYS = "CYS";
		static CZK = "CZK";
		static DDP = "DDP";
		static DEM = "DEM";
		static DKK = "DKK";
		static EGL = "EGL";
		static EST = "EST";
		static EUR = "EUR";
		static FAK = "FAK";
		static FIM = "FIM";
		static FJD = "FJD";
		static FKP = "FKP";
		static FRF = "FRF";
		static GBP = "GBP";
		static GIP = "GIP";
		static GMD = "GMD";
		static GRX = "GRX";
		static HKD = "HKD";
		static HUF = "HUF";
		static ICK = "ICK";
		static IDR = "IDR";
		static ILS = "ILS";
		static INR = "INR";
		static IRP = "IRP";
		static ITL = "ITL";
		static JMD = "JMD";
		static JOD = "JOD";
		static JPY = "JPY";
		static KES = "KES";
		static KRW = "KRW";
		static KWD = "KWD";
		static KYD = "KYD";
		static LKR = "LKR";
		static LUF = "LUF";
		static MTL = "MTL";
		static MUR = "MUR";
		static MXN = "MXN";
		static MYR = "MYR";
		static NLG = "NLG";
		static NZD = "NZD";
		static OMR = "OMR";
		static PGK = "PGK";
		static PHP = "PHP";
		static PKR = "PKR";
		static PLN = "PLN";
		static PTN = "PTN";
		static QAR = "QAR";
		static RUR = "RUR";
		static SAR = "SAR";
		static SCR = "SCR";
		static SEK = "SEK";
		static SGD = "SGD";
		static SKP = "SKP";
		static THB = "THB";
		static TRL = "TRL";
		static TTD = "TTD";
		static TWD = "TWD";
		static USD = "USD";
		static VEB = "VEB";
		static VND = "VND";
		static XEU = "XEU";
		static ZAR = "ZAR";
		static ZWD = "ZWD";
		static NOK = "NOK";
	}
	export class IfcCurtainWallTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDamperTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONTROLDAMPER = "CONTROLDAMPER";
		static FIREDAMPER = "FIREDAMPER";
		static SMOKEDAMPER = "SMOKEDAMPER";
		static FIRESMOKEDAMPER = "FIRESMOKEDAMPER";
		static BACKDRAFTDAMPER = "BACKDRAFTDAMPER";
		static RELIEFDAMPER = "RELIEFDAMPER";
		static BLASTDAMPER = "BLASTDAMPER";
		static GRAVITYDAMPER = "GRAVITYDAMPER";
		static GRAVITYRELIEFDAMPER = "GRAVITYRELIEFDAMPER";
		static BALANCINGDAMPER = "BALANCINGDAMPER";
		static FUMEHOODEXHAUST = "FUMEHOODEXHAUST";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDataOriginEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static MEASURED = "MEASURED";
		static PREDICTED = "PREDICTED";
		static SIMULATED = "SIMULATED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDerivedUnitEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANGULARVELOCITYUNIT = "ANGULARVELOCITYUNIT";
		static COMPOUNDPLANEANGLEUNIT = "COMPOUNDPLANEANGLEUNIT";
		static DYNAMICVISCOSITYUNIT = "DYNAMICVISCOSITYUNIT";
		static HEATFLUXDENSITYUNIT = "HEATFLUXDENSITYUNIT";
		static INTEGERCOUNTRATEUNIT = "INTEGERCOUNTRATEUNIT";
		static ISOTHERMALMOISTURECAPACITYUNIT = "ISOTHERMALMOISTURECAPACITYUNIT";
		static KINEMATICVISCOSITYUNIT = "KINEMATICVISCOSITYUNIT";
		static LINEARVELOCITYUNIT = "LINEARVELOCITYUNIT";
		static MASSDENSITYUNIT = "MASSDENSITYUNIT";
		static MASSFLOWRATEUNIT = "MASSFLOWRATEUNIT";
		static MOISTUREDIFFUSIVITYUNIT = "MOISTUREDIFFUSIVITYUNIT";
		static MOLECULARWEIGHTUNIT = "MOLECULARWEIGHTUNIT";
		static SPECIFICHEATCAPACITYUNIT = "SPECIFICHEATCAPACITYUNIT";
		static THERMALADMITTANCEUNIT = "THERMALADMITTANCEUNIT";
		static THERMALCONDUCTANCEUNIT = "THERMALCONDUCTANCEUNIT";
		static THERMALRESISTANCEUNIT = "THERMALRESISTANCEUNIT";
		static THERMALTRANSMITTANCEUNIT = "THERMALTRANSMITTANCEUNIT";
		static VAPORPERMEABILITYUNIT = "VAPORPERMEABILITYUNIT";
		static VOLUMETRICFLOWRATEUNIT = "VOLUMETRICFLOWRATEUNIT";
		static ROTATIONALFREQUENCYUNIT = "ROTATIONALFREQUENCYUNIT";
		static TORQUEUNIT = "TORQUEUNIT";
		static MOMENTOFINERTIAUNIT = "MOMENTOFINERTIAUNIT";
		static LINEARMOMENTUNIT = "LINEARMOMENTUNIT";
		static LINEARFORCEUNIT = "LINEARFORCEUNIT";
		static PLANARFORCEUNIT = "PLANARFORCEUNIT";
		static MODULUSOFELASTICITYUNIT = "MODULUSOFELASTICITYUNIT";
		static SHEARMODULUSUNIT = "SHEARMODULUSUNIT";
		static LINEARSTIFFNESSUNIT = "LINEARSTIFFNESSUNIT";
		static ROTATIONALSTIFFNESSUNIT = "ROTATIONALSTIFFNESSUNIT";
		static MODULUSOFSUBGRADEREACTIONUNIT = "MODULUSOFSUBGRADEREACTIONUNIT";
		static ACCELERATIONUNIT = "ACCELERATIONUNIT";
		static CURVATUREUNIT = "CURVATUREUNIT";
		static HEATINGVALUEUNIT = "HEATINGVALUEUNIT";
		static IONCONCENTRATIONUNIT = "IONCONCENTRATIONUNIT";
		static LUMINOUSINTENSITYDISTRIBUTIONUNIT = "LUMINOUSINTENSITYDISTRIBUTIONUNIT";
		static MASSPERLENGTHUNIT = "MASSPERLENGTHUNIT";
		static MODULUSOFLINEARSUBGRADEREACTIONUNIT = "MODULUSOFLINEARSUBGRADEREACTIONUNIT";
		static MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT";
		static PHUNIT = "PHUNIT";
		static ROTATIONALMASSUNIT = "ROTATIONALMASSUNIT";
		static SECTIONAREAINTEGRALUNIT = "SECTIONAREAINTEGRALUNIT";
		static SECTIONMODULUSUNIT = "SECTIONMODULUSUNIT";
		static SOUNDPOWERUNIT = "SOUNDPOWERUNIT";
		static SOUNDPRESSUREUNIT = "SOUNDPRESSUREUNIT";
		static TEMPERATUREGRADIENTUNIT = "TEMPERATUREGRADIENTUNIT";
		static THERMALEXPANSIONCOEFFICIENTUNIT = "THERMALEXPANSIONCOEFFICIENTUNIT";
		static WARPINGCONSTANTUNIT = "WARPINGCONSTANTUNIT";
		static WARPINGMOMENTUNIT = "WARPINGMOMENTUNIT";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcDimensionExtentUsage {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ORIGIN = "ORIGIN";
		static TARGET = "TARGET";
	}
	export class IfcDirectionSenseEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POSITIVE = "POSITIVE";
		static NEGATIVE = "NEGATIVE";
	}
	export class IfcDistributionChamberElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FORMEDDUCT = "FORMEDDUCT";
		static INSPECTIONCHAMBER = "INSPECTIONCHAMBER";
		static INSPECTIONPIT = "INSPECTIONPIT";
		static MANHOLE = "MANHOLE";
		static METERCHAMBER = "METERCHAMBER";
		static SUMP = "SUMP";
		static TRENCH = "TRENCH";
		static VALVECHAMBER = "VALVECHAMBER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDocumentConfidentialityEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PUBLIC = "PUBLIC";
		static RESTRICTED = "RESTRICTED";
		static CONFIDENTIAL = "CONFIDENTIAL";
		static PERSONAL = "PERSONAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDocumentStatusEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DRAFT = "DRAFT";
		static FINALDRAFT = "FINALDRAFT";
		static FINAL = "FINAL";
		static REVISION = "REVISION";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorPanelOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SWINGING = "SWINGING";
		static DOUBLE_ACTING = "DOUBLE_ACTING";
		static SLIDING = "SLIDING";
		static FOLDING = "FOLDING";
		static REVOLVING = "REVOLVING";
		static ROLLINGUP = "ROLLINGUP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorPanelPositionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LEFT = "LEFT";
		static MIDDLE = "MIDDLE";
		static RIGHT = "RIGHT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorStyleConstructionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALUMINIUM = "ALUMINIUM";
		static HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
		static STEEL = "STEEL";
		static WOOD = "WOOD";
		static ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
		static ALUMINIUM_PLASTIC = "ALUMINIUM_PLASTIC";
		static PLASTIC = "PLASTIC";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorStyleOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
		static SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
		static DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
		static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
		static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
		static DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
		static DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
		static DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
		static SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
		static SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
		static DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
		static FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
		static FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
		static DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
		static REVOLVING = "REVOLVING";
		static ROLLINGUP = "ROLLINGUP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDuctFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEND = "BEND";
		static CONNECTOR = "CONNECTOR";
		static ENTRY = "ENTRY";
		static EXIT = "EXIT";
		static JUNCTION = "JUNCTION";
		static OBSTRUCTION = "OBSTRUCTION";
		static TRANSITION = "TRANSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDuctSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static RIGIDSEGMENT = "RIGIDSEGMENT";
		static FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDuctSilencerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLATOVAL = "FLATOVAL";
		static RECTANGULAR = "RECTANGULAR";
		static ROUND = "ROUND";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricApplianceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPUTER = "COMPUTER";
		static DIRECTWATERHEATER = "DIRECTWATERHEATER";
		static DISHWASHER = "DISHWASHER";
		static ELECTRICCOOKER = "ELECTRICCOOKER";
		static ELECTRICHEATER = "ELECTRICHEATER";
		static FACSIMILE = "FACSIMILE";
		static FREESTANDINGFAN = "FREESTANDINGFAN";
		static FREEZER = "FREEZER";
		static FRIDGE_FREEZER = "FRIDGE_FREEZER";
		static HANDDRYER = "HANDDRYER";
		static INDIRECTWATERHEATER = "INDIRECTWATERHEATER";
		static MICROWAVE = "MICROWAVE";
		static PHOTOCOPIER = "PHOTOCOPIER";
		static PRINTER = "PRINTER";
		static REFRIGERATOR = "REFRIGERATOR";
		static RADIANTHEATER = "RADIANTHEATER";
		static SCANNER = "SCANNER";
		static TELEPHONE = "TELEPHONE";
		static TUMBLEDRYER = "TUMBLEDRYER";
		static TV = "TV";
		static VENDINGMACHINE = "VENDINGMACHINE";
		static WASHINGMACHINE = "WASHINGMACHINE";
		static WATERHEATER = "WATERHEATER";
		static WATERCOOLER = "WATERCOOLER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricCurrentEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALTERNATING = "ALTERNATING";
		static DIRECT = "DIRECT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricDistributionPointFunctionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALARMPANEL = "ALARMPANEL";
		static CONSUMERUNIT = "CONSUMERUNIT";
		static CONTROLPANEL = "CONTROLPANEL";
		static DISTRIBUTIONBOARD = "DISTRIBUTIONBOARD";
		static GASDETECTORPANEL = "GASDETECTORPANEL";
		static INDICATORPANEL = "INDICATORPANEL";
		static MIMICPANEL = "MIMICPANEL";
		static MOTORCONTROLCENTRE = "MOTORCONTROLCENTRE";
		static SWITCHBOARD = "SWITCHBOARD";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricFlowStorageDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BATTERY = "BATTERY";
		static CAPACITORBANK = "CAPACITORBANK";
		static HARMONICFILTER = "HARMONICFILTER";
		static INDUCTORBANK = "INDUCTORBANK";
		static UPS = "UPS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricGeneratorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricHeaterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELECTRICPOINTHEATER = "ELECTRICPOINTHEATER";
		static ELECTRICCABLEHEATER = "ELECTRICCABLEHEATER";
		static ELECTRICMATHEATER = "ELECTRICMATHEATER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricMotorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DC = "DC";
		static INDUCTION = "INDUCTION";
		static POLYPHASE = "POLYPHASE";
		static RELUCTANCESYNCHRONOUS = "RELUCTANCESYNCHRONOUS";
		static SYNCHRONOUS = "SYNCHRONOUS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricTimeControlTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static TIMECLOCK = "TIMECLOCK";
		static TIMEDELAY = "TIMEDELAY";
		static RELAY = "RELAY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElementAssemblyTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACCESSORY_ASSEMBLY = "ACCESSORY_ASSEMBLY";
		static ARCH = "ARCH";
		static BEAM_GRID = "BEAM_GRID";
		static BRACED_FRAME = "BRACED_FRAME";
		static GIRDER = "GIRDER";
		static REINFORCEMENT_UNIT = "REINFORCEMENT_UNIT";
		static RIGID_FRAME = "RIGID_FRAME";
		static SLAB_FIELD = "SLAB_FIELD";
		static TRUSS = "TRUSS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElementCompositionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPLEX = "COMPLEX";
		static ELEMENT = "ELEMENT";
		static PARTIAL = "PARTIAL";
	}
	export class IfcEnergySequenceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PRIMARY = "PRIMARY";
		static SECONDARY = "SECONDARY";
		static TERTIARY = "TERTIARY";
		static AUXILIARY = "AUXILIARY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEnvironmentalImpactCategoryEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMBINEDVALUE = "COMBINEDVALUE";
		static DISPOSAL = "DISPOSAL";
		static EXTRACTION = "EXTRACTION";
		static INSTALLATION = "INSTALLATION";
		static MANUFACTURE = "MANUFACTURE";
		static TRANSPORTATION = "TRANSPORTATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEvaporativeCoolerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = "DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER";
		static DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER";
		static DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER";
		static DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER";
		static DIRECTEVAPORATIVEAIRWASHER = "DIRECTEVAPORATIVEAIRWASHER";
		static INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER";
		static INDIRECTEVAPORATIVEWETCOIL = "INDIRECTEVAPORATIVEWETCOIL";
		static INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER";
		static INDIRECTDIRECTCOMBINATION = "INDIRECTDIRECTCOMBINATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEvaporatorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DIRECTEXPANSIONSHELLANDTUBE = "DIRECTEXPANSIONSHELLANDTUBE";
		static DIRECTEXPANSIONTUBEINTUBE = "DIRECTEXPANSIONTUBEINTUBE";
		static DIRECTEXPANSIONBRAZEDPLATE = "DIRECTEXPANSIONBRAZEDPLATE";
		static FLOODEDSHELLANDTUBE = "FLOODEDSHELLANDTUBE";
		static SHELLANDCOIL = "SHELLANDCOIL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFanTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CENTRIFUGALFORWARDCURVED = "CENTRIFUGALFORWARDCURVED";
		static CENTRIFUGALRADIAL = "CENTRIFUGALRADIAL";
		static CENTRIFUGALBACKWARDINCLINEDCURVED = "CENTRIFUGALBACKWARDINCLINEDCURVED";
		static CENTRIFUGALAIRFOIL = "CENTRIFUGALAIRFOIL";
		static TUBEAXIAL = "TUBEAXIAL";
		static VANEAXIAL = "VANEAXIAL";
		static PROPELLORAXIAL = "PROPELLORAXIAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFilterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRPARTICLEFILTER = "AIRPARTICLEFILTER";
		static ODORFILTER = "ODORFILTER";
		static OILFILTER = "OILFILTER";
		static STRAINER = "STRAINER";
		static WATERFILTER = "WATERFILTER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFireSuppressionTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BREECHINGINLET = "BREECHINGINLET";
		static FIREHYDRANT = "FIREHYDRANT";
		static HOSEREEL = "HOSEREEL";
		static SPRINKLER = "SPRINKLER";
		static SPRINKLERDEFLECTOR = "SPRINKLERDEFLECTOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFlowDirectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SOURCE = "SOURCE";
		static SINK = "SINK";
		static SOURCEANDSINK = "SOURCEANDSINK";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFlowInstrumentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PRESSUREGAUGE = "PRESSUREGAUGE";
		static THERMOMETER = "THERMOMETER";
		static AMMETER = "AMMETER";
		static FREQUENCYMETER = "FREQUENCYMETER";
		static POWERFACTORMETER = "POWERFACTORMETER";
		static PHASEANGLEMETER = "PHASEANGLEMETER";
		static VOLTMETER_PEAK = "VOLTMETER_PEAK";
		static VOLTMETER_RMS = "VOLTMETER_RMS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFlowMeterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELECTRICMETER = "ELECTRICMETER";
		static ENERGYMETER = "ENERGYMETER";
		static FLOWMETER = "FLOWMETER";
		static GASMETER = "GASMETER";
		static OILMETER = "OILMETER";
		static WATERMETER = "WATERMETER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFootingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FOOTING_BEAM = "FOOTING_BEAM";
		static PAD_FOOTING = "PAD_FOOTING";
		static PILE_CAP = "PILE_CAP";
		static STRIP_FOOTING = "STRIP_FOOTING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcGasTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GASAPPLIANCE = "GASAPPLIANCE";
		static GASBOOSTER = "GASBOOSTER";
		static GASBURNER = "GASBURNER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcGeometricProjectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GRAPH_VIEW = "GRAPH_VIEW";
		static SKETCH_VIEW = "SKETCH_VIEW";
		static MODEL_VIEW = "MODEL_VIEW";
		static PLAN_VIEW = "PLAN_VIEW";
		static REFLECTED_PLAN_VIEW = "REFLECTED_PLAN_VIEW";
		static SECTION_VIEW = "SECTION_VIEW";
		static ELEVATION_VIEW = "ELEVATION_VIEW";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcGlobalOrLocalEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GLOBAL_COORDS = "GLOBAL_COORDS";
		static LOCAL_COORDS = "LOCAL_COORDS";
	}
	export class IfcHeatExchangerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PLATE = "PLATE";
		static SHELLANDTUBE = "SHELLANDTUBE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcHumidifierTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STEAMINJECTION = "STEAMINJECTION";
		static ADIABATICAIRWASHER = "ADIABATICAIRWASHER";
		static ADIABATICPAN = "ADIABATICPAN";
		static ADIABATICWETTEDELEMENT = "ADIABATICWETTEDELEMENT";
		static ADIABATICATOMIZING = "ADIABATICATOMIZING";
		static ADIABATICULTRASONIC = "ADIABATICULTRASONIC";
		static ADIABATICRIGIDMEDIA = "ADIABATICRIGIDMEDIA";
		static ADIABATICCOMPRESSEDAIRNOZZLE = "ADIABATICCOMPRESSEDAIRNOZZLE";
		static ASSISTEDELECTRIC = "ASSISTEDELECTRIC";
		static ASSISTEDNATURALGAS = "ASSISTEDNATURALGAS";
		static ASSISTEDPROPANE = "ASSISTEDPROPANE";
		static ASSISTEDBUTANE = "ASSISTEDBUTANE";
		static ASSISTEDSTEAM = "ASSISTEDSTEAM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcInternalOrExternalEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static INTERNAL = "INTERNAL";
		static EXTERNAL = "EXTERNAL";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcInventoryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ASSETINVENTORY = "ASSETINVENTORY";
		static SPACEINVENTORY = "SPACEINVENTORY";
		static FURNITUREINVENTORY = "FURNITUREINVENTORY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcJunctionBoxTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLampTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
		static FLUORESCENT = "FLUORESCENT";
		static HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
		static HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
		static METALHALIDE = "METALHALIDE";
		static TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLayerSetDirectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AXIS1 = "AXIS1";
		static AXIS2 = "AXIS2";
		static AXIS3 = "AXIS3";
	}
	export class IfcLightDistributionCurveEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static TYPE_A = "TYPE_A";
		static TYPE_B = "TYPE_B";
		static TYPE_C = "TYPE_C";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLightEmissionSourceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
		static FLUORESCENT = "FLUORESCENT";
		static HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
		static HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
		static LIGHTEMITTINGDIODE = "LIGHTEMITTINGDIODE";
		static LOWPRESSURESODIUM = "LOWPRESSURESODIUM";
		static LOWVOLTAGEHALOGEN = "LOWVOLTAGEHALOGEN";
		static MAINVOLTAGEHALOGEN = "MAINVOLTAGEHALOGEN";
		static METALHALIDE = "METALHALIDE";
		static TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLightFixtureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POINTSOURCE = "POINTSOURCE";
		static DIRECTIONSOURCE = "DIRECTIONSOURCE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLoadGroupTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LOAD_GROUP = "LOAD_GROUP";
		static LOAD_CASE = "LOAD_CASE";
		static LOAD_COMBINATION_GROUP = "LOAD_COMBINATION_GROUP";
		static LOAD_COMBINATION = "LOAD_COMBINATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLogicalOperatorEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LOGICALAND = "LOGICALAND";
		static LOGICALOR = "LOGICALOR";
	}
	export class IfcMemberTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BRACE = "BRACE";
		static CHORD = "CHORD";
		static COLLAR = "COLLAR";
		static MEMBER = "MEMBER";
		static MULLION = "MULLION";
		static PLATE = "PLATE";
		static POST = "POST";
		static PURLIN = "PURLIN";
		static RAFTER = "RAFTER";
		static STRINGER = "STRINGER";
		static STRUT = "STRUT";
		static STUD = "STUD";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcMotorConnectionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BELTDRIVE = "BELTDRIVE";
		static COUPLING = "COUPLING";
		static DIRECTDRIVE = "DIRECTDRIVE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcNullStyle {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static NULL = "NULL";
	}
	export class IfcObjectTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PRODUCT = "PRODUCT";
		static PROCESS = "PROCESS";
		static CONTROL = "CONTROL";
		static RESOURCE = "RESOURCE";
		static ACTOR = "ACTOR";
		static GROUP = "GROUP";
		static PROJECT = "PROJECT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcObjectiveEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CODECOMPLIANCE = "CODECOMPLIANCE";
		static DESIGNINTENT = "DESIGNINTENT";
		static HEALTHANDSAFETY = "HEALTHANDSAFETY";
		static REQUIREMENT = "REQUIREMENT";
		static SPECIFICATION = "SPECIFICATION";
		static TRIGGERCONDITION = "TRIGGERCONDITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcOccupantTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ASSIGNEE = "ASSIGNEE";
		static ASSIGNOR = "ASSIGNOR";
		static LESSEE = "LESSEE";
		static LESSOR = "LESSOR";
		static LETTINGAGENT = "LETTINGAGENT";
		static OWNER = "OWNER";
		static TENANT = "TENANT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcOutletTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AUDIOVISUALOUTLET = "AUDIOVISUALOUTLET";
		static COMMUNICATIONSOUTLET = "COMMUNICATIONSOUTLET";
		static POWEROUTLET = "POWEROUTLET";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPermeableCoveringOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GRILL = "GRILL";
		static LOUVER = "LOUVER";
		static SCREEN = "SCREEN";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPhysicalOrVirtualEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PHYSICAL = "PHYSICAL";
		static VIRTUAL = "VIRTUAL";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPileConstructionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CAST_IN_PLACE = "CAST_IN_PLACE";
		static COMPOSITE = "COMPOSITE";
		static PRECAST_CONCRETE = "PRECAST_CONCRETE";
		static PREFAB_STEEL = "PREFAB_STEEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPileTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COHESION = "COHESION";
		static FRICTION = "FRICTION";
		static SUPPORT = "SUPPORT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPipeFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEND = "BEND";
		static CONNECTOR = "CONNECTOR";
		static ENTRY = "ENTRY";
		static EXIT = "EXIT";
		static JUNCTION = "JUNCTION";
		static OBSTRUCTION = "OBSTRUCTION";
		static TRANSITION = "TRANSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPipeSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
		static RIGIDSEGMENT = "RIGIDSEGMENT";
		static GUTTER = "GUTTER";
		static SPOOL = "SPOOL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPlateTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURTAIN_PANEL = "CURTAIN_PANEL";
		static SHEET = "SHEET";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProcedureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ADVICE_CAUTION = "ADVICE_CAUTION";
		static ADVICE_NOTE = "ADVICE_NOTE";
		static ADVICE_WARNING = "ADVICE_WARNING";
		static CALIBRATION = "CALIBRATION";
		static DIAGNOSTIC = "DIAGNOSTIC";
		static SHUTDOWN = "SHUTDOWN";
		static STARTUP = "STARTUP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProfileTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURVE = "CURVE";
		static AREA = "AREA";
	}
	export class IfcProjectOrderRecordTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CHANGE = "CHANGE";
		static MAINTENANCE = "MAINTENANCE";
		static MOVE = "MOVE";
		static PURCHASE = "PURCHASE";
		static WORK = "WORK";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProjectOrderTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CHANGEORDER = "CHANGEORDER";
		static MAINTENANCEWORKORDER = "MAINTENANCEWORKORDER";
		static MOVEORDER = "MOVEORDER";
		static PURCHASEORDER = "PURCHASEORDER";
		static WORKORDER = "WORKORDER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProjectedOrTrueLengthEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PROJECTED_LENGTH = "PROJECTED_LENGTH";
		static TRUE_LENGTH = "TRUE_LENGTH";
	}
	export class IfcPropertySourceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DESIGN = "DESIGN";
		static DESIGNMAXIMUM = "DESIGNMAXIMUM";
		static DESIGNMINIMUM = "DESIGNMINIMUM";
		static SIMULATED = "SIMULATED";
		static ASBUILT = "ASBUILT";
		static COMMISSIONING = "COMMISSIONING";
		static MEASURED = "MEASURED";
		static USERDEFINED = "USERDEFINED";
		static NOTKNOWN = "NOTKNOWN";
	}
	export class IfcProtectiveDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FUSEDISCONNECTOR = "FUSEDISCONNECTOR";
		static CIRCUITBREAKER = "CIRCUITBREAKER";
		static EARTHFAILUREDEVICE = "EARTHFAILUREDEVICE";
		static RESIDUALCURRENTCIRCUITBREAKER = "RESIDUALCURRENTCIRCUITBREAKER";
		static RESIDUALCURRENTSWITCH = "RESIDUALCURRENTSWITCH";
		static VARISTOR = "VARISTOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPumpTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CIRCULATOR = "CIRCULATOR";
		static ENDSUCTION = "ENDSUCTION";
		static SPLITCASE = "SPLITCASE";
		static VERTICALINLINE = "VERTICALINLINE";
		static VERTICALTURBINE = "VERTICALTURBINE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRailingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static HANDRAIL = "HANDRAIL";
		static GUARDRAIL = "GUARDRAIL";
		static BALUSTRADE = "BALUSTRADE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRampFlightTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT = "STRAIGHT";
		static SPIRAL = "SPIRAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRampTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT_RUN_RAMP = "STRAIGHT_RUN_RAMP";
		static TWO_STRAIGHT_RUN_RAMP = "TWO_STRAIGHT_RUN_RAMP";
		static QUARTER_TURN_RAMP = "QUARTER_TURN_RAMP";
		static TWO_QUARTER_TURN_RAMP = "TWO_QUARTER_TURN_RAMP";
		static HALF_TURN_RAMP = "HALF_TURN_RAMP";
		static SPIRAL_RAMP = "SPIRAL_RAMP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcReflectanceMethodEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BLINN = "BLINN";
		static FLAT = "FLAT";
		static GLASS = "GLASS";
		static MATT = "MATT";
		static METAL = "METAL";
		static MIRROR = "MIRROR";
		static PHONG = "PHONG";
		static PLASTIC = "PLASTIC";
		static STRAUSS = "STRAUSS";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcReinforcingBarRoleEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static MAIN = "MAIN";
		static SHEAR = "SHEAR";
		static LIGATURE = "LIGATURE";
		static STUD = "STUD";
		static PUNCHING = "PUNCHING";
		static EDGE = "EDGE";
		static RING = "RING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcReinforcingBarSurfaceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PLAIN = "PLAIN";
		static TEXTURED = "TEXTURED";
	}
	export class IfcResourceConsumptionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONSUMED = "CONSUMED";
		static PARTIALLYCONSUMED = "PARTIALLYCONSUMED";
		static NOTCONSUMED = "NOTCONSUMED";
		static OCCUPIED = "OCCUPIED";
		static PARTIALLYOCCUPIED = "PARTIALLYOCCUPIED";
		static NOTOCCUPIED = "NOTOCCUPIED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRibPlateDirectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DIRECTION_X = "DIRECTION_X";
		static DIRECTION_Y = "DIRECTION_Y";
	}
	export class IfcRoleEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SUPPLIER = "SUPPLIER";
		static MANUFACTURER = "MANUFACTURER";
		static CONTRACTOR = "CONTRACTOR";
		static SUBCONTRACTOR = "SUBCONTRACTOR";
		static ARCHITECT = "ARCHITECT";
		static STRUCTURALENGINEER = "STRUCTURALENGINEER";
		static COSTENGINEER = "COSTENGINEER";
		static CLIENT = "CLIENT";
		static BUILDINGOWNER = "BUILDINGOWNER";
		static BUILDINGOPERATOR = "BUILDINGOPERATOR";
		static MECHANICALENGINEER = "MECHANICALENGINEER";
		static ELECTRICALENGINEER = "ELECTRICALENGINEER";
		static PROJECTMANAGER = "PROJECTMANAGER";
		static FACILITIESMANAGER = "FACILITIESMANAGER";
		static CIVILENGINEER = "CIVILENGINEER";
		static COMISSIONINGENGINEER = "COMISSIONINGENGINEER";
		static ENGINEER = "ENGINEER";
		static OWNER = "OWNER";
		static CONSULTANT = "CONSULTANT";
		static CONSTRUCTIONMANAGER = "CONSTRUCTIONMANAGER";
		static FIELDCONSTRUCTIONMANAGER = "FIELDCONSTRUCTIONMANAGER";
		static RESELLER = "RESELLER";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcRoofTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLAT_ROOF = "FLAT_ROOF";
		static SHED_ROOF = "SHED_ROOF";
		static GABLE_ROOF = "GABLE_ROOF";
		static HIP_ROOF = "HIP_ROOF";
		static HIPPED_GABLE_ROOF = "HIPPED_GABLE_ROOF";
		static GAMBREL_ROOF = "GAMBREL_ROOF";
		static MANSARD_ROOF = "MANSARD_ROOF";
		static BARREL_ROOF = "BARREL_ROOF";
		static RAINBOW_ROOF = "RAINBOW_ROOF";
		static BUTTERFLY_ROOF = "BUTTERFLY_ROOF";
		static PAVILION_ROOF = "PAVILION_ROOF";
		static DOME_ROOF = "DOME_ROOF";
		static FREEFORM = "FREEFORM";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSIPrefix {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static EXA = "EXA";
		static PETA = "PETA";
		static TERA = "TERA";
		static GIGA = "GIGA";
		static MEGA = "MEGA";
		static KILO = "KILO";
		static HECTO = "HECTO";
		static DECA = "DECA";
		static DECI = "DECI";
		static CENTI = "CENTI";
		static MILLI = "MILLI";
		static MICRO = "MICRO";
		static NANO = "NANO";
		static PICO = "PICO";
		static FEMTO = "FEMTO";
		static ATTO = "ATTO";
	}
	export class IfcSIUnitName {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AMPERE = "AMPERE";
		static BECQUEREL = "BECQUEREL";
		static CANDELA = "CANDELA";
		static COULOMB = "COULOMB";
		static CUBIC_METRE = "CUBIC_METRE";
		static DEGREE_CELSIUS = "DEGREE_CELSIUS";
		static FARAD = "FARAD";
		static GRAM = "GRAM";
		static GRAY = "GRAY";
		static HENRY = "HENRY";
		static HERTZ = "HERTZ";
		static JOULE = "JOULE";
		static KELVIN = "KELVIN";
		static LUMEN = "LUMEN";
		static LUX = "LUX";
		static METRE = "METRE";
		static MOLE = "MOLE";
		static NEWTON = "NEWTON";
		static OHM = "OHM";
		static PASCAL = "PASCAL";
		static RADIAN = "RADIAN";
		static SECOND = "SECOND";
		static SIEMENS = "SIEMENS";
		static SIEVERT = "SIEVERT";
		static SQUARE_METRE = "SQUARE_METRE";
		static STERADIAN = "STERADIAN";
		static TESLA = "TESLA";
		static VOLT = "VOLT";
		static WATT = "WATT";
		static WEBER = "WEBER";
	}
	export class IfcSanitaryTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BATH = "BATH";
		static BIDET = "BIDET";
		static CISTERN = "CISTERN";
		static SHOWER = "SHOWER";
		static SINK = "SINK";
		static SANITARYFOUNTAIN = "SANITARYFOUNTAIN";
		static TOILETPAN = "TOILETPAN";
		static URINAL = "URINAL";
		static WASHHANDBASIN = "WASHHANDBASIN";
		static WCSEAT = "WCSEAT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSectionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static UNIFORM = "UNIFORM";
		static TAPERED = "TAPERED";
	}
	export class IfcSensorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CO2SENSOR = "CO2SENSOR";
		static FIRESENSOR = "FIRESENSOR";
		static FLOWSENSOR = "FLOWSENSOR";
		static GASSENSOR = "GASSENSOR";
		static HEATSENSOR = "HEATSENSOR";
		static HUMIDITYSENSOR = "HUMIDITYSENSOR";
		static LIGHTSENSOR = "LIGHTSENSOR";
		static MOISTURESENSOR = "MOISTURESENSOR";
		static MOVEMENTSENSOR = "MOVEMENTSENSOR";
		static PRESSURESENSOR = "PRESSURESENSOR";
		static SMOKESENSOR = "SMOKESENSOR";
		static SOUNDSENSOR = "SOUNDSENSOR";
		static TEMPERATURESENSOR = "TEMPERATURESENSOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSequenceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static START_START = "START_START";
		static START_FINISH = "START_FINISH";
		static FINISH_START = "FINISH_START";
		static FINISH_FINISH = "FINISH_FINISH";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcServiceLifeFactorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static A_QUALITYOFCOMPONENTS = "A_QUALITYOFCOMPONENTS";
		static B_DESIGNLEVEL = "B_DESIGNLEVEL";
		static C_WORKEXECUTIONLEVEL = "C_WORKEXECUTIONLEVEL";
		static D_INDOORENVIRONMENT = "D_INDOORENVIRONMENT";
		static E_OUTDOORENVIRONMENT = "E_OUTDOORENVIRONMENT";
		static F_INUSECONDITIONS = "F_INUSECONDITIONS";
		static G_MAINTENANCELEVEL = "G_MAINTENANCELEVEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcServiceLifeTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACTUALSERVICELIFE = "ACTUALSERVICELIFE";
		static EXPECTEDSERVICELIFE = "EXPECTEDSERVICELIFE";
		static OPTIMISTICREFERENCESERVICELIFE = "OPTIMISTICREFERENCESERVICELIFE";
		static PESSIMISTICREFERENCESERVICELIFE = "PESSIMISTICREFERENCESERVICELIFE";
		static REFERENCESERVICELIFE = "REFERENCESERVICELIFE";
	}
	export class IfcSlabTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLOOR = "FLOOR";
		static ROOF = "ROOF";
		static LANDING = "LANDING";
		static BASESLAB = "BASESLAB";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSoundScaleEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DBA = "DBA";
		static DBB = "DBB";
		static DBC = "DBC";
		static NC = "NC";
		static NR = "NR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSpaceHeaterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SECTIONALRADIATOR = "SECTIONALRADIATOR";
		static PANELRADIATOR = "PANELRADIATOR";
		static TUBULARRADIATOR = "TUBULARRADIATOR";
		static CONVECTOR = "CONVECTOR";
		static BASEBOARDHEATER = "BASEBOARDHEATER";
		static FINNEDTUBEUNIT = "FINNEDTUBEUNIT";
		static UNITHEATER = "UNITHEATER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSpaceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStackTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BIRDCAGE = "BIRDCAGE";
		static COWL = "COWL";
		static RAINWATERHOPPER = "RAINWATERHOPPER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStairFlightTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT = "STRAIGHT";
		static WINDER = "WINDER";
		static SPIRAL = "SPIRAL";
		static CURVED = "CURVED";
		static FREEFORM = "FREEFORM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStairTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT_RUN_STAIR = "STRAIGHT_RUN_STAIR";
		static TWO_STRAIGHT_RUN_STAIR = "TWO_STRAIGHT_RUN_STAIR";
		static QUARTER_WINDING_STAIR = "QUARTER_WINDING_STAIR";
		static QUARTER_TURN_STAIR = "QUARTER_TURN_STAIR";
		static HALF_WINDING_STAIR = "HALF_WINDING_STAIR";
		static HALF_TURN_STAIR = "HALF_TURN_STAIR";
		static TWO_QUARTER_WINDING_STAIR = "TWO_QUARTER_WINDING_STAIR";
		static TWO_QUARTER_TURN_STAIR = "TWO_QUARTER_TURN_STAIR";
		static THREE_QUARTER_WINDING_STAIR = "THREE_QUARTER_WINDING_STAIR";
		static THREE_QUARTER_TURN_STAIR = "THREE_QUARTER_TURN_STAIR";
		static SPIRAL_STAIR = "SPIRAL_STAIR";
		static DOUBLE_RETURN_STAIR = "DOUBLE_RETURN_STAIR";
		static CURVED_RUN_STAIR = "CURVED_RUN_STAIR";
		static TWO_CURVED_RUN_STAIR = "TWO_CURVED_RUN_STAIR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStateEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static READWRITE = "READWRITE";
		static READONLY = "READONLY";
		static LOCKED = "LOCKED";
		static READWRITELOCKED = "READWRITELOCKED";
		static READONLYLOCKED = "READONLYLOCKED";
	}
	export class IfcStructuralCurveTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static RIGID_JOINED_MEMBER = "RIGID_JOINED_MEMBER";
		static PIN_JOINED_MEMBER = "PIN_JOINED_MEMBER";
		static CABLE = "CABLE";
		static TENSION_MEMBER = "TENSION_MEMBER";
		static COMPRESSION_MEMBER = "COMPRESSION_MEMBER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStructuralSurfaceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BENDING_ELEMENT = "BENDING_ELEMENT";
		static MEMBRANE_ELEMENT = "MEMBRANE_ELEMENT";
		static SHELL = "SHELL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSurfaceSide {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POSITIVE = "POSITIVE";
		static NEGATIVE = "NEGATIVE";
		static BOTH = "BOTH";
	}
	export class IfcSurfaceTextureEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BUMP = "BUMP";
		static OPACITY = "OPACITY";
		static REFLECTION = "REFLECTION";
		static SELFILLUMINATION = "SELFILLUMINATION";
		static SHININESS = "SHININESS";
		static SPECULAR = "SPECULAR";
		static TEXTURE = "TEXTURE";
		static TRANSPARENCYMAP = "TRANSPARENCYMAP";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSwitchingDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONTACTOR = "CONTACTOR";
		static EMERGENCYSTOP = "EMERGENCYSTOP";
		static STARTER = "STARTER";
		static SWITCHDISCONNECTOR = "SWITCHDISCONNECTOR";
		static TOGGLESWITCH = "TOGGLESWITCH";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTankTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PREFORMED = "PREFORMED";
		static SECTIONAL = "SECTIONAL";
		static EXPANSION = "EXPANSION";
		static PRESSUREVESSEL = "PRESSUREVESSEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTendonTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAND = "STRAND";
		static WIRE = "WIRE";
		static BAR = "BAR";
		static COATED = "COATED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTextPath {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LEFT = "LEFT";
		static RIGHT = "RIGHT";
		static UP = "UP";
		static DOWN = "DOWN";
	}
	export class IfcThermalLoadSourceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PEOPLE = "PEOPLE";
		static LIGHTING = "LIGHTING";
		static EQUIPMENT = "EQUIPMENT";
		static VENTILATIONINDOORAIR = "VENTILATIONINDOORAIR";
		static VENTILATIONOUTSIDEAIR = "VENTILATIONOUTSIDEAIR";
		static RECIRCULATEDAIR = "RECIRCULATEDAIR";
		static EXHAUSTAIR = "EXHAUSTAIR";
		static AIREXCHANGERATE = "AIREXCHANGERATE";
		static DRYBULBTEMPERATURE = "DRYBULBTEMPERATURE";
		static RELATIVEHUMIDITY = "RELATIVEHUMIDITY";
		static INFILTRATION = "INFILTRATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcThermalLoadTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SENSIBLE = "SENSIBLE";
		static LATENT = "LATENT";
		static RADIANT = "RADIANT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTimeSeriesDataTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONTINUOUS = "CONTINUOUS";
		static DISCRETE = "DISCRETE";
		static DISCRETEBINARY = "DISCRETEBINARY";
		static PIECEWISEBINARY = "PIECEWISEBINARY";
		static PIECEWISECONSTANT = "PIECEWISECONSTANT";
		static PIECEWISECONTINUOUS = "PIECEWISECONTINUOUS";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTimeSeriesScheduleTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANNUAL = "ANNUAL";
		static MONTHLY = "MONTHLY";
		static WEEKLY = "WEEKLY";
		static DAILY = "DAILY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTransformerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURRENT = "CURRENT";
		static FREQUENCY = "FREQUENCY";
		static VOLTAGE = "VOLTAGE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTransitionCode {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DISCONTINUOUS = "DISCONTINUOUS";
		static CONTINUOUS = "CONTINUOUS";
		static CONTSAMEGRADIENT = "CONTSAMEGRADIENT";
		static CONTSAMEGRADIENTSAMECURVATURE = "CONTSAMEGRADIENTSAMECURVATURE";
	}
	export class IfcTransportElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELEVATOR = "ELEVATOR";
		static ESCALATOR = "ESCALATOR";
		static MOVINGWALKWAY = "MOVINGWALKWAY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTrimmingPreference {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CARTESIAN = "CARTESIAN";
		static PARAMETER = "PARAMETER";
		static UNSPECIFIED = "UNSPECIFIED";
	}
	export class IfcTubeBundleTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FINNED = "FINNED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcUnitEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ABSORBEDDOSEUNIT = "ABSORBEDDOSEUNIT";
		static AMOUNTOFSUBSTANCEUNIT = "AMOUNTOFSUBSTANCEUNIT";
		static AREAUNIT = "AREAUNIT";
		static DOSEEQUIVALENTUNIT = "DOSEEQUIVALENTUNIT";
		static ELECTRICCAPACITANCEUNIT = "ELECTRICCAPACITANCEUNIT";
		static ELECTRICCHARGEUNIT = "ELECTRICCHARGEUNIT";
		static ELECTRICCONDUCTANCEUNIT = "ELECTRICCONDUCTANCEUNIT";
		static ELECTRICCURRENTUNIT = "ELECTRICCURRENTUNIT";
		static ELECTRICRESISTANCEUNIT = "ELECTRICRESISTANCEUNIT";
		static ELECTRICVOLTAGEUNIT = "ELECTRICVOLTAGEUNIT";
		static ENERGYUNIT = "ENERGYUNIT";
		static FORCEUNIT = "FORCEUNIT";
		static FREQUENCYUNIT = "FREQUENCYUNIT";
		static ILLUMINANCEUNIT = "ILLUMINANCEUNIT";
		static INDUCTANCEUNIT = "INDUCTANCEUNIT";
		static LENGTHUNIT = "LENGTHUNIT";
		static LUMINOUSFLUXUNIT = "LUMINOUSFLUXUNIT";
		static LUMINOUSINTENSITYUNIT = "LUMINOUSINTENSITYUNIT";
		static MAGNETICFLUXDENSITYUNIT = "MAGNETICFLUXDENSITYUNIT";
		static MAGNETICFLUXUNIT = "MAGNETICFLUXUNIT";
		static MASSUNIT = "MASSUNIT";
		static PLANEANGLEUNIT = "PLANEANGLEUNIT";
		static POWERUNIT = "POWERUNIT";
		static PRESSUREUNIT = "PRESSUREUNIT";
		static RADIOACTIVITYUNIT = "RADIOACTIVITYUNIT";
		static SOLIDANGLEUNIT = "SOLIDANGLEUNIT";
		static THERMODYNAMICTEMPERATUREUNIT = "THERMODYNAMICTEMPERATUREUNIT";
		static TIMEUNIT = "TIMEUNIT";
		static VOLUMEUNIT = "VOLUMEUNIT";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcUnitaryEquipmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRHANDLER = "AIRHANDLER";
		static AIRCONDITIONINGUNIT = "AIRCONDITIONINGUNIT";
		static SPLITSYSTEM = "SPLITSYSTEM";
		static ROOFTOPUNIT = "ROOFTOPUNIT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcValveTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRRELEASE = "AIRRELEASE";
		static ANTIVACUUM = "ANTIVACUUM";
		static CHANGEOVER = "CHANGEOVER";
		static CHECK = "CHECK";
		static COMMISSIONING = "COMMISSIONING";
		static DIVERTING = "DIVERTING";
		static DRAWOFFCOCK = "DRAWOFFCOCK";
		static DOUBLECHECK = "DOUBLECHECK";
		static DOUBLEREGULATING = "DOUBLEREGULATING";
		static FAUCET = "FAUCET";
		static FLUSHING = "FLUSHING";
		static GASCOCK = "GASCOCK";
		static GASTAP = "GASTAP";
		static ISOLATING = "ISOLATING";
		static MIXING = "MIXING";
		static PRESSUREREDUCING = "PRESSUREREDUCING";
		static PRESSURERELIEF = "PRESSURERELIEF";
		static REGULATING = "REGULATING";
		static SAFETYCUTOFF = "SAFETYCUTOFF";
		static STEAMTRAP = "STEAMTRAP";
		static STOPCOCK = "STOPCOCK";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcVibrationIsolatorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPRESSION = "COMPRESSION";
		static SPRING = "SPRING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWallTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STANDARD = "STANDARD";
		static POLYGONAL = "POLYGONAL";
		static SHEAR = "SHEAR";
		static ELEMENTEDWALL = "ELEMENTEDWALL";
		static PLUMBINGWALL = "PLUMBINGWALL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWasteTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLOORTRAP = "FLOORTRAP";
		static FLOORWASTE = "FLOORWASTE";
		static GULLYSUMP = "GULLYSUMP";
		static GULLYTRAP = "GULLYTRAP";
		static GREASEINTERCEPTOR = "GREASEINTERCEPTOR";
		static OILINTERCEPTOR = "OILINTERCEPTOR";
		static PETROLINTERCEPTOR = "PETROLINTERCEPTOR";
		static ROOFDRAIN = "ROOFDRAIN";
		static WASTEDISPOSALUNIT = "WASTEDISPOSALUNIT";
		static WASTETRAP = "WASTETRAP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowPanelOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SIDEHUNGRIGHTHAND = "SIDEHUNGRIGHTHAND";
		static SIDEHUNGLEFTHAND = "SIDEHUNGLEFTHAND";
		static TILTANDTURNRIGHTHAND = "TILTANDTURNRIGHTHAND";
		static TILTANDTURNLEFTHAND = "TILTANDTURNLEFTHAND";
		static TOPHUNG = "TOPHUNG";
		static BOTTOMHUNG = "BOTTOMHUNG";
		static PIVOTHORIZONTAL = "PIVOTHORIZONTAL";
		static PIVOTVERTICAL = "PIVOTVERTICAL";
		static SLIDINGHORIZONTAL = "SLIDINGHORIZONTAL";
		static SLIDINGVERTICAL = "SLIDINGVERTICAL";
		static REMOVABLECASEMENT = "REMOVABLECASEMENT";
		static FIXEDCASEMENT = "FIXEDCASEMENT";
		static OTHEROPERATION = "OTHEROPERATION";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowPanelPositionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LEFT = "LEFT";
		static MIDDLE = "MIDDLE";
		static RIGHT = "RIGHT";
		static BOTTOM = "BOTTOM";
		static TOP = "TOP";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowStyleConstructionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALUMINIUM = "ALUMINIUM";
		static HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
		static STEEL = "STEEL";
		static WOOD = "WOOD";
		static ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
		static PLASTIC = "PLASTIC";
		static OTHER_CONSTRUCTION = "OTHER_CONSTRUCTION";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowStyleOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SINGLE_PANEL = "SINGLE_PANEL";
		static DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
		static DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
		static TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
		static TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
		static TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
		static TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
		static TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
		static TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWorkControlTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACTUAL = "ACTUAL";
		static BASELINE = "BASELINE";
		static PLANNED = "PLANNED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export type IfcActorSelect = 
		| (Handle<IfcOrganization> | IfcOrganization)
		| (Handle<IfcPerson> | IfcPerson)
		| (Handle<IfcPersonAndOrganization> | IfcPersonAndOrganization)
	;
	export type IfcAppliedValueSelect = 
		| IfcRatioMeasure
		| (Handle<IfcMeasureWithUnit> | IfcMeasureWithUnit)
		| IfcMonetaryMeasure
	;
	export type IfcAxis2Placement = 
		| (Handle<IfcAxis2Placement2D> | IfcAxis2Placement2D)
		| (Handle<IfcAxis2Placement3D> | IfcAxis2Placement3D)
	;
	export type IfcBooleanOperand = 
		| (Handle<IfcSolidModel> | IfcSolidModel)
		| (Handle<IfcHalfSpaceSolid> | IfcHalfSpaceSolid)
		| (Handle<IfcBooleanResult> | IfcBooleanResult)
		| (Handle<IfcCsgPrimitive3D> | IfcCsgPrimitive3D)
	;
	export type IfcCharacterStyleSelect = 
		| (Handle<IfcTextStyleForDefinedFont> | IfcTextStyleForDefinedFont)
	;
	export type IfcClassificationNotationSelect = 
		| (Handle<IfcClassificationNotation> | IfcClassificationNotation)
		| (Handle<IfcClassificationReference> | IfcClassificationReference)
	;
	export type IfcColour = 
		| (Handle<IfcColourSpecification> | IfcColourSpecification)
		| (Handle<IfcPreDefinedColour> | IfcPreDefinedColour)
	;
	export type IfcColourOrFactor = 
		| (Handle<IfcColourRgb> | IfcColourRgb)
		| IfcNormalisedRatioMeasure
	;
	export type IfcConditionCriterionSelect = 
		| IfcLabel
		| (Handle<IfcMeasureWithUnit> | IfcMeasureWithUnit)
	;
	export type IfcCsgSelect = 
		| (Handle<IfcBooleanResult> | IfcBooleanResult)
		| (Handle<IfcCsgPrimitive3D> | IfcCsgPrimitive3D)
	;
	export type IfcCurveFontOrScaledCurveFontSelect = 
		| IfcCurveStyleFontSelect
		| (Handle<IfcCurveStyleFontAndScaling> | IfcCurveStyleFontAndScaling)
	;
	export type IfcCurveOrEdgeCurve = 
		| (Handle<IfcBoundedCurve> | IfcBoundedCurve)
		| (Handle<IfcEdgeCurve> | IfcEdgeCurve)
	;
	export type IfcCurveStyleFontSelect = 
		| (Handle<IfcPreDefinedCurveFont> | IfcPreDefinedCurveFont)
		| (Handle<IfcCurveStyleFont> | IfcCurveStyleFont)
	;
	export type IfcDateTimeSelect = 
		| (Handle<IfcCalendarDate> | IfcCalendarDate)
		| (Handle<IfcLocalTime> | IfcLocalTime)
		| (Handle<IfcDateAndTime> | IfcDateAndTime)
	;
	export type IfcDefinedSymbolSelect = 
		| (Handle<IfcPreDefinedSymbol> | IfcPreDefinedSymbol)
		| (Handle<IfcExternallyDefinedSymbol> | IfcExternallyDefinedSymbol)
	;
	export type IfcDerivedMeasureValue = 
		| IfcVolumetricFlowRateMeasure
		| IfcTimeStamp
		| IfcThermalTransmittanceMeasure
		| IfcThermalResistanceMeasure
		| IfcThermalAdmittanceMeasure
		| IfcPressureMeasure
		| IfcPowerMeasure
		| IfcMassFlowRateMeasure
		| IfcMassDensityMeasure
		| IfcLinearVelocityMeasure
		| IfcKinematicViscosityMeasure
		| IfcIntegerCountRateMeasure
		| IfcHeatFluxDensityMeasure
		| IfcFrequencyMeasure
		| IfcEnergyMeasure
		| IfcElectricVoltageMeasure
		| IfcDynamicViscosityMeasure
		| IfcCompoundPlaneAngleMeasure
		| IfcAngularVelocityMeasure
		| IfcThermalConductivityMeasure
		| IfcMolecularWeightMeasure
		| IfcVaporPermeabilityMeasure
		| IfcMoistureDiffusivityMeasure
		| IfcIsothermalMoistureCapacityMeasure
		| IfcSpecificHeatCapacityMeasure
		| IfcMonetaryMeasure
		| IfcMagneticFluxDensityMeasure
		| IfcMagneticFluxMeasure
		| IfcLuminousFluxMeasure
		| IfcForceMeasure
		| IfcInductanceMeasure
		| IfcIlluminanceMeasure
		| IfcElectricResistanceMeasure
		| IfcElectricConductanceMeasure
		| IfcElectricChargeMeasure
		| IfcDoseEquivalentMeasure
		| IfcElectricCapacitanceMeasure
		| IfcAbsorbedDoseMeasure
		| IfcRadioActivityMeasure
		| IfcRotationalFrequencyMeasure
		| IfcTorqueMeasure
		| IfcAccelerationMeasure
		| IfcLinearForceMeasure
		| IfcLinearStiffnessMeasure
		| IfcModulusOfSubgradeReactionMeasure
		| IfcModulusOfElasticityMeasure
		| IfcMomentOfInertiaMeasure
		| IfcPlanarForceMeasure
		| IfcRotationalStiffnessMeasure
		| IfcShearModulusMeasure
		| IfcLinearMomentMeasure
		| IfcLuminousIntensityDistributionMeasure
		| IfcCurvatureMeasure
		| IfcMassPerLengthMeasure
		| IfcModulusOfLinearSubgradeReactionMeasure
		| IfcModulusOfRotationalSubgradeReactionMeasure
		| IfcRotationalMassMeasure
		| IfcSectionalAreaIntegralMeasure
		| IfcSectionModulusMeasure
		| IfcTemperatureGradientMeasure
		| IfcThermalExpansionCoefficientMeasure
		| IfcWarpingConstantMeasure
		| IfcWarpingMomentMeasure
		| IfcSoundPowerMeasure
		| IfcSoundPressureMeasure
		| IfcHeatingValueMeasure
		| IfcPHMeasure
		| IfcIonConcentrationMeasure
	;
	export type IfcDocumentSelect = 
		| (Handle<IfcDocumentReference> | IfcDocumentReference)
		| (Handle<IfcDocumentInformation> | IfcDocumentInformation)
	;
	export type IfcDraughtingCalloutElement = 
		| (Handle<IfcAnnotationCurveOccurrence> | IfcAnnotationCurveOccurrence)
		| (Handle<IfcAnnotationTextOccurrence> | IfcAnnotationTextOccurrence)
		| (Handle<IfcAnnotationSymbolOccurrence> | IfcAnnotationSymbolOccurrence)
	;
	export type IfcFillAreaStyleTileShapeSelect = 
		| (Handle<IfcFillAreaStyleTileSymbolWithStyle> | IfcFillAreaStyleTileSymbolWithStyle)
	;
	export type IfcFillStyleSelect = 
		| (Handle<IfcFillAreaStyleHatching> | IfcFillAreaStyleHatching)
		| (Handle<IfcFillAreaStyleTiles> | IfcFillAreaStyleTiles)
		| IfcColour
		| (Handle<IfcExternallyDefinedHatchStyle> | IfcExternallyDefinedHatchStyle)
	;
	export type IfcGeometricSetSelect = 
		| (Handle<IfcPoint> | IfcPoint)
		| (Handle<IfcCurve> | IfcCurve)
		| (Handle<IfcSurface> | IfcSurface)
	;
	export type IfcHatchLineDistanceSelect = 
		| (Handle<IfcOneDirectionRepeatFactor> | IfcOneDirectionRepeatFactor)
		| IfcPositiveLengthMeasure
	;
	export type IfcLayeredItem = 
		| (Handle<IfcRepresentationItem> | IfcRepresentationItem)
		| (Handle<IfcRepresentation> | IfcRepresentation)
	;
	export type IfcLibrarySelect = 
		| (Handle<IfcLibraryReference> | IfcLibraryReference)
		| (Handle<IfcLibraryInformation> | IfcLibraryInformation)
	;
	export type IfcLightDistributionDataSourceSelect = 
		| (Handle<IfcExternalReference> | IfcExternalReference)
		| (Handle<IfcLightIntensityDistribution> | IfcLightIntensityDistribution)
	;
	export type IfcMaterialSelect = 
		| (Handle<IfcMaterial> | IfcMaterial)
		| (Handle<IfcMaterialList> | IfcMaterialList)
		| (Handle<IfcMaterialLayerSetUsage> | IfcMaterialLayerSetUsage)
		| (Handle<IfcMaterialLayerSet> | IfcMaterialLayerSet)
		| (Handle<IfcMaterialLayer> | IfcMaterialLayer)
	;
	export type IfcMeasureValue = 
		| IfcVolumeMeasure
		| IfcTimeMeasure
		| IfcThermodynamicTemperatureMeasure
		| IfcSolidAngleMeasure
		| IfcPositiveRatioMeasure
		| IfcRatioMeasure
		| IfcPositivePlaneAngleMeasure
		| IfcPlaneAngleMeasure
		| IfcParameterValue
		| IfcNumericMeasure
		| IfcMassMeasure
		| IfcPositiveLengthMeasure
		| IfcLengthMeasure
		| IfcElectricCurrentMeasure
		| IfcDescriptiveMeasure
		| IfcCountMeasure
		| IfcContextDependentMeasure
		| IfcAreaMeasure
		| IfcAmountOfSubstanceMeasure
		| IfcLuminousIntensityMeasure
		| IfcNormalisedRatioMeasure
		| IfcComplexNumber
	;
	export type IfcMetricValueSelect = 
		| IfcDateTimeSelect
		| (Handle<IfcMeasureWithUnit> | IfcMeasureWithUnit)
		| (Handle<IfcTable> | IfcTable)
		| IfcText
		| (Handle<IfcTimeSeries> | IfcTimeSeries)
		| (Handle<IfcCostValue> | IfcCostValue)
	;
	export type IfcObjectReferenceSelect = 
		| (Handle<IfcMaterial> | IfcMaterial)
		| (Handle<IfcPerson> | IfcPerson)
		| (Handle<IfcDateAndTime> | IfcDateAndTime)
		| (Handle<IfcMaterialList> | IfcMaterialList)
		| (Handle<IfcOrganization> | IfcOrganization)
		| (Handle<IfcCalendarDate> | IfcCalendarDate)
		| (Handle<IfcLocalTime> | IfcLocalTime)
		| (Handle<IfcPersonAndOrganization> | IfcPersonAndOrganization)
		| (Handle<IfcMaterialLayer> | IfcMaterialLayer)
		| (Handle<IfcExternalReference> | IfcExternalReference)
		| (Handle<IfcTimeSeries> | IfcTimeSeries)
		| (Handle<IfcAddress> | IfcAddress)
		| (Handle<IfcAppliedValue> | IfcAppliedValue)
	;
	export type IfcOrientationSelect = 
		| IfcPlaneAngleMeasure
		| (Handle<IfcDirection> | IfcDirection)
	;
	export type IfcPointOrVertexPoint = 
		| (Handle<IfcPoint> | IfcPoint)
		| (Handle<IfcVertexPoint> | IfcVertexPoint)
	;
	export type IfcPresentationStyleSelect = 
		| IfcNullStyle
		| (Handle<IfcCurveStyle> | IfcCurveStyle)
		| (Handle<IfcSymbolStyle> | IfcSymbolStyle)
		| (Handle<IfcFillAreaStyle> | IfcFillAreaStyle)
		| (Handle<IfcTextStyle> | IfcTextStyle)
		| (Handle<IfcSurfaceStyle> | IfcSurfaceStyle)
	;
	export type IfcShell = 
		| (Handle<IfcClosedShell> | IfcClosedShell)
		| (Handle<IfcOpenShell> | IfcOpenShell)
	;
	export type IfcSimpleValue = 
		| IfcInteger
		| IfcReal
		| IfcBoolean
		| IfcIdentifier
		| IfcText
		| IfcLabel
		| IfcLogical
	;
	export type IfcSizeSelect = 
		| IfcRatioMeasure
		| IfcLengthMeasure
		| IfcDescriptiveMeasure
		| IfcPositiveLengthMeasure
		| IfcNormalisedRatioMeasure
		| IfcPositiveRatioMeasure
	;
	export type IfcSpecularHighlightSelect = 
		| IfcSpecularExponent
		| IfcSpecularRoughness
	;
	export type IfcStructuralActivityAssignmentSelect = 
		| (Handle<IfcStructuralItem> | IfcStructuralItem)
		| (Handle<IfcElement> | IfcElement)
	;
	export type IfcSurfaceOrFaceSurface = 
		| (Handle<IfcSurface> | IfcSurface)
		| (Handle<IfcFaceSurface> | IfcFaceSurface)
		| (Handle<IfcFaceBasedSurfaceModel> | IfcFaceBasedSurfaceModel)
	;
	export type IfcSurfaceStyleElementSelect = 
		| (Handle<IfcSurfaceStyleShading> | IfcSurfaceStyleShading)
		| (Handle<IfcSurfaceStyleLighting> | IfcSurfaceStyleLighting)
		| (Handle<IfcSurfaceStyleWithTextures> | IfcSurfaceStyleWithTextures)
		| (Handle<IfcExternallyDefinedSurfaceStyle> | IfcExternallyDefinedSurfaceStyle)
		| (Handle<IfcSurfaceStyleRefraction> | IfcSurfaceStyleRefraction)
	;
	export type IfcSymbolStyleSelect = 
		| IfcColour
	;
	export type IfcTextFontSelect = 
		| (Handle<IfcPreDefinedTextFont> | IfcPreDefinedTextFont)
		| (Handle<IfcExternallyDefinedTextFont> | IfcExternallyDefinedTextFont)
	;
	export type IfcTextStyleSelect = 
		| (Handle<IfcTextStyleWithBoxCharacteristics> | IfcTextStyleWithBoxCharacteristics)
		| (Handle<IfcTextStyleTextModel> | IfcTextStyleTextModel)
	;
	export type IfcTrimmingSelect = 
		| (Handle<IfcCartesianPoint> | IfcCartesianPoint)
		| IfcParameterValue
	;
	export type IfcUnit = 
		| (Handle<IfcDerivedUnit> | IfcDerivedUnit)
		| (Handle<IfcNamedUnit> | IfcNamedUnit)
		| (Handle<IfcMonetaryUnit> | IfcMonetaryUnit)
	;
	export type IfcValue = 
		| IfcMeasureValue
		| IfcSimpleValue
		| IfcDerivedMeasureValue
	;
	export type IfcVectorOrDirection = 
		| (Handle<IfcDirection> | IfcDirection)
		| (Handle<IfcVector> | IfcVector)
	;
	export class IfcActorRole {
		expressID: number;
		type: number;
		Role: (Handle<IFC2X3.IfcRoleEnum> | IFC2X3.IfcRoleEnum) ;
		UserDefinedRole: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, Role: (Handle<IFC2X3.IfcRoleEnum> | IFC2X3.IfcRoleEnum) , UserDefinedRole: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Role = Role;
			this.UserDefinedRole = UserDefinedRole;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActorRole
		{
			return new IfcActorRole(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Role, this.UserDefinedRole, this.Description);
			return args;
		}
	}
	export class IfcAddress {
		expressID: number;
		type: number;
		Purpose: (Handle<IFC2X3.IfcAddressTypeEnum> | IFC2X3.IfcAddressTypeEnum) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		UserDefinedPurpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		OfPerson!: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] | null;
		OfOrganization!: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization)[] | null;
		constructor(expressID: number, type: number, Purpose: (Handle<IFC2X3.IfcAddressTypeEnum> | IFC2X3.IfcAddressTypeEnum) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, UserDefinedPurpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAddress
		{
			return new IfcAddress(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Purpose, this.Description, this.UserDefinedPurpose);
			return args;
		}
	}
	export class IfcApplication {
		expressID: number;
		type: number;
		ApplicationDeveloper: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) ;
		Version: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		ApplicationFullName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		ApplicationIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		constructor(expressID: number, type: number, ApplicationDeveloper: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) , Version: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , ApplicationFullName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , ApplicationIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ApplicationDeveloper = ApplicationDeveloper;
			this.Version = Version;
			this.ApplicationFullName = ApplicationFullName;
			this.ApplicationIdentifier = ApplicationIdentifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApplication
		{
			return new IfcApplication(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ApplicationDeveloper, this.Version, this.ApplicationFullName, this.ApplicationIdentifier);
			return args;
		}
	}
	export class IfcAppliedValue {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		AppliedValue: (Handle<IFC2X3.IfcAppliedValueSelect> | IFC2X3.IfcAppliedValueSelect) | null;
		UnitBasis: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null;
		ApplicableDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		FixedUntilDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		ValuesReferenced!: (Handle<IFC2X3.IfcReferencesValueDocument> | IFC2X3.IfcReferencesValueDocument)[] | null;
		ValueOfComponents!: (Handle<IFC2X3.IfcAppliedValueRelationship> | IFC2X3.IfcAppliedValueRelationship)[] | null;
		IsComponentIn!: (Handle<IFC2X3.IfcAppliedValueRelationship> | IFC2X3.IfcAppliedValueRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, AppliedValue: (Handle<IFC2X3.IfcAppliedValueSelect> | IFC2X3.IfcAppliedValueSelect) | null, UnitBasis: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null, ApplicableDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, FixedUntilDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAppliedValue
		{
			return new IfcAppliedValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AppliedValue, this.UnitBasis, this.ApplicableDate, this.FixedUntilDate);
			return args;
		}
	}
	export class IfcAppliedValueRelationship {
		expressID: number;
		type: number;
		ComponentOfTotal: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue) ;
		Components: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue)[] ;
		ArithmeticOperator: (Handle<IFC2X3.IfcArithmeticOperatorEnum> | IFC2X3.IfcArithmeticOperatorEnum) ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, ComponentOfTotal: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue) , Components: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue)[] , ArithmeticOperator: (Handle<IFC2X3.IfcArithmeticOperatorEnum> | IFC2X3.IfcArithmeticOperatorEnum) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ComponentOfTotal = ComponentOfTotal;
			this.Components = Components;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAppliedValueRelationship
		{
			return new IfcAppliedValueRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ComponentOfTotal, this.Components, this.ArithmeticOperator, this.Name, this.Description);
			return args;
		}
	}
	export class IfcApproval {
		expressID: number;
		type: number;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		ApprovalDateTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		ApprovalStatus: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ApprovalLevel: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ApprovalQualifier: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		Actors!: (Handle<IFC2X3.IfcApprovalActorRelationship> | IFC2X3.IfcApprovalActorRelationship)[] | null;
		IsRelatedWith!: (Handle<IFC2X3.IfcApprovalRelationship> | IFC2X3.IfcApprovalRelationship)[] | null;
		Relates!: (Handle<IFC2X3.IfcApprovalRelationship> | IFC2X3.IfcApprovalRelationship)[] | null;
		constructor(expressID: number, type: number, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApprovalDateTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , ApprovalStatus: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ApprovalLevel: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ApprovalQualifier: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Description = Description;
			this.ApprovalDateTime = ApprovalDateTime;
			this.ApprovalStatus = ApprovalStatus;
			this.ApprovalLevel = ApprovalLevel;
			this.ApprovalQualifier = ApprovalQualifier;
			this.Name = Name;
			this.Identifier = Identifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApproval
		{
			return new IfcApproval(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Description, this.ApprovalDateTime, this.ApprovalStatus, this.ApprovalLevel, this.ApprovalQualifier, this.Name, this.Identifier);
			return args;
		}
	}
	export class IfcApprovalActorRelationship {
		expressID: number;
		type: number;
		Actor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) ;
		Approval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) ;
		Role: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole) ;
		constructor(expressID: number, type: number, Actor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) , Approval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) , Role: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Actor = Actor;
			this.Approval = Approval;
			this.Role = Role;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApprovalActorRelationship
		{
			return new IfcApprovalActorRelationship(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Actor, this.Approval, this.Role);
			return args;
		}
	}
	export class IfcApprovalPropertyRelationship {
		expressID: number;
		type: number;
		ApprovedProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] ;
		Approval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) ;
		constructor(expressID: number, type: number, ApprovedProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] , Approval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ApprovedProperties = ApprovedProperties;
			this.Approval = Approval;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApprovalPropertyRelationship
		{
			return new IfcApprovalPropertyRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ApprovedProperties, this.Approval);
			return args;
		}
	}
	export class IfcApprovalRelationship {
		expressID: number;
		type: number;
		RelatedApproval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) ;
		RelatingApproval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		constructor(expressID: number, type: number, RelatedApproval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) , RelatingApproval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.RelatedApproval = RelatedApproval;
			this.RelatingApproval = RelatingApproval;
			this.Description = Description;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApprovalRelationship
		{
			return new IfcApprovalRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RelatedApproval, this.RelatingApproval, this.Description, this.Name);
			return args;
		}
	}
	export class IfcBoundaryCondition {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryCondition
		{
			return new IfcBoundaryCondition(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcBoundaryEdgeCondition extends IFC2X3.IfcBoundaryCondition {
		LinearStiffnessByLengthX: (Handle<IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure> | IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure) | null;
		LinearStiffnessByLengthY: (Handle<IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure> | IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure) | null;
		LinearStiffnessByLengthZ: (Handle<IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure> | IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure) | null;
		RotationalStiffnessByLengthX: (Handle<IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure> | IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure) | null;
		RotationalStiffnessByLengthY: (Handle<IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure> | IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure) | null;
		RotationalStiffnessByLengthZ: (Handle<IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure> | IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LinearStiffnessByLengthX: (Handle<IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure> | IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure) | null, LinearStiffnessByLengthY: (Handle<IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure> | IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure) | null, LinearStiffnessByLengthZ: (Handle<IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure> | IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure) | null, RotationalStiffnessByLengthX: (Handle<IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure> | IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure) | null, RotationalStiffnessByLengthY: (Handle<IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure> | IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure) | null, RotationalStiffnessByLengthZ: (Handle<IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure> | IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure) | null)
		{
			super(expressID,type,Name);
			this.LinearStiffnessByLengthX = LinearStiffnessByLengthX;
			this.LinearStiffnessByLengthY = LinearStiffnessByLengthY;
			this.LinearStiffnessByLengthZ = LinearStiffnessByLengthZ;
			this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
			this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
			this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryEdgeCondition
		{
			return new IfcBoundaryEdgeCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LinearStiffnessByLengthX, this.LinearStiffnessByLengthY, this.LinearStiffnessByLengthZ, this.RotationalStiffnessByLengthX, this.RotationalStiffnessByLengthY, this.RotationalStiffnessByLengthZ);
			return args;
		}
	}
	export class IfcBoundaryFaceCondition extends IFC2X3.IfcBoundaryCondition {
		LinearStiffnessByAreaX: (Handle<IFC2X3.IfcModulusOfSubgradeReactionMeasure> | IFC2X3.IfcModulusOfSubgradeReactionMeasure) | null;
		LinearStiffnessByAreaY: (Handle<IFC2X3.IfcModulusOfSubgradeReactionMeasure> | IFC2X3.IfcModulusOfSubgradeReactionMeasure) | null;
		LinearStiffnessByAreaZ: (Handle<IFC2X3.IfcModulusOfSubgradeReactionMeasure> | IFC2X3.IfcModulusOfSubgradeReactionMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LinearStiffnessByAreaX: (Handle<IFC2X3.IfcModulusOfSubgradeReactionMeasure> | IFC2X3.IfcModulusOfSubgradeReactionMeasure) | null, LinearStiffnessByAreaY: (Handle<IFC2X3.IfcModulusOfSubgradeReactionMeasure> | IFC2X3.IfcModulusOfSubgradeReactionMeasure) | null, LinearStiffnessByAreaZ: (Handle<IFC2X3.IfcModulusOfSubgradeReactionMeasure> | IFC2X3.IfcModulusOfSubgradeReactionMeasure) | null)
		{
			super(expressID,type,Name);
			this.LinearStiffnessByAreaX = LinearStiffnessByAreaX;
			this.LinearStiffnessByAreaY = LinearStiffnessByAreaY;
			this.LinearStiffnessByAreaZ = LinearStiffnessByAreaZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryFaceCondition
		{
			return new IfcBoundaryFaceCondition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LinearStiffnessByAreaX, this.LinearStiffnessByAreaY, this.LinearStiffnessByAreaZ);
			return args;
		}
	}
	export class IfcBoundaryNodeCondition extends IFC2X3.IfcBoundaryCondition {
		LinearStiffnessX: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null;
		LinearStiffnessY: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null;
		LinearStiffnessZ: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null;
		RotationalStiffnessX: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null;
		RotationalStiffnessY: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null;
		RotationalStiffnessZ: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LinearStiffnessX: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null, LinearStiffnessY: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null, LinearStiffnessZ: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null, RotationalStiffnessX: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null, RotationalStiffnessY: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null, RotationalStiffnessZ: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null)
		{
			super(expressID,type,Name);
			this.LinearStiffnessX = LinearStiffnessX;
			this.LinearStiffnessY = LinearStiffnessY;
			this.LinearStiffnessZ = LinearStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryNodeCondition
		{
			return new IfcBoundaryNodeCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LinearStiffnessX, this.LinearStiffnessY, this.LinearStiffnessZ, this.RotationalStiffnessX, this.RotationalStiffnessY, this.RotationalStiffnessZ);
			return args;
		}
	}
	export class IfcBoundaryNodeConditionWarping extends IFC2X3.IfcBoundaryNodeCondition {
		WarpingStiffness: (Handle<IFC2X3.IfcWarpingMomentMeasure> | IFC2X3.IfcWarpingMomentMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LinearStiffnessX: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null, LinearStiffnessY: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null, LinearStiffnessZ: (Handle<IFC2X3.IfcLinearStiffnessMeasure> | IFC2X3.IfcLinearStiffnessMeasure) | null, RotationalStiffnessX: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null, RotationalStiffnessY: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null, RotationalStiffnessZ: (Handle<IFC2X3.IfcRotationalStiffnessMeasure> | IFC2X3.IfcRotationalStiffnessMeasure) | null, WarpingStiffness: (Handle<IFC2X3.IfcWarpingMomentMeasure> | IFC2X3.IfcWarpingMomentMeasure) | null)
		{
			super(expressID,type,Name, LinearStiffnessX, LinearStiffnessY, LinearStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ);
			this.WarpingStiffness = WarpingStiffness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryNodeConditionWarping
		{
			return new IfcBoundaryNodeConditionWarping(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LinearStiffnessX, this.LinearStiffnessY, this.LinearStiffnessZ, this.RotationalStiffnessX, this.RotationalStiffnessY, this.RotationalStiffnessZ, this.WarpingStiffness);
			return args;
		}
	}
	export class IfcCalendarDate {
		expressID: number;
		type: number;
		DayComponent: (Handle<IFC2X3.IfcDayInMonthNumber> | IFC2X3.IfcDayInMonthNumber) ;
		MonthComponent: (Handle<IFC2X3.IfcMonthInYearNumber> | IFC2X3.IfcMonthInYearNumber) ;
		YearComponent: (Handle<IFC2X3.IfcYearNumber> | IFC2X3.IfcYearNumber) ;
		constructor(expressID: number, type: number, DayComponent: (Handle<IFC2X3.IfcDayInMonthNumber> | IFC2X3.IfcDayInMonthNumber) , MonthComponent: (Handle<IFC2X3.IfcMonthInYearNumber> | IFC2X3.IfcMonthInYearNumber) , YearComponent: (Handle<IFC2X3.IfcYearNumber> | IFC2X3.IfcYearNumber) )
		{
			this.expressID = expressID;
			this.type = type;
			this.DayComponent = DayComponent;
			this.MonthComponent = MonthComponent;
			this.YearComponent = YearComponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCalendarDate
		{
			return new IfcCalendarDate(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DayComponent, this.MonthComponent, this.YearComponent);
			return args;
		}
	}
	export class IfcClassification {
		expressID: number;
		type: number;
		Source: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Edition: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		EditionDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Contains!: (Handle<IFC2X3.IfcClassificationItem> | IFC2X3.IfcClassificationItem)[] | null;
		constructor(expressID: number, type: number, Source: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Edition: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , EditionDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Source = Source;
			this.Edition = Edition;
			this.EditionDate = EditionDate;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassification
		{
			return new IfcClassification(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Source, this.Edition, this.EditionDate, this.Name);
			return args;
		}
	}
	export class IfcClassificationItem {
		expressID: number;
		type: number;
		Notation: (Handle<IFC2X3.IfcClassificationNotationFacet> | IFC2X3.IfcClassificationNotationFacet) ;
		ItemOf: (Handle<IFC2X3.IfcClassification> | IFC2X3.IfcClassification) | null;
		Title: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		IsClassifiedItemIn!: (Handle<IFC2X3.IfcClassificationItemRelationship> | IFC2X3.IfcClassificationItemRelationship)[] | null;
		IsClassifyingItemIn!: (Handle<IFC2X3.IfcClassificationItemRelationship> | IFC2X3.IfcClassificationItemRelationship)[] | null;
		constructor(expressID: number, type: number, Notation: (Handle<IFC2X3.IfcClassificationNotationFacet> | IFC2X3.IfcClassificationNotationFacet) , ItemOf: (Handle<IFC2X3.IfcClassification> | IFC2X3.IfcClassification) | null, Title: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Notation = Notation;
			this.ItemOf = ItemOf;
			this.Title = Title;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationItem
		{
			return new IfcClassificationItem(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Notation, this.ItemOf, this.Title);
			return args;
		}
	}
	export class IfcClassificationItemRelationship {
		expressID: number;
		type: number;
		RelatingItem: (Handle<IFC2X3.IfcClassificationItem> | IFC2X3.IfcClassificationItem) ;
		RelatedItems: (Handle<IFC2X3.IfcClassificationItem> | IFC2X3.IfcClassificationItem)[] ;
		constructor(expressID: number, type: number, RelatingItem: (Handle<IFC2X3.IfcClassificationItem> | IFC2X3.IfcClassificationItem) , RelatedItems: (Handle<IFC2X3.IfcClassificationItem> | IFC2X3.IfcClassificationItem)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.RelatingItem = RelatingItem;
			this.RelatedItems = RelatedItems;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationItemRelationship
		{
			return new IfcClassificationItemRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RelatingItem, this.RelatedItems);
			return args;
		}
	}
	export class IfcClassificationNotation {
		expressID: number;
		type: number;
		NotationFacets: (Handle<IFC2X3.IfcClassificationNotationFacet> | IFC2X3.IfcClassificationNotationFacet)[] ;
		constructor(expressID: number, type: number, NotationFacets: (Handle<IFC2X3.IfcClassificationNotationFacet> | IFC2X3.IfcClassificationNotationFacet)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.NotationFacets = NotationFacets;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationNotation
		{
			return new IfcClassificationNotation(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.NotationFacets);
			return args;
		}
	}
	export class IfcClassificationNotationFacet {
		expressID: number;
		type: number;
		NotationValue: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		constructor(expressID: number, type: number, NotationValue: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.NotationValue = NotationValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationNotationFacet
		{
			return new IfcClassificationNotationFacet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.NotationValue);
			return args;
		}
	}
	export class IfcColourSpecification {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColourSpecification
		{
			return new IfcColourSpecification(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcConnectionGeometry {
		expressID: number;
		type: number;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionGeometry
		{
			return new IfcConnectionGeometry(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcConnectionPointGeometry extends IFC2X3.IfcConnectionGeometry {
		PointOnRelatingElement: (Handle<IFC2X3.IfcPointOrVertexPoint> | IFC2X3.IfcPointOrVertexPoint) ;
		PointOnRelatedElement: (Handle<IFC2X3.IfcPointOrVertexPoint> | IFC2X3.IfcPointOrVertexPoint) | null;
		constructor(expressID: number, type: number, PointOnRelatingElement: (Handle<IFC2X3.IfcPointOrVertexPoint> | IFC2X3.IfcPointOrVertexPoint) , PointOnRelatedElement: (Handle<IFC2X3.IfcPointOrVertexPoint> | IFC2X3.IfcPointOrVertexPoint) | null)
		{
			super(expressID,type);
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPointGeometry
		{
			return new IfcConnectionPointGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PointOnRelatingElement, this.PointOnRelatedElement);
			return args;
		}
	}
	export class IfcConnectionPortGeometry extends IFC2X3.IfcConnectionGeometry {
		LocationAtRelatingElement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		LocationAtRelatedElement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) | null;
		ProfileOfPort: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) ;
		constructor(expressID: number, type: number, LocationAtRelatingElement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , LocationAtRelatedElement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) | null, ProfileOfPort: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) )
		{
			super(expressID,type);
			this.LocationAtRelatingElement = LocationAtRelatingElement;
			this.LocationAtRelatedElement = LocationAtRelatedElement;
			this.ProfileOfPort = ProfileOfPort;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPortGeometry
		{
			return new IfcConnectionPortGeometry(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LocationAtRelatingElement, this.LocationAtRelatedElement, this.ProfileOfPort);
			return args;
		}
	}
	export class IfcConnectionSurfaceGeometry extends IFC2X3.IfcConnectionGeometry {
		SurfaceOnRelatingElement: (Handle<IFC2X3.IfcSurfaceOrFaceSurface> | IFC2X3.IfcSurfaceOrFaceSurface) ;
		SurfaceOnRelatedElement: (Handle<IFC2X3.IfcSurfaceOrFaceSurface> | IFC2X3.IfcSurfaceOrFaceSurface) | null;
		constructor(expressID: number, type: number, SurfaceOnRelatingElement: (Handle<IFC2X3.IfcSurfaceOrFaceSurface> | IFC2X3.IfcSurfaceOrFaceSurface) , SurfaceOnRelatedElement: (Handle<IFC2X3.IfcSurfaceOrFaceSurface> | IFC2X3.IfcSurfaceOrFaceSurface) | null)
		{
			super(expressID,type);
			this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
			this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionSurfaceGeometry
		{
			return new IfcConnectionSurfaceGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SurfaceOnRelatingElement, this.SurfaceOnRelatedElement);
			return args;
		}
	}
	export class IfcConstraint {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		ConstraintGrade: (Handle<IFC2X3.IfcConstraintEnum> | IFC2X3.IfcConstraintEnum) ;
		ConstraintSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		CreatingActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null;
		CreationTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		UserDefinedGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ClassifiedAs!: (Handle<IFC2X3.IfcConstraintClassificationRelationship> | IFC2X3.IfcConstraintClassificationRelationship)[] | null;
		RelatesConstraints!: (Handle<IFC2X3.IfcConstraintRelationship> | IFC2X3.IfcConstraintRelationship)[] | null;
		IsRelatedWith!: (Handle<IFC2X3.IfcConstraintRelationship> | IFC2X3.IfcConstraintRelationship)[] | null;
		PropertiesForConstraint!: (Handle<IFC2X3.IfcPropertyConstraintRelationship> | IFC2X3.IfcPropertyConstraintRelationship)[] | null;
		Aggregates!: (Handle<IFC2X3.IfcConstraintAggregationRelationship> | IFC2X3.IfcConstraintAggregationRelationship)[] | null;
		IsAggregatedIn!: (Handle<IFC2X3.IfcConstraintAggregationRelationship> | IFC2X3.IfcConstraintAggregationRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ConstraintGrade: (Handle<IFC2X3.IfcConstraintEnum> | IFC2X3.IfcConstraintEnum) , ConstraintSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CreatingActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, CreationTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, UserDefinedGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstraint
		{
			return new IfcConstraint(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ConstraintGrade, this.ConstraintSource, this.CreatingActor, this.CreationTime, this.UserDefinedGrade);
			return args;
		}
	}
	export class IfcConstraintAggregationRelationship {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) ;
		RelatedConstraints: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint)[] ;
		LogicalAggregator: (Handle<IFC2X3.IfcLogicalOperatorEnum> | IFC2X3.IfcLogicalOperatorEnum) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) , RelatedConstraints: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint)[] , LogicalAggregator: (Handle<IFC2X3.IfcLogicalOperatorEnum> | IFC2X3.IfcLogicalOperatorEnum) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedConstraints = RelatedConstraints;
			this.LogicalAggregator = LogicalAggregator;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstraintAggregationRelationship
		{
			return new IfcConstraintAggregationRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingConstraint, this.RelatedConstraints, this.LogicalAggregator);
			return args;
		}
	}
	export class IfcConstraintClassificationRelationship {
		expressID: number;
		type: number;
		ClassifiedConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) ;
		RelatedClassifications: (Handle<IFC2X3.IfcClassificationNotationSelect> | IFC2X3.IfcClassificationNotationSelect)[] ;
		constructor(expressID: number, type: number, ClassifiedConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) , RelatedClassifications: (Handle<IFC2X3.IfcClassificationNotationSelect> | IFC2X3.IfcClassificationNotationSelect)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.ClassifiedConstraint = ClassifiedConstraint;
			this.RelatedClassifications = RelatedClassifications;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstraintClassificationRelationship
		{
			return new IfcConstraintClassificationRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ClassifiedConstraint, this.RelatedClassifications);
			return args;
		}
	}
	export class IfcConstraintRelationship {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) ;
		RelatedConstraints: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) , RelatedConstraints: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedConstraints = RelatedConstraints;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstraintRelationship
		{
			return new IfcConstraintRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingConstraint, this.RelatedConstraints);
			return args;
		}
	}
	export class IfcCoordinatedUniversalTimeOffset {
		expressID: number;
		type: number;
		HourOffset: (Handle<IFC2X3.IfcHourInDay> | IFC2X3.IfcHourInDay) ;
		MinuteOffset: (Handle<IFC2X3.IfcMinuteInHour> | IFC2X3.IfcMinuteInHour) | null;
		Sense: (Handle<IFC2X3.IfcAheadOrBehind> | IFC2X3.IfcAheadOrBehind) ;
		constructor(expressID: number, type: number, HourOffset: (Handle<IFC2X3.IfcHourInDay> | IFC2X3.IfcHourInDay) , MinuteOffset: (Handle<IFC2X3.IfcMinuteInHour> | IFC2X3.IfcMinuteInHour) | null, Sense: (Handle<IFC2X3.IfcAheadOrBehind> | IFC2X3.IfcAheadOrBehind) )
		{
			this.expressID = expressID;
			this.type = type;
			this.HourOffset = HourOffset;
			this.MinuteOffset = MinuteOffset;
			this.Sense = Sense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoordinatedUniversalTimeOffset
		{
			return new IfcCoordinatedUniversalTimeOffset(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.HourOffset, this.MinuteOffset, this.Sense);
			return args;
		}
	}
	export class IfcCostValue extends IFC2X3.IfcAppliedValue {
		CostType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Condition: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, AppliedValue: (Handle<IFC2X3.IfcAppliedValueSelect> | IFC2X3.IfcAppliedValueSelect) | null, UnitBasis: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null, ApplicableDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, FixedUntilDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, CostType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Condition: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate);
			this.CostType = CostType;
			this.Condition = Condition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCostValue
		{
			return new IfcCostValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AppliedValue, this.UnitBasis, this.ApplicableDate, this.FixedUntilDate, this.CostType, this.Condition);
			return args;
		}
	}
	export class IfcCurrencyRelationship {
		expressID: number;
		type: number;
		RelatingMonetaryUnit: (Handle<IFC2X3.IfcMonetaryUnit> | IFC2X3.IfcMonetaryUnit) ;
		RelatedMonetaryUnit: (Handle<IFC2X3.IfcMonetaryUnit> | IFC2X3.IfcMonetaryUnit) ;
		ExchangeRate: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) ;
		RateDateTime: (Handle<IFC2X3.IfcDateAndTime> | IFC2X3.IfcDateAndTime) ;
		RateSource: (Handle<IFC2X3.IfcLibraryInformation> | IFC2X3.IfcLibraryInformation) | null;
		constructor(expressID: number, type: number, RelatingMonetaryUnit: (Handle<IFC2X3.IfcMonetaryUnit> | IFC2X3.IfcMonetaryUnit) , RelatedMonetaryUnit: (Handle<IFC2X3.IfcMonetaryUnit> | IFC2X3.IfcMonetaryUnit) , ExchangeRate: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) , RateDateTime: (Handle<IFC2X3.IfcDateAndTime> | IFC2X3.IfcDateAndTime) , RateSource: (Handle<IFC2X3.IfcLibraryInformation> | IFC2X3.IfcLibraryInformation) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RelatingMonetaryUnit = RelatingMonetaryUnit;
			this.RelatedMonetaryUnit = RelatedMonetaryUnit;
			this.ExchangeRate = ExchangeRate;
			this.RateDateTime = RateDateTime;
			this.RateSource = RateSource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurrencyRelationship
		{
			return new IfcCurrencyRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RelatingMonetaryUnit, this.RelatedMonetaryUnit, this.ExchangeRate, this.RateDateTime, this.RateSource);
			return args;
		}
	}
	export class IfcCurveStyleFont {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		PatternList: (Handle<IFC2X3.IfcCurveStyleFontPattern> | IFC2X3.IfcCurveStyleFontPattern)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PatternList: (Handle<IFC2X3.IfcCurveStyleFontPattern> | IFC2X3.IfcCurveStyleFontPattern)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.PatternList = PatternList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFont
		{
			return new IfcCurveStyleFont(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.PatternList);
			return args;
		}
	}
	export class IfcCurveStyleFontAndScaling {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		CurveFont: (Handle<IFC2X3.IfcCurveStyleFontSelect> | IFC2X3.IfcCurveStyleFontSelect) ;
		CurveFontScaling: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CurveFont: (Handle<IFC2X3.IfcCurveStyleFontSelect> | IFC2X3.IfcCurveStyleFontSelect) , CurveFontScaling: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveFontScaling = CurveFontScaling;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFontAndScaling
		{
			return new IfcCurveStyleFontAndScaling(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.CurveFont, this.CurveFontScaling);
			return args;
		}
	}
	export class IfcCurveStyleFontPattern {
		expressID: number;
		type: number;
		VisibleSegmentLength: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		InvisibleSegmentLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, VisibleSegmentLength: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , InvisibleSegmentLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			this.expressID = expressID;
			this.type = type;
			this.VisibleSegmentLength = VisibleSegmentLength;
			this.InvisibleSegmentLength = InvisibleSegmentLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFontPattern
		{
			return new IfcCurveStyleFontPattern(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.VisibleSegmentLength, this.InvisibleSegmentLength);
			return args;
		}
	}
	export class IfcDateAndTime {
		expressID: number;
		type: number;
		DateComponent: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) ;
		TimeComponent: (Handle<IFC2X3.IfcLocalTime> | IFC2X3.IfcLocalTime) ;
		constructor(expressID: number, type: number, DateComponent: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) , TimeComponent: (Handle<IFC2X3.IfcLocalTime> | IFC2X3.IfcLocalTime) )
		{
			this.expressID = expressID;
			this.type = type;
			this.DateComponent = DateComponent;
			this.TimeComponent = TimeComponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDateAndTime
		{
			return new IfcDateAndTime(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DateComponent, this.TimeComponent);
			return args;
		}
	}
	export class IfcDerivedUnit {
		expressID: number;
		type: number;
		Elements: (Handle<IFC2X3.IfcDerivedUnitElement> | IFC2X3.IfcDerivedUnitElement)[] ;
		UnitType: (Handle<IFC2X3.IfcDerivedUnitEnum> | IFC2X3.IfcDerivedUnitEnum) ;
		UserDefinedType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Elements: (Handle<IFC2X3.IfcDerivedUnitElement> | IFC2X3.IfcDerivedUnitElement)[] , UnitType: (Handle<IFC2X3.IfcDerivedUnitEnum> | IFC2X3.IfcDerivedUnitEnum) , UserDefinedType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Elements = Elements;
			this.UnitType = UnitType;
			this.UserDefinedType = UserDefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedUnit
		{
			return new IfcDerivedUnit(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Elements, this.UnitType, this.UserDefinedType);
			return args;
		}
	}
	export class IfcDerivedUnitElement {
		expressID: number;
		type: number;
		Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) ;
		Exponent: number ;
		constructor(expressID: number, type: number, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) , Exponent: number )
		{
			this.expressID = expressID;
			this.type = type;
			this.Unit = Unit;
			this.Exponent = Exponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedUnitElement
		{
			return new IfcDerivedUnitElement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Unit, this.Exponent);
			return args;
		}
	}
	export class IfcDimensionalExponents {
		expressID: number;
		type: number;
		LengthExponent: number ;
		MassExponent: number ;
		TimeExponent: number ;
		ElectricCurrentExponent: number ;
		ThermodynamicTemperatureExponent: number ;
		AmountOfSubstanceExponent: number ;
		LuminousIntensityExponent: number ;
		constructor(expressID: number, type: number, LengthExponent: number , MassExponent: number , TimeExponent: number , ElectricCurrentExponent: number , ThermodynamicTemperatureExponent: number , AmountOfSubstanceExponent: number , LuminousIntensityExponent: number )
		{
			this.expressID = expressID;
			this.type = type;
			this.LengthExponent = LengthExponent;
			this.MassExponent = MassExponent;
			this.TimeExponent = TimeExponent;
			this.ElectricCurrentExponent = ElectricCurrentExponent;
			this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
			this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
			this.LuminousIntensityExponent = LuminousIntensityExponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionalExponents
		{
			return new IfcDimensionalExponents(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LengthExponent, this.MassExponent, this.TimeExponent, this.ElectricCurrentExponent, this.ThermodynamicTemperatureExponent, this.AmountOfSubstanceExponent, this.LuminousIntensityExponent);
			return args;
		}
	}
	export class IfcDocumentElectronicFormat {
		expressID: number;
		type: number;
		FileExtension: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		MimeContentType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		MimeSubtype: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, FileExtension: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, MimeContentType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, MimeSubtype: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.FileExtension = FileExtension;
			this.MimeContentType = MimeContentType;
			this.MimeSubtype = MimeSubtype;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentElectronicFormat
		{
			return new IfcDocumentElectronicFormat(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.FileExtension, this.MimeContentType, this.MimeSubtype);
			return args;
		}
	}
	export class IfcDocumentInformation {
		expressID: number;
		type: number;
		DocumentId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		DocumentReferences: (Handle<IFC2X3.IfcDocumentReference> | IFC2X3.IfcDocumentReference)[] | null;
		Purpose: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		IntendedUse: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Scope: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Revision: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		DocumentOwner: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null;
		Editors: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect)[] | null;
		CreationTime: (Handle<IFC2X3.IfcDateAndTime> | IFC2X3.IfcDateAndTime) | null;
		LastRevisionTime: (Handle<IFC2X3.IfcDateAndTime> | IFC2X3.IfcDateAndTime) | null;
		ElectronicFormat: (Handle<IFC2X3.IfcDocumentElectronicFormat> | IFC2X3.IfcDocumentElectronicFormat) | null;
		ValidFrom: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null;
		ValidUntil: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null;
		Confidentiality: (Handle<IFC2X3.IfcDocumentConfidentialityEnum> | IFC2X3.IfcDocumentConfidentialityEnum) | null;
		Status: (Handle<IFC2X3.IfcDocumentStatusEnum> | IFC2X3.IfcDocumentStatusEnum) | null;
		IsPointedTo!: (Handle<IFC2X3.IfcDocumentInformationRelationship> | IFC2X3.IfcDocumentInformationRelationship)[] | null;
		IsPointer!: (Handle<IFC2X3.IfcDocumentInformationRelationship> | IFC2X3.IfcDocumentInformationRelationship)[] | null;
		constructor(expressID: number, type: number, DocumentId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, DocumentReferences: (Handle<IFC2X3.IfcDocumentReference> | IFC2X3.IfcDocumentReference)[] | null, Purpose: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, IntendedUse: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Scope: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Revision: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, DocumentOwner: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, Editors: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect)[] | null, CreationTime: (Handle<IFC2X3.IfcDateAndTime> | IFC2X3.IfcDateAndTime) | null, LastRevisionTime: (Handle<IFC2X3.IfcDateAndTime> | IFC2X3.IfcDateAndTime) | null, ElectronicFormat: (Handle<IFC2X3.IfcDocumentElectronicFormat> | IFC2X3.IfcDocumentElectronicFormat) | null, ValidFrom: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null, ValidUntil: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null, Confidentiality: (Handle<IFC2X3.IfcDocumentConfidentialityEnum> | IFC2X3.IfcDocumentConfidentialityEnum) | null, Status: (Handle<IFC2X3.IfcDocumentStatusEnum> | IFC2X3.IfcDocumentStatusEnum) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.DocumentId = DocumentId;
			this.Name = Name;
			this.Description = Description;
			this.DocumentReferences = DocumentReferences;
			this.Purpose = Purpose;
			this.IntendedUse = IntendedUse;
			this.Scope = Scope;
			this.Revision = Revision;
			this.DocumentOwner = DocumentOwner;
			this.Editors = Editors;
			this.CreationTime = CreationTime;
			this.LastRevisionTime = LastRevisionTime;
			this.ElectronicFormat = ElectronicFormat;
			this.ValidFrom = ValidFrom;
			this.ValidUntil = ValidUntil;
			this.Confidentiality = Confidentiality;
			this.Status = Status;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentInformation
		{
			return new IfcDocumentInformation(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DocumentId, this.Name, this.Description, this.DocumentReferences, this.Purpose, this.IntendedUse, this.Scope, this.Revision, this.DocumentOwner, this.Editors, this.CreationTime, this.LastRevisionTime, this.ElectronicFormat, this.ValidFrom, this.ValidUntil, this.Confidentiality, this.Status);
			return args;
		}
	}
	export class IfcDocumentInformationRelationship {
		expressID: number;
		type: number;
		RelatingDocument: (Handle<IFC2X3.IfcDocumentInformation> | IFC2X3.IfcDocumentInformation) ;
		RelatedDocuments: (Handle<IFC2X3.IfcDocumentInformation> | IFC2X3.IfcDocumentInformation)[] ;
		RelationshipType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, RelatingDocument: (Handle<IFC2X3.IfcDocumentInformation> | IFC2X3.IfcDocumentInformation) , RelatedDocuments: (Handle<IFC2X3.IfcDocumentInformation> | IFC2X3.IfcDocumentInformation)[] , RelationshipType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RelatingDocument = RelatingDocument;
			this.RelatedDocuments = RelatedDocuments;
			this.RelationshipType = RelationshipType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentInformationRelationship
		{
			return new IfcDocumentInformationRelationship(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RelatingDocument, this.RelatedDocuments, this.RelationshipType);
			return args;
		}
	}
	export class IfcDraughtingCalloutRelationship {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		RelatingDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) ;
		RelatedDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) , RelatedDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.RelatingDraughtingCallout = RelatingDraughtingCallout;
			this.RelatedDraughtingCallout = RelatedDraughtingCallout;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingCalloutRelationship
		{
			return new IfcDraughtingCalloutRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingDraughtingCallout, this.RelatedDraughtingCallout);
			return args;
		}
	}
	export class IfcEnvironmentalImpactValue extends IFC2X3.IfcAppliedValue {
		ImpactType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Category: (Handle<IFC2X3.IfcEnvironmentalImpactCategoryEnum> | IFC2X3.IfcEnvironmentalImpactCategoryEnum) ;
		UserDefinedCategory: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, AppliedValue: (Handle<IFC2X3.IfcAppliedValueSelect> | IFC2X3.IfcAppliedValueSelect) | null, UnitBasis: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null, ApplicableDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, FixedUntilDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, ImpactType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Category: (Handle<IFC2X3.IfcEnvironmentalImpactCategoryEnum> | IFC2X3.IfcEnvironmentalImpactCategoryEnum) , UserDefinedCategory: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate);
			this.ImpactType = ImpactType;
			this.Category = Category;
			this.UserDefinedCategory = UserDefinedCategory;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEnvironmentalImpactValue
		{
			return new IfcEnvironmentalImpactValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AppliedValue, this.UnitBasis, this.ApplicableDate, this.FixedUntilDate, this.ImpactType, this.Category, this.UserDefinedCategory);
			return args;
		}
	}
	export class IfcExternalReference {
		expressID: number;
		type: number;
		Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Location = Location;
			this.ItemReference = ItemReference;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternalReference
		{
			return new IfcExternalReference(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedHatchStyle extends IFC2X3.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedHatchStyle
		{
			return new IfcExternallyDefinedHatchStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedSurfaceStyle extends IFC2X3.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedSurfaceStyle
		{
			return new IfcExternallyDefinedSurfaceStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedSymbol extends IFC2X3.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedSymbol
		{
			return new IfcExternallyDefinedSymbol(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedTextFont extends IFC2X3.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedTextFont
		{
			return new IfcExternallyDefinedTextFont(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcGridAxis {
		expressID: number;
		type: number;
		AxisTag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		AxisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		SameSense: (Handle<IFC2X3.IfcBoolean> | IFC2X3.IfcBoolean) ;
		PartOfW!: (Handle<IFC2X3.IfcGrid> | IFC2X3.IfcGrid)[] | null;
		PartOfV!: (Handle<IFC2X3.IfcGrid> | IFC2X3.IfcGrid)[] | null;
		PartOfU!: (Handle<IFC2X3.IfcGrid> | IFC2X3.IfcGrid)[] | null;
		HasIntersections!: (Handle<IFC2X3.IfcVirtualGridIntersection> | IFC2X3.IfcVirtualGridIntersection)[] | null;
		constructor(expressID: number, type: number, AxisTag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, AxisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , SameSense: (Handle<IFC2X3.IfcBoolean> | IFC2X3.IfcBoolean) )
		{
			this.expressID = expressID;
			this.type = type;
			this.AxisTag = AxisTag;
			this.AxisCurve = AxisCurve;
			this.SameSense = SameSense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGridAxis
		{
			return new IfcGridAxis(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.AxisTag, this.AxisCurve, this.SameSense);
			return args;
		}
	}
	export class IfcIrregularTimeSeriesValue {
		expressID: number;
		type: number;
		TimeStamp: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		ListValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		constructor(expressID: number, type: number, TimeStamp: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , ListValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.TimeStamp = TimeStamp;
			this.ListValues = ListValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIrregularTimeSeriesValue
		{
			return new IfcIrregularTimeSeriesValue(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TimeStamp, this.ListValues);
			return args;
		}
	}
	export class IfcLibraryInformation {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Version: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Publisher: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) | null;
		VersionDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null;
		LibraryReference: (Handle<IFC2X3.IfcLibraryReference> | IFC2X3.IfcLibraryReference)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Version: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Publisher: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) | null, VersionDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) | null, LibraryReference: (Handle<IFC2X3.IfcLibraryReference> | IFC2X3.IfcLibraryReference)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Version = Version;
			this.Publisher = Publisher;
			this.VersionDate = VersionDate;
			this.LibraryReference = LibraryReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLibraryInformation
		{
			return new IfcLibraryInformation(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Version, this.Publisher, this.VersionDate, this.LibraryReference);
			return args;
		}
	}
	export class IfcLibraryReference extends IFC2X3.IfcExternalReference {
		ReferenceIntoLibrary!: (Handle<IFC2X3.IfcLibraryInformation> | IFC2X3.IfcLibraryInformation)[] | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLibraryReference
		{
			return new IfcLibraryReference(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcLightDistributionData {
		expressID: number;
		type: number;
		MainPlaneAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) ;
		SecondaryPlaneAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure)[] ;
		LuminousIntensity: (Handle<IFC2X3.IfcLuminousIntensityDistributionMeasure> | IFC2X3.IfcLuminousIntensityDistributionMeasure)[] ;
		constructor(expressID: number, type: number, MainPlaneAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) , SecondaryPlaneAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure)[] , LuminousIntensity: (Handle<IFC2X3.IfcLuminousIntensityDistributionMeasure> | IFC2X3.IfcLuminousIntensityDistributionMeasure)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.MainPlaneAngle = MainPlaneAngle;
			this.SecondaryPlaneAngle = SecondaryPlaneAngle;
			this.LuminousIntensity = LuminousIntensity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightDistributionData
		{
			return new IfcLightDistributionData(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MainPlaneAngle, this.SecondaryPlaneAngle, this.LuminousIntensity);
			return args;
		}
	}
	export class IfcLightIntensityDistribution {
		expressID: number;
		type: number;
		LightDistributionCurve: (Handle<IFC2X3.IfcLightDistributionCurveEnum> | IFC2X3.IfcLightDistributionCurveEnum) ;
		DistributionData: (Handle<IFC2X3.IfcLightDistributionData> | IFC2X3.IfcLightDistributionData)[] ;
		constructor(expressID: number, type: number, LightDistributionCurve: (Handle<IFC2X3.IfcLightDistributionCurveEnum> | IFC2X3.IfcLightDistributionCurveEnum) , DistributionData: (Handle<IFC2X3.IfcLightDistributionData> | IFC2X3.IfcLightDistributionData)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.LightDistributionCurve = LightDistributionCurve;
			this.DistributionData = DistributionData;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightIntensityDistribution
		{
			return new IfcLightIntensityDistribution(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LightDistributionCurve, this.DistributionData);
			return args;
		}
	}
	export class IfcLocalTime {
		expressID: number;
		type: number;
		HourComponent: (Handle<IFC2X3.IfcHourInDay> | IFC2X3.IfcHourInDay) ;
		MinuteComponent: (Handle<IFC2X3.IfcMinuteInHour> | IFC2X3.IfcMinuteInHour) | null;
		SecondComponent: (Handle<IFC2X3.IfcSecondInMinute> | IFC2X3.IfcSecondInMinute) | null;
		Zone: (Handle<IFC2X3.IfcCoordinatedUniversalTimeOffset> | IFC2X3.IfcCoordinatedUniversalTimeOffset) | null;
		DaylightSavingOffset: (Handle<IFC2X3.IfcDaylightSavingHour> | IFC2X3.IfcDaylightSavingHour) | null;
		constructor(expressID: number, type: number, HourComponent: (Handle<IFC2X3.IfcHourInDay> | IFC2X3.IfcHourInDay) , MinuteComponent: (Handle<IFC2X3.IfcMinuteInHour> | IFC2X3.IfcMinuteInHour) | null, SecondComponent: (Handle<IFC2X3.IfcSecondInMinute> | IFC2X3.IfcSecondInMinute) | null, Zone: (Handle<IFC2X3.IfcCoordinatedUniversalTimeOffset> | IFC2X3.IfcCoordinatedUniversalTimeOffset) | null, DaylightSavingOffset: (Handle<IFC2X3.IfcDaylightSavingHour> | IFC2X3.IfcDaylightSavingHour) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.HourComponent = HourComponent;
			this.MinuteComponent = MinuteComponent;
			this.SecondComponent = SecondComponent;
			this.Zone = Zone;
			this.DaylightSavingOffset = DaylightSavingOffset;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLocalTime
		{
			return new IfcLocalTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.HourComponent, this.MinuteComponent, this.SecondComponent, this.Zone, this.DaylightSavingOffset);
			return args;
		}
	}
	export class IfcMaterial {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		HasRepresentation!: (Handle<IFC2X3.IfcMaterialDefinitionRepresentation> | IFC2X3.IfcMaterialDefinitionRepresentation)[] | null;
		ClassifiedAs!: (Handle<IFC2X3.IfcMaterialClassificationRelationship> | IFC2X3.IfcMaterialClassificationRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterial
		{
			return new IfcMaterial(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcMaterialClassificationRelationship {
		expressID: number;
		type: number;
		MaterialClassifications: (Handle<IFC2X3.IfcClassificationNotationSelect> | IFC2X3.IfcClassificationNotationSelect)[] ;
		ClassifiedMaterial: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) ;
		constructor(expressID: number, type: number, MaterialClassifications: (Handle<IFC2X3.IfcClassificationNotationSelect> | IFC2X3.IfcClassificationNotationSelect)[] , ClassifiedMaterial: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) )
		{
			this.expressID = expressID;
			this.type = type;
			this.MaterialClassifications = MaterialClassifications;
			this.ClassifiedMaterial = ClassifiedMaterial;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialClassificationRelationship
		{
			return new IfcMaterialClassificationRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MaterialClassifications, this.ClassifiedMaterial);
			return args;
		}
	}
	export class IfcMaterialLayer {
		expressID: number;
		type: number;
		Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) | null;
		LayerThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		IsVentilated: (Handle<IFC2X3.IfcLogical> | IFC2X3.IfcLogical) | null;
		ToMaterialLayerSet!: (Handle<IFC2X3.IfcMaterialLayerSet> | IFC2X3.IfcMaterialLayerSet) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) | null, LayerThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , IsVentilated: (Handle<IFC2X3.IfcLogical> | IFC2X3.IfcLogical) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayer
		{
			return new IfcMaterialLayer(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.LayerThickness, this.IsVentilated);
			return args;
		}
	}
	export class IfcMaterialLayerSet {
		expressID: number;
		type: number;
		MaterialLayers: (Handle<IFC2X3.IfcMaterialLayer> | IFC2X3.IfcMaterialLayer)[] ;
		LayerSetName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, MaterialLayers: (Handle<IFC2X3.IfcMaterialLayer> | IFC2X3.IfcMaterialLayer)[] , LayerSetName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.MaterialLayers = MaterialLayers;
			this.LayerSetName = LayerSetName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerSet
		{
			return new IfcMaterialLayerSet(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MaterialLayers, this.LayerSetName);
			return args;
		}
	}
	export class IfcMaterialLayerSetUsage {
		expressID: number;
		type: number;
		ForLayerSet: (Handle<IFC2X3.IfcMaterialLayerSet> | IFC2X3.IfcMaterialLayerSet) ;
		LayerSetDirection: (Handle<IFC2X3.IfcLayerSetDirectionEnum> | IFC2X3.IfcLayerSetDirectionEnum) ;
		DirectionSense: (Handle<IFC2X3.IfcDirectionSenseEnum> | IFC2X3.IfcDirectionSenseEnum) ;
		OffsetFromReferenceLine: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, ForLayerSet: (Handle<IFC2X3.IfcMaterialLayerSet> | IFC2X3.IfcMaterialLayerSet) , LayerSetDirection: (Handle<IFC2X3.IfcLayerSetDirectionEnum> | IFC2X3.IfcLayerSetDirectionEnum) , DirectionSense: (Handle<IFC2X3.IfcDirectionSenseEnum> | IFC2X3.IfcDirectionSenseEnum) , OffsetFromReferenceLine: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ForLayerSet = ForLayerSet;
			this.LayerSetDirection = LayerSetDirection;
			this.DirectionSense = DirectionSense;
			this.OffsetFromReferenceLine = OffsetFromReferenceLine;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerSetUsage
		{
			return new IfcMaterialLayerSetUsage(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ForLayerSet, this.LayerSetDirection, this.DirectionSense, this.OffsetFromReferenceLine);
			return args;
		}
	}
	export class IfcMaterialList {
		expressID: number;
		type: number;
		Materials: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial)[] ;
		constructor(expressID: number, type: number, Materials: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Materials = Materials;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialList
		{
			return new IfcMaterialList(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Materials);
			return args;
		}
	}
	export class IfcMaterialProperties {
		expressID: number;
		type: number;
		Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) ;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Material = Material;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProperties
		{
			return new IfcMaterialProperties(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material);
			return args;
		}
	}
	export class IfcMeasureWithUnit {
		expressID: number;
		type: number;
		ValueComponent: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) ;
		UnitComponent: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) ;
		constructor(expressID: number, type: number, ValueComponent: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) , UnitComponent: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ValueComponent = ValueComponent;
			this.UnitComponent = UnitComponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMeasureWithUnit
		{
			return new IfcMeasureWithUnit(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ValueComponent, this.UnitComponent);
			return args;
		}
	}
	export class IfcMechanicalMaterialProperties extends IFC2X3.IfcMaterialProperties {
		DynamicViscosity: (Handle<IFC2X3.IfcDynamicViscosityMeasure> | IFC2X3.IfcDynamicViscosityMeasure) | null;
		YoungModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null;
		ShearModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null;
		PoissonRatio: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		ThermalExpansionCoefficient: (Handle<IFC2X3.IfcThermalExpansionCoefficientMeasure> | IFC2X3.IfcThermalExpansionCoefficientMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , DynamicViscosity: (Handle<IFC2X3.IfcDynamicViscosityMeasure> | IFC2X3.IfcDynamicViscosityMeasure) | null, YoungModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, ShearModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, PoissonRatio: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalExpansionCoefficient: (Handle<IFC2X3.IfcThermalExpansionCoefficientMeasure> | IFC2X3.IfcThermalExpansionCoefficientMeasure) | null)
		{
			super(expressID,type,Material);
			this.DynamicViscosity = DynamicViscosity;
			this.YoungModulus = YoungModulus;
			this.ShearModulus = ShearModulus;
			this.PoissonRatio = PoissonRatio;
			this.ThermalExpansionCoefficient = ThermalExpansionCoefficient;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalMaterialProperties
		{
			return new IfcMechanicalMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.DynamicViscosity, this.YoungModulus, this.ShearModulus, this.PoissonRatio, this.ThermalExpansionCoefficient);
			return args;
		}
	}
	export class IfcMechanicalSteelMaterialProperties extends IFC2X3.IfcMechanicalMaterialProperties {
		YieldStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null;
		UltimateStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null;
		UltimateStrain: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		HardeningModule: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null;
		ProportionalStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null;
		PlasticStrain: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		Relaxations: (Handle<IFC2X3.IfcRelaxation> | IFC2X3.IfcRelaxation)[] | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , DynamicViscosity: (Handle<IFC2X3.IfcDynamicViscosityMeasure> | IFC2X3.IfcDynamicViscosityMeasure) | null, YoungModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, ShearModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, PoissonRatio: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalExpansionCoefficient: (Handle<IFC2X3.IfcThermalExpansionCoefficientMeasure> | IFC2X3.IfcThermalExpansionCoefficientMeasure) | null, YieldStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null, UltimateStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null, UltimateStrain: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, HardeningModule: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, ProportionalStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null, PlasticStrain: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, Relaxations: (Handle<IFC2X3.IfcRelaxation> | IFC2X3.IfcRelaxation)[] | null)
		{
			super(expressID,type,Material, DynamicViscosity, YoungModulus, ShearModulus, PoissonRatio, ThermalExpansionCoefficient);
			this.YieldStress = YieldStress;
			this.UltimateStress = UltimateStress;
			this.UltimateStrain = UltimateStrain;
			this.HardeningModule = HardeningModule;
			this.ProportionalStress = ProportionalStress;
			this.PlasticStrain = PlasticStrain;
			this.Relaxations = Relaxations;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalSteelMaterialProperties
		{
			return new IfcMechanicalSteelMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.DynamicViscosity, this.YoungModulus, this.ShearModulus, this.PoissonRatio, this.ThermalExpansionCoefficient, this.YieldStress, this.UltimateStress, this.UltimateStrain, this.HardeningModule, this.ProportionalStress, this.PlasticStrain, this.Relaxations);
			return args;
		}
	}
	export class IfcMetric extends IFC2X3.IfcConstraint {
		Benchmark: (Handle<IFC2X3.IfcBenchmarkEnum> | IFC2X3.IfcBenchmarkEnum) ;
		ValueSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		DataValue: (Handle<IFC2X3.IfcMetricValueSelect> | IFC2X3.IfcMetricValueSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ConstraintGrade: (Handle<IFC2X3.IfcConstraintEnum> | IFC2X3.IfcConstraintEnum) , ConstraintSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CreatingActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, CreationTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, UserDefinedGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Benchmark: (Handle<IFC2X3.IfcBenchmarkEnum> | IFC2X3.IfcBenchmarkEnum) , ValueSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, DataValue: (Handle<IFC2X3.IfcMetricValueSelect> | IFC2X3.IfcMetricValueSelect) )
		{
			super(expressID,type,Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade);
			this.Benchmark = Benchmark;
			this.ValueSource = ValueSource;
			this.DataValue = DataValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMetric
		{
			return new IfcMetric(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ConstraintGrade, this.ConstraintSource, this.CreatingActor, this.CreationTime, this.UserDefinedGrade, this.Benchmark, this.ValueSource, this.DataValue);
			return args;
		}
	}
	export class IfcMonetaryUnit {
		expressID: number;
		type: number;
		Currency: (Handle<IFC2X3.IfcCurrencyEnum> | IFC2X3.IfcCurrencyEnum) ;
		constructor(expressID: number, type: number, Currency: (Handle<IFC2X3.IfcCurrencyEnum> | IFC2X3.IfcCurrencyEnum) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Currency = Currency;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMonetaryUnit
		{
			return new IfcMonetaryUnit(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Currency);
			return args;
		}
	}
	export class IfcNamedUnit {
		expressID: number;
		type: number;
		Dimensions: (Handle<IFC2X3.IfcDimensionalExponents> | IFC2X3.IfcDimensionalExponents) ;
		UnitType: (Handle<IFC2X3.IfcUnitEnum> | IFC2X3.IfcUnitEnum) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC2X3.IfcDimensionalExponents> | IFC2X3.IfcDimensionalExponents) , UnitType: (Handle<IFC2X3.IfcUnitEnum> | IFC2X3.IfcUnitEnum) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcNamedUnit
		{
			return new IfcNamedUnit(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType);
			return args;
		}
	}
	export class IfcObjectPlacement {
		expressID: number;
		type: number;
		PlacesObject!: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct)[] | null;
		ReferencedByPlacements!: (Handle<IFC2X3.IfcLocalPlacement> | IFC2X3.IfcLocalPlacement)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObjectPlacement
		{
			return new IfcObjectPlacement(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcObjective extends IFC2X3.IfcConstraint {
		BenchmarkValues: (Handle<IFC2X3.IfcMetric> | IFC2X3.IfcMetric) | null;
		ResultValues: (Handle<IFC2X3.IfcMetric> | IFC2X3.IfcMetric) | null;
		ObjectiveQualifier: (Handle<IFC2X3.IfcObjectiveEnum> | IFC2X3.IfcObjectiveEnum) ;
		UserDefinedQualifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ConstraintGrade: (Handle<IFC2X3.IfcConstraintEnum> | IFC2X3.IfcConstraintEnum) , ConstraintSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CreatingActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, CreationTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, UserDefinedGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, BenchmarkValues: (Handle<IFC2X3.IfcMetric> | IFC2X3.IfcMetric) | null, ResultValues: (Handle<IFC2X3.IfcMetric> | IFC2X3.IfcMetric) | null, ObjectiveQualifier: (Handle<IFC2X3.IfcObjectiveEnum> | IFC2X3.IfcObjectiveEnum) , UserDefinedQualifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade);
			this.BenchmarkValues = BenchmarkValues;
			this.ResultValues = ResultValues;
			this.ObjectiveQualifier = ObjectiveQualifier;
			this.UserDefinedQualifier = UserDefinedQualifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObjective
		{
			return new IfcObjective(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ConstraintGrade, this.ConstraintSource, this.CreatingActor, this.CreationTime, this.UserDefinedGrade, this.BenchmarkValues, this.ResultValues, this.ObjectiveQualifier, this.UserDefinedQualifier);
			return args;
		}
	}
	export class IfcOpticalMaterialProperties extends IFC2X3.IfcMaterialProperties {
		VisibleTransmittance: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		SolarTransmittance: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		ThermalIrTransmittance: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		ThermalIrEmissivityBack: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		ThermalIrEmissivityFront: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		VisibleReflectanceBack: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		VisibleReflectanceFront: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		SolarReflectanceFront: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		SolarReflectanceBack: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , VisibleTransmittance: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, SolarTransmittance: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalIrTransmittance: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalIrEmissivityBack: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalIrEmissivityFront: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, VisibleReflectanceBack: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, VisibleReflectanceFront: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, SolarReflectanceFront: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, SolarReflectanceBack: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null)
		{
			super(expressID,type,Material);
			this.VisibleTransmittance = VisibleTransmittance;
			this.SolarTransmittance = SolarTransmittance;
			this.ThermalIrTransmittance = ThermalIrTransmittance;
			this.ThermalIrEmissivityBack = ThermalIrEmissivityBack;
			this.ThermalIrEmissivityFront = ThermalIrEmissivityFront;
			this.VisibleReflectanceBack = VisibleReflectanceBack;
			this.VisibleReflectanceFront = VisibleReflectanceFront;
			this.SolarReflectanceFront = SolarReflectanceFront;
			this.SolarReflectanceBack = SolarReflectanceBack;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOpticalMaterialProperties
		{
			return new IfcOpticalMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.VisibleTransmittance, this.SolarTransmittance, this.ThermalIrTransmittance, this.ThermalIrEmissivityBack, this.ThermalIrEmissivityFront, this.VisibleReflectanceBack, this.VisibleReflectanceFront, this.SolarReflectanceFront, this.SolarReflectanceBack);
			return args;
		}
	}
	export class IfcOrganization {
		expressID: number;
		type: number;
		Id: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Roles: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole)[] | null;
		Addresses: (Handle<IFC2X3.IfcAddress> | IFC2X3.IfcAddress)[] | null;
		IsRelatedBy!: (Handle<IFC2X3.IfcOrganizationRelationship> | IFC2X3.IfcOrganizationRelationship)[] | null;
		Relates!: (Handle<IFC2X3.IfcOrganizationRelationship> | IFC2X3.IfcOrganizationRelationship)[] | null;
		Engages!: (Handle<IFC2X3.IfcPersonAndOrganization> | IFC2X3.IfcPersonAndOrganization)[] | null;
		constructor(expressID: number, type: number, Id: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Roles: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole)[] | null, Addresses: (Handle<IFC2X3.IfcAddress> | IFC2X3.IfcAddress)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Id = Id;
			this.Name = Name;
			this.Description = Description;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrganization
		{
			return new IfcOrganization(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Id, this.Name, this.Description, this.Roles, this.Addresses);
			return args;
		}
	}
	export class IfcOrganizationRelationship {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		RelatingOrganization: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) ;
		RelatedOrganizations: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingOrganization: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) , RelatedOrganizations: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.RelatingOrganization = RelatingOrganization;
			this.RelatedOrganizations = RelatedOrganizations;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrganizationRelationship
		{
			return new IfcOrganizationRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingOrganization, this.RelatedOrganizations);
			return args;
		}
	}
	export class IfcOwnerHistory {
		expressID: number;
		type: number;
		OwningUser: (Handle<IFC2X3.IfcPersonAndOrganization> | IFC2X3.IfcPersonAndOrganization) ;
		OwningApplication: (Handle<IFC2X3.IfcApplication> | IFC2X3.IfcApplication) ;
		State: (Handle<IFC2X3.IfcStateEnum> | IFC2X3.IfcStateEnum) | null;
		ChangeAction: (Handle<IFC2X3.IfcChangeActionEnum> | IFC2X3.IfcChangeActionEnum) ;
		LastModifiedDate: (Handle<IFC2X3.IfcTimeStamp> | IFC2X3.IfcTimeStamp) | null;
		LastModifyingUser: (Handle<IFC2X3.IfcPersonAndOrganization> | IFC2X3.IfcPersonAndOrganization) | null;
		LastModifyingApplication: (Handle<IFC2X3.IfcApplication> | IFC2X3.IfcApplication) | null;
		CreationDate: (Handle<IFC2X3.IfcTimeStamp> | IFC2X3.IfcTimeStamp) ;
		constructor(expressID: number, type: number, OwningUser: (Handle<IFC2X3.IfcPersonAndOrganization> | IFC2X3.IfcPersonAndOrganization) , OwningApplication: (Handle<IFC2X3.IfcApplication> | IFC2X3.IfcApplication) , State: (Handle<IFC2X3.IfcStateEnum> | IFC2X3.IfcStateEnum) | null, ChangeAction: (Handle<IFC2X3.IfcChangeActionEnum> | IFC2X3.IfcChangeActionEnum) , LastModifiedDate: (Handle<IFC2X3.IfcTimeStamp> | IFC2X3.IfcTimeStamp) | null, LastModifyingUser: (Handle<IFC2X3.IfcPersonAndOrganization> | IFC2X3.IfcPersonAndOrganization) | null, LastModifyingApplication: (Handle<IFC2X3.IfcApplication> | IFC2X3.IfcApplication) | null, CreationDate: (Handle<IFC2X3.IfcTimeStamp> | IFC2X3.IfcTimeStamp) )
		{
			this.expressID = expressID;
			this.type = type;
			this.OwningUser = OwningUser;
			this.OwningApplication = OwningApplication;
			this.State = State;
			this.ChangeAction = ChangeAction;
			this.LastModifiedDate = LastModifiedDate;
			this.LastModifyingUser = LastModifyingUser;
			this.LastModifyingApplication = LastModifyingApplication;
			this.CreationDate = CreationDate;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOwnerHistory
		{
			return new IfcOwnerHistory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.OwningUser, this.OwningApplication, this.State, this.ChangeAction, this.LastModifiedDate, this.LastModifyingUser, this.LastModifyingApplication, this.CreationDate);
			return args;
		}
	}
	export class IfcPerson {
		expressID: number;
		type: number;
		Id: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		FamilyName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		GivenName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		MiddleNames: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		PrefixTitles: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		SuffixTitles: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		Roles: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole)[] | null;
		Addresses: (Handle<IFC2X3.IfcAddress> | IFC2X3.IfcAddress)[] | null;
		EngagedIn!: (Handle<IFC2X3.IfcPersonAndOrganization> | IFC2X3.IfcPersonAndOrganization)[] | null;
		constructor(expressID: number, type: number, Id: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, FamilyName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, GivenName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, MiddleNames: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, PrefixTitles: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, SuffixTitles: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, Roles: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole)[] | null, Addresses: (Handle<IFC2X3.IfcAddress> | IFC2X3.IfcAddress)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Id = Id;
			this.FamilyName = FamilyName;
			this.GivenName = GivenName;
			this.MiddleNames = MiddleNames;
			this.PrefixTitles = PrefixTitles;
			this.SuffixTitles = SuffixTitles;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPerson
		{
			return new IfcPerson(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Id, this.FamilyName, this.GivenName, this.MiddleNames, this.PrefixTitles, this.SuffixTitles, this.Roles, this.Addresses);
			return args;
		}
	}
	export class IfcPersonAndOrganization {
		expressID: number;
		type: number;
		ThePerson: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson) ;
		TheOrganization: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) ;
		Roles: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole)[] | null;
		constructor(expressID: number, type: number, ThePerson: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson) , TheOrganization: (Handle<IFC2X3.IfcOrganization> | IFC2X3.IfcOrganization) , Roles: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ThePerson = ThePerson;
			this.TheOrganization = TheOrganization;
			this.Roles = Roles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPersonAndOrganization
		{
			return new IfcPersonAndOrganization(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ThePerson, this.TheOrganization, this.Roles);
			return args;
		}
	}
	export class IfcPhysicalQuantity {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		PartOfComplex!: (Handle<IFC2X3.IfcPhysicalComplexQuantity> | IFC2X3.IfcPhysicalComplexQuantity)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalQuantity
		{
			return new IfcPhysicalQuantity(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcPhysicalSimpleQuantity extends IFC2X3.IfcPhysicalQuantity {
		Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalSimpleQuantity
		{
			return new IfcPhysicalSimpleQuantity(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit);
			return args;
		}
	}
	export class IfcPostalAddress extends IFC2X3.IfcAddress {
		InternalLocation: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		AddressLines: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		PostalBox: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Town: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Region: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		PostalCode: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Country: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Purpose: (Handle<IFC2X3.IfcAddressTypeEnum> | IFC2X3.IfcAddressTypeEnum) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, UserDefinedPurpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, InternalLocation: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, AddressLines: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, PostalBox: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Town: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Region: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PostalCode: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Country: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Purpose, Description, UserDefinedPurpose);
			this.InternalLocation = InternalLocation;
			this.AddressLines = AddressLines;
			this.PostalBox = PostalBox;
			this.Town = Town;
			this.Region = Region;
			this.PostalCode = PostalCode;
			this.Country = Country;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPostalAddress
		{
			return new IfcPostalAddress(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Purpose, this.Description, this.UserDefinedPurpose, this.InternalLocation, this.AddressLines, this.PostalBox, this.Town, this.Region, this.PostalCode, this.Country);
			return args;
		}
	}
	export class IfcPreDefinedItem {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedItem
		{
			return new IfcPreDefinedItem(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedSymbol extends IFC2X3.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedSymbol
		{
			return new IfcPreDefinedSymbol(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedTerminatorSymbol extends IFC2X3.IfcPreDefinedSymbol {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedTerminatorSymbol
		{
			return new IfcPreDefinedTerminatorSymbol(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedTextFont extends IFC2X3.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedTextFont
		{
			return new IfcPreDefinedTextFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPresentationLayerAssignment {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		AssignedItems: (Handle<IFC2X3.IfcLayeredItem> | IFC2X3.IfcLayeredItem)[] ;
		Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, AssignedItems: (Handle<IFC2X3.IfcLayeredItem> | IFC2X3.IfcLayeredItem)[] , Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationLayerAssignment
		{
			return new IfcPresentationLayerAssignment(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AssignedItems, this.Identifier);
			return args;
		}
	}
	export class IfcPresentationLayerWithStyle extends IFC2X3.IfcPresentationLayerAssignment {
		LayerOn: boolean ;
		LayerFrozen: boolean ;
		LayerBlocked: boolean ;
		LayerStyles: (Handle<IFC2X3.IfcPresentationStyleSelect> | IFC2X3.IfcPresentationStyleSelect)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, AssignedItems: (Handle<IFC2X3.IfcLayeredItem> | IFC2X3.IfcLayeredItem)[] , Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, LayerOn: boolean , LayerFrozen: boolean , LayerBlocked: boolean , LayerStyles: (Handle<IFC2X3.IfcPresentationStyleSelect> | IFC2X3.IfcPresentationStyleSelect)[] )
		{
			super(expressID,type,Name, Description, AssignedItems, Identifier);
			this.LayerOn = LayerOn;
			this.LayerFrozen = LayerFrozen;
			this.LayerBlocked = LayerBlocked;
			this.LayerStyles = LayerStyles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationLayerWithStyle
		{
			return new IfcPresentationLayerWithStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AssignedItems, this.Identifier, this.LayerOn, this.LayerFrozen, this.LayerBlocked, this.LayerStyles);
			return args;
		}
	}
	export class IfcPresentationStyle {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationStyle
		{
			return new IfcPresentationStyle(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPresentationStyleAssignment {
		expressID: number;
		type: number;
		Styles: (Handle<IFC2X3.IfcPresentationStyleSelect> | IFC2X3.IfcPresentationStyleSelect)[] ;
		constructor(expressID: number, type: number, Styles: (Handle<IFC2X3.IfcPresentationStyleSelect> | IFC2X3.IfcPresentationStyleSelect)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Styles = Styles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationStyleAssignment
		{
			return new IfcPresentationStyleAssignment(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Styles);
			return args;
		}
	}
	export class IfcProductRepresentation {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Representations: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Representations: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProductRepresentation
		{
			return new IfcProductRepresentation(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Representations);
			return args;
		}
	}
	export class IfcProductsOfCombustionProperties extends IFC2X3.IfcMaterialProperties {
		SpecificHeatCapacity: (Handle<IFC2X3.IfcSpecificHeatCapacityMeasure> | IFC2X3.IfcSpecificHeatCapacityMeasure) | null;
		N20Content: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		COContent: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		CO2Content: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , SpecificHeatCapacity: (Handle<IFC2X3.IfcSpecificHeatCapacityMeasure> | IFC2X3.IfcSpecificHeatCapacityMeasure) | null, N20Content: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, COContent: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, CO2Content: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null)
		{
			super(expressID,type,Material);
			this.SpecificHeatCapacity = SpecificHeatCapacity;
			this.N20Content = N20Content;
			this.COContent = COContent;
			this.CO2Content = CO2Content;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProductsOfCombustionProperties
		{
			return new IfcProductsOfCombustionProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.SpecificHeatCapacity, this.N20Content, this.COContent, this.CO2Content);
			return args;
		}
	}
	export class IfcProfileDef {
		expressID: number;
		type: number;
		ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) ;
		ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProfileDef
		{
			return new IfcProfileDef(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName);
			return args;
		}
	}
	export class IfcProfileProperties {
		expressID: number;
		type: number;
		ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ProfileDefinition: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null;
		constructor(expressID: number, type: number, ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ProfileDefinition: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ProfileName = ProfileName;
			this.ProfileDefinition = ProfileDefinition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProfileProperties
		{
			return new IfcProfileProperties(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileName, this.ProfileDefinition);
			return args;
		}
	}
	export class IfcProperty {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		PropertyForDependance!: (Handle<IFC2X3.IfcPropertyDependencyRelationship> | IFC2X3.IfcPropertyDependencyRelationship)[] | null;
		PropertyDependsOn!: (Handle<IFC2X3.IfcPropertyDependencyRelationship> | IFC2X3.IfcPropertyDependencyRelationship)[] | null;
		PartOfComplex!: (Handle<IFC2X3.IfcComplexProperty> | IFC2X3.IfcComplexProperty)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProperty
		{
			return new IfcProperty(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertyConstraintRelationship {
		expressID: number;
		type: number;
		RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) ;
		RelatedProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) , RelatedProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedProperties = RelatedProperties;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyConstraintRelationship
		{
			return new IfcPropertyConstraintRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RelatingConstraint, this.RelatedProperties, this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertyDependencyRelationship {
		expressID: number;
		type: number;
		DependingProperty: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty) ;
		DependantProperty: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty) ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Expression: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, DependingProperty: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty) , DependantProperty: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Expression: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.DependingProperty = DependingProperty;
			this.DependantProperty = DependantProperty;
			this.Name = Name;
			this.Description = Description;
			this.Expression = Expression;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyDependencyRelationship
		{
			return new IfcPropertyDependencyRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DependingProperty, this.DependantProperty, this.Name, this.Description, this.Expression);
			return args;
		}
	}
	export class IfcPropertyEnumeration {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		EnumerationValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , EnumerationValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] , Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.EnumerationValues = EnumerationValues;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyEnumeration
		{
			return new IfcPropertyEnumeration(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.EnumerationValues, this.Unit);
			return args;
		}
	}
	export class IfcQuantityArea extends IFC2X3.IfcPhysicalSimpleQuantity {
		AreaValue: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null, AreaValue: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) )
		{
			super(expressID,type,Name, Description, Unit);
			this.AreaValue = AreaValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityArea
		{
			return new IfcQuantityArea(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.AreaValue);
			return args;
		}
	}
	export class IfcQuantityCount extends IFC2X3.IfcPhysicalSimpleQuantity {
		CountValue: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null, CountValue: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) )
		{
			super(expressID,type,Name, Description, Unit);
			this.CountValue = CountValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityCount
		{
			return new IfcQuantityCount(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.CountValue);
			return args;
		}
	}
	export class IfcQuantityLength extends IFC2X3.IfcPhysicalSimpleQuantity {
		LengthValue: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null, LengthValue: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) )
		{
			super(expressID,type,Name, Description, Unit);
			this.LengthValue = LengthValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityLength
		{
			return new IfcQuantityLength(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.LengthValue);
			return args;
		}
	}
	export class IfcQuantityTime extends IFC2X3.IfcPhysicalSimpleQuantity {
		TimeValue: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null, TimeValue: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) )
		{
			super(expressID,type,Name, Description, Unit);
			this.TimeValue = TimeValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityTime
		{
			return new IfcQuantityTime(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.TimeValue);
			return args;
		}
	}
	export class IfcQuantityVolume extends IFC2X3.IfcPhysicalSimpleQuantity {
		VolumeValue: (Handle<IFC2X3.IfcVolumeMeasure> | IFC2X3.IfcVolumeMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null, VolumeValue: (Handle<IFC2X3.IfcVolumeMeasure> | IFC2X3.IfcVolumeMeasure) )
		{
			super(expressID,type,Name, Description, Unit);
			this.VolumeValue = VolumeValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityVolume
		{
			return new IfcQuantityVolume(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.VolumeValue);
			return args;
		}
	}
	export class IfcQuantityWeight extends IFC2X3.IfcPhysicalSimpleQuantity {
		WeightValue: (Handle<IFC2X3.IfcMassMeasure> | IFC2X3.IfcMassMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Unit: (Handle<IFC2X3.IfcNamedUnit> | IFC2X3.IfcNamedUnit) | null, WeightValue: (Handle<IFC2X3.IfcMassMeasure> | IFC2X3.IfcMassMeasure) )
		{
			super(expressID,type,Name, Description, Unit);
			this.WeightValue = WeightValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityWeight
		{
			return new IfcQuantityWeight(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.WeightValue);
			return args;
		}
	}
	export class IfcReferencesValueDocument {
		expressID: number;
		type: number;
		ReferencedDocument: (Handle<IFC2X3.IfcDocumentSelect> | IFC2X3.IfcDocumentSelect) ;
		ReferencingValues: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue)[] ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, ReferencedDocument: (Handle<IFC2X3.IfcDocumentSelect> | IFC2X3.IfcDocumentSelect) , ReferencingValues: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ReferencedDocument = ReferencedDocument;
			this.ReferencingValues = ReferencingValues;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReferencesValueDocument
		{
			return new IfcReferencesValueDocument(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ReferencedDocument, this.ReferencingValues, this.Name, this.Description);
			return args;
		}
	}
	export class IfcReinforcementBarProperties {
		expressID: number;
		type: number;
		TotalCrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		BarSurface: (Handle<IFC2X3.IfcReinforcingBarSurfaceEnum> | IFC2X3.IfcReinforcingBarSurfaceEnum) | null;
		EffectiveDepth: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		NominalBarDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		BarCount: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) | null;
		constructor(expressID: number, type: number, TotalCrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) , SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , BarSurface: (Handle<IFC2X3.IfcReinforcingBarSurfaceEnum> | IFC2X3.IfcReinforcingBarSurfaceEnum) | null, EffectiveDepth: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, NominalBarDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, BarCount: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.TotalCrossSectionArea = TotalCrossSectionArea;
			this.SteelGrade = SteelGrade;
			this.BarSurface = BarSurface;
			this.EffectiveDepth = EffectiveDepth;
			this.NominalBarDiameter = NominalBarDiameter;
			this.BarCount = BarCount;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcementBarProperties
		{
			return new IfcReinforcementBarProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TotalCrossSectionArea, this.SteelGrade, this.BarSurface, this.EffectiveDepth, this.NominalBarDiameter, this.BarCount);
			return args;
		}
	}
	export class IfcRelaxation {
		expressID: number;
		type: number;
		RelaxationValue: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) ;
		InitialStress: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) ;
		constructor(expressID: number, type: number, RelaxationValue: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) , InitialStress: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) )
		{
			this.expressID = expressID;
			this.type = type;
			this.RelaxationValue = RelaxationValue;
			this.InitialStress = InitialStress;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelaxation
		{
			return new IfcRelaxation(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RelaxationValue, this.InitialStress);
			return args;
		}
	}
	export class IfcRepresentation {
		expressID: number;
		type: number;
		ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) ;
		RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] ;
		RepresentationMap!: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null;
		LayerAssignments!: (Handle<IFC2X3.IfcPresentationLayerAssignment> | IFC2X3.IfcPresentationLayerAssignment)[] | null;
		OfProductRepresentation!: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation)[] | null;
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentation
		{
			return new IfcRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcRepresentationContext {
		expressID: number;
		type: number;
		ContextIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ContextType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		RepresentationsInContext!: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation)[] | null;
		constructor(expressID: number, type: number, ContextIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ContextType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationContext
		{
			return new IfcRepresentationContext(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextIdentifier, this.ContextType);
			return args;
		}
	}
	export class IfcRepresentationItem {
		expressID: number;
		type: number;
		LayerAssignments!: (Handle<IFC2X3.IfcPresentationLayerAssignment> | IFC2X3.IfcPresentationLayerAssignment)[] | null;
		StyledByItem!: (Handle<IFC2X3.IfcStyledItem> | IFC2X3.IfcStyledItem)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationItem
		{
			return new IfcRepresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcRepresentationMap {
		expressID: number;
		type: number;
		MappingOrigin: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		MappedRepresentation: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation) ;
		MapUsage!: (Handle<IFC2X3.IfcMappedItem> | IFC2X3.IfcMappedItem)[] | null;
		constructor(expressID: number, type: number, MappingOrigin: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , MappedRepresentation: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation) )
		{
			this.expressID = expressID;
			this.type = type;
			this.MappingOrigin = MappingOrigin;
			this.MappedRepresentation = MappedRepresentation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationMap
		{
			return new IfcRepresentationMap(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MappingOrigin, this.MappedRepresentation);
			return args;
		}
	}
	export class IfcRibPlateProfileProperties extends IFC2X3.IfcProfileProperties {
		Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		RibHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		RibWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		RibSpacing: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		Direction: (Handle<IFC2X3.IfcRibPlateDirectionEnum> | IFC2X3.IfcRibPlateDirectionEnum) ;
		constructor(expressID: number, type: number, ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ProfileDefinition: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null, Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, RibHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, RibWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, RibSpacing: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, Direction: (Handle<IFC2X3.IfcRibPlateDirectionEnum> | IFC2X3.IfcRibPlateDirectionEnum) )
		{
			super(expressID,type,ProfileName, ProfileDefinition);
			this.Thickness = Thickness;
			this.RibHeight = RibHeight;
			this.RibWidth = RibWidth;
			this.RibSpacing = RibSpacing;
			this.Direction = Direction;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRibPlateProfileProperties
		{
			return new IfcRibPlateProfileProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileName, this.ProfileDefinition, this.Thickness, this.RibHeight, this.RibWidth, this.RibSpacing, this.Direction);
			return args;
		}
	}
	export class IfcRoot {
		expressID: number;
		type: number;
		GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) ;
		OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoot
		{
			return new IfcRoot(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcSIUnit extends IFC2X3.IfcNamedUnit {
		Prefix: (Handle<IFC2X3.IfcSIPrefix> | IFC2X3.IfcSIPrefix) | null;
		Name: (Handle<IFC2X3.IfcSIUnitName> | IFC2X3.IfcSIUnitName) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC2X3.IfcDimensionalExponents> | IFC2X3.IfcDimensionalExponents) , UnitType: (Handle<IFC2X3.IfcUnitEnum> | IFC2X3.IfcUnitEnum) , Prefix: (Handle<IFC2X3.IfcSIPrefix> | IFC2X3.IfcSIPrefix) | null, Name: (Handle<IFC2X3.IfcSIUnitName> | IFC2X3.IfcSIUnitName) )
		{
			super(expressID,type,Dimensions, UnitType);
			this.Prefix = Prefix;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSIUnit
		{
			return new IfcSIUnit(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Prefix, this.Name);
			return args;
		}
	}
	export class IfcSectionProperties {
		expressID: number;
		type: number;
		SectionType: (Handle<IFC2X3.IfcSectionTypeEnum> | IFC2X3.IfcSectionTypeEnum) ;
		StartProfile: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) ;
		EndProfile: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null;
		constructor(expressID: number, type: number, SectionType: (Handle<IFC2X3.IfcSectionTypeEnum> | IFC2X3.IfcSectionTypeEnum) , StartProfile: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , EndProfile: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.SectionType = SectionType;
			this.StartProfile = StartProfile;
			this.EndProfile = EndProfile;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSectionProperties
		{
			return new IfcSectionProperties(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SectionType, this.StartProfile, this.EndProfile);
			return args;
		}
	}
	export class IfcSectionReinforcementProperties {
		expressID: number;
		type: number;
		LongitudinalStartPosition: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		LongitudinalEndPosition: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		TransversePosition: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		ReinforcementRole: (Handle<IFC2X3.IfcReinforcingBarRoleEnum> | IFC2X3.IfcReinforcingBarRoleEnum) ;
		SectionDefinition: (Handle<IFC2X3.IfcSectionProperties> | IFC2X3.IfcSectionProperties) ;
		CrossSectionReinforcementDefinitions: (Handle<IFC2X3.IfcReinforcementBarProperties> | IFC2X3.IfcReinforcementBarProperties)[] ;
		constructor(expressID: number, type: number, LongitudinalStartPosition: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , LongitudinalEndPosition: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , TransversePosition: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ReinforcementRole: (Handle<IFC2X3.IfcReinforcingBarRoleEnum> | IFC2X3.IfcReinforcingBarRoleEnum) , SectionDefinition: (Handle<IFC2X3.IfcSectionProperties> | IFC2X3.IfcSectionProperties) , CrossSectionReinforcementDefinitions: (Handle<IFC2X3.IfcReinforcementBarProperties> | IFC2X3.IfcReinforcementBarProperties)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.LongitudinalStartPosition = LongitudinalStartPosition;
			this.LongitudinalEndPosition = LongitudinalEndPosition;
			this.TransversePosition = TransversePosition;
			this.ReinforcementRole = ReinforcementRole;
			this.SectionDefinition = SectionDefinition;
			this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSectionReinforcementProperties
		{
			return new IfcSectionReinforcementProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LongitudinalStartPosition, this.LongitudinalEndPosition, this.TransversePosition, this.ReinforcementRole, this.SectionDefinition, this.CrossSectionReinforcementDefinitions);
			return args;
		}
	}
	export class IfcShapeAspect {
		expressID: number;
		type: number;
		ShapeRepresentations: (Handle<IFC2X3.IfcShapeModel> | IFC2X3.IfcShapeModel)[] ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		ProductDefinitional: boolean ;
		PartOfProductDefinitionShape: (Handle<IFC2X3.IfcProductDefinitionShape> | IFC2X3.IfcProductDefinitionShape) ;
		constructor(expressID: number, type: number, ShapeRepresentations: (Handle<IFC2X3.IfcShapeModel> | IFC2X3.IfcShapeModel)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ProductDefinitional: boolean , PartOfProductDefinitionShape: (Handle<IFC2X3.IfcProductDefinitionShape> | IFC2X3.IfcProductDefinitionShape) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ShapeRepresentations = ShapeRepresentations;
			this.Name = Name;
			this.Description = Description;
			this.ProductDefinitional = ProductDefinitional;
			this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShapeAspect
		{
			return new IfcShapeAspect(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ShapeRepresentations, this.Name, this.Description, this.ProductDefinitional, this.PartOfProductDefinitionShape);
			return args;
		}
	}
	export class IfcShapeModel extends IFC2X3.IfcRepresentation {
		OfShapeAspect!: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect)[] | null;
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShapeModel
		{
			return new IfcShapeModel(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcShapeRepresentation extends IFC2X3.IfcShapeModel {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShapeRepresentation
		{
			return new IfcShapeRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcSimpleProperty extends IFC2X3.IfcProperty {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSimpleProperty
		{
			return new IfcSimpleProperty(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcStructuralConnectionCondition {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralConnectionCondition
		{
			return new IfcStructuralConnectionCondition(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoad {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoad
		{
			return new IfcStructuralLoad(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoadStatic extends IFC2X3.IfcStructuralLoad {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadStatic
		{
			return new IfcStructuralLoadStatic(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoadTemperature extends IFC2X3.IfcStructuralLoadStatic {
		DeltaT_Constant: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		DeltaT_Y: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		DeltaT_Z: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, DeltaT_Constant: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, DeltaT_Y: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, DeltaT_Z: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null)
		{
			super(expressID,type,Name);
			this.DeltaT_Constant = DeltaT_Constant;
			this.DeltaT_Y = DeltaT_Y;
			this.DeltaT_Z = DeltaT_Z;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadTemperature
		{
			return new IfcStructuralLoadTemperature(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DeltaT_Constant, this.DeltaT_Y, this.DeltaT_Z);
			return args;
		}
	}
	export class IfcStyleModel extends IFC2X3.IfcRepresentation {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStyleModel
		{
			return new IfcStyleModel(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcStyledItem extends IFC2X3.IfcRepresentationItem {
		Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null;
		Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] ;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type);
			this.Item = Item;
			this.Styles = Styles;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStyledItem
		{
			return new IfcStyledItem(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcStyledRepresentation extends IFC2X3.IfcStyleModel {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStyledRepresentation
		{
			return new IfcStyledRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcSurfaceStyle extends IFC2X3.IfcPresentationStyle {
		Side: (Handle<IFC2X3.IfcSurfaceSide> | IFC2X3.IfcSurfaceSide) ;
		Styles: (Handle<IFC2X3.IfcSurfaceStyleElementSelect> | IFC2X3.IfcSurfaceStyleElementSelect)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Side: (Handle<IFC2X3.IfcSurfaceSide> | IFC2X3.IfcSurfaceSide) , Styles: (Handle<IFC2X3.IfcSurfaceStyleElementSelect> | IFC2X3.IfcSurfaceStyleElementSelect)[] )
		{
			super(expressID,type,Name);
			this.Side = Side;
			this.Styles = Styles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyle
		{
			return new IfcSurfaceStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Side, this.Styles);
			return args;
		}
	}
	export class IfcSurfaceStyleLighting {
		expressID: number;
		type: number;
		DiffuseTransmissionColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) ;
		DiffuseReflectionColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) ;
		TransmissionColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) ;
		ReflectanceColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) ;
		constructor(expressID: number, type: number, DiffuseTransmissionColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , DiffuseReflectionColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , TransmissionColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , ReflectanceColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) )
		{
			this.expressID = expressID;
			this.type = type;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.DiffuseReflectionColour = DiffuseReflectionColour;
			this.TransmissionColour = TransmissionColour;
			this.ReflectanceColour = ReflectanceColour;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleLighting
		{
			return new IfcSurfaceStyleLighting(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DiffuseTransmissionColour, this.DiffuseReflectionColour, this.TransmissionColour, this.ReflectanceColour);
			return args;
		}
	}
	export class IfcSurfaceStyleRefraction {
		expressID: number;
		type: number;
		RefractionIndex: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) | null;
		DispersionFactor: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) | null;
		constructor(expressID: number, type: number, RefractionIndex: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) | null, DispersionFactor: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RefractionIndex = RefractionIndex;
			this.DispersionFactor = DispersionFactor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleRefraction
		{
			return new IfcSurfaceStyleRefraction(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RefractionIndex, this.DispersionFactor);
			return args;
		}
	}
	export class IfcSurfaceStyleShading {
		expressID: number;
		type: number;
		SurfaceColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) ;
		constructor(expressID: number, type: number, SurfaceColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) )
		{
			this.expressID = expressID;
			this.type = type;
			this.SurfaceColour = SurfaceColour;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleShading
		{
			return new IfcSurfaceStyleShading(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SurfaceColour);
			return args;
		}
	}
	export class IfcSurfaceStyleWithTextures {
		expressID: number;
		type: number;
		Textures: (Handle<IFC2X3.IfcSurfaceTexture> | IFC2X3.IfcSurfaceTexture)[] ;
		constructor(expressID: number, type: number, Textures: (Handle<IFC2X3.IfcSurfaceTexture> | IFC2X3.IfcSurfaceTexture)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Textures = Textures;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleWithTextures
		{
			return new IfcSurfaceStyleWithTextures(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Textures);
			return args;
		}
	}
	export class IfcSurfaceTexture {
		expressID: number;
		type: number;
		RepeatS: boolean ;
		RepeatT: boolean ;
		TextureType: (Handle<IFC2X3.IfcSurfaceTextureEnum> | IFC2X3.IfcSurfaceTextureEnum) ;
		TextureTransform: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) | null;
		constructor(expressID: number, type: number, RepeatS: boolean , RepeatT: boolean , TextureType: (Handle<IFC2X3.IfcSurfaceTextureEnum> | IFC2X3.IfcSurfaceTextureEnum) , TextureTransform: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.TextureType = TextureType;
			this.TextureTransform = TextureTransform;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceTexture
		{
			return new IfcSurfaceTexture(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.TextureType, this.TextureTransform);
			return args;
		}
	}
	export class IfcSymbolStyle extends IFC2X3.IfcPresentationStyle {
		StyleOfSymbol: (Handle<IFC2X3.IfcSymbolStyleSelect> | IFC2X3.IfcSymbolStyleSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, StyleOfSymbol: (Handle<IFC2X3.IfcSymbolStyleSelect> | IFC2X3.IfcSymbolStyleSelect) )
		{
			super(expressID,type,Name);
			this.StyleOfSymbol = StyleOfSymbol;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSymbolStyle
		{
			return new IfcSymbolStyle(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.StyleOfSymbol);
			return args;
		}
	}
	export class IfcTable {
		expressID: number;
		type: number;
		Name: string ;
		Rows: (Handle<IFC2X3.IfcTableRow> | IFC2X3.IfcTableRow)[] ;
		constructor(expressID: number, type: number, Name: string , Rows: (Handle<IFC2X3.IfcTableRow> | IFC2X3.IfcTableRow)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Rows = Rows;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTable
		{
			return new IfcTable(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Rows);
			return args;
		}
	}
	export class IfcTableRow {
		expressID: number;
		type: number;
		RowCells: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		IsHeading: boolean ;
		OfTable!: (Handle<IFC2X3.IfcTable> | IFC2X3.IfcTable) | null;
		constructor(expressID: number, type: number, RowCells: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] , IsHeading: boolean )
		{
			this.expressID = expressID;
			this.type = type;
			this.RowCells = RowCells;
			this.IsHeading = IsHeading;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTableRow
		{
			return new IfcTableRow(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RowCells, this.IsHeading);
			return args;
		}
	}
	export class IfcTelecomAddress extends IFC2X3.IfcAddress {
		TelephoneNumbers: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		FacsimileNumbers: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		PagerNumber: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ElectronicMailAddresses: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null;
		WWWHomePageURL: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Purpose: (Handle<IFC2X3.IfcAddressTypeEnum> | IFC2X3.IfcAddressTypeEnum) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, UserDefinedPurpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TelephoneNumbers: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, FacsimileNumbers: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, PagerNumber: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElectronicMailAddresses: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel)[] | null, WWWHomePageURL: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Purpose, Description, UserDefinedPurpose);
			this.TelephoneNumbers = TelephoneNumbers;
			this.FacsimileNumbers = FacsimileNumbers;
			this.PagerNumber = PagerNumber;
			this.ElectronicMailAddresses = ElectronicMailAddresses;
			this.WWWHomePageURL = WWWHomePageURL;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTelecomAddress
		{
			return new IfcTelecomAddress(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Purpose, this.Description, this.UserDefinedPurpose, this.TelephoneNumbers, this.FacsimileNumbers, this.PagerNumber, this.ElectronicMailAddresses, this.WWWHomePageURL);
			return args;
		}
	}
	export class IfcTextStyle extends IFC2X3.IfcPresentationStyle {
		TextCharacterAppearance: (Handle<IFC2X3.IfcCharacterStyleSelect> | IFC2X3.IfcCharacterStyleSelect) | null;
		TextStyle: (Handle<IFC2X3.IfcTextStyleSelect> | IFC2X3.IfcTextStyleSelect) | null;
		TextFontStyle: (Handle<IFC2X3.IfcTextFontSelect> | IFC2X3.IfcTextFontSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TextCharacterAppearance: (Handle<IFC2X3.IfcCharacterStyleSelect> | IFC2X3.IfcCharacterStyleSelect) | null, TextStyle: (Handle<IFC2X3.IfcTextStyleSelect> | IFC2X3.IfcTextStyleSelect) | null, TextFontStyle: (Handle<IFC2X3.IfcTextFontSelect> | IFC2X3.IfcTextFontSelect) )
		{
			super(expressID,type,Name);
			this.TextCharacterAppearance = TextCharacterAppearance;
			this.TextStyle = TextStyle;
			this.TextFontStyle = TextFontStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyle
		{
			return new IfcTextStyle(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TextCharacterAppearance, this.TextStyle, this.TextFontStyle);
			return args;
		}
	}
	export class IfcTextStyleFontModel extends IFC2X3.IfcPreDefinedTextFont {
		FontFamily: (Handle<IFC2X3.IfcTextFontName> | IFC2X3.IfcTextFontName)[] | null;
		FontStyle: (Handle<IFC2X3.IfcFontStyle> | IFC2X3.IfcFontStyle) | null;
		FontVariant: (Handle<IFC2X3.IfcFontVariant> | IFC2X3.IfcFontVariant) | null;
		FontWeight: (Handle<IFC2X3.IfcFontWeight> | IFC2X3.IfcFontWeight) | null;
		FontSize: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , FontFamily: (Handle<IFC2X3.IfcTextFontName> | IFC2X3.IfcTextFontName)[] | null, FontStyle: (Handle<IFC2X3.IfcFontStyle> | IFC2X3.IfcFontStyle) | null, FontVariant: (Handle<IFC2X3.IfcFontVariant> | IFC2X3.IfcFontVariant) | null, FontWeight: (Handle<IFC2X3.IfcFontWeight> | IFC2X3.IfcFontWeight) | null, FontSize: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) )
		{
			super(expressID,type,Name);
			this.FontFamily = FontFamily;
			this.FontStyle = FontStyle;
			this.FontVariant = FontVariant;
			this.FontWeight = FontWeight;
			this.FontSize = FontSize;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleFontModel
		{
			return new IfcTextStyleFontModel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.FontFamily, this.FontStyle, this.FontVariant, this.FontWeight, this.FontSize);
			return args;
		}
	}
	export class IfcTextStyleForDefinedFont {
		expressID: number;
		type: number;
		Colour: (Handle<IFC2X3.IfcColour> | IFC2X3.IfcColour) ;
		BackgroundColour: (Handle<IFC2X3.IfcColour> | IFC2X3.IfcColour) | null;
		constructor(expressID: number, type: number, Colour: (Handle<IFC2X3.IfcColour> | IFC2X3.IfcColour) , BackgroundColour: (Handle<IFC2X3.IfcColour> | IFC2X3.IfcColour) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Colour = Colour;
			this.BackgroundColour = BackgroundColour;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleForDefinedFont
		{
			return new IfcTextStyleForDefinedFont(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Colour, this.BackgroundColour);
			return args;
		}
	}
	export class IfcTextStyleTextModel {
		expressID: number;
		type: number;
		TextIndent: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null;
		TextAlign: (Handle<IFC2X3.IfcTextAlignment> | IFC2X3.IfcTextAlignment) | null;
		TextDecoration: (Handle<IFC2X3.IfcTextDecoration> | IFC2X3.IfcTextDecoration) | null;
		LetterSpacing: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null;
		WordSpacing: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null;
		TextTransform: (Handle<IFC2X3.IfcTextTransformation> | IFC2X3.IfcTextTransformation) | null;
		LineHeight: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null;
		constructor(expressID: number, type: number, TextIndent: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null, TextAlign: (Handle<IFC2X3.IfcTextAlignment> | IFC2X3.IfcTextAlignment) | null, TextDecoration: (Handle<IFC2X3.IfcTextDecoration> | IFC2X3.IfcTextDecoration) | null, LetterSpacing: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null, WordSpacing: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null, TextTransform: (Handle<IFC2X3.IfcTextTransformation> | IFC2X3.IfcTextTransformation) | null, LineHeight: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.TextIndent = TextIndent;
			this.TextAlign = TextAlign;
			this.TextDecoration = TextDecoration;
			this.LetterSpacing = LetterSpacing;
			this.WordSpacing = WordSpacing;
			this.TextTransform = TextTransform;
			this.LineHeight = LineHeight;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleTextModel
		{
			return new IfcTextStyleTextModel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TextIndent, this.TextAlign, this.TextDecoration, this.LetterSpacing, this.WordSpacing, this.TextTransform, this.LineHeight);
			return args;
		}
	}
	export class IfcTextStyleWithBoxCharacteristics {
		expressID: number;
		type: number;
		BoxHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		BoxWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		BoxSlantAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		BoxRotateAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		CharacterSpacing: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null;
		constructor(expressID: number, type: number, BoxHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, BoxWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, BoxSlantAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, BoxRotateAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, CharacterSpacing: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.BoxHeight = BoxHeight;
			this.BoxWidth = BoxWidth;
			this.BoxSlantAngle = BoxSlantAngle;
			this.BoxRotateAngle = BoxRotateAngle;
			this.CharacterSpacing = CharacterSpacing;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleWithBoxCharacteristics
		{
			return new IfcTextStyleWithBoxCharacteristics(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BoxHeight, this.BoxWidth, this.BoxSlantAngle, this.BoxRotateAngle, this.CharacterSpacing);
			return args;
		}
	}
	export class IfcTextureCoordinate {
		expressID: number;
		type: number;
		AnnotatedSurface!: (Handle<IFC2X3.IfcAnnotationSurface> | IFC2X3.IfcAnnotationSurface)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureCoordinate
		{
			return new IfcTextureCoordinate(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcTextureCoordinateGenerator extends IFC2X3.IfcTextureCoordinate {
		Mode: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Parameter: (Handle<IFC2X3.IfcSimpleValue> | IFC2X3.IfcSimpleValue)[] ;
		constructor(expressID: number, type: number, Mode: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Parameter: (Handle<IFC2X3.IfcSimpleValue> | IFC2X3.IfcSimpleValue)[] )
		{
			super(expressID,type);
			this.Mode = Mode;
			this.Parameter = Parameter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureCoordinateGenerator
		{
			return new IfcTextureCoordinateGenerator(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Mode, this.Parameter);
			return args;
		}
	}
	export class IfcTextureMap extends IFC2X3.IfcTextureCoordinate {
		TextureMaps: (Handle<IFC2X3.IfcVertexBasedTextureMap> | IFC2X3.IfcVertexBasedTextureMap)[] ;
		constructor(expressID: number, type: number, TextureMaps: (Handle<IFC2X3.IfcVertexBasedTextureMap> | IFC2X3.IfcVertexBasedTextureMap)[] )
		{
			super(expressID,type);
			this.TextureMaps = TextureMaps;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureMap
		{
			return new IfcTextureMap(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TextureMaps);
			return args;
		}
	}
	export class IfcTextureVertex {
		expressID: number;
		type: number;
		Coordinates: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue)[] ;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Coordinates = Coordinates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureVertex
		{
			return new IfcTextureVertex(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates);
			return args;
		}
	}
	export class IfcThermalMaterialProperties extends IFC2X3.IfcMaterialProperties {
		SpecificHeatCapacity: (Handle<IFC2X3.IfcSpecificHeatCapacityMeasure> | IFC2X3.IfcSpecificHeatCapacityMeasure) | null;
		BoilingPoint: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		FreezingPoint: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		ThermalConductivity: (Handle<IFC2X3.IfcThermalConductivityMeasure> | IFC2X3.IfcThermalConductivityMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , SpecificHeatCapacity: (Handle<IFC2X3.IfcSpecificHeatCapacityMeasure> | IFC2X3.IfcSpecificHeatCapacityMeasure) | null, BoilingPoint: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, FreezingPoint: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, ThermalConductivity: (Handle<IFC2X3.IfcThermalConductivityMeasure> | IFC2X3.IfcThermalConductivityMeasure) | null)
		{
			super(expressID,type,Material);
			this.SpecificHeatCapacity = SpecificHeatCapacity;
			this.BoilingPoint = BoilingPoint;
			this.FreezingPoint = FreezingPoint;
			this.ThermalConductivity = ThermalConductivity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcThermalMaterialProperties
		{
			return new IfcThermalMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.SpecificHeatCapacity, this.BoilingPoint, this.FreezingPoint, this.ThermalConductivity);
			return args;
		}
	}
	export class IfcTimeSeries {
		expressID: number;
		type: number;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		EndTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		TimeSeriesDataType: (Handle<IFC2X3.IfcTimeSeriesDataTypeEnum> | IFC2X3.IfcTimeSeriesDataTypeEnum) ;
		DataOrigin: (Handle<IFC2X3.IfcDataOriginEnum> | IFC2X3.IfcDataOriginEnum) ;
		UserDefinedDataOrigin: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		DocumentedBy!: (Handle<IFC2X3.IfcTimeSeriesReferenceRelationship> | IFC2X3.IfcTimeSeriesReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , EndTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , TimeSeriesDataType: (Handle<IFC2X3.IfcTimeSeriesDataTypeEnum> | IFC2X3.IfcTimeSeriesDataTypeEnum) , DataOrigin: (Handle<IFC2X3.IfcDataOriginEnum> | IFC2X3.IfcDataOriginEnum) , UserDefinedDataOrigin: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeries
		{
			return new IfcTimeSeries(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.StartTime, this.EndTime, this.TimeSeriesDataType, this.DataOrigin, this.UserDefinedDataOrigin, this.Unit);
			return args;
		}
	}
	export class IfcTimeSeriesReferenceRelationship {
		expressID: number;
		type: number;
		ReferencedTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) ;
		TimeSeriesReferences: (Handle<IFC2X3.IfcDocumentSelect> | IFC2X3.IfcDocumentSelect)[] ;
		constructor(expressID: number, type: number, ReferencedTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) , TimeSeriesReferences: (Handle<IFC2X3.IfcDocumentSelect> | IFC2X3.IfcDocumentSelect)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.ReferencedTimeSeries = ReferencedTimeSeries;
			this.TimeSeriesReferences = TimeSeriesReferences;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeriesReferenceRelationship
		{
			return new IfcTimeSeriesReferenceRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ReferencedTimeSeries, this.TimeSeriesReferences);
			return args;
		}
	}
	export class IfcTimeSeriesValue {
		expressID: number;
		type: number;
		ListValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		constructor(expressID: number, type: number, ListValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.ListValues = ListValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeriesValue
		{
			return new IfcTimeSeriesValue(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ListValues);
			return args;
		}
	}
	export class IfcTopologicalRepresentationItem extends IFC2X3.IfcRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTopologicalRepresentationItem
		{
			return new IfcTopologicalRepresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcTopologyRepresentation extends IFC2X3.IfcShapeModel {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Items: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTopologyRepresentation
		{
			return new IfcTopologyRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcUnitAssignment {
		expressID: number;
		type: number;
		Units: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit)[] ;
		constructor(expressID: number, type: number, Units: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Units = Units;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitAssignment
		{
			return new IfcUnitAssignment(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Units);
			return args;
		}
	}
	export class IfcVertex extends IFC2X3.IfcTopologicalRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertex
		{
			return new IfcVertex(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcVertexBasedTextureMap {
		expressID: number;
		type: number;
		TextureVertices: (Handle<IFC2X3.IfcTextureVertex> | IFC2X3.IfcTextureVertex)[] ;
		TexturePoints: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] ;
		constructor(expressID: number, type: number, TextureVertices: (Handle<IFC2X3.IfcTextureVertex> | IFC2X3.IfcTextureVertex)[] , TexturePoints: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.TextureVertices = TextureVertices;
			this.TexturePoints = TexturePoints;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertexBasedTextureMap
		{
			return new IfcVertexBasedTextureMap(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TextureVertices, this.TexturePoints);
			return args;
		}
	}
	export class IfcVertexPoint extends IFC2X3.IfcVertex {
		VertexGeometry: (Handle<IFC2X3.IfcPoint> | IFC2X3.IfcPoint) ;
		constructor(expressID: number, type: number, VertexGeometry: (Handle<IFC2X3.IfcPoint> | IFC2X3.IfcPoint) )
		{
			super(expressID,type);
			this.VertexGeometry = VertexGeometry;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertexPoint
		{
			return new IfcVertexPoint(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.VertexGeometry);
			return args;
		}
	}
	export class IfcVirtualGridIntersection {
		expressID: number;
		type: number;
		IntersectingAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] ;
		OffsetDistances: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure)[] ;
		constructor(expressID: number, type: number, IntersectingAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] , OffsetDistances: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.IntersectingAxes = IntersectingAxes;
			this.OffsetDistances = OffsetDistances;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVirtualGridIntersection
		{
			return new IfcVirtualGridIntersection(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.IntersectingAxes, this.OffsetDistances);
			return args;
		}
	}
	export class IfcWaterProperties extends IFC2X3.IfcMaterialProperties {
		IsPotable: boolean | null;
		Hardness: (Handle<IFC2X3.IfcIonConcentrationMeasure> | IFC2X3.IfcIonConcentrationMeasure) | null;
		AlkalinityConcentration: (Handle<IFC2X3.IfcIonConcentrationMeasure> | IFC2X3.IfcIonConcentrationMeasure) | null;
		AcidityConcentration: (Handle<IFC2X3.IfcIonConcentrationMeasure> | IFC2X3.IfcIonConcentrationMeasure) | null;
		ImpuritiesContent: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		PHLevel: (Handle<IFC2X3.IfcPHMeasure> | IFC2X3.IfcPHMeasure) | null;
		DissolvedSolidsContent: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , IsPotable: boolean | null, Hardness: (Handle<IFC2X3.IfcIonConcentrationMeasure> | IFC2X3.IfcIonConcentrationMeasure) | null, AlkalinityConcentration: (Handle<IFC2X3.IfcIonConcentrationMeasure> | IFC2X3.IfcIonConcentrationMeasure) | null, AcidityConcentration: (Handle<IFC2X3.IfcIonConcentrationMeasure> | IFC2X3.IfcIonConcentrationMeasure) | null, ImpuritiesContent: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, PHLevel: (Handle<IFC2X3.IfcPHMeasure> | IFC2X3.IfcPHMeasure) | null, DissolvedSolidsContent: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null)
		{
			super(expressID,type,Material);
			this.IsPotable = IsPotable;
			this.Hardness = Hardness;
			this.AlkalinityConcentration = AlkalinityConcentration;
			this.AcidityConcentration = AcidityConcentration;
			this.ImpuritiesContent = ImpuritiesContent;
			this.PHLevel = PHLevel;
			this.DissolvedSolidsContent = DissolvedSolidsContent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWaterProperties
		{
			return new IfcWaterProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.IsPotable, this.Hardness, this.AlkalinityConcentration, this.AcidityConcentration, this.ImpuritiesContent, this.PHLevel, this.DissolvedSolidsContent);
			return args;
		}
	}
	export class IfcAnnotationOccurrence extends IFC2X3.IfcStyledItem {
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationOccurrence
		{
			return new IfcAnnotationOccurrence(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcAnnotationSurfaceOccurrence extends IFC2X3.IfcAnnotationOccurrence {
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationSurfaceOccurrence
		{
			return new IfcAnnotationSurfaceOccurrence(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcAnnotationSymbolOccurrence extends IFC2X3.IfcAnnotationOccurrence {
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationSymbolOccurrence
		{
			return new IfcAnnotationSymbolOccurrence(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcAnnotationTextOccurrence extends IFC2X3.IfcAnnotationOccurrence {
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationTextOccurrence
		{
			return new IfcAnnotationTextOccurrence(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcArbitraryClosedProfileDef extends IFC2X3.IfcProfileDef {
		OuterCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, OuterCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) )
		{
			super(expressID,type,ProfileType, ProfileName);
			this.OuterCurve = OuterCurve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryClosedProfileDef
		{
			return new IfcArbitraryClosedProfileDef(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.OuterCurve);
			return args;
		}
	}
	export class IfcArbitraryOpenProfileDef extends IFC2X3.IfcProfileDef {
		Curve: (Handle<IFC2X3.IfcBoundedCurve> | IFC2X3.IfcBoundedCurve) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Curve: (Handle<IFC2X3.IfcBoundedCurve> | IFC2X3.IfcBoundedCurve) )
		{
			super(expressID,type,ProfileType, ProfileName);
			this.Curve = Curve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryOpenProfileDef
		{
			return new IfcArbitraryOpenProfileDef(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Curve);
			return args;
		}
	}
	export class IfcArbitraryProfileDefWithVoids extends IFC2X3.IfcArbitraryClosedProfileDef {
		InnerCurves: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve)[] ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, OuterCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , InnerCurves: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve)[] )
		{
			super(expressID,type,ProfileType, ProfileName, OuterCurve);
			this.InnerCurves = InnerCurves;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryProfileDefWithVoids
		{
			return new IfcArbitraryProfileDefWithVoids(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.OuterCurve, this.InnerCurves);
			return args;
		}
	}
	export class IfcBlobTexture extends IFC2X3.IfcSurfaceTexture {
		RasterFormat: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		RasterCode: boolean ;
		constructor(expressID: number, type: number, RepeatS: boolean , RepeatT: boolean , TextureType: (Handle<IFC2X3.IfcSurfaceTextureEnum> | IFC2X3.IfcSurfaceTextureEnum) , TextureTransform: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) | null, RasterFormat: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , RasterCode: boolean )
		{
			super(expressID,type,RepeatS, RepeatT, TextureType, TextureTransform);
			this.RasterFormat = RasterFormat;
			this.RasterCode = RasterCode;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBlobTexture
		{
			return new IfcBlobTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.TextureType, this.TextureTransform, this.RasterFormat, this.RasterCode);
			return args;
		}
	}
	export class IfcCenterLineProfileDef extends IFC2X3.IfcArbitraryOpenProfileDef {
		Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Curve: (Handle<IFC2X3.IfcBoundedCurve> | IFC2X3.IfcBoundedCurve) , Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Curve);
			this.Thickness = Thickness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCenterLineProfileDef
		{
			return new IfcCenterLineProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Curve, this.Thickness);
			return args;
		}
	}
	export class IfcClassificationReference extends IFC2X3.IfcExternalReference {
		ReferencedSource: (Handle<IFC2X3.IfcClassification> | IFC2X3.IfcClassification) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ReferencedSource: (Handle<IFC2X3.IfcClassification> | IFC2X3.IfcClassification) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
			this.ReferencedSource = ReferencedSource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationReference
		{
			return new IfcClassificationReference(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name, this.ReferencedSource);
			return args;
		}
	}
	export class IfcColourRgb extends IFC2X3.IfcColourSpecification {
		Red: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) ;
		Green: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) ;
		Blue: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Red: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) , Green: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) , Blue: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) )
		{
			super(expressID,type,Name);
			this.Red = Red;
			this.Green = Green;
			this.Blue = Blue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColourRgb
		{
			return new IfcColourRgb(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Red, this.Green, this.Blue);
			return args;
		}
	}
	export class IfcComplexProperty extends IFC2X3.IfcProperty {
		UsageName: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		HasProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, UsageName: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , HasProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] )
		{
			super(expressID,type,Name, Description);
			this.UsageName = UsageName;
			this.HasProperties = HasProperties;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcComplexProperty
		{
			return new IfcComplexProperty(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.UsageName, this.HasProperties);
			return args;
		}
	}
	export class IfcCompositeProfileDef extends IFC2X3.IfcProfileDef {
		Profiles: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef)[] ;
		Label: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Profiles: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef)[] , Label: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,ProfileType, ProfileName);
			this.Profiles = Profiles;
			this.Label = Label;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeProfileDef
		{
			return new IfcCompositeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Profiles, this.Label);
			return args;
		}
	}
	export class IfcConnectedFaceSet extends IFC2X3.IfcTopologicalRepresentationItem {
		CfsFaces: (Handle<IFC2X3.IfcFace> | IFC2X3.IfcFace)[] ;
		constructor(expressID: number, type: number, CfsFaces: (Handle<IFC2X3.IfcFace> | IFC2X3.IfcFace)[] )
		{
			super(expressID,type);
			this.CfsFaces = CfsFaces;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectedFaceSet
		{
			return new IfcConnectedFaceSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CfsFaces);
			return args;
		}
	}
	export class IfcConnectionCurveGeometry extends IFC2X3.IfcConnectionGeometry {
		CurveOnRelatingElement: (Handle<IFC2X3.IfcCurveOrEdgeCurve> | IFC2X3.IfcCurveOrEdgeCurve) ;
		CurveOnRelatedElement: (Handle<IFC2X3.IfcCurveOrEdgeCurve> | IFC2X3.IfcCurveOrEdgeCurve) | null;
		constructor(expressID: number, type: number, CurveOnRelatingElement: (Handle<IFC2X3.IfcCurveOrEdgeCurve> | IFC2X3.IfcCurveOrEdgeCurve) , CurveOnRelatedElement: (Handle<IFC2X3.IfcCurveOrEdgeCurve> | IFC2X3.IfcCurveOrEdgeCurve) | null)
		{
			super(expressID,type);
			this.CurveOnRelatingElement = CurveOnRelatingElement;
			this.CurveOnRelatedElement = CurveOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionCurveGeometry
		{
			return new IfcConnectionCurveGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CurveOnRelatingElement, this.CurveOnRelatedElement);
			return args;
		}
	}
	export class IfcConnectionPointEccentricity extends IFC2X3.IfcConnectionPointGeometry {
		EccentricityInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		EccentricityInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		EccentricityInZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, PointOnRelatingElement: (Handle<IFC2X3.IfcPointOrVertexPoint> | IFC2X3.IfcPointOrVertexPoint) , PointOnRelatedElement: (Handle<IFC2X3.IfcPointOrVertexPoint> | IFC2X3.IfcPointOrVertexPoint) | null, EccentricityInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, EccentricityInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, EccentricityInZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null)
		{
			super(expressID,type,PointOnRelatingElement, PointOnRelatedElement);
			this.EccentricityInX = EccentricityInX;
			this.EccentricityInY = EccentricityInY;
			this.EccentricityInZ = EccentricityInZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPointEccentricity
		{
			return new IfcConnectionPointEccentricity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PointOnRelatingElement, this.PointOnRelatedElement, this.EccentricityInX, this.EccentricityInY, this.EccentricityInZ);
			return args;
		}
	}
	export class IfcContextDependentUnit extends IFC2X3.IfcNamedUnit {
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC2X3.IfcDimensionalExponents> | IFC2X3.IfcDimensionalExponents) , UnitType: (Handle<IFC2X3.IfcUnitEnum> | IFC2X3.IfcUnitEnum) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Dimensions, UnitType);
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcContextDependentUnit
		{
			return new IfcContextDependentUnit(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Name);
			return args;
		}
	}
	export class IfcConversionBasedUnit extends IFC2X3.IfcNamedUnit {
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		ConversionFactor: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC2X3.IfcDimensionalExponents> | IFC2X3.IfcDimensionalExponents) , UnitType: (Handle<IFC2X3.IfcUnitEnum> | IFC2X3.IfcUnitEnum) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , ConversionFactor: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) )
		{
			super(expressID,type,Dimensions, UnitType);
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConversionBasedUnit
		{
			return new IfcConversionBasedUnit(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Name, this.ConversionFactor);
			return args;
		}
	}
	export class IfcCurveStyle extends IFC2X3.IfcPresentationStyle {
		CurveFont: (Handle<IFC2X3.IfcCurveFontOrScaledCurveFontSelect> | IFC2X3.IfcCurveFontOrScaledCurveFontSelect) | null;
		CurveWidth: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null;
		CurveColour: (Handle<IFC2X3.IfcColour> | IFC2X3.IfcColour) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CurveFont: (Handle<IFC2X3.IfcCurveFontOrScaledCurveFontSelect> | IFC2X3.IfcCurveFontOrScaledCurveFontSelect) | null, CurveWidth: (Handle<IFC2X3.IfcSizeSelect> | IFC2X3.IfcSizeSelect) | null, CurveColour: (Handle<IFC2X3.IfcColour> | IFC2X3.IfcColour) | null)
		{
			super(expressID,type,Name);
			this.CurveFont = CurveFont;
			this.CurveWidth = CurveWidth;
			this.CurveColour = CurveColour;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyle
		{
			return new IfcCurveStyle(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.CurveFont, this.CurveWidth, this.CurveColour);
			return args;
		}
	}
	export class IfcDerivedProfileDef extends IFC2X3.IfcProfileDef {
		ParentProfile: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) ;
		Operator: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) ;
		Label: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ParentProfile: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Operator: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) , Label: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,ProfileType, ProfileName);
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedProfileDef
		{
			return new IfcDerivedProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.ParentProfile, this.Operator, this.Label);
			return args;
		}
	}
	export class IfcDimensionCalloutRelationship extends IFC2X3.IfcDraughtingCalloutRelationship {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) , RelatedDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) )
		{
			super(expressID,type,Name, Description, RelatingDraughtingCallout, RelatedDraughtingCallout);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionCalloutRelationship
		{
			return new IfcDimensionCalloutRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingDraughtingCallout, this.RelatedDraughtingCallout);
			return args;
		}
	}
	export class IfcDimensionPair extends IFC2X3.IfcDraughtingCalloutRelationship {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) , RelatedDraughtingCallout: (Handle<IFC2X3.IfcDraughtingCallout> | IFC2X3.IfcDraughtingCallout) )
		{
			super(expressID,type,Name, Description, RelatingDraughtingCallout, RelatedDraughtingCallout);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionPair
		{
			return new IfcDimensionPair(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingDraughtingCallout, this.RelatedDraughtingCallout);
			return args;
		}
	}
	export class IfcDocumentReference extends IFC2X3.IfcExternalReference {
		ReferenceToDocument!: (Handle<IFC2X3.IfcDocumentInformation> | IFC2X3.IfcDocumentInformation)[] | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ItemReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Location, ItemReference, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentReference
		{
			return new IfcDocumentReference(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.ItemReference, this.Name);
			return args;
		}
	}
	export class IfcDraughtingPreDefinedTextFont extends IFC2X3.IfcPreDefinedTextFont {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedTextFont
		{
			return new IfcDraughtingPreDefinedTextFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcEdge extends IFC2X3.IfcTopologicalRepresentationItem {
		EdgeStart: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) ;
		EdgeEnd: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , EdgeEnd: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) )
		{
			super(expressID,type);
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdge
		{
			return new IfcEdge(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd);
			return args;
		}
	}
	export class IfcEdgeCurve extends IFC2X3.IfcEdge {
		EdgeGeometry: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		SameSense: boolean ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , EdgeEnd: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , EdgeGeometry: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , SameSense: boolean )
		{
			super(expressID,type,EdgeStart, EdgeEnd);
			this.EdgeGeometry = EdgeGeometry;
			this.SameSense = SameSense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeCurve
		{
			return new IfcEdgeCurve(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd, this.EdgeGeometry, this.SameSense);
			return args;
		}
	}
	export class IfcExtendedMaterialProperties extends IFC2X3.IfcMaterialProperties {
		ExtendedProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] ;
		Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , ExtendedProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Material);
			this.ExtendedProperties = ExtendedProperties;
			this.Description = Description;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExtendedMaterialProperties
		{
			return new IfcExtendedMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.ExtendedProperties, this.Description, this.Name);
			return args;
		}
	}
	export class IfcFace extends IFC2X3.IfcTopologicalRepresentationItem {
		Bounds: (Handle<IFC2X3.IfcFaceBound> | IFC2X3.IfcFaceBound)[] ;
		constructor(expressID: number, type: number, Bounds: (Handle<IFC2X3.IfcFaceBound> | IFC2X3.IfcFaceBound)[] )
		{
			super(expressID,type);
			this.Bounds = Bounds;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFace
		{
			return new IfcFace(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bounds);
			return args;
		}
	}
	export class IfcFaceBound extends IFC2X3.IfcTopologicalRepresentationItem {
		Bound: (Handle<IFC2X3.IfcLoop> | IFC2X3.IfcLoop) ;
		Orientation: boolean ;
		constructor(expressID: number, type: number, Bound: (Handle<IFC2X3.IfcLoop> | IFC2X3.IfcLoop) , Orientation: boolean )
		{
			super(expressID,type);
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceBound
		{
			return new IfcFaceBound(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bound, this.Orientation);
			return args;
		}
	}
	export class IfcFaceOuterBound extends IFC2X3.IfcFaceBound {
		constructor(expressID: number, type: number, Bound: (Handle<IFC2X3.IfcLoop> | IFC2X3.IfcLoop) , Orientation: boolean )
		{
			super(expressID,type,Bound, Orientation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceOuterBound
		{
			return new IfcFaceOuterBound(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bound, this.Orientation);
			return args;
		}
	}
	export class IfcFaceSurface extends IFC2X3.IfcFace {
		FaceSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) ;
		SameSense: boolean ;
		constructor(expressID: number, type: number, Bounds: (Handle<IFC2X3.IfcFaceBound> | IFC2X3.IfcFaceBound)[] , FaceSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) , SameSense: boolean )
		{
			super(expressID,type,Bounds);
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceSurface
		{
			return new IfcFaceSurface(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bounds, this.FaceSurface, this.SameSense);
			return args;
		}
	}
	export class IfcFailureConnectionCondition extends IFC2X3.IfcStructuralConnectionCondition {
		TensionFailureX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		TensionFailureY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		TensionFailureZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		CompressionFailureX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		CompressionFailureY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		CompressionFailureZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TensionFailureX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, TensionFailureY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, TensionFailureZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, CompressionFailureX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, CompressionFailureY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, CompressionFailureZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null)
		{
			super(expressID,type,Name);
			this.TensionFailureX = TensionFailureX;
			this.TensionFailureY = TensionFailureY;
			this.TensionFailureZ = TensionFailureZ;
			this.CompressionFailureX = CompressionFailureX;
			this.CompressionFailureY = CompressionFailureY;
			this.CompressionFailureZ = CompressionFailureZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFailureConnectionCondition
		{
			return new IfcFailureConnectionCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TensionFailureX, this.TensionFailureY, this.TensionFailureZ, this.CompressionFailureX, this.CompressionFailureY, this.CompressionFailureZ);
			return args;
		}
	}
	export class IfcFillAreaStyle extends IFC2X3.IfcPresentationStyle {
		FillStyles: (Handle<IFC2X3.IfcFillStyleSelect> | IFC2X3.IfcFillStyleSelect)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, FillStyles: (Handle<IFC2X3.IfcFillStyleSelect> | IFC2X3.IfcFillStyleSelect)[] )
		{
			super(expressID,type,Name);
			this.FillStyles = FillStyles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyle
		{
			return new IfcFillAreaStyle(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.FillStyles);
			return args;
		}
	}
	export class IfcFuelProperties extends IFC2X3.IfcMaterialProperties {
		CombustionTemperature: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		CarbonContent: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		LowerHeatingValue: (Handle<IFC2X3.IfcHeatingValueMeasure> | IFC2X3.IfcHeatingValueMeasure) | null;
		HigherHeatingValue: (Handle<IFC2X3.IfcHeatingValueMeasure> | IFC2X3.IfcHeatingValueMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , CombustionTemperature: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, CarbonContent: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, LowerHeatingValue: (Handle<IFC2X3.IfcHeatingValueMeasure> | IFC2X3.IfcHeatingValueMeasure) | null, HigherHeatingValue: (Handle<IFC2X3.IfcHeatingValueMeasure> | IFC2X3.IfcHeatingValueMeasure) | null)
		{
			super(expressID,type,Material);
			this.CombustionTemperature = CombustionTemperature;
			this.CarbonContent = CarbonContent;
			this.LowerHeatingValue = LowerHeatingValue;
			this.HigherHeatingValue = HigherHeatingValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFuelProperties
		{
			return new IfcFuelProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.CombustionTemperature, this.CarbonContent, this.LowerHeatingValue, this.HigherHeatingValue);
			return args;
		}
	}
	export class IfcGeneralMaterialProperties extends IFC2X3.IfcMaterialProperties {
		MolecularWeight: (Handle<IFC2X3.IfcMolecularWeightMeasure> | IFC2X3.IfcMolecularWeightMeasure) | null;
		Porosity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		MassDensity: (Handle<IFC2X3.IfcMassDensityMeasure> | IFC2X3.IfcMassDensityMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , MolecularWeight: (Handle<IFC2X3.IfcMolecularWeightMeasure> | IFC2X3.IfcMolecularWeightMeasure) | null, Porosity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, MassDensity: (Handle<IFC2X3.IfcMassDensityMeasure> | IFC2X3.IfcMassDensityMeasure) | null)
		{
			super(expressID,type,Material);
			this.MolecularWeight = MolecularWeight;
			this.Porosity = Porosity;
			this.MassDensity = MassDensity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeneralMaterialProperties
		{
			return new IfcGeneralMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.MolecularWeight, this.Porosity, this.MassDensity);
			return args;
		}
	}
	export class IfcGeneralProfileProperties extends IFC2X3.IfcProfileProperties {
		PhysicalWeight: (Handle<IFC2X3.IfcMassPerLengthMeasure> | IFC2X3.IfcMassPerLengthMeasure) | null;
		Perimeter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		MinimumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		MaximumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		constructor(expressID: number, type: number, ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ProfileDefinition: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null, PhysicalWeight: (Handle<IFC2X3.IfcMassPerLengthMeasure> | IFC2X3.IfcMassPerLengthMeasure) | null, Perimeter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MinimumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MaximumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null)
		{
			super(expressID,type,ProfileName, ProfileDefinition);
			this.PhysicalWeight = PhysicalWeight;
			this.Perimeter = Perimeter;
			this.MinimumPlateThickness = MinimumPlateThickness;
			this.MaximumPlateThickness = MaximumPlateThickness;
			this.CrossSectionArea = CrossSectionArea;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeneralProfileProperties
		{
			return new IfcGeneralProfileProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileName, this.ProfileDefinition, this.PhysicalWeight, this.Perimeter, this.MinimumPlateThickness, this.MaximumPlateThickness, this.CrossSectionArea);
			return args;
		}
	}
	export class IfcGeometricRepresentationContext extends IFC2X3.IfcRepresentationContext {
		CoordinateSpaceDimension: (Handle<IFC2X3.IfcDimensionCount> | IFC2X3.IfcDimensionCount) ;
		Precision: number | null;
		WorldCoordinateSystem: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		TrueNorth: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		HasSubContexts!: (Handle<IFC2X3.IfcGeometricRepresentationSubContext> | IFC2X3.IfcGeometricRepresentationSubContext)[] | null;
		constructor(expressID: number, type: number, ContextIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ContextType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CoordinateSpaceDimension: (Handle<IFC2X3.IfcDimensionCount> | IFC2X3.IfcDimensionCount) , Precision: number | null, WorldCoordinateSystem: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , TrueNorth: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null)
		{
			super(expressID,type,ContextIdentifier, ContextType);
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationContext
		{
			return new IfcGeometricRepresentationContext(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextIdentifier, this.ContextType, this.CoordinateSpaceDimension, this.Precision, this.WorldCoordinateSystem, this.TrueNorth);
			return args;
		}
	}
	export class IfcGeometricRepresentationItem extends IFC2X3.IfcRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationItem
		{
			return new IfcGeometricRepresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcGeometricRepresentationSubContext extends IFC2X3.IfcGeometricRepresentationContext {
		ParentContext: (Handle<IFC2X3.IfcGeometricRepresentationContext> | IFC2X3.IfcGeometricRepresentationContext) ;
		TargetScale: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		TargetView: (Handle<IFC2X3.IfcGeometricProjectionEnum> | IFC2X3.IfcGeometricProjectionEnum) ;
		UserDefinedTargetView: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, ContextIdentifier: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ContextType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CoordinateSpaceDimension: (Handle<IFC2X3.IfcDimensionCount> | IFC2X3.IfcDimensionCount) , Precision: number | null, WorldCoordinateSystem: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , TrueNorth: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, ParentContext: (Handle<IFC2X3.IfcGeometricRepresentationContext> | IFC2X3.IfcGeometricRepresentationContext) , TargetScale: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, TargetView: (Handle<IFC2X3.IfcGeometricProjectionEnum> | IFC2X3.IfcGeometricProjectionEnum) , UserDefinedTargetView: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth);
			this.ParentContext = ParentContext;
			this.TargetScale = TargetScale;
			this.TargetView = TargetView;
			this.UserDefinedTargetView = UserDefinedTargetView;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationSubContext
		{
			return new IfcGeometricRepresentationSubContext(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextIdentifier, this.ContextType, this.CoordinateSpaceDimension, this.Precision, this.WorldCoordinateSystem, this.TrueNorth, this.ParentContext, this.TargetScale, this.TargetView, this.UserDefinedTargetView);
			return args;
		}
	}
	export class IfcGeometricSet extends IFC2X3.IfcGeometricRepresentationItem {
		Elements: (Handle<IFC2X3.IfcGeometricSetSelect> | IFC2X3.IfcGeometricSetSelect)[] ;
		constructor(expressID: number, type: number, Elements: (Handle<IFC2X3.IfcGeometricSetSelect> | IFC2X3.IfcGeometricSetSelect)[] )
		{
			super(expressID,type);
			this.Elements = Elements;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricSet
		{
			return new IfcGeometricSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Elements);
			return args;
		}
	}
	export class IfcGridPlacement extends IFC2X3.IfcObjectPlacement {
		PlacementLocation: (Handle<IFC2X3.IfcVirtualGridIntersection> | IFC2X3.IfcVirtualGridIntersection) ;
		PlacementRefDirection: (Handle<IFC2X3.IfcVirtualGridIntersection> | IFC2X3.IfcVirtualGridIntersection) | null;
		constructor(expressID: number, type: number, PlacementLocation: (Handle<IFC2X3.IfcVirtualGridIntersection> | IFC2X3.IfcVirtualGridIntersection) , PlacementRefDirection: (Handle<IFC2X3.IfcVirtualGridIntersection> | IFC2X3.IfcVirtualGridIntersection) | null)
		{
			super(expressID,type);
			this.PlacementLocation = PlacementLocation;
			this.PlacementRefDirection = PlacementRefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGridPlacement
		{
			return new IfcGridPlacement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PlacementLocation, this.PlacementRefDirection);
			return args;
		}
	}
	export class IfcHalfSpaceSolid extends IFC2X3.IfcGeometricRepresentationItem {
		BaseSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) ;
		AgreementFlag: boolean ;
		constructor(expressID: number, type: number, BaseSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) , AgreementFlag: boolean )
		{
			super(expressID,type);
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHalfSpaceSolid
		{
			return new IfcHalfSpaceSolid(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BaseSurface, this.AgreementFlag);
			return args;
		}
	}
	export class IfcHygroscopicMaterialProperties extends IFC2X3.IfcMaterialProperties {
		UpperVaporResistanceFactor: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		LowerVaporResistanceFactor: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		IsothermalMoistureCapacity: (Handle<IFC2X3.IfcIsothermalMoistureCapacityMeasure> | IFC2X3.IfcIsothermalMoistureCapacityMeasure) | null;
		VaporPermeability: (Handle<IFC2X3.IfcVaporPermeabilityMeasure> | IFC2X3.IfcVaporPermeabilityMeasure) | null;
		MoistureDiffusivity: (Handle<IFC2X3.IfcMoistureDiffusivityMeasure> | IFC2X3.IfcMoistureDiffusivityMeasure) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , UpperVaporResistanceFactor: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, LowerVaporResistanceFactor: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, IsothermalMoistureCapacity: (Handle<IFC2X3.IfcIsothermalMoistureCapacityMeasure> | IFC2X3.IfcIsothermalMoistureCapacityMeasure) | null, VaporPermeability: (Handle<IFC2X3.IfcVaporPermeabilityMeasure> | IFC2X3.IfcVaporPermeabilityMeasure) | null, MoistureDiffusivity: (Handle<IFC2X3.IfcMoistureDiffusivityMeasure> | IFC2X3.IfcMoistureDiffusivityMeasure) | null)
		{
			super(expressID,type,Material);
			this.UpperVaporResistanceFactor = UpperVaporResistanceFactor;
			this.LowerVaporResistanceFactor = LowerVaporResistanceFactor;
			this.IsothermalMoistureCapacity = IsothermalMoistureCapacity;
			this.VaporPermeability = VaporPermeability;
			this.MoistureDiffusivity = MoistureDiffusivity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHygroscopicMaterialProperties
		{
			return new IfcHygroscopicMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.UpperVaporResistanceFactor, this.LowerVaporResistanceFactor, this.IsothermalMoistureCapacity, this.VaporPermeability, this.MoistureDiffusivity);
			return args;
		}
	}
	export class IfcImageTexture extends IFC2X3.IfcSurfaceTexture {
		UrlReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		constructor(expressID: number, type: number, RepeatS: boolean , RepeatT: boolean , TextureType: (Handle<IFC2X3.IfcSurfaceTextureEnum> | IFC2X3.IfcSurfaceTextureEnum) , TextureTransform: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) | null, UrlReference: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) )
		{
			super(expressID,type,RepeatS, RepeatT, TextureType, TextureTransform);
			this.UrlReference = UrlReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcImageTexture
		{
			return new IfcImageTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.TextureType, this.TextureTransform, this.UrlReference);
			return args;
		}
	}
	export class IfcIrregularTimeSeries extends IFC2X3.IfcTimeSeries {
		Values: (Handle<IFC2X3.IfcIrregularTimeSeriesValue> | IFC2X3.IfcIrregularTimeSeriesValue)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , EndTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , TimeSeriesDataType: (Handle<IFC2X3.IfcTimeSeriesDataTypeEnum> | IFC2X3.IfcTimeSeriesDataTypeEnum) , DataOrigin: (Handle<IFC2X3.IfcDataOriginEnum> | IFC2X3.IfcDataOriginEnum) , UserDefinedDataOrigin: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null, Values: (Handle<IFC2X3.IfcIrregularTimeSeriesValue> | IFC2X3.IfcIrregularTimeSeriesValue)[] )
		{
			super(expressID,type,Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit);
			this.Values = Values;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIrregularTimeSeries
		{
			return new IfcIrregularTimeSeries(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.StartTime, this.EndTime, this.TimeSeriesDataType, this.DataOrigin, this.UserDefinedDataOrigin, this.Unit, this.Values);
			return args;
		}
	}
	export class IfcLightSource extends IFC2X3.IfcGeometricRepresentationItem {
		Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) ;
		AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSource
		{
			return new IfcLightSource(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity);
			return args;
		}
	}
	export class IfcLightSourceAmbient extends IFC2X3.IfcLightSource {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null)
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceAmbient
		{
			return new IfcLightSourceAmbient(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity);
			return args;
		}
	}
	export class IfcLightSourceDirectional extends IFC2X3.IfcLightSource {
		Orientation: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Orientation: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
			this.Orientation = Orientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceDirectional
		{
			return new IfcLightSourceDirectional(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Orientation);
			return args;
		}
	}
	export class IfcLightSourceGoniometric extends IFC2X3.IfcLightSource {
		Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) ;
		ColourAppearance: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) | null;
		ColourTemperature: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) ;
		LuminousFlux: (Handle<IFC2X3.IfcLuminousFluxMeasure> | IFC2X3.IfcLuminousFluxMeasure) ;
		LightEmissionSource: (Handle<IFC2X3.IfcLightEmissionSourceEnum> | IFC2X3.IfcLightEmissionSourceEnum) ;
		LightDistributionDataSource: (Handle<IFC2X3.IfcLightDistributionDataSourceSelect> | IFC2X3.IfcLightDistributionDataSourceSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , ColourAppearance: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) | null, ColourTemperature: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) , LuminousFlux: (Handle<IFC2X3.IfcLuminousFluxMeasure> | IFC2X3.IfcLuminousFluxMeasure) , LightEmissionSource: (Handle<IFC2X3.IfcLightEmissionSourceEnum> | IFC2X3.IfcLightEmissionSourceEnum) , LightDistributionDataSource: (Handle<IFC2X3.IfcLightDistributionDataSourceSelect> | IFC2X3.IfcLightDistributionDataSourceSelect) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
			this.Position = Position;
			this.ColourAppearance = ColourAppearance;
			this.ColourTemperature = ColourTemperature;
			this.LuminousFlux = LuminousFlux;
			this.LightEmissionSource = LightEmissionSource;
			this.LightDistributionDataSource = LightDistributionDataSource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceGoniometric
		{
			return new IfcLightSourceGoniometric(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Position, this.ColourAppearance, this.ColourTemperature, this.LuminousFlux, this.LightEmissionSource, this.LightDistributionDataSource);
			return args;
		}
	}
	export class IfcLightSourcePositional extends IFC2X3.IfcLightSource {
		Position: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) ;
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		ConstantAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) ;
		DistanceAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) ;
		QuadricAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Position: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , ConstantAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) , DistanceAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) , QuadricAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourcePositional
		{
			return new IfcLightSourcePositional(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Position, this.Radius, this.ConstantAttenuation, this.DistanceAttenuation, this.QuadricAttenuation);
			return args;
		}
	}
	export class IfcLightSourceSpot extends IFC2X3.IfcLightSourcePositional {
		Orientation: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) ;
		ConcentrationExponent: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) | null;
		SpreadAngle: (Handle<IFC2X3.IfcPositivePlaneAngleMeasure> | IFC2X3.IfcPositivePlaneAngleMeasure) ;
		BeamWidthAngle: (Handle<IFC2X3.IfcPositivePlaneAngleMeasure> | IFC2X3.IfcPositivePlaneAngleMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LightColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , AmbientIntensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, Position: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , ConstantAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) , DistanceAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) , QuadricAttenuation: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) , Orientation: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) , ConcentrationExponent: (Handle<IFC2X3.IfcReal> | IFC2X3.IfcReal) | null, SpreadAngle: (Handle<IFC2X3.IfcPositivePlaneAngleMeasure> | IFC2X3.IfcPositivePlaneAngleMeasure) , BeamWidthAngle: (Handle<IFC2X3.IfcPositivePlaneAngleMeasure> | IFC2X3.IfcPositivePlaneAngleMeasure) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation);
			this.Orientation = Orientation;
			this.ConcentrationExponent = ConcentrationExponent;
			this.SpreadAngle = SpreadAngle;
			this.BeamWidthAngle = BeamWidthAngle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceSpot
		{
			return new IfcLightSourceSpot(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Position, this.Radius, this.ConstantAttenuation, this.DistanceAttenuation, this.QuadricAttenuation, this.Orientation, this.ConcentrationExponent, this.SpreadAngle, this.BeamWidthAngle);
			return args;
		}
	}
	export class IfcLocalPlacement extends IFC2X3.IfcObjectPlacement {
		PlacementRelTo: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null;
		RelativePlacement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		constructor(expressID: number, type: number, PlacementRelTo: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, RelativePlacement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) )
		{
			super(expressID,type);
			this.PlacementRelTo = PlacementRelTo;
			this.RelativePlacement = RelativePlacement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLocalPlacement
		{
			return new IfcLocalPlacement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PlacementRelTo, this.RelativePlacement);
			return args;
		}
	}
	export class IfcLoop extends IFC2X3.IfcTopologicalRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLoop
		{
			return new IfcLoop(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcMappedItem extends IFC2X3.IfcRepresentationItem {
		MappingSource: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap) ;
		MappingTarget: (Handle<IFC2X3.IfcCartesianTransformationOperator> | IFC2X3.IfcCartesianTransformationOperator) ;
		constructor(expressID: number, type: number, MappingSource: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap) , MappingTarget: (Handle<IFC2X3.IfcCartesianTransformationOperator> | IFC2X3.IfcCartesianTransformationOperator) )
		{
			super(expressID,type);
			this.MappingSource = MappingSource;
			this.MappingTarget = MappingTarget;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMappedItem
		{
			return new IfcMappedItem(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MappingSource, this.MappingTarget);
			return args;
		}
	}
	export class IfcMaterialDefinitionRepresentation extends IFC2X3.IfcProductRepresentation {
		RepresentedMaterial: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Representations: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation)[] , RepresentedMaterial: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) )
		{
			super(expressID,type,Name, Description, Representations);
			this.RepresentedMaterial = RepresentedMaterial;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialDefinitionRepresentation
		{
			return new IfcMaterialDefinitionRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Representations, this.RepresentedMaterial);
			return args;
		}
	}
	export class IfcMechanicalConcreteMaterialProperties extends IFC2X3.IfcMechanicalMaterialProperties {
		CompressiveStrength: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null;
		MaxAggregateSize: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		AdmixturesDescription: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		Workability: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		ProtectivePoreRatio: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		WaterImpermeability: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , DynamicViscosity: (Handle<IFC2X3.IfcDynamicViscosityMeasure> | IFC2X3.IfcDynamicViscosityMeasure) | null, YoungModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, ShearModulus: (Handle<IFC2X3.IfcModulusOfElasticityMeasure> | IFC2X3.IfcModulusOfElasticityMeasure) | null, PoissonRatio: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalExpansionCoefficient: (Handle<IFC2X3.IfcThermalExpansionCoefficientMeasure> | IFC2X3.IfcThermalExpansionCoefficientMeasure) | null, CompressiveStrength: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null, MaxAggregateSize: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, AdmixturesDescription: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Workability: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ProtectivePoreRatio: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, WaterImpermeability: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,Material, DynamicViscosity, YoungModulus, ShearModulus, PoissonRatio, ThermalExpansionCoefficient);
			this.CompressiveStrength = CompressiveStrength;
			this.MaxAggregateSize = MaxAggregateSize;
			this.AdmixturesDescription = AdmixturesDescription;
			this.Workability = Workability;
			this.ProtectivePoreRatio = ProtectivePoreRatio;
			this.WaterImpermeability = WaterImpermeability;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalConcreteMaterialProperties
		{
			return new IfcMechanicalConcreteMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.DynamicViscosity, this.YoungModulus, this.ShearModulus, this.PoissonRatio, this.ThermalExpansionCoefficient, this.CompressiveStrength, this.MaxAggregateSize, this.AdmixturesDescription, this.Workability, this.ProtectivePoreRatio, this.WaterImpermeability);
			return args;
		}
	}
	export class IfcObjectDefinition extends IFC2X3.IfcRoot {
		HasAssignments!: (Handle<IFC2X3.IfcRelAssigns> | IFC2X3.IfcRelAssigns)[] | null;
		IsDecomposedBy!: (Handle<IFC2X3.IfcRelDecomposes> | IFC2X3.IfcRelDecomposes)[] | null;
		Decomposes!: (Handle<IFC2X3.IfcRelDecomposes> | IFC2X3.IfcRelDecomposes)[] | null;
		HasAssociations!: (Handle<IFC2X3.IfcRelAssociates> | IFC2X3.IfcRelAssociates)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObjectDefinition
		{
			return new IfcObjectDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcOneDirectionRepeatFactor extends IFC2X3.IfcGeometricRepresentationItem {
		RepeatFactor: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) ;
		constructor(expressID: number, type: number, RepeatFactor: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) )
		{
			super(expressID,type);
			this.RepeatFactor = RepeatFactor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOneDirectionRepeatFactor
		{
			return new IfcOneDirectionRepeatFactor(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatFactor);
			return args;
		}
	}
	export class IfcOpenShell extends IFC2X3.IfcConnectedFaceSet {
		constructor(expressID: number, type: number, CfsFaces: (Handle<IFC2X3.IfcFace> | IFC2X3.IfcFace)[] )
		{
			super(expressID,type,CfsFaces);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOpenShell
		{
			return new IfcOpenShell(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CfsFaces);
			return args;
		}
	}
	export class IfcOrientedEdge extends IFC2X3.IfcEdge {
		EdgeElement: (Handle<IFC2X3.IfcEdge> | IFC2X3.IfcEdge) ;
		Orientation: boolean ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , EdgeEnd: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , EdgeElement: (Handle<IFC2X3.IfcEdge> | IFC2X3.IfcEdge) , Orientation: boolean )
		{
			super(expressID,type,EdgeStart, EdgeEnd);
			this.EdgeElement = EdgeElement;
			this.Orientation = Orientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrientedEdge
		{
			return new IfcOrientedEdge(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd, this.EdgeElement, this.Orientation);
			return args;
		}
	}
	export class IfcParameterizedProfileDef extends IFC2X3.IfcProfileDef {
		Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) )
		{
			super(expressID,type,ProfileType, ProfileName);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcParameterizedProfileDef
		{
			return new IfcParameterizedProfileDef(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position);
			return args;
		}
	}
	export class IfcPath extends IFC2X3.IfcTopologicalRepresentationItem {
		EdgeList: (Handle<IFC2X3.IfcOrientedEdge> | IFC2X3.IfcOrientedEdge)[] ;
		constructor(expressID: number, type: number, EdgeList: (Handle<IFC2X3.IfcOrientedEdge> | IFC2X3.IfcOrientedEdge)[] )
		{
			super(expressID,type);
			this.EdgeList = EdgeList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPath
		{
			return new IfcPath(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeList);
			return args;
		}
	}
	export class IfcPhysicalComplexQuantity extends IFC2X3.IfcPhysicalQuantity {
		HasQuantities: (Handle<IFC2X3.IfcPhysicalQuantity> | IFC2X3.IfcPhysicalQuantity)[] ;
		Discrimination: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		Quality: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Usage: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, HasQuantities: (Handle<IFC2X3.IfcPhysicalQuantity> | IFC2X3.IfcPhysicalQuantity)[] , Discrimination: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Quality: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Usage: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Name, Description);
			this.HasQuantities = HasQuantities;
			this.Discrimination = Discrimination;
			this.Quality = Quality;
			this.Usage = Usage;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalComplexQuantity
		{
			return new IfcPhysicalComplexQuantity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.HasQuantities, this.Discrimination, this.Quality, this.Usage);
			return args;
		}
	}
	export class IfcPixelTexture extends IFC2X3.IfcSurfaceTexture {
		Width: (Handle<IFC2X3.IfcInteger> | IFC2X3.IfcInteger) ;
		Height: (Handle<IFC2X3.IfcInteger> | IFC2X3.IfcInteger) ;
		ColourComponents: (Handle<IFC2X3.IfcInteger> | IFC2X3.IfcInteger) ;
		Pixel: number[] ;
		constructor(expressID: number, type: number, RepeatS: boolean , RepeatT: boolean , TextureType: (Handle<IFC2X3.IfcSurfaceTextureEnum> | IFC2X3.IfcSurfaceTextureEnum) , TextureTransform: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) | null, Width: (Handle<IFC2X3.IfcInteger> | IFC2X3.IfcInteger) , Height: (Handle<IFC2X3.IfcInteger> | IFC2X3.IfcInteger) , ColourComponents: (Handle<IFC2X3.IfcInteger> | IFC2X3.IfcInteger) , Pixel: number[] )
		{
			super(expressID,type,RepeatS, RepeatT, TextureType, TextureTransform);
			this.Width = Width;
			this.Height = Height;
			this.ColourComponents = ColourComponents;
			this.Pixel = Pixel;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPixelTexture
		{
			return new IfcPixelTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.TextureType, this.TextureTransform, this.Width, this.Height, this.ColourComponents, this.Pixel);
			return args;
		}
	}
	export class IfcPlacement extends IFC2X3.IfcGeometricRepresentationItem {
		Location: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) ;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) )
		{
			super(expressID,type);
			this.Location = Location;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlacement
		{
			return new IfcPlacement(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location);
			return args;
		}
	}
	export class IfcPlanarExtent extends IFC2X3.IfcGeometricRepresentationItem {
		SizeInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		SizeInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, SizeInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , SizeInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) )
		{
			super(expressID,type);
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlanarExtent
		{
			return new IfcPlanarExtent(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SizeInX, this.SizeInY);
			return args;
		}
	}
	export class IfcPoint extends IFC2X3.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPoint
		{
			return new IfcPoint(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcPointOnCurve extends IFC2X3.IfcPoint {
		BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		PointParameter: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , PointParameter: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.PointParameter = PointParameter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPointOnCurve
		{
			return new IfcPointOnCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.PointParameter);
			return args;
		}
	}
	export class IfcPointOnSurface extends IFC2X3.IfcPoint {
		BasisSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) ;
		PointParameterU: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		PointParameterV: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) , PointParameterU: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , PointParameterV: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.PointParameterU = PointParameterU;
			this.PointParameterV = PointParameterV;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPointOnSurface
		{
			return new IfcPointOnSurface(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.PointParameterU, this.PointParameterV);
			return args;
		}
	}
	export class IfcPolyLoop extends IFC2X3.IfcLoop {
		Polygon: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] ;
		constructor(expressID: number, type: number, Polygon: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] )
		{
			super(expressID,type);
			this.Polygon = Polygon;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolyLoop
		{
			return new IfcPolyLoop(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Polygon);
			return args;
		}
	}
	export class IfcPolygonalBoundedHalfSpace extends IFC2X3.IfcHalfSpaceSolid {
		Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) ;
		PolygonalBoundary: (Handle<IFC2X3.IfcBoundedCurve> | IFC2X3.IfcBoundedCurve) ;
		constructor(expressID: number, type: number, BaseSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) , AgreementFlag: boolean , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , PolygonalBoundary: (Handle<IFC2X3.IfcBoundedCurve> | IFC2X3.IfcBoundedCurve) )
		{
			super(expressID,type,BaseSurface, AgreementFlag);
			this.Position = Position;
			this.PolygonalBoundary = PolygonalBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolygonalBoundedHalfSpace
		{
			return new IfcPolygonalBoundedHalfSpace(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BaseSurface, this.AgreementFlag, this.Position, this.PolygonalBoundary);
			return args;
		}
	}
	export class IfcPreDefinedColour extends IFC2X3.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedColour
		{
			return new IfcPreDefinedColour(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedCurveFont extends IFC2X3.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedCurveFont
		{
			return new IfcPreDefinedCurveFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedDimensionSymbol extends IFC2X3.IfcPreDefinedSymbol {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedDimensionSymbol
		{
			return new IfcPreDefinedDimensionSymbol(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedPointMarkerSymbol extends IFC2X3.IfcPreDefinedSymbol {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedPointMarkerSymbol
		{
			return new IfcPreDefinedPointMarkerSymbol(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcProductDefinitionShape extends IFC2X3.IfcProductRepresentation {
		ShapeOfProduct!: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct)[] | null;
		HasShapeAspects!: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, Representations: (Handle<IFC2X3.IfcRepresentation> | IFC2X3.IfcRepresentation)[] )
		{
			super(expressID,type,Name, Description, Representations);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProductDefinitionShape
		{
			return new IfcProductDefinitionShape(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Representations);
			return args;
		}
	}
	export class IfcPropertyBoundedValue extends IFC2X3.IfcSimpleProperty {
		UpperBoundValue: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) | null;
		LowerBoundValue: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) | null;
		Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, UpperBoundValue: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) | null, LowerBoundValue: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) | null, Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.UpperBoundValue = UpperBoundValue;
			this.LowerBoundValue = LowerBoundValue;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyBoundedValue
		{
			return new IfcPropertyBoundedValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.UpperBoundValue, this.LowerBoundValue, this.Unit);
			return args;
		}
	}
	export class IfcPropertyDefinition extends IFC2X3.IfcRoot {
		HasAssociations!: (Handle<IFC2X3.IfcRelAssociates> | IFC2X3.IfcRelAssociates)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyDefinition
		{
			return new IfcPropertyDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertyEnumeratedValue extends IFC2X3.IfcSimpleProperty {
		EnumerationValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		EnumerationReference: (Handle<IFC2X3.IfcPropertyEnumeration> | IFC2X3.IfcPropertyEnumeration) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, EnumerationValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] , EnumerationReference: (Handle<IFC2X3.IfcPropertyEnumeration> | IFC2X3.IfcPropertyEnumeration) | null)
		{
			super(expressID,type,Name, Description);
			this.EnumerationValues = EnumerationValues;
			this.EnumerationReference = EnumerationReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyEnumeratedValue
		{
			return new IfcPropertyEnumeratedValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.EnumerationValues, this.EnumerationReference);
			return args;
		}
	}
	export class IfcPropertyListValue extends IFC2X3.IfcSimpleProperty {
		ListValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ListValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] , Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.ListValues = ListValues;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyListValue
		{
			return new IfcPropertyListValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ListValues, this.Unit);
			return args;
		}
	}
	export class IfcPropertyReferenceValue extends IFC2X3.IfcSimpleProperty {
		UsageName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		PropertyReference: (Handle<IFC2X3.IfcObjectReferenceSelect> | IFC2X3.IfcObjectReferenceSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, UsageName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PropertyReference: (Handle<IFC2X3.IfcObjectReferenceSelect> | IFC2X3.IfcObjectReferenceSelect) )
		{
			super(expressID,type,Name, Description);
			this.UsageName = UsageName;
			this.PropertyReference = PropertyReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyReferenceValue
		{
			return new IfcPropertyReferenceValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.UsageName, this.PropertyReference);
			return args;
		}
	}
	export class IfcPropertySetDefinition extends IFC2X3.IfcPropertyDefinition {
		PropertyDefinitionOf!: (Handle<IFC2X3.IfcRelDefinesByProperties> | IFC2X3.IfcRelDefinesByProperties)[] | null;
		DefinesType!: (Handle<IFC2X3.IfcTypeObject> | IFC2X3.IfcTypeObject)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySetDefinition
		{
			return new IfcPropertySetDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertySingleValue extends IFC2X3.IfcSimpleProperty {
		NominalValue: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) | null;
		Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, NominalValue: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue) | null, Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.NominalValue = NominalValue;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySingleValue
		{
			return new IfcPropertySingleValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.NominalValue, this.Unit);
			return args;
		}
	}
	export class IfcPropertyTableValue extends IFC2X3.IfcSimpleProperty {
		DefiningValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		DefinedValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] ;
		Expression: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		DefiningUnit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		DefinedUnit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, DefiningValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] , DefinedValues: (Handle<IFC2X3.IfcValue> | IFC2X3.IfcValue)[] , Expression: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, DefiningUnit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null, DefinedUnit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.DefiningValues = DefiningValues;
			this.DefinedValues = DefinedValues;
			this.Expression = Expression;
			this.DefiningUnit = DefiningUnit;
			this.DefinedUnit = DefinedUnit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTableValue
		{
			return new IfcPropertyTableValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.DefiningValues, this.DefinedValues, this.Expression, this.DefiningUnit, this.DefinedUnit);
			return args;
		}
	}
	export class IfcRectangleProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		XDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , XDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.XDim = XDim;
			this.YDim = YDim;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangleProfileDef
		{
			return new IfcRectangleProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.XDim, this.YDim);
			return args;
		}
	}
	export class IfcRegularTimeSeries extends IFC2X3.IfcTimeSeries {
		TimeStep: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) ;
		Values: (Handle<IFC2X3.IfcTimeSeriesValue> | IFC2X3.IfcTimeSeriesValue)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , EndTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , TimeSeriesDataType: (Handle<IFC2X3.IfcTimeSeriesDataTypeEnum> | IFC2X3.IfcTimeSeriesDataTypeEnum) , DataOrigin: (Handle<IFC2X3.IfcDataOriginEnum> | IFC2X3.IfcDataOriginEnum) , UserDefinedDataOrigin: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Unit: (Handle<IFC2X3.IfcUnit> | IFC2X3.IfcUnit) | null, TimeStep: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) , Values: (Handle<IFC2X3.IfcTimeSeriesValue> | IFC2X3.IfcTimeSeriesValue)[] )
		{
			super(expressID,type,Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit);
			this.TimeStep = TimeStep;
			this.Values = Values;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRegularTimeSeries
		{
			return new IfcRegularTimeSeries(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.StartTime, this.EndTime, this.TimeSeriesDataType, this.DataOrigin, this.UserDefinedDataOrigin, this.Unit, this.TimeStep, this.Values);
			return args;
		}
	}
	export class IfcReinforcementDefinitionProperties extends IFC2X3.IfcPropertySetDefinition {
		DefinitionType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ReinforcementSectionDefinitions: (Handle<IFC2X3.IfcSectionReinforcementProperties> | IFC2X3.IfcSectionReinforcementProperties)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, DefinitionType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ReinforcementSectionDefinitions: (Handle<IFC2X3.IfcSectionReinforcementProperties> | IFC2X3.IfcSectionReinforcementProperties)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.DefinitionType = DefinitionType;
			this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcementDefinitionProperties
		{
			return new IfcReinforcementDefinitionProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.DefinitionType, this.ReinforcementSectionDefinitions);
			return args;
		}
	}
	export class IfcRelationship extends IFC2X3.IfcRoot {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelationship
		{
			return new IfcRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcRoundedRectangleProfileDef extends IFC2X3.IfcRectangleProfileDef {
		RoundingRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , XDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , RoundingRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position, XDim, YDim);
			this.RoundingRadius = RoundingRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoundedRectangleProfileDef
		{
			return new IfcRoundedRectangleProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.XDim, this.YDim, this.RoundingRadius);
			return args;
		}
	}
	export class IfcSectionedSpine extends IFC2X3.IfcGeometricRepresentationItem {
		SpineCurve: (Handle<IFC2X3.IfcCompositeCurve> | IFC2X3.IfcCompositeCurve) ;
		CrossSections: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef)[] ;
		CrossSectionPositions: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D)[] ;
		constructor(expressID: number, type: number, SpineCurve: (Handle<IFC2X3.IfcCompositeCurve> | IFC2X3.IfcCompositeCurve) , CrossSections: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef)[] , CrossSectionPositions: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D)[] )
		{
			super(expressID,type);
			this.SpineCurve = SpineCurve;
			this.CrossSections = CrossSections;
			this.CrossSectionPositions = CrossSectionPositions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSectionedSpine
		{
			return new IfcSectionedSpine(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SpineCurve, this.CrossSections, this.CrossSectionPositions);
			return args;
		}
	}
	export class IfcServiceLifeFactor extends IFC2X3.IfcPropertySetDefinition {
		PredefinedType: (Handle<IFC2X3.IfcServiceLifeFactorTypeEnum> | IFC2X3.IfcServiceLifeFactorTypeEnum) ;
		UpperValue: (Handle<IFC2X3.IfcMeasureValue> | IFC2X3.IfcMeasureValue) | null;
		MostUsedValue: (Handle<IFC2X3.IfcMeasureValue> | IFC2X3.IfcMeasureValue) ;
		LowerValue: (Handle<IFC2X3.IfcMeasureValue> | IFC2X3.IfcMeasureValue) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, PredefinedType: (Handle<IFC2X3.IfcServiceLifeFactorTypeEnum> | IFC2X3.IfcServiceLifeFactorTypeEnum) , UpperValue: (Handle<IFC2X3.IfcMeasureValue> | IFC2X3.IfcMeasureValue) | null, MostUsedValue: (Handle<IFC2X3.IfcMeasureValue> | IFC2X3.IfcMeasureValue) , LowerValue: (Handle<IFC2X3.IfcMeasureValue> | IFC2X3.IfcMeasureValue) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.PredefinedType = PredefinedType;
			this.UpperValue = UpperValue;
			this.MostUsedValue = MostUsedValue;
			this.LowerValue = LowerValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcServiceLifeFactor
		{
			return new IfcServiceLifeFactor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.PredefinedType, this.UpperValue, this.MostUsedValue, this.LowerValue);
			return args;
		}
	}
	export class IfcShellBasedSurfaceModel extends IFC2X3.IfcGeometricRepresentationItem {
		SbsmBoundary: (Handle<IFC2X3.IfcShell> | IFC2X3.IfcShell)[] ;
		constructor(expressID: number, type: number, SbsmBoundary: (Handle<IFC2X3.IfcShell> | IFC2X3.IfcShell)[] )
		{
			super(expressID,type);
			this.SbsmBoundary = SbsmBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShellBasedSurfaceModel
		{
			return new IfcShellBasedSurfaceModel(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SbsmBoundary);
			return args;
		}
	}
	export class IfcSlippageConnectionCondition extends IFC2X3.IfcStructuralConnectionCondition {
		SlippageX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		SlippageY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		SlippageZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, SlippageX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, SlippageY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, SlippageZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null)
		{
			super(expressID,type,Name);
			this.SlippageX = SlippageX;
			this.SlippageY = SlippageY;
			this.SlippageZ = SlippageZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlippageConnectionCondition
		{
			return new IfcSlippageConnectionCondition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.SlippageX, this.SlippageY, this.SlippageZ);
			return args;
		}
	}
	export class IfcSolidModel extends IFC2X3.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSolidModel
		{
			return new IfcSolidModel(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcSoundProperties extends IFC2X3.IfcPropertySetDefinition {
		IsAttenuating: (Handle<IFC2X3.IfcBoolean> | IFC2X3.IfcBoolean) ;
		SoundScale: (Handle<IFC2X3.IfcSoundScaleEnum> | IFC2X3.IfcSoundScaleEnum) | null;
		SoundValues: (Handle<IFC2X3.IfcSoundValue> | IFC2X3.IfcSoundValue)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, IsAttenuating: (Handle<IFC2X3.IfcBoolean> | IFC2X3.IfcBoolean) , SoundScale: (Handle<IFC2X3.IfcSoundScaleEnum> | IFC2X3.IfcSoundScaleEnum) | null, SoundValues: (Handle<IFC2X3.IfcSoundValue> | IFC2X3.IfcSoundValue)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.IsAttenuating = IsAttenuating;
			this.SoundScale = SoundScale;
			this.SoundValues = SoundValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSoundProperties
		{
			return new IfcSoundProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.IsAttenuating, this.SoundScale, this.SoundValues);
			return args;
		}
	}
	export class IfcSoundValue extends IFC2X3.IfcPropertySetDefinition {
		SoundLevelTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		Frequency: (Handle<IFC2X3.IfcFrequencyMeasure> | IFC2X3.IfcFrequencyMeasure) ;
		SoundLevelSingleValue: (Handle<IFC2X3.IfcDerivedMeasureValue> | IFC2X3.IfcDerivedMeasureValue) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, SoundLevelTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, Frequency: (Handle<IFC2X3.IfcFrequencyMeasure> | IFC2X3.IfcFrequencyMeasure) , SoundLevelSingleValue: (Handle<IFC2X3.IfcDerivedMeasureValue> | IFC2X3.IfcDerivedMeasureValue) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.SoundLevelTimeSeries = SoundLevelTimeSeries;
			this.Frequency = Frequency;
			this.SoundLevelSingleValue = SoundLevelSingleValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSoundValue
		{
			return new IfcSoundValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.SoundLevelTimeSeries, this.Frequency, this.SoundLevelSingleValue);
			return args;
		}
	}
	export class IfcSpaceThermalLoadProperties extends IFC2X3.IfcPropertySetDefinition {
		ApplicableValueRatio: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		ThermalLoadSource: (Handle<IFC2X3.IfcThermalLoadSourceEnum> | IFC2X3.IfcThermalLoadSourceEnum) ;
		PropertySource: (Handle<IFC2X3.IfcPropertySourceEnum> | IFC2X3.IfcPropertySourceEnum) ;
		SourceDescription: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		MaximumValue: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) ;
		MinimumValue: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) | null;
		ThermalLoadTimeSeriesValues: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		UserDefinedThermalLoadSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		UserDefinedPropertySource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ThermalLoadType: (Handle<IFC2X3.IfcThermalLoadTypeEnum> | IFC2X3.IfcThermalLoadTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableValueRatio: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, ThermalLoadSource: (Handle<IFC2X3.IfcThermalLoadSourceEnum> | IFC2X3.IfcThermalLoadSourceEnum) , PropertySource: (Handle<IFC2X3.IfcPropertySourceEnum> | IFC2X3.IfcPropertySourceEnum) , SourceDescription: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, MaximumValue: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) , MinimumValue: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) | null, ThermalLoadTimeSeriesValues: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, UserDefinedThermalLoadSource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, UserDefinedPropertySource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ThermalLoadType: (Handle<IFC2X3.IfcThermalLoadTypeEnum> | IFC2X3.IfcThermalLoadTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ApplicableValueRatio = ApplicableValueRatio;
			this.ThermalLoadSource = ThermalLoadSource;
			this.PropertySource = PropertySource;
			this.SourceDescription = SourceDescription;
			this.MaximumValue = MaximumValue;
			this.MinimumValue = MinimumValue;
			this.ThermalLoadTimeSeriesValues = ThermalLoadTimeSeriesValues;
			this.UserDefinedThermalLoadSource = UserDefinedThermalLoadSource;
			this.UserDefinedPropertySource = UserDefinedPropertySource;
			this.ThermalLoadType = ThermalLoadType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceThermalLoadProperties
		{
			return new IfcSpaceThermalLoadProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableValueRatio, this.ThermalLoadSource, this.PropertySource, this.SourceDescription, this.MaximumValue, this.MinimumValue, this.ThermalLoadTimeSeriesValues, this.UserDefinedThermalLoadSource, this.UserDefinedPropertySource, this.ThermalLoadType);
			return args;
		}
	}
	export class IfcStructuralLoadLinearForce extends IFC2X3.IfcStructuralLoadStatic {
		LinearForceX: (Handle<IFC2X3.IfcLinearForceMeasure> | IFC2X3.IfcLinearForceMeasure) | null;
		LinearForceY: (Handle<IFC2X3.IfcLinearForceMeasure> | IFC2X3.IfcLinearForceMeasure) | null;
		LinearForceZ: (Handle<IFC2X3.IfcLinearForceMeasure> | IFC2X3.IfcLinearForceMeasure) | null;
		LinearMomentX: (Handle<IFC2X3.IfcLinearMomentMeasure> | IFC2X3.IfcLinearMomentMeasure) | null;
		LinearMomentY: (Handle<IFC2X3.IfcLinearMomentMeasure> | IFC2X3.IfcLinearMomentMeasure) | null;
		LinearMomentZ: (Handle<IFC2X3.IfcLinearMomentMeasure> | IFC2X3.IfcLinearMomentMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LinearForceX: (Handle<IFC2X3.IfcLinearForceMeasure> | IFC2X3.IfcLinearForceMeasure) | null, LinearForceY: (Handle<IFC2X3.IfcLinearForceMeasure> | IFC2X3.IfcLinearForceMeasure) | null, LinearForceZ: (Handle<IFC2X3.IfcLinearForceMeasure> | IFC2X3.IfcLinearForceMeasure) | null, LinearMomentX: (Handle<IFC2X3.IfcLinearMomentMeasure> | IFC2X3.IfcLinearMomentMeasure) | null, LinearMomentY: (Handle<IFC2X3.IfcLinearMomentMeasure> | IFC2X3.IfcLinearMomentMeasure) | null, LinearMomentZ: (Handle<IFC2X3.IfcLinearMomentMeasure> | IFC2X3.IfcLinearMomentMeasure) | null)
		{
			super(expressID,type,Name);
			this.LinearForceX = LinearForceX;
			this.LinearForceY = LinearForceY;
			this.LinearForceZ = LinearForceZ;
			this.LinearMomentX = LinearMomentX;
			this.LinearMomentY = LinearMomentY;
			this.LinearMomentZ = LinearMomentZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadLinearForce
		{
			return new IfcStructuralLoadLinearForce(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LinearForceX, this.LinearForceY, this.LinearForceZ, this.LinearMomentX, this.LinearMomentY, this.LinearMomentZ);
			return args;
		}
	}
	export class IfcStructuralLoadPlanarForce extends IFC2X3.IfcStructuralLoadStatic {
		PlanarForceX: (Handle<IFC2X3.IfcPlanarForceMeasure> | IFC2X3.IfcPlanarForceMeasure) | null;
		PlanarForceY: (Handle<IFC2X3.IfcPlanarForceMeasure> | IFC2X3.IfcPlanarForceMeasure) | null;
		PlanarForceZ: (Handle<IFC2X3.IfcPlanarForceMeasure> | IFC2X3.IfcPlanarForceMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PlanarForceX: (Handle<IFC2X3.IfcPlanarForceMeasure> | IFC2X3.IfcPlanarForceMeasure) | null, PlanarForceY: (Handle<IFC2X3.IfcPlanarForceMeasure> | IFC2X3.IfcPlanarForceMeasure) | null, PlanarForceZ: (Handle<IFC2X3.IfcPlanarForceMeasure> | IFC2X3.IfcPlanarForceMeasure) | null)
		{
			super(expressID,type,Name);
			this.PlanarForceX = PlanarForceX;
			this.PlanarForceY = PlanarForceY;
			this.PlanarForceZ = PlanarForceZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadPlanarForce
		{
			return new IfcStructuralLoadPlanarForce(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.PlanarForceX, this.PlanarForceY, this.PlanarForceZ);
			return args;
		}
	}
	export class IfcStructuralLoadSingleDisplacement extends IFC2X3.IfcStructuralLoadStatic {
		DisplacementX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		DisplacementY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		DisplacementZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		RotationalDisplacementRX: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		RotationalDisplacementRY: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		RotationalDisplacementRZ: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, DisplacementX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, DisplacementY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, DisplacementZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, RotationalDisplacementRX: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, RotationalDisplacementRY: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, RotationalDisplacementRZ: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,Name);
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleDisplacement
		{
			return new IfcStructuralLoadSingleDisplacement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DisplacementX, this.DisplacementY, this.DisplacementZ, this.RotationalDisplacementRX, this.RotationalDisplacementRY, this.RotationalDisplacementRZ);
			return args;
		}
	}
	export class IfcStructuralLoadSingleDisplacementDistortion extends IFC2X3.IfcStructuralLoadSingleDisplacement {
		Distortion: (Handle<IFC2X3.IfcCurvatureMeasure> | IFC2X3.IfcCurvatureMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, DisplacementX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, DisplacementY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, DisplacementZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, RotationalDisplacementRX: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, RotationalDisplacementRY: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, RotationalDisplacementRZ: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, Distortion: (Handle<IFC2X3.IfcCurvatureMeasure> | IFC2X3.IfcCurvatureMeasure) | null)
		{
			super(expressID,type,Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ);
			this.Distortion = Distortion;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleDisplacementDistortion
		{
			return new IfcStructuralLoadSingleDisplacementDistortion(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DisplacementX, this.DisplacementY, this.DisplacementZ, this.RotationalDisplacementRX, this.RotationalDisplacementRY, this.RotationalDisplacementRZ, this.Distortion);
			return args;
		}
	}
	export class IfcStructuralLoadSingleForce extends IFC2X3.IfcStructuralLoadStatic {
		ForceX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		ForceY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		ForceZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		MomentX: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null;
		MomentY: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null;
		MomentZ: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ForceX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, ForceY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, ForceZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, MomentX: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null, MomentY: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null, MomentZ: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null)
		{
			super(expressID,type,Name);
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleForce
		{
			return new IfcStructuralLoadSingleForce(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.ForceX, this.ForceY, this.ForceZ, this.MomentX, this.MomentY, this.MomentZ);
			return args;
		}
	}
	export class IfcStructuralLoadSingleForceWarping extends IFC2X3.IfcStructuralLoadSingleForce {
		WarpingMoment: (Handle<IFC2X3.IfcWarpingMomentMeasure> | IFC2X3.IfcWarpingMomentMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ForceX: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, ForceY: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, ForceZ: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, MomentX: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null, MomentY: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null, MomentZ: (Handle<IFC2X3.IfcTorqueMeasure> | IFC2X3.IfcTorqueMeasure) | null, WarpingMoment: (Handle<IFC2X3.IfcWarpingMomentMeasure> | IFC2X3.IfcWarpingMomentMeasure) | null)
		{
			super(expressID,type,Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ);
			this.WarpingMoment = WarpingMoment;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleForceWarping
		{
			return new IfcStructuralLoadSingleForceWarping(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.ForceX, this.ForceY, this.ForceZ, this.MomentX, this.MomentY, this.MomentZ, this.WarpingMoment);
			return args;
		}
	}
	export class IfcStructuralProfileProperties extends IFC2X3.IfcGeneralProfileProperties {
		TorsionalConstantX: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null;
		MomentOfInertiaYZ: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null;
		MomentOfInertiaY: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null;
		MomentOfInertiaZ: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null;
		WarpingConstant: (Handle<IFC2X3.IfcWarpingConstantMeasure> | IFC2X3.IfcWarpingConstantMeasure) | null;
		ShearCentreZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		ShearCentreY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		ShearDeformationAreaZ: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		ShearDeformationAreaY: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		MaximumSectionModulusY: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null;
		MinimumSectionModulusY: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null;
		MaximumSectionModulusZ: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null;
		MinimumSectionModulusZ: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null;
		TorsionalSectionModulus: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null;
		CentreOfGravityInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		CentreOfGravityInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ProfileDefinition: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null, PhysicalWeight: (Handle<IFC2X3.IfcMassPerLengthMeasure> | IFC2X3.IfcMassPerLengthMeasure) | null, Perimeter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MinimumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MaximumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, TorsionalConstantX: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, MomentOfInertiaYZ: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, MomentOfInertiaY: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, MomentOfInertiaZ: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, WarpingConstant: (Handle<IFC2X3.IfcWarpingConstantMeasure> | IFC2X3.IfcWarpingConstantMeasure) | null, ShearCentreZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ShearCentreY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ShearDeformationAreaZ: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, ShearDeformationAreaY: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, MaximumSectionModulusY: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, MinimumSectionModulusY: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, MaximumSectionModulusZ: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, MinimumSectionModulusZ: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, TorsionalSectionModulus: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, CentreOfGravityInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, CentreOfGravityInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null)
		{
			super(expressID,type,ProfileName, ProfileDefinition, PhysicalWeight, Perimeter, MinimumPlateThickness, MaximumPlateThickness, CrossSectionArea);
			this.TorsionalConstantX = TorsionalConstantX;
			this.MomentOfInertiaYZ = MomentOfInertiaYZ;
			this.MomentOfInertiaY = MomentOfInertiaY;
			this.MomentOfInertiaZ = MomentOfInertiaZ;
			this.WarpingConstant = WarpingConstant;
			this.ShearCentreZ = ShearCentreZ;
			this.ShearCentreY = ShearCentreY;
			this.ShearDeformationAreaZ = ShearDeformationAreaZ;
			this.ShearDeformationAreaY = ShearDeformationAreaY;
			this.MaximumSectionModulusY = MaximumSectionModulusY;
			this.MinimumSectionModulusY = MinimumSectionModulusY;
			this.MaximumSectionModulusZ = MaximumSectionModulusZ;
			this.MinimumSectionModulusZ = MinimumSectionModulusZ;
			this.TorsionalSectionModulus = TorsionalSectionModulus;
			this.CentreOfGravityInX = CentreOfGravityInX;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralProfileProperties
		{
			return new IfcStructuralProfileProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18], tape[19], tape[20], tape[21], tape[22]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileName, this.ProfileDefinition, this.PhysicalWeight, this.Perimeter, this.MinimumPlateThickness, this.MaximumPlateThickness, this.CrossSectionArea, this.TorsionalConstantX, this.MomentOfInertiaYZ, this.MomentOfInertiaY, this.MomentOfInertiaZ, this.WarpingConstant, this.ShearCentreZ, this.ShearCentreY, this.ShearDeformationAreaZ, this.ShearDeformationAreaY, this.MaximumSectionModulusY, this.MinimumSectionModulusY, this.MaximumSectionModulusZ, this.MinimumSectionModulusZ, this.TorsionalSectionModulus, this.CentreOfGravityInX, this.CentreOfGravityInY);
			return args;
		}
	}
	export class IfcStructuralSteelProfileProperties extends IFC2X3.IfcStructuralProfileProperties {
		ShearAreaZ: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		ShearAreaY: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		PlasticShapeFactorY: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		PlasticShapeFactorZ: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		constructor(expressID: number, type: number, ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ProfileDefinition: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) | null, PhysicalWeight: (Handle<IFC2X3.IfcMassPerLengthMeasure> | IFC2X3.IfcMassPerLengthMeasure) | null, Perimeter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MinimumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MaximumPlateThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, TorsionalConstantX: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, MomentOfInertiaYZ: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, MomentOfInertiaY: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, MomentOfInertiaZ: (Handle<IFC2X3.IfcMomentOfInertiaMeasure> | IFC2X3.IfcMomentOfInertiaMeasure) | null, WarpingConstant: (Handle<IFC2X3.IfcWarpingConstantMeasure> | IFC2X3.IfcWarpingConstantMeasure) | null, ShearCentreZ: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ShearCentreY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ShearDeformationAreaZ: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, ShearDeformationAreaY: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, MaximumSectionModulusY: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, MinimumSectionModulusY: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, MaximumSectionModulusZ: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, MinimumSectionModulusZ: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, TorsionalSectionModulus: (Handle<IFC2X3.IfcSectionModulusMeasure> | IFC2X3.IfcSectionModulusMeasure) | null, CentreOfGravityInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, CentreOfGravityInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ShearAreaZ: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, ShearAreaY: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, PlasticShapeFactorY: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, PlasticShapeFactorZ: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null)
		{
			super(expressID,type,ProfileName, ProfileDefinition, PhysicalWeight, Perimeter, MinimumPlateThickness, MaximumPlateThickness, CrossSectionArea, TorsionalConstantX, MomentOfInertiaYZ, MomentOfInertiaY, MomentOfInertiaZ, WarpingConstant, ShearCentreZ, ShearCentreY, ShearDeformationAreaZ, ShearDeformationAreaY, MaximumSectionModulusY, MinimumSectionModulusY, MaximumSectionModulusZ, MinimumSectionModulusZ, TorsionalSectionModulus, CentreOfGravityInX, CentreOfGravityInY);
			this.ShearAreaZ = ShearAreaZ;
			this.ShearAreaY = ShearAreaY;
			this.PlasticShapeFactorY = PlasticShapeFactorY;
			this.PlasticShapeFactorZ = PlasticShapeFactorZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSteelProfileProperties
		{
			return new IfcStructuralSteelProfileProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18], tape[19], tape[20], tape[21], tape[22], tape[23], tape[24], tape[25], tape[26]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileName, this.ProfileDefinition, this.PhysicalWeight, this.Perimeter, this.MinimumPlateThickness, this.MaximumPlateThickness, this.CrossSectionArea, this.TorsionalConstantX, this.MomentOfInertiaYZ, this.MomentOfInertiaY, this.MomentOfInertiaZ, this.WarpingConstant, this.ShearCentreZ, this.ShearCentreY, this.ShearDeformationAreaZ, this.ShearDeformationAreaY, this.MaximumSectionModulusY, this.MinimumSectionModulusY, this.MaximumSectionModulusZ, this.MinimumSectionModulusZ, this.TorsionalSectionModulus, this.CentreOfGravityInX, this.CentreOfGravityInY, this.ShearAreaZ, this.ShearAreaY, this.PlasticShapeFactorY, this.PlasticShapeFactorZ);
			return args;
		}
	}
	export class IfcSubedge extends IFC2X3.IfcEdge {
		ParentEdge: (Handle<IFC2X3.IfcEdge> | IFC2X3.IfcEdge) ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , EdgeEnd: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) , ParentEdge: (Handle<IFC2X3.IfcEdge> | IFC2X3.IfcEdge) )
		{
			super(expressID,type,EdgeStart, EdgeEnd);
			this.ParentEdge = ParentEdge;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSubedge
		{
			return new IfcSubedge(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd, this.ParentEdge);
			return args;
		}
	}
	export class IfcSurface extends IFC2X3.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurface
		{
			return new IfcSurface(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcSurfaceStyleRendering extends IFC2X3.IfcSurfaceStyleShading {
		Transparency: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		DiffuseColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null;
		TransmissionColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null;
		DiffuseTransmissionColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null;
		ReflectionColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null;
		SpecularColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null;
		SpecularHighlight: (Handle<IFC2X3.IfcSpecularHighlightSelect> | IFC2X3.IfcSpecularHighlightSelect) | null;
		ReflectanceMethod: (Handle<IFC2X3.IfcReflectanceMethodEnum> | IFC2X3.IfcReflectanceMethodEnum) ;
		constructor(expressID: number, type: number, SurfaceColour: (Handle<IFC2X3.IfcColourRgb> | IFC2X3.IfcColourRgb) , Transparency: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, DiffuseColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null, TransmissionColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null, DiffuseTransmissionColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null, ReflectionColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null, SpecularColour: (Handle<IFC2X3.IfcColourOrFactor> | IFC2X3.IfcColourOrFactor) | null, SpecularHighlight: (Handle<IFC2X3.IfcSpecularHighlightSelect> | IFC2X3.IfcSpecularHighlightSelect) | null, ReflectanceMethod: (Handle<IFC2X3.IfcReflectanceMethodEnum> | IFC2X3.IfcReflectanceMethodEnum) )
		{
			super(expressID,type,SurfaceColour);
			this.Transparency = Transparency;
			this.DiffuseColour = DiffuseColour;
			this.TransmissionColour = TransmissionColour;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.ReflectionColour = ReflectionColour;
			this.SpecularColour = SpecularColour;
			this.SpecularHighlight = SpecularHighlight;
			this.ReflectanceMethod = ReflectanceMethod;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleRendering
		{
			return new IfcSurfaceStyleRendering(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SurfaceColour, this.Transparency, this.DiffuseColour, this.TransmissionColour, this.DiffuseTransmissionColour, this.ReflectionColour, this.SpecularColour, this.SpecularHighlight, this.ReflectanceMethod);
			return args;
		}
	}
	export class IfcSweptAreaSolid extends IFC2X3.IfcSolidModel {
		SweptArea: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) ;
		Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) )
		{
			super(expressID,type);
			this.SweptArea = SweptArea;
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptAreaSolid
		{
			return new IfcSweptAreaSolid(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position);
			return args;
		}
	}
	export class IfcSweptDiskSolid extends IFC2X3.IfcSolidModel {
		Directrix: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		InnerRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		StartParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		EndParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		constructor(expressID: number, type: number, Directrix: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , InnerRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, StartParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , EndParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) )
		{
			super(expressID,type);
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptDiskSolid
		{
			return new IfcSweptDiskSolid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Directrix, this.Radius, this.InnerRadius, this.StartParam, this.EndParam);
			return args;
		}
	}
	export class IfcSweptSurface extends IFC2X3.IfcSurface {
		SweptCurve: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) ;
		Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) ;
		constructor(expressID: number, type: number, SweptCurve: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) )
		{
			super(expressID,type);
			this.SweptCurve = SweptCurve;
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptSurface
		{
			return new IfcSweptSurface(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptCurve, this.Position);
			return args;
		}
	}
	export class IfcTShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		FlangeEdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		WebEdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		WebSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		FlangeSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, FlangeEdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, WebEdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, WebSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, FlangeSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.WebEdgeRadius = WebEdgeRadius;
			this.WebSlope = WebSlope;
			this.FlangeSlope = FlangeSlope;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTShapeProfileDef
		{
			return new IfcTShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.FlangeWidth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.FlangeEdgeRadius, this.WebEdgeRadius, this.WebSlope, this.FlangeSlope, this.CentreOfGravityInY);
			return args;
		}
	}
	export class IfcTerminatorSymbol extends IFC2X3.IfcAnnotationSymbolOccurrence {
		AnnotatedCurve: (Handle<IFC2X3.IfcAnnotationCurveOccurrence> | IFC2X3.IfcAnnotationCurveOccurrence) ;
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, AnnotatedCurve: (Handle<IFC2X3.IfcAnnotationCurveOccurrence> | IFC2X3.IfcAnnotationCurveOccurrence) )
		{
			super(expressID,type,Item, Styles, Name);
			this.AnnotatedCurve = AnnotatedCurve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTerminatorSymbol
		{
			return new IfcTerminatorSymbol(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name, this.AnnotatedCurve);
			return args;
		}
	}
	export class IfcTextLiteral extends IFC2X3.IfcGeometricRepresentationItem {
		Literal: (Handle<IFC2X3.IfcPresentableText> | IFC2X3.IfcPresentableText) ;
		Placement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		Path: (Handle<IFC2X3.IfcTextPath> | IFC2X3.IfcTextPath) ;
		constructor(expressID: number, type: number, Literal: (Handle<IFC2X3.IfcPresentableText> | IFC2X3.IfcPresentableText) , Placement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , Path: (Handle<IFC2X3.IfcTextPath> | IFC2X3.IfcTextPath) )
		{
			super(expressID,type);
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextLiteral
		{
			return new IfcTextLiteral(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Literal, this.Placement, this.Path);
			return args;
		}
	}
	export class IfcTextLiteralWithExtent extends IFC2X3.IfcTextLiteral {
		Extent: (Handle<IFC2X3.IfcPlanarExtent> | IFC2X3.IfcPlanarExtent) ;
		BoxAlignment: (Handle<IFC2X3.IfcBoxAlignment> | IFC2X3.IfcBoxAlignment) ;
		constructor(expressID: number, type: number, Literal: (Handle<IFC2X3.IfcPresentableText> | IFC2X3.IfcPresentableText) , Placement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , Path: (Handle<IFC2X3.IfcTextPath> | IFC2X3.IfcTextPath) , Extent: (Handle<IFC2X3.IfcPlanarExtent> | IFC2X3.IfcPlanarExtent) , BoxAlignment: (Handle<IFC2X3.IfcBoxAlignment> | IFC2X3.IfcBoxAlignment) )
		{
			super(expressID,type,Literal, Placement, Path);
			this.Extent = Extent;
			this.BoxAlignment = BoxAlignment;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextLiteralWithExtent
		{
			return new IfcTextLiteralWithExtent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Literal, this.Placement, this.Path, this.Extent, this.BoxAlignment);
			return args;
		}
	}
	export class IfcTrapeziumProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		BottomXDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		TopXDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		TopXOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , BottomXDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , TopXDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , TopXOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.BottomXDim = BottomXDim;
			this.TopXDim = TopXDim;
			this.YDim = YDim;
			this.TopXOffset = TopXOffset;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTrapeziumProfileDef
		{
			return new IfcTrapeziumProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.BottomXDim, this.TopXDim, this.YDim, this.TopXOffset);
			return args;
		}
	}
	export class IfcTwoDirectionRepeatFactor extends IFC2X3.IfcOneDirectionRepeatFactor {
		SecondRepeatFactor: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) ;
		constructor(expressID: number, type: number, RepeatFactor: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) , SecondRepeatFactor: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) )
		{
			super(expressID,type,RepeatFactor);
			this.SecondRepeatFactor = SecondRepeatFactor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTwoDirectionRepeatFactor
		{
			return new IfcTwoDirectionRepeatFactor(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatFactor, this.SecondRepeatFactor);
			return args;
		}
	}
	export class IfcTypeObject extends IFC2X3.IfcObjectDefinition {
		ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null;
		ObjectTypeOf!: (Handle<IFC2X3.IfcRelDefinesByType> | IFC2X3.IfcRelDefinesByType)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTypeObject
		{
			return new IfcTypeObject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets);
			return args;
		}
	}
	export class IfcTypeProduct extends IFC2X3.IfcTypeObject {
		RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null;
		Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets);
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTypeProduct
		{
			return new IfcTypeProduct(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag);
			return args;
		}
	}
	export class IfcUShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		EdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		FlangeSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		CentreOfGravityInX: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, EdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, FlangeSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, CentreOfGravityInX: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.FlangeSlope = FlangeSlope;
			this.CentreOfGravityInX = CentreOfGravityInX;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUShapeProfileDef
		{
			return new IfcUShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.FlangeWidth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.EdgeRadius, this.FlangeSlope, this.CentreOfGravityInX);
			return args;
		}
	}
	export class IfcVector extends IFC2X3.IfcGeometricRepresentationItem {
		Orientation: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) ;
		Magnitude: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, Orientation: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) , Magnitude: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) )
		{
			super(expressID,type);
			this.Orientation = Orientation;
			this.Magnitude = Magnitude;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVector
		{
			return new IfcVector(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Orientation, this.Magnitude);
			return args;
		}
	}
	export class IfcVertexLoop extends IFC2X3.IfcLoop {
		LoopVertex: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) ;
		constructor(expressID: number, type: number, LoopVertex: (Handle<IFC2X3.IfcVertex> | IFC2X3.IfcVertex) )
		{
			super(expressID,type);
			this.LoopVertex = LoopVertex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertexLoop
		{
			return new IfcVertexLoop(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LoopVertex);
			return args;
		}
	}
	export class IfcWindowLiningProperties extends IFC2X3.IfcPropertySetDefinition {
		LiningDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		LiningThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		TransomThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		MullionThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		FirstTransomOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		SecondTransomOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		FirstMullionOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		SecondMullionOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, LiningDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, LiningThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, TransomThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MullionThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, FirstTransomOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, SecondTransomOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, FirstMullionOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, SecondMullionOffset: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.TransomThickness = TransomThickness;
			this.MullionThickness = MullionThickness;
			this.FirstTransomOffset = FirstTransomOffset;
			this.SecondTransomOffset = SecondTransomOffset;
			this.FirstMullionOffset = FirstMullionOffset;
			this.SecondMullionOffset = SecondMullionOffset;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowLiningProperties
		{
			return new IfcWindowLiningProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.LiningDepth, this.LiningThickness, this.TransomThickness, this.MullionThickness, this.FirstTransomOffset, this.SecondTransomOffset, this.FirstMullionOffset, this.SecondMullionOffset, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcWindowPanelProperties extends IFC2X3.IfcPropertySetDefinition {
		OperationType: (Handle<IFC2X3.IfcWindowPanelOperationEnum> | IFC2X3.IfcWindowPanelOperationEnum) ;
		PanelPosition: (Handle<IFC2X3.IfcWindowPanelPositionEnum> | IFC2X3.IfcWindowPanelPositionEnum) ;
		FrameDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		FrameThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, OperationType: (Handle<IFC2X3.IfcWindowPanelOperationEnum> | IFC2X3.IfcWindowPanelOperationEnum) , PanelPosition: (Handle<IFC2X3.IfcWindowPanelPositionEnum> | IFC2X3.IfcWindowPanelPositionEnum) , FrameDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, FrameThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowPanelProperties
		{
			return new IfcWindowPanelProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.OperationType, this.PanelPosition, this.FrameDepth, this.FrameThickness, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcWindowStyle extends IFC2X3.IfcTypeProduct {
		ConstructionType: (Handle<IFC2X3.IfcWindowStyleConstructionEnum> | IFC2X3.IfcWindowStyleConstructionEnum) ;
		OperationType: (Handle<IFC2X3.IfcWindowStyleOperationEnum> | IFC2X3.IfcWindowStyleOperationEnum) ;
		ParameterTakesPrecedence: boolean ;
		Sizeable: boolean ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ConstructionType: (Handle<IFC2X3.IfcWindowStyleConstructionEnum> | IFC2X3.IfcWindowStyleConstructionEnum) , OperationType: (Handle<IFC2X3.IfcWindowStyleOperationEnum> | IFC2X3.IfcWindowStyleOperationEnum) , ParameterTakesPrecedence: boolean , Sizeable: boolean )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.ConstructionType = ConstructionType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowStyle
		{
			return new IfcWindowStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ConstructionType, this.OperationType, this.ParameterTakesPrecedence, this.Sizeable);
			return args;
		}
	}
	export class IfcZShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		EdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, EdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcZShapeProfileDef
		{
			return new IfcZShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.FlangeWidth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.EdgeRadius);
			return args;
		}
	}
	export class IfcAnnotationCurveOccurrence extends IFC2X3.IfcAnnotationOccurrence {
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationCurveOccurrence
		{
			return new IfcAnnotationCurveOccurrence(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcAnnotationFillArea extends IFC2X3.IfcGeometricRepresentationItem {
		OuterBoundary: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		InnerBoundaries: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve)[] | null;
		constructor(expressID: number, type: number, OuterBoundary: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , InnerBoundaries: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve)[] | null)
		{
			super(expressID,type);
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationFillArea
		{
			return new IfcAnnotationFillArea(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.OuterBoundary, this.InnerBoundaries);
			return args;
		}
	}
	export class IfcAnnotationFillAreaOccurrence extends IFC2X3.IfcAnnotationOccurrence {
		FillStyleTarget: (Handle<IFC2X3.IfcPoint> | IFC2X3.IfcPoint) | null;
		GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) | null;
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, FillStyleTarget: (Handle<IFC2X3.IfcPoint> | IFC2X3.IfcPoint) | null, GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) | null)
		{
			super(expressID,type,Item, Styles, Name);
			this.FillStyleTarget = FillStyleTarget;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationFillAreaOccurrence
		{
			return new IfcAnnotationFillAreaOccurrence(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name, this.FillStyleTarget, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcAnnotationSurface extends IFC2X3.IfcGeometricRepresentationItem {
		Item: (Handle<IFC2X3.IfcGeometricRepresentationItem> | IFC2X3.IfcGeometricRepresentationItem) ;
		TextureCoordinates: (Handle<IFC2X3.IfcTextureCoordinate> | IFC2X3.IfcTextureCoordinate) | null;
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcGeometricRepresentationItem> | IFC2X3.IfcGeometricRepresentationItem) , TextureCoordinates: (Handle<IFC2X3.IfcTextureCoordinate> | IFC2X3.IfcTextureCoordinate) | null)
		{
			super(expressID,type);
			this.Item = Item;
			this.TextureCoordinates = TextureCoordinates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationSurface
		{
			return new IfcAnnotationSurface(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.TextureCoordinates);
			return args;
		}
	}
	export class IfcAxis1Placement extends IFC2X3.IfcPlacement {
		Axis: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Axis: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null)
		{
			super(expressID,type,Location);
			this.Axis = Axis;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAxis1Placement
		{
			return new IfcAxis1Placement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Axis);
			return args;
		}
	}
	export class IfcAxis2Placement2D extends IFC2X3.IfcPlacement {
		RefDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , RefDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null)
		{
			super(expressID,type,Location);
			this.RefDirection = RefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAxis2Placement2D
		{
			return new IfcAxis2Placement2D(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.RefDirection);
			return args;
		}
	}
	export class IfcAxis2Placement3D extends IFC2X3.IfcPlacement {
		Axis: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		RefDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Axis: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, RefDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null)
		{
			super(expressID,type,Location);
			this.Axis = Axis;
			this.RefDirection = RefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAxis2Placement3D
		{
			return new IfcAxis2Placement3D(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Axis, this.RefDirection);
			return args;
		}
	}
	export class IfcBooleanResult extends IFC2X3.IfcGeometricRepresentationItem {
		Operator: (Handle<IFC2X3.IfcBooleanOperator> | IFC2X3.IfcBooleanOperator) ;
		FirstOperand: (Handle<IFC2X3.IfcBooleanOperand> | IFC2X3.IfcBooleanOperand) ;
		SecondOperand: (Handle<IFC2X3.IfcBooleanOperand> | IFC2X3.IfcBooleanOperand) ;
		constructor(expressID: number, type: number, Operator: (Handle<IFC2X3.IfcBooleanOperator> | IFC2X3.IfcBooleanOperator) , FirstOperand: (Handle<IFC2X3.IfcBooleanOperand> | IFC2X3.IfcBooleanOperand) , SecondOperand: (Handle<IFC2X3.IfcBooleanOperand> | IFC2X3.IfcBooleanOperand) )
		{
			super(expressID,type);
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBooleanResult
		{
			return new IfcBooleanResult(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Operator, this.FirstOperand, this.SecondOperand);
			return args;
		}
	}
	export class IfcBoundedSurface extends IFC2X3.IfcSurface {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundedSurface
		{
			return new IfcBoundedSurface(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcBoundingBox extends IFC2X3.IfcGeometricRepresentationItem {
		Corner: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) ;
		XDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		ZDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Corner: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , XDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , ZDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type);
			this.Corner = Corner;
			this.XDim = XDim;
			this.YDim = YDim;
			this.ZDim = ZDim;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundingBox
		{
			return new IfcBoundingBox(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Corner, this.XDim, this.YDim, this.ZDim);
			return args;
		}
	}
	export class IfcBoxedHalfSpace extends IFC2X3.IfcHalfSpaceSolid {
		Enclosure: (Handle<IFC2X3.IfcBoundingBox> | IFC2X3.IfcBoundingBox) ;
		constructor(expressID: number, type: number, BaseSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) , AgreementFlag: boolean , Enclosure: (Handle<IFC2X3.IfcBoundingBox> | IFC2X3.IfcBoundingBox) )
		{
			super(expressID,type,BaseSurface, AgreementFlag);
			this.Enclosure = Enclosure;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoxedHalfSpace
		{
			return new IfcBoxedHalfSpace(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BaseSurface, this.AgreementFlag, this.Enclosure);
			return args;
		}
	}
	export class IfcCShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Width: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WallThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Girth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		InternalFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		CentreOfGravityInX: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Width: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WallThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Girth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , InternalFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CentreOfGravityInX: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.Width = Width;
			this.WallThickness = WallThickness;
			this.Girth = Girth;
			this.InternalFilletRadius = InternalFilletRadius;
			this.CentreOfGravityInX = CentreOfGravityInX;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCShapeProfileDef
		{
			return new IfcCShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.Width, this.WallThickness, this.Girth, this.InternalFilletRadius, this.CentreOfGravityInX);
			return args;
		}
	}
	export class IfcCartesianPoint extends IFC2X3.IfcPoint {
		Coordinates: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure)[] ;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure)[] )
		{
			super(expressID,type);
			this.Coordinates = Coordinates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPoint
		{
			return new IfcCartesianPoint(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator extends IFC2X3.IfcGeometricRepresentationItem {
		Axis1: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		Axis2: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		LocalOrigin: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) ;
		Scale: number | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, Axis2: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, LocalOrigin: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Scale: number | null)
		{
			super(expressID,type);
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator
		{
			return new IfcCartesianTransformationOperator(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator2D extends IFC2X3.IfcCartesianTransformationOperator {
		constructor(expressID: number, type: number, Axis1: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, Axis2: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, LocalOrigin: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Scale: number | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator2D
		{
			return new IfcCartesianTransformationOperator2D(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator2DnonUniform extends IFC2X3.IfcCartesianTransformationOperator2D {
		Scale2: number | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, Axis2: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, LocalOrigin: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Scale: number | null, Scale2: number | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale);
			this.Scale2 = Scale2;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator2DnonUniform
		{
			return new IfcCartesianTransformationOperator2DnonUniform(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale, this.Scale2);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator3D extends IFC2X3.IfcCartesianTransformationOperator {
		Axis3: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, Axis2: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, LocalOrigin: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Scale: number | null, Axis3: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale);
			this.Axis3 = Axis3;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator3D
		{
			return new IfcCartesianTransformationOperator3D(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale, this.Axis3);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator3DnonUniform extends IFC2X3.IfcCartesianTransformationOperator3D {
		Scale2: number | null;
		Scale3: number | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, Axis2: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, LocalOrigin: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Scale: number | null, Axis3: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) | null, Scale2: number | null, Scale3: number | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale, Axis3);
			this.Scale2 = Scale2;
			this.Scale3 = Scale3;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator3DnonUniform
		{
			return new IfcCartesianTransformationOperator3DnonUniform(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale, this.Axis3, this.Scale2, this.Scale3);
			return args;
		}
	}
	export class IfcCircleProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCircleProfileDef
		{
			return new IfcCircleProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Radius);
			return args;
		}
	}
	export class IfcClosedShell extends IFC2X3.IfcConnectedFaceSet {
		constructor(expressID: number, type: number, CfsFaces: (Handle<IFC2X3.IfcFace> | IFC2X3.IfcFace)[] )
		{
			super(expressID,type,CfsFaces);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClosedShell
		{
			return new IfcClosedShell(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CfsFaces);
			return args;
		}
	}
	export class IfcCompositeCurveSegment extends IFC2X3.IfcGeometricRepresentationItem {
		Transition: (Handle<IFC2X3.IfcTransitionCode> | IFC2X3.IfcTransitionCode) ;
		SameSense: boolean ;
		ParentCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		UsingCurves!: (Handle<IFC2X3.IfcCompositeCurve> | IFC2X3.IfcCompositeCurve)[] | null;
		constructor(expressID: number, type: number, Transition: (Handle<IFC2X3.IfcTransitionCode> | IFC2X3.IfcTransitionCode) , SameSense: boolean , ParentCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) )
		{
			super(expressID,type);
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurveSegment
		{
			return new IfcCompositeCurveSegment(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Transition, this.SameSense, this.ParentCurve);
			return args;
		}
	}
	export class IfcCraneRailAShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseWidth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		HeadWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		HeadDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		HeadDepth3: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseWidth4: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseDepth1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseDepth3: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseWidth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, HeadWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , HeadDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , HeadDepth3: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseWidth4: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseDepth1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseDepth3: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.OverallHeight = OverallHeight;
			this.BaseWidth2 = BaseWidth2;
			this.Radius = Radius;
			this.HeadWidth = HeadWidth;
			this.HeadDepth2 = HeadDepth2;
			this.HeadDepth3 = HeadDepth3;
			this.WebThickness = WebThickness;
			this.BaseWidth4 = BaseWidth4;
			this.BaseDepth1 = BaseDepth1;
			this.BaseDepth2 = BaseDepth2;
			this.BaseDepth3 = BaseDepth3;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCraneRailAShapeProfileDef
		{
			return new IfcCraneRailAShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.OverallHeight, this.BaseWidth2, this.Radius, this.HeadWidth, this.HeadDepth2, this.HeadDepth3, this.WebThickness, this.BaseWidth4, this.BaseDepth1, this.BaseDepth2, this.BaseDepth3, this.CentreOfGravityInY);
			return args;
		}
	}
	export class IfcCraneRailFShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		HeadWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		HeadDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		HeadDepth3: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseDepth1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BaseDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , HeadWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, HeadDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , HeadDepth3: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseDepth1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BaseDepth2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.OverallHeight = OverallHeight;
			this.HeadWidth = HeadWidth;
			this.Radius = Radius;
			this.HeadDepth2 = HeadDepth2;
			this.HeadDepth3 = HeadDepth3;
			this.WebThickness = WebThickness;
			this.BaseDepth1 = BaseDepth1;
			this.BaseDepth2 = BaseDepth2;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCraneRailFShapeProfileDef
		{
			return new IfcCraneRailFShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.OverallHeight, this.HeadWidth, this.Radius, this.HeadDepth2, this.HeadDepth3, this.WebThickness, this.BaseDepth1, this.BaseDepth2, this.CentreOfGravityInY);
			return args;
		}
	}
	export class IfcCsgPrimitive3D extends IFC2X3.IfcGeometricRepresentationItem {
		Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) )
		{
			super(expressID,type);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCsgPrimitive3D
		{
			return new IfcCsgPrimitive3D(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcCsgSolid extends IFC2X3.IfcSolidModel {
		TreeRootExpression: (Handle<IFC2X3.IfcCsgSelect> | IFC2X3.IfcCsgSelect) ;
		constructor(expressID: number, type: number, TreeRootExpression: (Handle<IFC2X3.IfcCsgSelect> | IFC2X3.IfcCsgSelect) )
		{
			super(expressID,type);
			this.TreeRootExpression = TreeRootExpression;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCsgSolid
		{
			return new IfcCsgSolid(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TreeRootExpression);
			return args;
		}
	}
	export class IfcCurve extends IFC2X3.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurve
		{
			return new IfcCurve(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcCurveBoundedPlane extends IFC2X3.IfcBoundedSurface {
		BasisSurface: (Handle<IFC2X3.IfcPlane> | IFC2X3.IfcPlane) ;
		OuterBoundary: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		InnerBoundaries: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve)[] ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC2X3.IfcPlane> | IFC2X3.IfcPlane) , OuterBoundary: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , InnerBoundaries: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve)[] )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveBoundedPlane
		{
			return new IfcCurveBoundedPlane(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.OuterBoundary, this.InnerBoundaries);
			return args;
		}
	}
	export class IfcDefinedSymbol extends IFC2X3.IfcGeometricRepresentationItem {
		Definition: (Handle<IFC2X3.IfcDefinedSymbolSelect> | IFC2X3.IfcDefinedSymbolSelect) ;
		Target: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) ;
		constructor(expressID: number, type: number, Definition: (Handle<IFC2X3.IfcDefinedSymbolSelect> | IFC2X3.IfcDefinedSymbolSelect) , Target: (Handle<IFC2X3.IfcCartesianTransformationOperator2D> | IFC2X3.IfcCartesianTransformationOperator2D) )
		{
			super(expressID,type);
			this.Definition = Definition;
			this.Target = Target;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDefinedSymbol
		{
			return new IfcDefinedSymbol(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Definition, this.Target);
			return args;
		}
	}
	export class IfcDimensionCurve extends IFC2X3.IfcAnnotationCurveOccurrence {
		AnnotatedBySymbols!: (Handle<IFC2X3.IfcTerminatorSymbol> | IFC2X3.IfcTerminatorSymbol)[] | null;
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionCurve
		{
			return new IfcDimensionCurve(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcDimensionCurveTerminator extends IFC2X3.IfcTerminatorSymbol {
		Role: (Handle<IFC2X3.IfcDimensionExtentUsage> | IFC2X3.IfcDimensionExtentUsage) ;
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, AnnotatedCurve: (Handle<IFC2X3.IfcAnnotationCurveOccurrence> | IFC2X3.IfcAnnotationCurveOccurrence) , Role: (Handle<IFC2X3.IfcDimensionExtentUsage> | IFC2X3.IfcDimensionExtentUsage) )
		{
			super(expressID,type,Item, Styles, Name, AnnotatedCurve);
			this.Role = Role;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionCurveTerminator
		{
			return new IfcDimensionCurveTerminator(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name, this.AnnotatedCurve, this.Role);
			return args;
		}
	}
	export class IfcDirection extends IFC2X3.IfcGeometricRepresentationItem {
		DirectionRatios: number[] ;
		constructor(expressID: number, type: number, DirectionRatios: number[] )
		{
			super(expressID,type);
			this.DirectionRatios = DirectionRatios;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDirection
		{
			return new IfcDirection(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DirectionRatios);
			return args;
		}
	}
	export class IfcDoorLiningProperties extends IFC2X3.IfcPropertySetDefinition {
		LiningDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		LiningThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		ThresholdDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		ThresholdThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		TransomThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		TransomOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		LiningOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		ThresholdOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		CasingThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		CasingDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, LiningDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, LiningThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, ThresholdDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, ThresholdThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, TransomThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, TransomOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, LiningOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ThresholdOffset: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, CasingThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CasingDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.ThresholdDepth = ThresholdDepth;
			this.ThresholdThickness = ThresholdThickness;
			this.TransomThickness = TransomThickness;
			this.TransomOffset = TransomOffset;
			this.LiningOffset = LiningOffset;
			this.ThresholdOffset = ThresholdOffset;
			this.CasingThickness = CasingThickness;
			this.CasingDepth = CasingDepth;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorLiningProperties
		{
			return new IfcDoorLiningProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.LiningDepth, this.LiningThickness, this.ThresholdDepth, this.ThresholdThickness, this.TransomThickness, this.TransomOffset, this.LiningOffset, this.ThresholdOffset, this.CasingThickness, this.CasingDepth, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcDoorPanelProperties extends IFC2X3.IfcPropertySetDefinition {
		PanelDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		PanelOperation: (Handle<IFC2X3.IfcDoorPanelOperationEnum> | IFC2X3.IfcDoorPanelOperationEnum) ;
		PanelWidth: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		PanelPosition: (Handle<IFC2X3.IfcDoorPanelPositionEnum> | IFC2X3.IfcDoorPanelPositionEnum) ;
		ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, PanelDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, PanelOperation: (Handle<IFC2X3.IfcDoorPanelOperationEnum> | IFC2X3.IfcDoorPanelOperationEnum) , PanelWidth: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, PanelPosition: (Handle<IFC2X3.IfcDoorPanelPositionEnum> | IFC2X3.IfcDoorPanelPositionEnum) , ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.PanelDepth = PanelDepth;
			this.PanelOperation = PanelOperation;
			this.PanelWidth = PanelWidth;
			this.PanelPosition = PanelPosition;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorPanelProperties
		{
			return new IfcDoorPanelProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.PanelDepth, this.PanelOperation, this.PanelWidth, this.PanelPosition, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcDoorStyle extends IFC2X3.IfcTypeProduct {
		OperationType: (Handle<IFC2X3.IfcDoorStyleOperationEnum> | IFC2X3.IfcDoorStyleOperationEnum) ;
		ConstructionType: (Handle<IFC2X3.IfcDoorStyleConstructionEnum> | IFC2X3.IfcDoorStyleConstructionEnum) ;
		ParameterTakesPrecedence: boolean ;
		Sizeable: boolean ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, OperationType: (Handle<IFC2X3.IfcDoorStyleOperationEnum> | IFC2X3.IfcDoorStyleOperationEnum) , ConstructionType: (Handle<IFC2X3.IfcDoorStyleConstructionEnum> | IFC2X3.IfcDoorStyleConstructionEnum) , ParameterTakesPrecedence: boolean , Sizeable: boolean )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.OperationType = OperationType;
			this.ConstructionType = ConstructionType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorStyle
		{
			return new IfcDoorStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.OperationType, this.ConstructionType, this.ParameterTakesPrecedence, this.Sizeable);
			return args;
		}
	}
	export class IfcDraughtingCallout extends IFC2X3.IfcGeometricRepresentationItem {
		Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] ;
		IsRelatedFromCallout!: (Handle<IFC2X3.IfcDraughtingCalloutRelationship> | IFC2X3.IfcDraughtingCalloutRelationship)[] | null;
		IsRelatedToCallout!: (Handle<IFC2X3.IfcDraughtingCalloutRelationship> | IFC2X3.IfcDraughtingCalloutRelationship)[] | null;
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type);
			this.Contents = Contents;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingCallout
		{
			return new IfcDraughtingCallout(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcDraughtingPreDefinedColour extends IFC2X3.IfcPreDefinedColour {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedColour
		{
			return new IfcDraughtingPreDefinedColour(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcDraughtingPreDefinedCurveFont extends IFC2X3.IfcPreDefinedCurveFont {
		constructor(expressID: number, type: number, Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedCurveFont
		{
			return new IfcDraughtingPreDefinedCurveFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcEdgeLoop extends IFC2X3.IfcLoop {
		EdgeList: (Handle<IFC2X3.IfcOrientedEdge> | IFC2X3.IfcOrientedEdge)[] ;
		constructor(expressID: number, type: number, EdgeList: (Handle<IFC2X3.IfcOrientedEdge> | IFC2X3.IfcOrientedEdge)[] )
		{
			super(expressID,type);
			this.EdgeList = EdgeList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeLoop
		{
			return new IfcEdgeLoop(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeList);
			return args;
		}
	}
	export class IfcElementQuantity extends IFC2X3.IfcPropertySetDefinition {
		MethodOfMeasurement: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Quantities: (Handle<IFC2X3.IfcPhysicalQuantity> | IFC2X3.IfcPhysicalQuantity)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, MethodOfMeasurement: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Quantities: (Handle<IFC2X3.IfcPhysicalQuantity> | IFC2X3.IfcPhysicalQuantity)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.MethodOfMeasurement = MethodOfMeasurement;
			this.Quantities = Quantities;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementQuantity
		{
			return new IfcElementQuantity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.MethodOfMeasurement, this.Quantities);
			return args;
		}
	}
	export class IfcElementType extends IFC2X3.IfcTypeProduct {
		ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.ElementType = ElementType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementType
		{
			return new IfcElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcElementarySurface extends IFC2X3.IfcSurface {
		Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) )
		{
			super(expressID,type);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementarySurface
		{
			return new IfcElementarySurface(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcEllipseProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		SemiAxis1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		SemiAxis2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , SemiAxis1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , SemiAxis2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEllipseProfileDef
		{
			return new IfcEllipseProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.SemiAxis1, this.SemiAxis2);
			return args;
		}
	}
	export class IfcEnergyProperties extends IFC2X3.IfcPropertySetDefinition {
		EnergySequence: (Handle<IFC2X3.IfcEnergySequenceEnum> | IFC2X3.IfcEnergySequenceEnum) | null;
		UserDefinedEnergySequence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, EnergySequence: (Handle<IFC2X3.IfcEnergySequenceEnum> | IFC2X3.IfcEnergySequenceEnum) | null, UserDefinedEnergySequence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.EnergySequence = EnergySequence;
			this.UserDefinedEnergySequence = UserDefinedEnergySequence;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyProperties
		{
			return new IfcEnergyProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.EnergySequence, this.UserDefinedEnergySequence);
			return args;
		}
	}
	export class IfcExtrudedAreaSolid extends IFC2X3.IfcSweptAreaSolid {
		ExtrudedDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) ;
		Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , ExtrudedDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) , Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,SweptArea, Position);
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExtrudedAreaSolid
		{
			return new IfcExtrudedAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.ExtrudedDirection, this.Depth);
			return args;
		}
	}
	export class IfcFaceBasedSurfaceModel extends IFC2X3.IfcGeometricRepresentationItem {
		FbsmFaces: (Handle<IFC2X3.IfcConnectedFaceSet> | IFC2X3.IfcConnectedFaceSet)[] ;
		constructor(expressID: number, type: number, FbsmFaces: (Handle<IFC2X3.IfcConnectedFaceSet> | IFC2X3.IfcConnectedFaceSet)[] )
		{
			super(expressID,type);
			this.FbsmFaces = FbsmFaces;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceBasedSurfaceModel
		{
			return new IfcFaceBasedSurfaceModel(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.FbsmFaces);
			return args;
		}
	}
	export class IfcFillAreaStyleHatching extends IFC2X3.IfcGeometricRepresentationItem {
		HatchLineAppearance: (Handle<IFC2X3.IfcCurveStyle> | IFC2X3.IfcCurveStyle) ;
		StartOfNextHatchLine: (Handle<IFC2X3.IfcHatchLineDistanceSelect> | IFC2X3.IfcHatchLineDistanceSelect) ;
		PointOfReferenceHatchLine: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) | null;
		PatternStart: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) | null;
		HatchLineAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) ;
		constructor(expressID: number, type: number, HatchLineAppearance: (Handle<IFC2X3.IfcCurveStyle> | IFC2X3.IfcCurveStyle) , StartOfNextHatchLine: (Handle<IFC2X3.IfcHatchLineDistanceSelect> | IFC2X3.IfcHatchLineDistanceSelect) , PointOfReferenceHatchLine: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) | null, PatternStart: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) | null, HatchLineAngle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) )
		{
			super(expressID,type);
			this.HatchLineAppearance = HatchLineAppearance;
			this.StartOfNextHatchLine = StartOfNextHatchLine;
			this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
			this.PatternStart = PatternStart;
			this.HatchLineAngle = HatchLineAngle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleHatching
		{
			return new IfcFillAreaStyleHatching(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.HatchLineAppearance, this.StartOfNextHatchLine, this.PointOfReferenceHatchLine, this.PatternStart, this.HatchLineAngle);
			return args;
		}
	}
	export class IfcFillAreaStyleTileSymbolWithStyle extends IFC2X3.IfcGeometricRepresentationItem {
		Symbol: (Handle<IFC2X3.IfcAnnotationSymbolOccurrence> | IFC2X3.IfcAnnotationSymbolOccurrence) ;
		constructor(expressID: number, type: number, Symbol: (Handle<IFC2X3.IfcAnnotationSymbolOccurrence> | IFC2X3.IfcAnnotationSymbolOccurrence) )
		{
			super(expressID,type);
			this.Symbol = Symbol;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleTileSymbolWithStyle
		{
			return new IfcFillAreaStyleTileSymbolWithStyle(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Symbol);
			return args;
		}
	}
	export class IfcFillAreaStyleTiles extends IFC2X3.IfcGeometricRepresentationItem {
		TilingPattern: (Handle<IFC2X3.IfcOneDirectionRepeatFactor> | IFC2X3.IfcOneDirectionRepeatFactor) ;
		Tiles: (Handle<IFC2X3.IfcFillAreaStyleTileShapeSelect> | IFC2X3.IfcFillAreaStyleTileShapeSelect)[] ;
		TilingScale: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) ;
		constructor(expressID: number, type: number, TilingPattern: (Handle<IFC2X3.IfcOneDirectionRepeatFactor> | IFC2X3.IfcOneDirectionRepeatFactor) , Tiles: (Handle<IFC2X3.IfcFillAreaStyleTileShapeSelect> | IFC2X3.IfcFillAreaStyleTileShapeSelect)[] , TilingScale: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) )
		{
			super(expressID,type);
			this.TilingPattern = TilingPattern;
			this.Tiles = Tiles;
			this.TilingScale = TilingScale;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleTiles
		{
			return new IfcFillAreaStyleTiles(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TilingPattern, this.Tiles, this.TilingScale);
			return args;
		}
	}
	export class IfcFluidFlowProperties extends IFC2X3.IfcPropertySetDefinition {
		PropertySource: (Handle<IFC2X3.IfcPropertySourceEnum> | IFC2X3.IfcPropertySourceEnum) ;
		FlowConditionTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		VelocityTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		FlowrateTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		Fluid: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) ;
		PressureTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		UserDefinedPropertySource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		TemperatureSingleValue: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		WetBulbTemperatureSingleValue: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null;
		WetBulbTemperatureTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		TemperatureTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null;
		FlowrateSingleValue: (Handle<IFC2X3.IfcDerivedMeasureValue> | IFC2X3.IfcDerivedMeasureValue) | null;
		FlowConditionSingleValue: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		VelocitySingleValue: (Handle<IFC2X3.IfcLinearVelocityMeasure> | IFC2X3.IfcLinearVelocityMeasure) | null;
		PressureSingleValue: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, PropertySource: (Handle<IFC2X3.IfcPropertySourceEnum> | IFC2X3.IfcPropertySourceEnum) , FlowConditionTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, VelocityTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, FlowrateTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, Fluid: (Handle<IFC2X3.IfcMaterial> | IFC2X3.IfcMaterial) , PressureTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, UserDefinedPropertySource: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TemperatureSingleValue: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, WetBulbTemperatureSingleValue: (Handle<IFC2X3.IfcThermodynamicTemperatureMeasure> | IFC2X3.IfcThermodynamicTemperatureMeasure) | null, WetBulbTemperatureTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, TemperatureTimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) | null, FlowrateSingleValue: (Handle<IFC2X3.IfcDerivedMeasureValue> | IFC2X3.IfcDerivedMeasureValue) | null, FlowConditionSingleValue: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null, VelocitySingleValue: (Handle<IFC2X3.IfcLinearVelocityMeasure> | IFC2X3.IfcLinearVelocityMeasure) | null, PressureSingleValue: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.PropertySource = PropertySource;
			this.FlowConditionTimeSeries = FlowConditionTimeSeries;
			this.VelocityTimeSeries = VelocityTimeSeries;
			this.FlowrateTimeSeries = FlowrateTimeSeries;
			this.Fluid = Fluid;
			this.PressureTimeSeries = PressureTimeSeries;
			this.UserDefinedPropertySource = UserDefinedPropertySource;
			this.TemperatureSingleValue = TemperatureSingleValue;
			this.WetBulbTemperatureSingleValue = WetBulbTemperatureSingleValue;
			this.WetBulbTemperatureTimeSeries = WetBulbTemperatureTimeSeries;
			this.TemperatureTimeSeries = TemperatureTimeSeries;
			this.FlowrateSingleValue = FlowrateSingleValue;
			this.FlowConditionSingleValue = FlowConditionSingleValue;
			this.VelocitySingleValue = VelocitySingleValue;
			this.PressureSingleValue = PressureSingleValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFluidFlowProperties
		{
			return new IfcFluidFlowProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.PropertySource, this.FlowConditionTimeSeries, this.VelocityTimeSeries, this.FlowrateTimeSeries, this.Fluid, this.PressureTimeSeries, this.UserDefinedPropertySource, this.TemperatureSingleValue, this.WetBulbTemperatureSingleValue, this.WetBulbTemperatureTimeSeries, this.TemperatureTimeSeries, this.FlowrateSingleValue, this.FlowConditionSingleValue, this.VelocitySingleValue, this.PressureSingleValue);
			return args;
		}
	}
	export class IfcFurnishingElementType extends IFC2X3.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnishingElementType
		{
			return new IfcFurnishingElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFurnitureType extends IFC2X3.IfcFurnishingElementType {
		AssemblyPlace: (Handle<IFC2X3.IfcAssemblyPlaceEnum> | IFC2X3.IfcAssemblyPlaceEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, AssemblyPlace: (Handle<IFC2X3.IfcAssemblyPlaceEnum> | IFC2X3.IfcAssemblyPlaceEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.AssemblyPlace = AssemblyPlace;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnitureType
		{
			return new IfcFurnitureType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.AssemblyPlace);
			return args;
		}
	}
	export class IfcGeometricCurveSet extends IFC2X3.IfcGeometricSet {
		constructor(expressID: number, type: number, Elements: (Handle<IFC2X3.IfcGeometricSetSelect> | IFC2X3.IfcGeometricSetSelect)[] )
		{
			super(expressID,type,Elements);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricCurveSet
		{
			return new IfcGeometricCurveSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Elements);
			return args;
		}
	}
	export class IfcIShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		OverallDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , OverallDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.OverallWidth = OverallWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIShapeProfileDef
		{
			return new IfcIShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.OverallWidth, this.OverallDepth, this.WebThickness, this.FlangeThickness, this.FilletRadius);
			return args;
		}
	}
	export class IfcLShapeProfileDef extends IFC2X3.IfcParameterizedProfileDef {
		Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Width: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		EdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		LegSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null;
		CentreOfGravityInX: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Depth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Width: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, EdgeRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, LegSlope: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) | null, CentreOfGravityInX: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.Width = Width;
			this.Thickness = Thickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.LegSlope = LegSlope;
			this.CentreOfGravityInX = CentreOfGravityInX;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLShapeProfileDef
		{
			return new IfcLShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.Width, this.Thickness, this.FilletRadius, this.EdgeRadius, this.LegSlope, this.CentreOfGravityInX, this.CentreOfGravityInY);
			return args;
		}
	}
	export class IfcLine extends IFC2X3.IfcCurve {
		Pnt: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) ;
		Dir: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) ;
		constructor(expressID: number, type: number, Pnt: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint) , Dir: (Handle<IFC2X3.IfcVector> | IFC2X3.IfcVector) )
		{
			super(expressID,type);
			this.Pnt = Pnt;
			this.Dir = Dir;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLine
		{
			return new IfcLine(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Pnt, this.Dir);
			return args;
		}
	}
	export class IfcManifoldSolidBrep extends IFC2X3.IfcSolidModel {
		Outer: (Handle<IFC2X3.IfcClosedShell> | IFC2X3.IfcClosedShell) ;
		constructor(expressID: number, type: number, Outer: (Handle<IFC2X3.IfcClosedShell> | IFC2X3.IfcClosedShell) )
		{
			super(expressID,type);
			this.Outer = Outer;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcManifoldSolidBrep
		{
			return new IfcManifoldSolidBrep(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer);
			return args;
		}
	}
	export class IfcObject extends IFC2X3.IfcObjectDefinition {
		ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		IsDefinedBy!: (Handle<IFC2X3.IfcRelDefines> | IFC2X3.IfcRelDefines)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ObjectType = ObjectType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObject
		{
			return new IfcObject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcOffsetCurve2D extends IFC2X3.IfcCurve {
		BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		Distance: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		SelfIntersect: boolean ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , Distance: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , SelfIntersect: boolean )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve2D
		{
			return new IfcOffsetCurve2D(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.Distance, this.SelfIntersect);
			return args;
		}
	}
	export class IfcOffsetCurve3D extends IFC2X3.IfcCurve {
		BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		Distance: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		SelfIntersect: boolean ;
		RefDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , Distance: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , SelfIntersect: boolean , RefDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
			this.RefDirection = RefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve3D
		{
			return new IfcOffsetCurve3D(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.Distance, this.SelfIntersect, this.RefDirection);
			return args;
		}
	}
	export class IfcPermeableCoveringProperties extends IFC2X3.IfcPropertySetDefinition {
		OperationType: (Handle<IFC2X3.IfcPermeableCoveringOperationEnum> | IFC2X3.IfcPermeableCoveringOperationEnum) ;
		PanelPosition: (Handle<IFC2X3.IfcWindowPanelPositionEnum> | IFC2X3.IfcWindowPanelPositionEnum) ;
		FrameDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		FrameThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, OperationType: (Handle<IFC2X3.IfcPermeableCoveringOperationEnum> | IFC2X3.IfcPermeableCoveringOperationEnum) , PanelPosition: (Handle<IFC2X3.IfcWindowPanelPositionEnum> | IFC2X3.IfcWindowPanelPositionEnum) , FrameDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, FrameThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, ShapeAspectStyle: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPermeableCoveringProperties
		{
			return new IfcPermeableCoveringProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.OperationType, this.PanelPosition, this.FrameDepth, this.FrameThickness, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcPlanarBox extends IFC2X3.IfcPlanarExtent {
		Placement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		constructor(expressID: number, type: number, SizeInX: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , SizeInY: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) , Placement: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) )
		{
			super(expressID,type,SizeInX, SizeInY);
			this.Placement = Placement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlanarBox
		{
			return new IfcPlanarBox(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SizeInX, this.SizeInY, this.Placement);
			return args;
		}
	}
	export class IfcPlane extends IFC2X3.IfcElementarySurface {
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) )
		{
			super(expressID,type,Position);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlane
		{
			return new IfcPlane(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcProcess extends IFC2X3.IfcObject {
		OperatesOn!: (Handle<IFC2X3.IfcRelAssignsToProcess> | IFC2X3.IfcRelAssignsToProcess)[] | null;
		IsSuccessorFrom!: (Handle<IFC2X3.IfcRelSequence> | IFC2X3.IfcRelSequence)[] | null;
		IsPredecessorTo!: (Handle<IFC2X3.IfcRelSequence> | IFC2X3.IfcRelSequence)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProcess
		{
			return new IfcProcess(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcProduct extends IFC2X3.IfcObject {
		ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null;
		Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null;
		ReferencedBy!: (Handle<IFC2X3.IfcRelAssignsToProduct> | IFC2X3.IfcRelAssignsToProduct)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProduct
		{
			return new IfcProduct(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcProject extends IFC2X3.IfcObject {
		LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Phase: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		RepresentationContexts: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext)[] ;
		UnitsInContext: (Handle<IFC2X3.IfcUnitAssignment> | IFC2X3.IfcUnitAssignment) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Phase: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RepresentationContexts: (Handle<IFC2X3.IfcRepresentationContext> | IFC2X3.IfcRepresentationContext)[] , UnitsInContext: (Handle<IFC2X3.IfcUnitAssignment> | IFC2X3.IfcUnitAssignment) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProject
		{
			return new IfcProject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName, this.Phase, this.RepresentationContexts, this.UnitsInContext);
			return args;
		}
	}
	export class IfcProjectionCurve extends IFC2X3.IfcAnnotationCurveOccurrence {
		constructor(expressID: number, type: number, Item: (Handle<IFC2X3.IfcRepresentationItem> | IFC2X3.IfcRepresentationItem) | null, Styles: (Handle<IFC2X3.IfcPresentationStyleAssignment> | IFC2X3.IfcPresentationStyleAssignment)[] , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,Item, Styles, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectionCurve
		{
			return new IfcProjectionCurve(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcPropertySet extends IFC2X3.IfcPropertySetDefinition {
		HasProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, HasProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.HasProperties = HasProperties;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySet
		{
			return new IfcPropertySet(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.HasProperties);
			return args;
		}
	}
	export class IfcProxy extends IFC2X3.IfcProduct {
		ProxyType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) ;
		Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, ProxyType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) , Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.ProxyType = ProxyType;
			this.Tag = Tag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProxy
		{
			return new IfcProxy(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.ProxyType, this.Tag);
			return args;
		}
	}
	export class IfcRectangleHollowProfileDef extends IFC2X3.IfcRectangleProfileDef {
		WallThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		InnerFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		OuterFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , XDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YDim: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WallThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , InnerFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, OuterFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position, XDim, YDim);
			this.WallThickness = WallThickness;
			this.InnerFilletRadius = InnerFilletRadius;
			this.OuterFilletRadius = OuterFilletRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangleHollowProfileDef
		{
			return new IfcRectangleHollowProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.XDim, this.YDim, this.WallThickness, this.InnerFilletRadius, this.OuterFilletRadius);
			return args;
		}
	}
	export class IfcRectangularPyramid extends IFC2X3.IfcCsgPrimitive3D {
		XLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		YLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , XLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.XLength = XLength;
			this.YLength = YLength;
			this.Height = Height;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangularPyramid
		{
			return new IfcRectangularPyramid(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.XLength, this.YLength, this.Height);
			return args;
		}
	}
	export class IfcRectangularTrimmedSurface extends IFC2X3.IfcBoundedSurface {
		BasisSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) ;
		U1: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		V1: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		U2: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		V2: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		Usense: boolean ;
		Vsense: boolean ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) , U1: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , V1: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , U2: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , V2: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , Usense: boolean , Vsense: boolean )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.U1 = U1;
			this.V1 = V1;
			this.U2 = U2;
			this.V2 = V2;
			this.Usense = Usense;
			this.Vsense = Vsense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangularTrimmedSurface
		{
			return new IfcRectangularTrimmedSurface(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.U1, this.V1, this.U2, this.V2, this.Usense, this.Vsense);
			return args;
		}
	}
	export class IfcRelAssigns extends IFC2X3.IfcRelationship {
		RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] ;
		RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssigns
		{
			return new IfcRelAssigns(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType);
			return args;
		}
	}
	export class IfcRelAssignsToActor extends IFC2X3.IfcRelAssigns {
		RelatingActor: (Handle<IFC2X3.IfcActor> | IFC2X3.IfcActor) ;
		ActingRole: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingActor: (Handle<IFC2X3.IfcActor> | IFC2X3.IfcActor) , ActingRole: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingActor = RelatingActor;
			this.ActingRole = ActingRole;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToActor
		{
			return new IfcRelAssignsToActor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingActor, this.ActingRole);
			return args;
		}
	}
	export class IfcRelAssignsToControl extends IFC2X3.IfcRelAssigns {
		RelatingControl: (Handle<IFC2X3.IfcControl> | IFC2X3.IfcControl) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingControl: (Handle<IFC2X3.IfcControl> | IFC2X3.IfcControl) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingControl = RelatingControl;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToControl
		{
			return new IfcRelAssignsToControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingControl);
			return args;
		}
	}
	export class IfcRelAssignsToGroup extends IFC2X3.IfcRelAssigns {
		RelatingGroup: (Handle<IFC2X3.IfcGroup> | IFC2X3.IfcGroup) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingGroup: (Handle<IFC2X3.IfcGroup> | IFC2X3.IfcGroup) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingGroup = RelatingGroup;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToGroup
		{
			return new IfcRelAssignsToGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingGroup);
			return args;
		}
	}
	export class IfcRelAssignsToProcess extends IFC2X3.IfcRelAssigns {
		RelatingProcess: (Handle<IFC2X3.IfcProcess> | IFC2X3.IfcProcess) ;
		QuantityInProcess: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingProcess: (Handle<IFC2X3.IfcProcess> | IFC2X3.IfcProcess) , QuantityInProcess: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingProcess = RelatingProcess;
			this.QuantityInProcess = QuantityInProcess;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProcess
		{
			return new IfcRelAssignsToProcess(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingProcess, this.QuantityInProcess);
			return args;
		}
	}
	export class IfcRelAssignsToProduct extends IFC2X3.IfcRelAssigns {
		RelatingProduct: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingProduct: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingProduct = RelatingProduct;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProduct
		{
			return new IfcRelAssignsToProduct(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingProduct);
			return args;
		}
	}
	export class IfcRelAssignsToProjectOrder extends IFC2X3.IfcRelAssignsToControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingControl: (Handle<IFC2X3.IfcControl> | IFC2X3.IfcControl) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProjectOrder
		{
			return new IfcRelAssignsToProjectOrder(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingControl);
			return args;
		}
	}
	export class IfcRelAssignsToResource extends IFC2X3.IfcRelAssigns {
		RelatingResource: (Handle<IFC2X3.IfcResource> | IFC2X3.IfcResource) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingResource: (Handle<IFC2X3.IfcResource> | IFC2X3.IfcResource) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingResource = RelatingResource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToResource
		{
			return new IfcRelAssignsToResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingResource);
			return args;
		}
	}
	export class IfcRelAssociates extends IFC2X3.IfcRelationship {
		RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociates
		{
			return new IfcRelAssociates(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelAssociatesAppliedValue extends IFC2X3.IfcRelAssociates {
		RelatingAppliedValue: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingAppliedValue: (Handle<IFC2X3.IfcAppliedValue> | IFC2X3.IfcAppliedValue) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingAppliedValue = RelatingAppliedValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesAppliedValue
		{
			return new IfcRelAssociatesAppliedValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingAppliedValue);
			return args;
		}
	}
	export class IfcRelAssociatesApproval extends IFC2X3.IfcRelAssociates {
		RelatingApproval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingApproval: (Handle<IFC2X3.IfcApproval> | IFC2X3.IfcApproval) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingApproval = RelatingApproval;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesApproval
		{
			return new IfcRelAssociatesApproval(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingApproval);
			return args;
		}
	}
	export class IfcRelAssociatesClassification extends IFC2X3.IfcRelAssociates {
		RelatingClassification: (Handle<IFC2X3.IfcClassificationNotationSelect> | IFC2X3.IfcClassificationNotationSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingClassification: (Handle<IFC2X3.IfcClassificationNotationSelect> | IFC2X3.IfcClassificationNotationSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingClassification = RelatingClassification;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesClassification
		{
			return new IfcRelAssociatesClassification(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingClassification);
			return args;
		}
	}
	export class IfcRelAssociatesConstraint extends IFC2X3.IfcRelAssociates {
		Intent: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , Intent: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) , RelatingConstraint: (Handle<IFC2X3.IfcConstraint> | IFC2X3.IfcConstraint) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.Intent = Intent;
			this.RelatingConstraint = RelatingConstraint;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesConstraint
		{
			return new IfcRelAssociatesConstraint(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.Intent, this.RelatingConstraint);
			return args;
		}
	}
	export class IfcRelAssociatesDocument extends IFC2X3.IfcRelAssociates {
		RelatingDocument: (Handle<IFC2X3.IfcDocumentSelect> | IFC2X3.IfcDocumentSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingDocument: (Handle<IFC2X3.IfcDocumentSelect> | IFC2X3.IfcDocumentSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingDocument = RelatingDocument;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesDocument
		{
			return new IfcRelAssociatesDocument(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingDocument);
			return args;
		}
	}
	export class IfcRelAssociatesLibrary extends IFC2X3.IfcRelAssociates {
		RelatingLibrary: (Handle<IFC2X3.IfcLibrarySelect> | IFC2X3.IfcLibrarySelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingLibrary: (Handle<IFC2X3.IfcLibrarySelect> | IFC2X3.IfcLibrarySelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingLibrary = RelatingLibrary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesLibrary
		{
			return new IfcRelAssociatesLibrary(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingLibrary);
			return args;
		}
	}
	export class IfcRelAssociatesMaterial extends IFC2X3.IfcRelAssociates {
		RelatingMaterial: (Handle<IFC2X3.IfcMaterialSelect> | IFC2X3.IfcMaterialSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingMaterial: (Handle<IFC2X3.IfcMaterialSelect> | IFC2X3.IfcMaterialSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingMaterial = RelatingMaterial;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesMaterial
		{
			return new IfcRelAssociatesMaterial(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingMaterial);
			return args;
		}
	}
	export class IfcRelAssociatesProfileProperties extends IFC2X3.IfcRelAssociates {
		RelatingProfileProperties: (Handle<IFC2X3.IfcProfileProperties> | IFC2X3.IfcProfileProperties) ;
		ProfileSectionLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null;
		ProfileOrientation: (Handle<IFC2X3.IfcOrientationSelect> | IFC2X3.IfcOrientationSelect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcRoot> | IFC2X3.IfcRoot)[] , RelatingProfileProperties: (Handle<IFC2X3.IfcProfileProperties> | IFC2X3.IfcProfileProperties) , ProfileSectionLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) | null, ProfileOrientation: (Handle<IFC2X3.IfcOrientationSelect> | IFC2X3.IfcOrientationSelect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingProfileProperties = RelatingProfileProperties;
			this.ProfileSectionLocation = ProfileSectionLocation;
			this.ProfileOrientation = ProfileOrientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesProfileProperties
		{
			return new IfcRelAssociatesProfileProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingProfileProperties, this.ProfileSectionLocation, this.ProfileOrientation);
			return args;
		}
	}
	export class IfcRelConnects extends IFC2X3.IfcRelationship {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnects
		{
			return new IfcRelConnects(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcRelConnectsElements extends IFC2X3.IfcRelConnects {
		ConnectionGeometry: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) | null;
		RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		RelatedElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ConnectionGeometry: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) | null, RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsElements
		{
			return new IfcRelConnectsElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ConnectionGeometry, this.RelatingElement, this.RelatedElement);
			return args;
		}
	}
	export class IfcRelConnectsPathElements extends IFC2X3.IfcRelConnectsElements {
		RelatingPriorities: number[] ;
		RelatedPriorities: number[] ;
		RelatedConnectionType: (Handle<IFC2X3.IfcConnectionTypeEnum> | IFC2X3.IfcConnectionTypeEnum) ;
		RelatingConnectionType: (Handle<IFC2X3.IfcConnectionTypeEnum> | IFC2X3.IfcConnectionTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ConnectionGeometry: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) | null, RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatingPriorities: number[] , RelatedPriorities: number[] , RelatedConnectionType: (Handle<IFC2X3.IfcConnectionTypeEnum> | IFC2X3.IfcConnectionTypeEnum) , RelatingConnectionType: (Handle<IFC2X3.IfcConnectionTypeEnum> | IFC2X3.IfcConnectionTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement);
			this.RelatingPriorities = RelatingPriorities;
			this.RelatedPriorities = RelatedPriorities;
			this.RelatedConnectionType = RelatedConnectionType;
			this.RelatingConnectionType = RelatingConnectionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPathElements
		{
			return new IfcRelConnectsPathElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ConnectionGeometry, this.RelatingElement, this.RelatedElement, this.RelatingPriorities, this.RelatedPriorities, this.RelatedConnectionType, this.RelatingConnectionType);
			return args;
		}
	}
	export class IfcRelConnectsPortToElement extends IFC2X3.IfcRelConnects {
		RelatingPort: (Handle<IFC2X3.IfcPort> | IFC2X3.IfcPort) ;
		RelatedElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingPort: (Handle<IFC2X3.IfcPort> | IFC2X3.IfcPort) , RelatedElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingPort = RelatingPort;
			this.RelatedElement = RelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPortToElement
		{
			return new IfcRelConnectsPortToElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingPort, this.RelatedElement);
			return args;
		}
	}
	export class IfcRelConnectsPorts extends IFC2X3.IfcRelConnects {
		RelatingPort: (Handle<IFC2X3.IfcPort> | IFC2X3.IfcPort) ;
		RelatedPort: (Handle<IFC2X3.IfcPort> | IFC2X3.IfcPort) ;
		RealizingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingPort: (Handle<IFC2X3.IfcPort> | IFC2X3.IfcPort) , RelatedPort: (Handle<IFC2X3.IfcPort> | IFC2X3.IfcPort) , RealizingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingPort = RelatingPort;
			this.RelatedPort = RelatedPort;
			this.RealizingElement = RealizingElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPorts
		{
			return new IfcRelConnectsPorts(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingPort, this.RelatedPort, this.RealizingElement);
			return args;
		}
	}
	export class IfcRelConnectsStructuralActivity extends IFC2X3.IfcRelConnects {
		RelatingElement: (Handle<IFC2X3.IfcStructuralActivityAssignmentSelect> | IFC2X3.IfcStructuralActivityAssignmentSelect) ;
		RelatedStructuralActivity: (Handle<IFC2X3.IfcStructuralActivity> | IFC2X3.IfcStructuralActivity) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingElement: (Handle<IFC2X3.IfcStructuralActivityAssignmentSelect> | IFC2X3.IfcStructuralActivityAssignmentSelect) , RelatedStructuralActivity: (Handle<IFC2X3.IfcStructuralActivity> | IFC2X3.IfcStructuralActivity) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralActivity = RelatedStructuralActivity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralActivity
		{
			return new IfcRelConnectsStructuralActivity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingElement, this.RelatedStructuralActivity);
			return args;
		}
	}
	export class IfcRelConnectsStructuralElement extends IFC2X3.IfcRelConnects {
		RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		RelatedStructuralMember: (Handle<IFC2X3.IfcStructuralMember> | IFC2X3.IfcStructuralMember) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedStructuralMember: (Handle<IFC2X3.IfcStructuralMember> | IFC2X3.IfcStructuralMember) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralMember = RelatedStructuralMember;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralElement
		{
			return new IfcRelConnectsStructuralElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingElement, this.RelatedStructuralMember);
			return args;
		}
	}
	export class IfcRelConnectsStructuralMember extends IFC2X3.IfcRelConnects {
		RelatingStructuralMember: (Handle<IFC2X3.IfcStructuralMember> | IFC2X3.IfcStructuralMember) ;
		RelatedStructuralConnection: (Handle<IFC2X3.IfcStructuralConnection> | IFC2X3.IfcStructuralConnection) ;
		AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null;
		AdditionalConditions: (Handle<IFC2X3.IfcStructuralConnectionCondition> | IFC2X3.IfcStructuralConnectionCondition) | null;
		SupportedLength: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		ConditionCoordinateSystem: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingStructuralMember: (Handle<IFC2X3.IfcStructuralMember> | IFC2X3.IfcStructuralMember) , RelatedStructuralConnection: (Handle<IFC2X3.IfcStructuralConnection> | IFC2X3.IfcStructuralConnection) , AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null, AdditionalConditions: (Handle<IFC2X3.IfcStructuralConnectionCondition> | IFC2X3.IfcStructuralConnectionCondition) | null, SupportedLength: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ConditionCoordinateSystem: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralMember
		{
			return new IfcRelConnectsStructuralMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingStructuralMember, this.RelatedStructuralConnection, this.AppliedCondition, this.AdditionalConditions, this.SupportedLength, this.ConditionCoordinateSystem);
			return args;
		}
	}
	export class IfcRelConnectsWithEccentricity extends IFC2X3.IfcRelConnectsStructuralMember {
		ConnectionConstraint: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingStructuralMember: (Handle<IFC2X3.IfcStructuralMember> | IFC2X3.IfcStructuralMember) , RelatedStructuralConnection: (Handle<IFC2X3.IfcStructuralConnection> | IFC2X3.IfcStructuralConnection) , AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null, AdditionalConditions: (Handle<IFC2X3.IfcStructuralConnectionCondition> | IFC2X3.IfcStructuralConnectionCondition) | null, SupportedLength: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ConditionCoordinateSystem: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) | null, ConnectionConstraint: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem);
			this.ConnectionConstraint = ConnectionConstraint;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsWithEccentricity
		{
			return new IfcRelConnectsWithEccentricity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingStructuralMember, this.RelatedStructuralConnection, this.AppliedCondition, this.AdditionalConditions, this.SupportedLength, this.ConditionCoordinateSystem, this.ConnectionConstraint);
			return args;
		}
	}
	export class IfcRelConnectsWithRealizingElements extends IFC2X3.IfcRelConnectsElements {
		RealizingElements: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement)[] ;
		ConnectionType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ConnectionGeometry: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) | null, RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RealizingElements: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement)[] , ConnectionType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement);
			this.RealizingElements = RealizingElements;
			this.ConnectionType = ConnectionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsWithRealizingElements
		{
			return new IfcRelConnectsWithRealizingElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ConnectionGeometry, this.RelatingElement, this.RelatedElement, this.RealizingElements, this.ConnectionType);
			return args;
		}
	}
	export class IfcRelContainedInSpatialStructure extends IFC2X3.IfcRelConnects {
		RelatedElements: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct)[] ;
		RelatingStructure: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedElements: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct)[] , RelatingStructure: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelContainedInSpatialStructure
		{
			return new IfcRelContainedInSpatialStructure(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedElements, this.RelatingStructure);
			return args;
		}
	}
	export class IfcRelCoversBldgElements extends IFC2X3.IfcRelConnects {
		RelatingBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		RelatedCoverings: (Handle<IFC2X3.IfcCovering> | IFC2X3.IfcCovering)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedCoverings: (Handle<IFC2X3.IfcCovering> | IFC2X3.IfcCovering)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedCoverings = RelatedCoverings;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelCoversBldgElements
		{
			return new IfcRelCoversBldgElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingBuildingElement, this.RelatedCoverings);
			return args;
		}
	}
	export class IfcRelCoversSpaces extends IFC2X3.IfcRelConnects {
		RelatedSpace: (Handle<IFC2X3.IfcSpace> | IFC2X3.IfcSpace) ;
		RelatedCoverings: (Handle<IFC2X3.IfcCovering> | IFC2X3.IfcCovering)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedSpace: (Handle<IFC2X3.IfcSpace> | IFC2X3.IfcSpace) , RelatedCoverings: (Handle<IFC2X3.IfcCovering> | IFC2X3.IfcCovering)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedSpace = RelatedSpace;
			this.RelatedCoverings = RelatedCoverings;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelCoversSpaces
		{
			return new IfcRelCoversSpaces(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedSpace, this.RelatedCoverings);
			return args;
		}
	}
	export class IfcRelDecomposes extends IFC2X3.IfcRelationship {
		RelatingObject: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition) ;
		RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingObject: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition) , RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDecomposes
		{
			return new IfcRelDecomposes(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingObject, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelDefines extends IFC2X3.IfcRelationship {
		RelatedObjects: (Handle<IFC2X3.IfcObject> | IFC2X3.IfcObject)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObject> | IFC2X3.IfcObject)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefines
		{
			return new IfcRelDefines(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelDefinesByProperties extends IFC2X3.IfcRelDefines {
		RelatingPropertyDefinition: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObject> | IFC2X3.IfcObject)[] , RelatingPropertyDefinition: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingPropertyDefinition = RelatingPropertyDefinition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByProperties
		{
			return new IfcRelDefinesByProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingPropertyDefinition);
			return args;
		}
	}
	export class IfcRelDefinesByType extends IFC2X3.IfcRelDefines {
		RelatingType: (Handle<IFC2X3.IfcTypeObject> | IFC2X3.IfcTypeObject) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObject> | IFC2X3.IfcObject)[] , RelatingType: (Handle<IFC2X3.IfcTypeObject> | IFC2X3.IfcTypeObject) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingType = RelatingType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByType
		{
			return new IfcRelDefinesByType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingType);
			return args;
		}
	}
	export class IfcRelFillsElement extends IFC2X3.IfcRelConnects {
		RelatingOpeningElement: (Handle<IFC2X3.IfcOpeningElement> | IFC2X3.IfcOpeningElement) ;
		RelatedBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingOpeningElement: (Handle<IFC2X3.IfcOpeningElement> | IFC2X3.IfcOpeningElement) , RelatedBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingOpeningElement = RelatingOpeningElement;
			this.RelatedBuildingElement = RelatedBuildingElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelFillsElement
		{
			return new IfcRelFillsElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingOpeningElement, this.RelatedBuildingElement);
			return args;
		}
	}
	export class IfcRelFlowControlElements extends IFC2X3.IfcRelConnects {
		RelatedControlElements: (Handle<IFC2X3.IfcDistributionControlElement> | IFC2X3.IfcDistributionControlElement)[] ;
		RelatingFlowElement: (Handle<IFC2X3.IfcDistributionFlowElement> | IFC2X3.IfcDistributionFlowElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedControlElements: (Handle<IFC2X3.IfcDistributionControlElement> | IFC2X3.IfcDistributionControlElement)[] , RelatingFlowElement: (Handle<IFC2X3.IfcDistributionFlowElement> | IFC2X3.IfcDistributionFlowElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedControlElements = RelatedControlElements;
			this.RelatingFlowElement = RelatingFlowElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelFlowControlElements
		{
			return new IfcRelFlowControlElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedControlElements, this.RelatingFlowElement);
			return args;
		}
	}
	export class IfcRelInteractionRequirements extends IFC2X3.IfcRelConnects {
		DailyInteraction: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) | null;
		ImportanceRating: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		LocationOfInteraction: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) | null;
		RelatedSpaceProgram: (Handle<IFC2X3.IfcSpaceProgram> | IFC2X3.IfcSpaceProgram) ;
		RelatingSpaceProgram: (Handle<IFC2X3.IfcSpaceProgram> | IFC2X3.IfcSpaceProgram) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, DailyInteraction: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) | null, ImportanceRating: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, LocationOfInteraction: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) | null, RelatedSpaceProgram: (Handle<IFC2X3.IfcSpaceProgram> | IFC2X3.IfcSpaceProgram) , RelatingSpaceProgram: (Handle<IFC2X3.IfcSpaceProgram> | IFC2X3.IfcSpaceProgram) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.DailyInteraction = DailyInteraction;
			this.ImportanceRating = ImportanceRating;
			this.LocationOfInteraction = LocationOfInteraction;
			this.RelatedSpaceProgram = RelatedSpaceProgram;
			this.RelatingSpaceProgram = RelatingSpaceProgram;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelInteractionRequirements
		{
			return new IfcRelInteractionRequirements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.DailyInteraction, this.ImportanceRating, this.LocationOfInteraction, this.RelatedSpaceProgram, this.RelatingSpaceProgram);
			return args;
		}
	}
	export class IfcRelNests extends IFC2X3.IfcRelDecomposes {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingObject: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition) , RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelNests
		{
			return new IfcRelNests(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingObject, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelOccupiesSpaces extends IFC2X3.IfcRelAssignsToActor {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingActor: (Handle<IFC2X3.IfcActor> | IFC2X3.IfcActor) , ActingRole: (Handle<IFC2X3.IfcActorRole> | IFC2X3.IfcActorRole) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingActor, ActingRole);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelOccupiesSpaces
		{
			return new IfcRelOccupiesSpaces(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingActor, this.ActingRole);
			return args;
		}
	}
	export class IfcRelOverridesProperties extends IFC2X3.IfcRelDefinesByProperties {
		OverridingProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObject> | IFC2X3.IfcObject)[] , RelatingPropertyDefinition: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition) , OverridingProperties: (Handle<IFC2X3.IfcProperty> | IFC2X3.IfcProperty)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingPropertyDefinition);
			this.OverridingProperties = OverridingProperties;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelOverridesProperties
		{
			return new IfcRelOverridesProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingPropertyDefinition, this.OverridingProperties);
			return args;
		}
	}
	export class IfcRelProjectsElement extends IFC2X3.IfcRelConnects {
		RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		RelatedFeatureElement: (Handle<IFC2X3.IfcFeatureElementAddition> | IFC2X3.IfcFeatureElementAddition) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedFeatureElement: (Handle<IFC2X3.IfcFeatureElementAddition> | IFC2X3.IfcFeatureElementAddition) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingElement = RelatingElement;
			this.RelatedFeatureElement = RelatedFeatureElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelProjectsElement
		{
			return new IfcRelProjectsElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingElement, this.RelatedFeatureElement);
			return args;
		}
	}
	export class IfcRelReferencedInSpatialStructure extends IFC2X3.IfcRelConnects {
		RelatedElements: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct)[] ;
		RelatingStructure: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedElements: (Handle<IFC2X3.IfcProduct> | IFC2X3.IfcProduct)[] , RelatingStructure: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelReferencedInSpatialStructure
		{
			return new IfcRelReferencedInSpatialStructure(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedElements, this.RelatingStructure);
			return args;
		}
	}
	export class IfcRelSchedulesCostItems extends IFC2X3.IfcRelAssignsToControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingControl: (Handle<IFC2X3.IfcControl> | IFC2X3.IfcControl) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSchedulesCostItems
		{
			return new IfcRelSchedulesCostItems(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingControl);
			return args;
		}
	}
	export class IfcRelSequence extends IFC2X3.IfcRelConnects {
		RelatingProcess: (Handle<IFC2X3.IfcProcess> | IFC2X3.IfcProcess) ;
		RelatedProcess: (Handle<IFC2X3.IfcProcess> | IFC2X3.IfcProcess) ;
		TimeLag: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) ;
		SequenceType: (Handle<IFC2X3.IfcSequenceEnum> | IFC2X3.IfcSequenceEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingProcess: (Handle<IFC2X3.IfcProcess> | IFC2X3.IfcProcess) , RelatedProcess: (Handle<IFC2X3.IfcProcess> | IFC2X3.IfcProcess) , TimeLag: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) , SequenceType: (Handle<IFC2X3.IfcSequenceEnum> | IFC2X3.IfcSequenceEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingProcess = RelatingProcess;
			this.RelatedProcess = RelatedProcess;
			this.TimeLag = TimeLag;
			this.SequenceType = SequenceType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSequence
		{
			return new IfcRelSequence(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingProcess, this.RelatedProcess, this.TimeLag, this.SequenceType);
			return args;
		}
	}
	export class IfcRelServicesBuildings extends IFC2X3.IfcRelConnects {
		RelatingSystem: (Handle<IFC2X3.IfcSystem> | IFC2X3.IfcSystem) ;
		RelatedBuildings: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingSystem: (Handle<IFC2X3.IfcSystem> | IFC2X3.IfcSystem) , RelatedBuildings: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingSystem = RelatingSystem;
			this.RelatedBuildings = RelatedBuildings;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelServicesBuildings
		{
			return new IfcRelServicesBuildings(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSystem, this.RelatedBuildings);
			return args;
		}
	}
	export class IfcRelSpaceBoundary extends IFC2X3.IfcRelConnects {
		RelatingSpace: (Handle<IFC2X3.IfcSpace> | IFC2X3.IfcSpace) ;
		RelatedBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) | null;
		ConnectionGeometry: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) | null;
		PhysicalOrVirtualBoundary: (Handle<IFC2X3.IfcPhysicalOrVirtualEnum> | IFC2X3.IfcPhysicalOrVirtualEnum) ;
		InternalOrExternalBoundary: (Handle<IFC2X3.IfcInternalOrExternalEnum> | IFC2X3.IfcInternalOrExternalEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingSpace: (Handle<IFC2X3.IfcSpace> | IFC2X3.IfcSpace) , RelatedBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) | null, ConnectionGeometry: (Handle<IFC2X3.IfcConnectionGeometry> | IFC2X3.IfcConnectionGeometry) | null, PhysicalOrVirtualBoundary: (Handle<IFC2X3.IfcPhysicalOrVirtualEnum> | IFC2X3.IfcPhysicalOrVirtualEnum) , InternalOrExternalBoundary: (Handle<IFC2X3.IfcInternalOrExternalEnum> | IFC2X3.IfcInternalOrExternalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary
		{
			return new IfcRelSpaceBoundary(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSpace, this.RelatedBuildingElement, this.ConnectionGeometry, this.PhysicalOrVirtualBoundary, this.InternalOrExternalBoundary);
			return args;
		}
	}
	export class IfcRelVoidsElement extends IFC2X3.IfcRelConnects {
		RelatingBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) ;
		RelatedOpeningElement: (Handle<IFC2X3.IfcFeatureElementSubtraction> | IFC2X3.IfcFeatureElementSubtraction) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingBuildingElement: (Handle<IFC2X3.IfcElement> | IFC2X3.IfcElement) , RelatedOpeningElement: (Handle<IFC2X3.IfcFeatureElementSubtraction> | IFC2X3.IfcFeatureElementSubtraction) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedOpeningElement = RelatedOpeningElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelVoidsElement
		{
			return new IfcRelVoidsElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingBuildingElement, this.RelatedOpeningElement);
			return args;
		}
	}
	export class IfcResource extends IFC2X3.IfcObject {
		ResourceOf!: (Handle<IFC2X3.IfcRelAssignsToResource> | IFC2X3.IfcRelAssignsToResource)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcResource
		{
			return new IfcResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcRevolvedAreaSolid extends IFC2X3.IfcSweptAreaSolid {
		Axis: (Handle<IFC2X3.IfcAxis1Placement> | IFC2X3.IfcAxis1Placement) ;
		Angle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , Axis: (Handle<IFC2X3.IfcAxis1Placement> | IFC2X3.IfcAxis1Placement) , Angle: (Handle<IFC2X3.IfcPlaneAngleMeasure> | IFC2X3.IfcPlaneAngleMeasure) )
		{
			super(expressID,type,SweptArea, Position);
			this.Axis = Axis;
			this.Angle = Angle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRevolvedAreaSolid
		{
			return new IfcRevolvedAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.Axis, this.Angle);
			return args;
		}
	}
	export class IfcRightCircularCone extends IFC2X3.IfcCsgPrimitive3D {
		Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		BottomRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , BottomRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Height = Height;
			this.BottomRadius = BottomRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRightCircularCone
		{
			return new IfcRightCircularCone(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Height, this.BottomRadius);
			return args;
		}
	}
	export class IfcRightCircularCylinder extends IFC2X3.IfcCsgPrimitive3D {
		Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Height = Height;
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRightCircularCylinder
		{
			return new IfcRightCircularCylinder(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Height, this.Radius);
			return args;
		}
	}
	export class IfcSpatialStructureElement extends IFC2X3.IfcProduct {
		LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) ;
		ReferencesElements!: (Handle<IFC2X3.IfcRelReferencedInSpatialStructure> | IFC2X3.IfcRelReferencedInSpatialStructure)[] | null;
		ServicedBySystems!: (Handle<IFC2X3.IfcRelServicesBuildings> | IFC2X3.IfcRelServicesBuildings)[] | null;
		ContainsElements!: (Handle<IFC2X3.IfcRelContainedInSpatialStructure> | IFC2X3.IfcRelContainedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.LongName = LongName;
			this.CompositionType = CompositionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialStructureElement
		{
			return new IfcSpatialStructureElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType);
			return args;
		}
	}
	export class IfcSpatialStructureElementType extends IFC2X3.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialStructureElementType
		{
			return new IfcSpatialStructureElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcSphere extends IFC2X3.IfcCsgPrimitive3D {
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSphere
		{
			return new IfcSphere(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Radius);
			return args;
		}
	}
	export class IfcStructuralActivity extends IFC2X3.IfcProduct {
		AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) ;
		GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) ;
		AssignedToStructuralItem!: (Handle<IFC2X3.IfcRelConnectsStructuralActivity> | IFC2X3.IfcRelConnectsStructuralActivity) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralActivity
		{
			return new IfcStructuralActivity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcStructuralItem extends IFC2X3.IfcProduct {
		AssignedStructuralActivity!: (Handle<IFC2X3.IfcRelConnectsStructuralActivity> | IFC2X3.IfcRelConnectsStructuralActivity)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralItem
		{
			return new IfcStructuralItem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcStructuralMember extends IFC2X3.IfcStructuralItem {
		ReferencesElement!: (Handle<IFC2X3.IfcRelConnectsStructuralElement> | IFC2X3.IfcRelConnectsStructuralElement)[] | null;
		ConnectedBy!: (Handle<IFC2X3.IfcRelConnectsStructuralMember> | IFC2X3.IfcRelConnectsStructuralMember)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralMember
		{
			return new IfcStructuralMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcStructuralReaction extends IFC2X3.IfcStructuralActivity {
		Causes!: (Handle<IFC2X3.IfcStructuralAction> | IFC2X3.IfcStructuralAction)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralReaction
		{
			return new IfcStructuralReaction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcStructuralSurfaceMember extends IFC2X3.IfcStructuralMember {
		PredefinedType: (Handle<IFC2X3.IfcStructuralSurfaceTypeEnum> | IFC2X3.IfcStructuralSurfaceTypeEnum) ;
		Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC2X3.IfcStructuralSurfaceTypeEnum> | IFC2X3.IfcStructuralSurfaceTypeEnum) , Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceMember
		{
			return new IfcStructuralSurfaceMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType, this.Thickness);
			return args;
		}
	}
	export class IfcStructuralSurfaceMemberVarying extends IFC2X3.IfcStructuralSurfaceMember {
		SubsequentThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure)[] ;
		VaryingThicknessLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC2X3.IfcStructuralSurfaceTypeEnum> | IFC2X3.IfcStructuralSurfaceTypeEnum) , Thickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, SubsequentThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure)[] , VaryingThicknessLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness);
			this.SubsequentThickness = SubsequentThickness;
			this.VaryingThicknessLocation = VaryingThicknessLocation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceMemberVarying
		{
			return new IfcStructuralSurfaceMemberVarying(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType, this.Thickness, this.SubsequentThickness, this.VaryingThicknessLocation);
			return args;
		}
	}
	export class IfcStructuredDimensionCallout extends IFC2X3.IfcDraughtingCallout {
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type,Contents);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuredDimensionCallout
		{
			return new IfcStructuredDimensionCallout(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcSurfaceCurveSweptAreaSolid extends IFC2X3.IfcSweptAreaSolid {
		Directrix: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		StartParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		EndParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) ;
		ReferenceSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , Directrix: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , StartParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , EndParam: (Handle<IFC2X3.IfcParameterValue> | IFC2X3.IfcParameterValue) , ReferenceSurface: (Handle<IFC2X3.IfcSurface> | IFC2X3.IfcSurface) )
		{
			super(expressID,type,SweptArea, Position);
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.ReferenceSurface = ReferenceSurface;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceCurveSweptAreaSolid
		{
			return new IfcSurfaceCurveSweptAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.Directrix, this.StartParam, this.EndParam, this.ReferenceSurface);
			return args;
		}
	}
	export class IfcSurfaceOfLinearExtrusion extends IFC2X3.IfcSweptSurface {
		ExtrudedDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) ;
		Depth: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, SweptCurve: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , ExtrudedDirection: (Handle<IFC2X3.IfcDirection> | IFC2X3.IfcDirection) , Depth: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) )
		{
			super(expressID,type,SweptCurve, Position);
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceOfLinearExtrusion
		{
			return new IfcSurfaceOfLinearExtrusion(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptCurve, this.Position, this.ExtrudedDirection, this.Depth);
			return args;
		}
	}
	export class IfcSurfaceOfRevolution extends IFC2X3.IfcSweptSurface {
		AxisPosition: (Handle<IFC2X3.IfcAxis1Placement> | IFC2X3.IfcAxis1Placement) ;
		constructor(expressID: number, type: number, SweptCurve: (Handle<IFC2X3.IfcProfileDef> | IFC2X3.IfcProfileDef) , Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , AxisPosition: (Handle<IFC2X3.IfcAxis1Placement> | IFC2X3.IfcAxis1Placement) )
		{
			super(expressID,type,SweptCurve, Position);
			this.AxisPosition = AxisPosition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceOfRevolution
		{
			return new IfcSurfaceOfRevolution(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptCurve, this.Position, this.AxisPosition);
			return args;
		}
	}
	export class IfcSystemFurnitureElementType extends IFC2X3.IfcFurnishingElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSystemFurnitureElementType
		{
			return new IfcSystemFurnitureElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcTask extends IFC2X3.IfcProcess {
		TaskId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		WorkMethod: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		IsMilestone: boolean ;
		Priority: number | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TaskId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, WorkMethod: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, IsMilestone: boolean , Priority: number | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.TaskId = TaskId;
			this.Status = Status;
			this.WorkMethod = WorkMethod;
			this.IsMilestone = IsMilestone;
			this.Priority = Priority;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTask
		{
			return new IfcTask(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TaskId, this.Status, this.WorkMethod, this.IsMilestone, this.Priority);
			return args;
		}
	}
	export class IfcTransportElementType extends IFC2X3.IfcElementType {
		PredefinedType: (Handle<IFC2X3.IfcTransportElementTypeEnum> | IFC2X3.IfcTransportElementTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcTransportElementTypeEnum> | IFC2X3.IfcTransportElementTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransportElementType
		{
			return new IfcTransportElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcActor extends IFC2X3.IfcObject {
		TheActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) ;
		IsActingUpon!: (Handle<IFC2X3.IfcRelAssignsToActor> | IFC2X3.IfcRelAssignsToActor)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TheActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.TheActor = TheActor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActor
		{
			return new IfcActor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TheActor);
			return args;
		}
	}
	export class IfcAnnotation extends IFC2X3.IfcProduct {
		ContainedInStructure!: (Handle<IFC2X3.IfcRelContainedInSpatialStructure> | IFC2X3.IfcRelContainedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotation
		{
			return new IfcAnnotation(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcAsymmetricIShapeProfileDef extends IFC2X3.IfcIShapeProfileDef {
		TopFlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		TopFlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		TopFlangeFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , OverallDepth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, TopFlangeWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , TopFlangeThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, TopFlangeFilletRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, CentreOfGravityInY: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position, OverallWidth, OverallDepth, WebThickness, FlangeThickness, FilletRadius);
			this.TopFlangeWidth = TopFlangeWidth;
			this.TopFlangeThickness = TopFlangeThickness;
			this.TopFlangeFilletRadius = TopFlangeFilletRadius;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAsymmetricIShapeProfileDef
		{
			return new IfcAsymmetricIShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.OverallWidth, this.OverallDepth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.TopFlangeWidth, this.TopFlangeThickness, this.TopFlangeFilletRadius, this.CentreOfGravityInY);
			return args;
		}
	}
	export class IfcBlock extends IFC2X3.IfcCsgPrimitive3D {
		XLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		YLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		ZLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) , XLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , YLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , ZLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.XLength = XLength;
			this.YLength = YLength;
			this.ZLength = ZLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBlock
		{
			return new IfcBlock(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.XLength, this.YLength, this.ZLength);
			return args;
		}
	}
	export class IfcBooleanClippingResult extends IFC2X3.IfcBooleanResult {
		constructor(expressID: number, type: number, Operator: (Handle<IFC2X3.IfcBooleanOperator> | IFC2X3.IfcBooleanOperator) , FirstOperand: (Handle<IFC2X3.IfcBooleanOperand> | IFC2X3.IfcBooleanOperand) , SecondOperand: (Handle<IFC2X3.IfcBooleanOperand> | IFC2X3.IfcBooleanOperand) )
		{
			super(expressID,type,Operator, FirstOperand, SecondOperand);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBooleanClippingResult
		{
			return new IfcBooleanClippingResult(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Operator, this.FirstOperand, this.SecondOperand);
			return args;
		}
	}
	export class IfcBoundedCurve extends IFC2X3.IfcCurve {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundedCurve
		{
			return new IfcBoundedCurve(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcBuilding extends IFC2X3.IfcSpatialStructureElement {
		ElevationOfRefHeight: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		ElevationOfTerrain: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		BuildingAddress: (Handle<IFC2X3.IfcPostalAddress> | IFC2X3.IfcPostalAddress) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) , ElevationOfRefHeight: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, ElevationOfTerrain: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, BuildingAddress: (Handle<IFC2X3.IfcPostalAddress> | IFC2X3.IfcPostalAddress) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.ElevationOfRefHeight = ElevationOfRefHeight;
			this.ElevationOfTerrain = ElevationOfTerrain;
			this.BuildingAddress = BuildingAddress;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuilding
		{
			return new IfcBuilding(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.ElevationOfRefHeight, this.ElevationOfTerrain, this.BuildingAddress);
			return args;
		}
	}
	export class IfcBuildingElementType extends IFC2X3.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementType
		{
			return new IfcBuildingElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcBuildingStorey extends IFC2X3.IfcSpatialStructureElement {
		Elevation: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) , Elevation: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.Elevation = Elevation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingStorey
		{
			return new IfcBuildingStorey(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.Elevation);
			return args;
		}
	}
	export class IfcCircleHollowProfileDef extends IFC2X3.IfcCircleProfileDef {
		WallThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC2X3.IfcProfileTypeEnum> | IFC2X3.IfcProfileTypeEnum) , ProfileName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Position: (Handle<IFC2X3.IfcAxis2Placement2D> | IFC2X3.IfcAxis2Placement2D) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , WallThickness: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position, Radius);
			this.WallThickness = WallThickness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCircleHollowProfileDef
		{
			return new IfcCircleHollowProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Radius, this.WallThickness);
			return args;
		}
	}
	export class IfcColumnType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcColumnTypeEnum> | IFC2X3.IfcColumnTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcColumnTypeEnum> | IFC2X3.IfcColumnTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColumnType
		{
			return new IfcColumnType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCompositeCurve extends IFC2X3.IfcBoundedCurve {
		Segments: (Handle<IFC2X3.IfcCompositeCurveSegment> | IFC2X3.IfcCompositeCurveSegment)[] ;
		SelfIntersect: boolean ;
		constructor(expressID: number, type: number, Segments: (Handle<IFC2X3.IfcCompositeCurveSegment> | IFC2X3.IfcCompositeCurveSegment)[] , SelfIntersect: boolean )
		{
			super(expressID,type);
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurve
		{
			return new IfcCompositeCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcConic extends IFC2X3.IfcCurve {
		Position: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) )
		{
			super(expressID,type);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConic
		{
			return new IfcConic(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcConstructionResource extends IFC2X3.IfcResource {
		ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null;
		BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ResourceIdentifier = ResourceIdentifier;
			this.ResourceGroup = ResourceGroup;
			this.ResourceConsumption = ResourceConsumption;
			this.BaseQuantity = BaseQuantity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionResource
		{
			return new IfcConstructionResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity);
			return args;
		}
	}
	export class IfcControl extends IFC2X3.IfcObject {
		Controls!: (Handle<IFC2X3.IfcRelAssignsToControl> | IFC2X3.IfcRelAssignsToControl)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcControl
		{
			return new IfcControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcCostItem extends IFC2X3.IfcControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCostItem
		{
			return new IfcCostItem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcCostSchedule extends IFC2X3.IfcControl {
		SubmittedBy: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null;
		PreparedBy: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null;
		SubmittedOn: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		TargetUsers: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect)[] | null;
		UpdateDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		ID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		PredefinedType: (Handle<IFC2X3.IfcCostScheduleTypeEnum> | IFC2X3.IfcCostScheduleTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, SubmittedBy: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, PreparedBy: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, SubmittedOn: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TargetUsers: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect)[] | null, UpdateDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, ID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , PredefinedType: (Handle<IFC2X3.IfcCostScheduleTypeEnum> | IFC2X3.IfcCostScheduleTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.SubmittedBy = SubmittedBy;
			this.PreparedBy = PreparedBy;
			this.SubmittedOn = SubmittedOn;
			this.Status = Status;
			this.TargetUsers = TargetUsers;
			this.UpdateDate = UpdateDate;
			this.ID = ID;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCostSchedule
		{
			return new IfcCostSchedule(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.SubmittedBy, this.PreparedBy, this.SubmittedOn, this.Status, this.TargetUsers, this.UpdateDate, this.ID, this.PredefinedType);
			return args;
		}
	}
	export class IfcCoveringType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcCoveringTypeEnum> | IFC2X3.IfcCoveringTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCoveringTypeEnum> | IFC2X3.IfcCoveringTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoveringType
		{
			return new IfcCoveringType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCrewResource extends IFC2X3.IfcConstructionResource {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCrewResource
		{
			return new IfcCrewResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity);
			return args;
		}
	}
	export class IfcCurtainWallType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcCurtainWallTypeEnum> | IFC2X3.IfcCurtainWallTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCurtainWallTypeEnum> | IFC2X3.IfcCurtainWallTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurtainWallType
		{
			return new IfcCurtainWallType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDimensionCurveDirectedCallout extends IFC2X3.IfcDraughtingCallout {
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type,Contents);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionCurveDirectedCallout
		{
			return new IfcDimensionCurveDirectedCallout(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcDistributionElementType extends IFC2X3.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionElementType
		{
			return new IfcDistributionElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcDistributionFlowElementType extends IFC2X3.IfcDistributionElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionFlowElementType
		{
			return new IfcDistributionFlowElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcElectricalBaseProperties extends IFC2X3.IfcEnergyProperties {
		ElectricCurrentType: (Handle<IFC2X3.IfcElectricCurrentEnum> | IFC2X3.IfcElectricCurrentEnum) | null;
		InputVoltage: (Handle<IFC2X3.IfcElectricVoltageMeasure> | IFC2X3.IfcElectricVoltageMeasure) ;
		InputFrequency: (Handle<IFC2X3.IfcFrequencyMeasure> | IFC2X3.IfcFrequencyMeasure) ;
		FullLoadCurrent: (Handle<IFC2X3.IfcElectricCurrentMeasure> | IFC2X3.IfcElectricCurrentMeasure) | null;
		MinimumCircuitCurrent: (Handle<IFC2X3.IfcElectricCurrentMeasure> | IFC2X3.IfcElectricCurrentMeasure) | null;
		MaximumPowerInput: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) | null;
		RatedPowerInput: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) | null;
		InputPhase: number ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, EnergySequence: (Handle<IFC2X3.IfcEnergySequenceEnum> | IFC2X3.IfcEnergySequenceEnum) | null, UserDefinedEnergySequence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElectricCurrentType: (Handle<IFC2X3.IfcElectricCurrentEnum> | IFC2X3.IfcElectricCurrentEnum) | null, InputVoltage: (Handle<IFC2X3.IfcElectricVoltageMeasure> | IFC2X3.IfcElectricVoltageMeasure) , InputFrequency: (Handle<IFC2X3.IfcFrequencyMeasure> | IFC2X3.IfcFrequencyMeasure) , FullLoadCurrent: (Handle<IFC2X3.IfcElectricCurrentMeasure> | IFC2X3.IfcElectricCurrentMeasure) | null, MinimumCircuitCurrent: (Handle<IFC2X3.IfcElectricCurrentMeasure> | IFC2X3.IfcElectricCurrentMeasure) | null, MaximumPowerInput: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) | null, RatedPowerInput: (Handle<IFC2X3.IfcPowerMeasure> | IFC2X3.IfcPowerMeasure) | null, InputPhase: number )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, EnergySequence, UserDefinedEnergySequence);
			this.ElectricCurrentType = ElectricCurrentType;
			this.InputVoltage = InputVoltage;
			this.InputFrequency = InputFrequency;
			this.FullLoadCurrent = FullLoadCurrent;
			this.MinimumCircuitCurrent = MinimumCircuitCurrent;
			this.MaximumPowerInput = MaximumPowerInput;
			this.RatedPowerInput = RatedPowerInput;
			this.InputPhase = InputPhase;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricalBaseProperties
		{
			return new IfcElectricalBaseProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.EnergySequence, this.UserDefinedEnergySequence, this.ElectricCurrentType, this.InputVoltage, this.InputFrequency, this.FullLoadCurrent, this.MinimumCircuitCurrent, this.MaximumPowerInput, this.RatedPowerInput, this.InputPhase);
			return args;
		}
	}
	export class IfcElement extends IFC2X3.IfcProduct {
		Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		HasStructuralMember!: (Handle<IFC2X3.IfcRelConnectsStructuralElement> | IFC2X3.IfcRelConnectsStructuralElement)[] | null;
		FillsVoids!: (Handle<IFC2X3.IfcRelFillsElement> | IFC2X3.IfcRelFillsElement)[] | null;
		ConnectedTo!: (Handle<IFC2X3.IfcRelConnectsElements> | IFC2X3.IfcRelConnectsElements)[] | null;
		HasCoverings!: (Handle<IFC2X3.IfcRelCoversBldgElements> | IFC2X3.IfcRelCoversBldgElements)[] | null;
		HasProjections!: (Handle<IFC2X3.IfcRelProjectsElement> | IFC2X3.IfcRelProjectsElement)[] | null;
		ReferencedInStructures!: (Handle<IFC2X3.IfcRelReferencedInSpatialStructure> | IFC2X3.IfcRelReferencedInSpatialStructure)[] | null;
		HasPorts!: (Handle<IFC2X3.IfcRelConnectsPortToElement> | IFC2X3.IfcRelConnectsPortToElement)[] | null;
		HasOpenings!: (Handle<IFC2X3.IfcRelVoidsElement> | IFC2X3.IfcRelVoidsElement)[] | null;
		IsConnectionRealization!: (Handle<IFC2X3.IfcRelConnectsWithRealizingElements> | IFC2X3.IfcRelConnectsWithRealizingElements)[] | null;
		ProvidesBoundaries!: (Handle<IFC2X3.IfcRelSpaceBoundary> | IFC2X3.IfcRelSpaceBoundary)[] | null;
		ConnectedFrom!: (Handle<IFC2X3.IfcRelConnectsElements> | IFC2X3.IfcRelConnectsElements)[] | null;
		ContainedInStructure!: (Handle<IFC2X3.IfcRelContainedInSpatialStructure> | IFC2X3.IfcRelContainedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.Tag = Tag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElement
		{
			return new IfcElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcElementAssembly extends IFC2X3.IfcElement {
		AssemblyPlace: (Handle<IFC2X3.IfcAssemblyPlaceEnum> | IFC2X3.IfcAssemblyPlaceEnum) | null;
		PredefinedType: (Handle<IFC2X3.IfcElementAssemblyTypeEnum> | IFC2X3.IfcElementAssemblyTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, AssemblyPlace: (Handle<IFC2X3.IfcAssemblyPlaceEnum> | IFC2X3.IfcAssemblyPlaceEnum) | null, PredefinedType: (Handle<IFC2X3.IfcElementAssemblyTypeEnum> | IFC2X3.IfcElementAssemblyTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementAssembly
		{
			return new IfcElementAssembly(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.AssemblyPlace, this.PredefinedType);
			return args;
		}
	}
	export class IfcElementComponent extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementComponent
		{
			return new IfcElementComponent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcElementComponentType extends IFC2X3.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementComponentType
		{
			return new IfcElementComponentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcEllipse extends IFC2X3.IfcConic {
		SemiAxis1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		SemiAxis2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , SemiAxis1: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , SemiAxis2: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEllipse
		{
			return new IfcEllipse(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.SemiAxis1, this.SemiAxis2);
			return args;
		}
	}
	export class IfcEnergyConversionDeviceType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyConversionDeviceType
		{
			return new IfcEnergyConversionDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcEquipmentElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEquipmentElement
		{
			return new IfcEquipmentElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcEquipmentStandard extends IFC2X3.IfcControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEquipmentStandard
		{
			return new IfcEquipmentStandard(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcEvaporativeCoolerType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcEvaporativeCoolerTypeEnum> | IFC2X3.IfcEvaporativeCoolerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcEvaporativeCoolerTypeEnum> | IFC2X3.IfcEvaporativeCoolerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporativeCoolerType
		{
			return new IfcEvaporativeCoolerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcEvaporatorType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcEvaporatorTypeEnum> | IFC2X3.IfcEvaporatorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcEvaporatorTypeEnum> | IFC2X3.IfcEvaporatorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporatorType
		{
			return new IfcEvaporatorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFacetedBrep extends IFC2X3.IfcManifoldSolidBrep {
		constructor(expressID: number, type: number, Outer: (Handle<IFC2X3.IfcClosedShell> | IFC2X3.IfcClosedShell) )
		{
			super(expressID,type,Outer);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFacetedBrep
		{
			return new IfcFacetedBrep(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer);
			return args;
		}
	}
	export class IfcFacetedBrepWithVoids extends IFC2X3.IfcManifoldSolidBrep {
		Voids: (Handle<IFC2X3.IfcClosedShell> | IFC2X3.IfcClosedShell)[] ;
		constructor(expressID: number, type: number, Outer: (Handle<IFC2X3.IfcClosedShell> | IFC2X3.IfcClosedShell) , Voids: (Handle<IFC2X3.IfcClosedShell> | IFC2X3.IfcClosedShell)[] )
		{
			super(expressID,type,Outer);
			this.Voids = Voids;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFacetedBrepWithVoids
		{
			return new IfcFacetedBrepWithVoids(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer, this.Voids);
			return args;
		}
	}
	export class IfcFastener extends IFC2X3.IfcElementComponent {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFastener
		{
			return new IfcFastener(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFastenerType extends IFC2X3.IfcElementComponentType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFastenerType
		{
			return new IfcFastenerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFeatureElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElement
		{
			return new IfcFeatureElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFeatureElementAddition extends IFC2X3.IfcFeatureElement {
		ProjectsElements!: (Handle<IFC2X3.IfcRelProjectsElement> | IFC2X3.IfcRelProjectsElement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElementAddition
		{
			return new IfcFeatureElementAddition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFeatureElementSubtraction extends IFC2X3.IfcFeatureElement {
		VoidsElements!: (Handle<IFC2X3.IfcRelVoidsElement> | IFC2X3.IfcRelVoidsElement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElementSubtraction
		{
			return new IfcFeatureElementSubtraction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowControllerType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowControllerType
		{
			return new IfcFlowControllerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowFittingType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowFittingType
		{
			return new IfcFlowFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowMeterType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcFlowMeterTypeEnum> | IFC2X3.IfcFlowMeterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcFlowMeterTypeEnum> | IFC2X3.IfcFlowMeterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMeterType
		{
			return new IfcFlowMeterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowMovingDeviceType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMovingDeviceType
		{
			return new IfcFlowMovingDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowSegmentType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowSegmentType
		{
			return new IfcFlowSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowStorageDeviceType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowStorageDeviceType
		{
			return new IfcFlowStorageDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowTerminalType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTerminalType
		{
			return new IfcFlowTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowTreatmentDeviceType extends IFC2X3.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTreatmentDeviceType
		{
			return new IfcFlowTreatmentDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFurnishingElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnishingElement
		{
			return new IfcFurnishingElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFurnitureStandard extends IFC2X3.IfcControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnitureStandard
		{
			return new IfcFurnitureStandard(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcGasTerminalType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcGasTerminalTypeEnum> | IFC2X3.IfcGasTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcGasTerminalTypeEnum> | IFC2X3.IfcGasTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGasTerminalType
		{
			return new IfcGasTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcGrid extends IFC2X3.IfcProduct {
		UAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] ;
		VAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] ;
		WAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] | null;
		ContainedInStructure!: (Handle<IFC2X3.IfcRelContainedInSpatialStructure> | IFC2X3.IfcRelContainedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, UAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] , VAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] , WAxes: (Handle<IFC2X3.IfcGridAxis> | IFC2X3.IfcGridAxis)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.UAxes = UAxes;
			this.VAxes = VAxes;
			this.WAxes = WAxes;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGrid
		{
			return new IfcGrid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.UAxes, this.VAxes, this.WAxes);
			return args;
		}
	}
	export class IfcGroup extends IFC2X3.IfcObject {
		IsGroupedBy!: (Handle<IFC2X3.IfcRelAssignsToGroup> | IFC2X3.IfcRelAssignsToGroup) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGroup
		{
			return new IfcGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcHeatExchangerType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcHeatExchangerTypeEnum> | IFC2X3.IfcHeatExchangerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcHeatExchangerTypeEnum> | IFC2X3.IfcHeatExchangerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHeatExchangerType
		{
			return new IfcHeatExchangerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcHumidifierType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcHumidifierTypeEnum> | IFC2X3.IfcHumidifierTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcHumidifierTypeEnum> | IFC2X3.IfcHumidifierTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHumidifierType
		{
			return new IfcHumidifierType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcInventory extends IFC2X3.IfcGroup {
		InventoryType: (Handle<IFC2X3.IfcInventoryTypeEnum> | IFC2X3.IfcInventoryTypeEnum) ;
		Jurisdiction: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) ;
		ResponsiblePersons: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] ;
		LastUpdateDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) ;
		CurrentValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) | null;
		OriginalValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, InventoryType: (Handle<IFC2X3.IfcInventoryTypeEnum> | IFC2X3.IfcInventoryTypeEnum) , Jurisdiction: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) , ResponsiblePersons: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] , LastUpdateDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) , CurrentValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) | null, OriginalValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.InventoryType = InventoryType;
			this.Jurisdiction = Jurisdiction;
			this.ResponsiblePersons = ResponsiblePersons;
			this.LastUpdateDate = LastUpdateDate;
			this.CurrentValue = CurrentValue;
			this.OriginalValue = OriginalValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcInventory
		{
			return new IfcInventory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.InventoryType, this.Jurisdiction, this.ResponsiblePersons, this.LastUpdateDate, this.CurrentValue, this.OriginalValue);
			return args;
		}
	}
	export class IfcJunctionBoxType extends IFC2X3.IfcFlowFittingType {
		PredefinedType: (Handle<IFC2X3.IfcJunctionBoxTypeEnum> | IFC2X3.IfcJunctionBoxTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcJunctionBoxTypeEnum> | IFC2X3.IfcJunctionBoxTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcJunctionBoxType
		{
			return new IfcJunctionBoxType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcLaborResource extends IFC2X3.IfcConstructionResource {
		SkillSet: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null, SkillSet: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity);
			this.SkillSet = SkillSet;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLaborResource
		{
			return new IfcLaborResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity, this.SkillSet);
			return args;
		}
	}
	export class IfcLampType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcLampTypeEnum> | IFC2X3.IfcLampTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcLampTypeEnum> | IFC2X3.IfcLampTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLampType
		{
			return new IfcLampType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcLightFixtureType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcLightFixtureTypeEnum> | IFC2X3.IfcLightFixtureTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcLightFixtureTypeEnum> | IFC2X3.IfcLightFixtureTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightFixtureType
		{
			return new IfcLightFixtureType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcLinearDimension extends IFC2X3.IfcDimensionCurveDirectedCallout {
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type,Contents);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLinearDimension
		{
			return new IfcLinearDimension(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcMechanicalFastener extends IFC2X3.IfcFastener {
		NominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		NominalLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, NominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, NominalLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalFastener
		{
			return new IfcMechanicalFastener(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.NominalDiameter, this.NominalLength);
			return args;
		}
	}
	export class IfcMechanicalFastenerType extends IFC2X3.IfcFastenerType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalFastenerType
		{
			return new IfcMechanicalFastenerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcMemberType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcMemberTypeEnum> | IFC2X3.IfcMemberTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcMemberTypeEnum> | IFC2X3.IfcMemberTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMemberType
		{
			return new IfcMemberType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcMotorConnectionType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcMotorConnectionTypeEnum> | IFC2X3.IfcMotorConnectionTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcMotorConnectionTypeEnum> | IFC2X3.IfcMotorConnectionTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMotorConnectionType
		{
			return new IfcMotorConnectionType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcMove extends IFC2X3.IfcTask {
		MoveFrom: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) ;
		MoveTo: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) ;
		PunchList: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TaskId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, WorkMethod: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, IsMilestone: boolean , Priority: number | null, MoveFrom: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) , MoveTo: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) , PunchList: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, TaskId, Status, WorkMethod, IsMilestone, Priority);
			this.MoveFrom = MoveFrom;
			this.MoveTo = MoveTo;
			this.PunchList = PunchList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMove
		{
			return new IfcMove(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TaskId, this.Status, this.WorkMethod, this.IsMilestone, this.Priority, this.MoveFrom, this.MoveTo, this.PunchList);
			return args;
		}
	}
	export class IfcOccupant extends IFC2X3.IfcActor {
		PredefinedType: (Handle<IFC2X3.IfcOccupantTypeEnum> | IFC2X3.IfcOccupantTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TheActor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) , PredefinedType: (Handle<IFC2X3.IfcOccupantTypeEnum> | IFC2X3.IfcOccupantTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOccupant
		{
			return new IfcOccupant(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TheActor, this.PredefinedType);
			return args;
		}
	}
	export class IfcOpeningElement extends IFC2X3.IfcFeatureElementSubtraction {
		HasFillings!: (Handle<IFC2X3.IfcRelFillsElement> | IFC2X3.IfcRelFillsElement)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOpeningElement
		{
			return new IfcOpeningElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcOrderAction extends IFC2X3.IfcTask {
		ActionID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TaskId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, WorkMethod: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, IsMilestone: boolean , Priority: number | null, ActionID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, TaskId, Status, WorkMethod, IsMilestone, Priority);
			this.ActionID = ActionID;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrderAction
		{
			return new IfcOrderAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TaskId, this.Status, this.WorkMethod, this.IsMilestone, this.Priority, this.ActionID);
			return args;
		}
	}
	export class IfcOutletType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcOutletTypeEnum> | IFC2X3.IfcOutletTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcOutletTypeEnum> | IFC2X3.IfcOutletTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOutletType
		{
			return new IfcOutletType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPerformanceHistory extends IFC2X3.IfcControl {
		LifeCyclePhase: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, LifeCyclePhase: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.LifeCyclePhase = LifeCyclePhase;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPerformanceHistory
		{
			return new IfcPerformanceHistory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LifeCyclePhase);
			return args;
		}
	}
	export class IfcPermit extends IFC2X3.IfcControl {
		PermitID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PermitID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PermitID = PermitID;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPermit
		{
			return new IfcPermit(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PermitID);
			return args;
		}
	}
	export class IfcPipeFittingType extends IFC2X3.IfcFlowFittingType {
		PredefinedType: (Handle<IFC2X3.IfcPipeFittingTypeEnum> | IFC2X3.IfcPipeFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcPipeFittingTypeEnum> | IFC2X3.IfcPipeFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPipeFittingType
		{
			return new IfcPipeFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPipeSegmentType extends IFC2X3.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC2X3.IfcPipeSegmentTypeEnum> | IFC2X3.IfcPipeSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcPipeSegmentTypeEnum> | IFC2X3.IfcPipeSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPipeSegmentType
		{
			return new IfcPipeSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPlateType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcPlateTypeEnum> | IFC2X3.IfcPlateTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcPlateTypeEnum> | IFC2X3.IfcPlateTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlateType
		{
			return new IfcPlateType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPolyline extends IFC2X3.IfcBoundedCurve {
		Points: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] ;
		constructor(expressID: number, type: number, Points: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] )
		{
			super(expressID,type);
			this.Points = Points;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolyline
		{
			return new IfcPolyline(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Points);
			return args;
		}
	}
	export class IfcPort extends IFC2X3.IfcProduct {
		ContainedIn!: (Handle<IFC2X3.IfcRelConnectsPortToElement> | IFC2X3.IfcRelConnectsPortToElement) | null;
		ConnectedFrom!: (Handle<IFC2X3.IfcRelConnectsPorts> | IFC2X3.IfcRelConnectsPorts)[] | null;
		ConnectedTo!: (Handle<IFC2X3.IfcRelConnectsPorts> | IFC2X3.IfcRelConnectsPorts)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPort
		{
			return new IfcPort(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcProcedure extends IFC2X3.IfcProcess {
		ProcedureID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		ProcedureType: (Handle<IFC2X3.IfcProcedureTypeEnum> | IFC2X3.IfcProcedureTypeEnum) ;
		UserDefinedProcedureType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ProcedureID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , ProcedureType: (Handle<IFC2X3.IfcProcedureTypeEnum> | IFC2X3.IfcProcedureTypeEnum) , UserDefinedProcedureType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ProcedureID = ProcedureID;
			this.ProcedureType = ProcedureType;
			this.UserDefinedProcedureType = UserDefinedProcedureType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProcedure
		{
			return new IfcProcedure(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ProcedureID, this.ProcedureType, this.UserDefinedProcedureType);
			return args;
		}
	}
	export class IfcProjectOrder extends IFC2X3.IfcControl {
		ID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		PredefinedType: (Handle<IFC2X3.IfcProjectOrderTypeEnum> | IFC2X3.IfcProjectOrderTypeEnum) ;
		Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , PredefinedType: (Handle<IFC2X3.IfcProjectOrderTypeEnum> | IFC2X3.IfcProjectOrderTypeEnum) , Status: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ID = ID;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectOrder
		{
			return new IfcProjectOrder(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ID, this.PredefinedType, this.Status);
			return args;
		}
	}
	export class IfcProjectOrderRecord extends IFC2X3.IfcControl {
		Records: (Handle<IFC2X3.IfcRelAssignsToProjectOrder> | IFC2X3.IfcRelAssignsToProjectOrder)[] ;
		PredefinedType: (Handle<IFC2X3.IfcProjectOrderRecordTypeEnum> | IFC2X3.IfcProjectOrderRecordTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Records: (Handle<IFC2X3.IfcRelAssignsToProjectOrder> | IFC2X3.IfcRelAssignsToProjectOrder)[] , PredefinedType: (Handle<IFC2X3.IfcProjectOrderRecordTypeEnum> | IFC2X3.IfcProjectOrderRecordTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Records = Records;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectOrderRecord
		{
			return new IfcProjectOrderRecord(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Records, this.PredefinedType);
			return args;
		}
	}
	export class IfcProjectionElement extends IFC2X3.IfcFeatureElementAddition {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectionElement
		{
			return new IfcProjectionElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcProtectiveDeviceType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcProtectiveDeviceTypeEnum> | IFC2X3.IfcProtectiveDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcProtectiveDeviceTypeEnum> | IFC2X3.IfcProtectiveDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceType
		{
			return new IfcProtectiveDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPumpType extends IFC2X3.IfcFlowMovingDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcPumpTypeEnum> | IFC2X3.IfcPumpTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcPumpTypeEnum> | IFC2X3.IfcPumpTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPumpType
		{
			return new IfcPumpType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRadiusDimension extends IFC2X3.IfcDimensionCurveDirectedCallout {
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type,Contents);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRadiusDimension
		{
			return new IfcRadiusDimension(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcRailingType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcRailingTypeEnum> | IFC2X3.IfcRailingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcRailingTypeEnum> | IFC2X3.IfcRailingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRailingType
		{
			return new IfcRailingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRampFlightType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcRampFlightTypeEnum> | IFC2X3.IfcRampFlightTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcRampFlightTypeEnum> | IFC2X3.IfcRampFlightTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRampFlightType
		{
			return new IfcRampFlightType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRelAggregates extends IFC2X3.IfcRelDecomposes {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatingObject: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition) , RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAggregates
		{
			return new IfcRelAggregates(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingObject, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelAssignsTasks extends IFC2X3.IfcRelAssignsToControl {
		TimeForTask: (Handle<IFC2X3.IfcScheduleTimeControl> | IFC2X3.IfcScheduleTimeControl) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, RelatedObjects: (Handle<IFC2X3.IfcObjectDefinition> | IFC2X3.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC2X3.IfcObjectTypeEnum> | IFC2X3.IfcObjectTypeEnum) | null, RelatingControl: (Handle<IFC2X3.IfcControl> | IFC2X3.IfcControl) , TimeForTask: (Handle<IFC2X3.IfcScheduleTimeControl> | IFC2X3.IfcScheduleTimeControl) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl);
			this.TimeForTask = TimeForTask;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsTasks
		{
			return new IfcRelAssignsTasks(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingControl, this.TimeForTask);
			return args;
		}
	}
	export class IfcSanitaryTerminalType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcSanitaryTerminalTypeEnum> | IFC2X3.IfcSanitaryTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcSanitaryTerminalTypeEnum> | IFC2X3.IfcSanitaryTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSanitaryTerminalType
		{
			return new IfcSanitaryTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcScheduleTimeControl extends IFC2X3.IfcControl {
		ActualStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		EarlyStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		LateStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		ScheduleStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		ActualFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		EarlyFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		LateFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		ScheduleFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		ScheduleDuration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		ActualDuration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		RemainingTime: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		FreeFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		TotalFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		IsCritical: boolean | null;
		StatusTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		StartFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		FinishFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		Completion: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null;
		ScheduleTimeControlAssigned!: (Handle<IFC2X3.IfcRelAssignsTasks> | IFC2X3.IfcRelAssignsTasks) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ActualStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, EarlyStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, LateStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, ScheduleStart: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, ActualFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, EarlyFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, LateFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, ScheduleFinish: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, ScheduleDuration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, ActualDuration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, RemainingTime: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, FreeFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, TotalFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, IsCritical: boolean | null, StatusTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, StartFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, FinishFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, Completion: (Handle<IFC2X3.IfcPositiveRatioMeasure> | IFC2X3.IfcPositiveRatioMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ActualStart = ActualStart;
			this.EarlyStart = EarlyStart;
			this.LateStart = LateStart;
			this.ScheduleStart = ScheduleStart;
			this.ActualFinish = ActualFinish;
			this.EarlyFinish = EarlyFinish;
			this.LateFinish = LateFinish;
			this.ScheduleFinish = ScheduleFinish;
			this.ScheduleDuration = ScheduleDuration;
			this.ActualDuration = ActualDuration;
			this.RemainingTime = RemainingTime;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.StartFloat = StartFloat;
			this.FinishFloat = FinishFloat;
			this.Completion = Completion;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcScheduleTimeControl
		{
			return new IfcScheduleTimeControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18], tape[19], tape[20], tape[21], tape[22]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ActualStart, this.EarlyStart, this.LateStart, this.ScheduleStart, this.ActualFinish, this.EarlyFinish, this.LateFinish, this.ScheduleFinish, this.ScheduleDuration, this.ActualDuration, this.RemainingTime, this.FreeFloat, this.TotalFloat, this.IsCritical, this.StatusTime, this.StartFloat, this.FinishFloat, this.Completion);
			return args;
		}
	}
	export class IfcServiceLife extends IFC2X3.IfcControl {
		ServiceLifeType: (Handle<IFC2X3.IfcServiceLifeTypeEnum> | IFC2X3.IfcServiceLifeTypeEnum) ;
		ServiceLifeDuration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ServiceLifeType: (Handle<IFC2X3.IfcServiceLifeTypeEnum> | IFC2X3.IfcServiceLifeTypeEnum) , ServiceLifeDuration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ServiceLifeType = ServiceLifeType;
			this.ServiceLifeDuration = ServiceLifeDuration;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcServiceLife
		{
			return new IfcServiceLife(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ServiceLifeType, this.ServiceLifeDuration);
			return args;
		}
	}
	export class IfcSite extends IFC2X3.IfcSpatialStructureElement {
		RefLatitude: (Handle<IFC2X3.IfcCompoundPlaneAngleMeasure> | IFC2X3.IfcCompoundPlaneAngleMeasure) | null;
		RefLongitude: (Handle<IFC2X3.IfcCompoundPlaneAngleMeasure> | IFC2X3.IfcCompoundPlaneAngleMeasure) | null;
		RefElevation: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		LandTitleNumber: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		SiteAddress: (Handle<IFC2X3.IfcPostalAddress> | IFC2X3.IfcPostalAddress) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) , RefLatitude: (Handle<IFC2X3.IfcCompoundPlaneAngleMeasure> | IFC2X3.IfcCompoundPlaneAngleMeasure) | null, RefLongitude: (Handle<IFC2X3.IfcCompoundPlaneAngleMeasure> | IFC2X3.IfcCompoundPlaneAngleMeasure) | null, RefElevation: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null, LandTitleNumber: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, SiteAddress: (Handle<IFC2X3.IfcPostalAddress> | IFC2X3.IfcPostalAddress) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.RefLatitude = RefLatitude;
			this.RefLongitude = RefLongitude;
			this.RefElevation = RefElevation;
			this.LandTitleNumber = LandTitleNumber;
			this.SiteAddress = SiteAddress;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSite
		{
			return new IfcSite(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.RefLatitude, this.RefLongitude, this.RefElevation, this.LandTitleNumber, this.SiteAddress);
			return args;
		}
	}
	export class IfcSlabType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcSlabTypeEnum> | IFC2X3.IfcSlabTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcSlabTypeEnum> | IFC2X3.IfcSlabTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlabType
		{
			return new IfcSlabType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSpace extends IFC2X3.IfcSpatialStructureElement {
		InteriorOrExteriorSpace: (Handle<IFC2X3.IfcInternalOrExternalEnum> | IFC2X3.IfcInternalOrExternalEnum) ;
		ElevationWithFlooring: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null;
		HasCoverings!: (Handle<IFC2X3.IfcRelCoversSpaces> | IFC2X3.IfcRelCoversSpaces)[] | null;
		BoundedBy!: (Handle<IFC2X3.IfcRelSpaceBoundary> | IFC2X3.IfcRelSpaceBoundary)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, LongName: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) , InteriorOrExteriorSpace: (Handle<IFC2X3.IfcInternalOrExternalEnum> | IFC2X3.IfcInternalOrExternalEnum) , ElevationWithFlooring: (Handle<IFC2X3.IfcLengthMeasure> | IFC2X3.IfcLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.InteriorOrExteriorSpace = InteriorOrExteriorSpace;
			this.ElevationWithFlooring = ElevationWithFlooring;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpace
		{
			return new IfcSpace(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.InteriorOrExteriorSpace, this.ElevationWithFlooring);
			return args;
		}
	}
	export class IfcSpaceHeaterType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcSpaceHeaterTypeEnum> | IFC2X3.IfcSpaceHeaterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcSpaceHeaterTypeEnum> | IFC2X3.IfcSpaceHeaterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceHeaterType
		{
			return new IfcSpaceHeaterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSpaceProgram extends IFC2X3.IfcControl {
		SpaceProgramIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		MaxRequiredArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		MinRequiredArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null;
		RequestedLocation: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) | null;
		StandardRequiredArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		HasInteractionReqsFrom!: (Handle<IFC2X3.IfcRelInteractionRequirements> | IFC2X3.IfcRelInteractionRequirements)[] | null;
		HasInteractionReqsTo!: (Handle<IFC2X3.IfcRelInteractionRequirements> | IFC2X3.IfcRelInteractionRequirements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, SpaceProgramIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , MaxRequiredArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, MinRequiredArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) | null, RequestedLocation: (Handle<IFC2X3.IfcSpatialStructureElement> | IFC2X3.IfcSpatialStructureElement) | null, StandardRequiredArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.SpaceProgramIdentifier = SpaceProgramIdentifier;
			this.MaxRequiredArea = MaxRequiredArea;
			this.MinRequiredArea = MinRequiredArea;
			this.RequestedLocation = RequestedLocation;
			this.StandardRequiredArea = StandardRequiredArea;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceProgram
		{
			return new IfcSpaceProgram(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.SpaceProgramIdentifier, this.MaxRequiredArea, this.MinRequiredArea, this.RequestedLocation, this.StandardRequiredArea);
			return args;
		}
	}
	export class IfcSpaceType extends IFC2X3.IfcSpatialStructureElementType {
		PredefinedType: (Handle<IFC2X3.IfcSpaceTypeEnum> | IFC2X3.IfcSpaceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcSpaceTypeEnum> | IFC2X3.IfcSpaceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceType
		{
			return new IfcSpaceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcStackTerminalType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcStackTerminalTypeEnum> | IFC2X3.IfcStackTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcStackTerminalTypeEnum> | IFC2X3.IfcStackTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStackTerminalType
		{
			return new IfcStackTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcStairFlightType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcStairFlightTypeEnum> | IFC2X3.IfcStairFlightTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcStairFlightTypeEnum> | IFC2X3.IfcStairFlightTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStairFlightType
		{
			return new IfcStairFlightType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralAction extends IFC2X3.IfcStructuralActivity {
		DestabilizingLoad: boolean ;
		CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) , DestabilizingLoad: boolean , CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
			this.DestabilizingLoad = DestabilizingLoad;
			this.CausedBy = CausedBy;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralAction
		{
			return new IfcStructuralAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.CausedBy);
			return args;
		}
	}
	export class IfcStructuralConnection extends IFC2X3.IfcStructuralItem {
		AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null;
		ConnectsStructuralMembers!: (Handle<IFC2X3.IfcRelConnectsStructuralMember> | IFC2X3.IfcRelConnectsStructuralMember)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.AppliedCondition = AppliedCondition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralConnection
		{
			return new IfcStructuralConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition);
			return args;
		}
	}
	export class IfcStructuralCurveConnection extends IFC2X3.IfcStructuralConnection {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveConnection
		{
			return new IfcStructuralCurveConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition);
			return args;
		}
	}
	export class IfcStructuralCurveMember extends IFC2X3.IfcStructuralMember {
		PredefinedType: (Handle<IFC2X3.IfcStructuralCurveTypeEnum> | IFC2X3.IfcStructuralCurveTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC2X3.IfcStructuralCurveTypeEnum> | IFC2X3.IfcStructuralCurveTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveMember
		{
			return new IfcStructuralCurveMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralCurveMemberVarying extends IFC2X3.IfcStructuralCurveMember {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC2X3.IfcStructuralCurveTypeEnum> | IFC2X3.IfcStructuralCurveTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveMemberVarying
		{
			return new IfcStructuralCurveMemberVarying(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralLinearAction extends IFC2X3.IfcStructuralAction {
		ProjectedOrTrue: (Handle<IFC2X3.IfcProjectedOrTrueLengthEnum> | IFC2X3.IfcProjectedOrTrueLengthEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) , DestabilizingLoad: boolean , CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null, ProjectedOrTrue: (Handle<IFC2X3.IfcProjectedOrTrueLengthEnum> | IFC2X3.IfcProjectedOrTrueLengthEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy);
			this.ProjectedOrTrue = ProjectedOrTrue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLinearAction
		{
			return new IfcStructuralLinearAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.CausedBy, this.ProjectedOrTrue);
			return args;
		}
	}
	export class IfcStructuralLinearActionVarying extends IFC2X3.IfcStructuralLinearAction {
		VaryingAppliedLoadLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) ;
		SubsequentAppliedLoads: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) , DestabilizingLoad: boolean , CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null, ProjectedOrTrue: (Handle<IFC2X3.IfcProjectedOrTrueLengthEnum> | IFC2X3.IfcProjectedOrTrueLengthEnum) , VaryingAppliedLoadLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) , SubsequentAppliedLoads: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy, ProjectedOrTrue);
			this.VaryingAppliedLoadLocation = VaryingAppliedLoadLocation;
			this.SubsequentAppliedLoads = SubsequentAppliedLoads;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLinearActionVarying
		{
			return new IfcStructuralLinearActionVarying(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.CausedBy, this.ProjectedOrTrue, this.VaryingAppliedLoadLocation, this.SubsequentAppliedLoads);
			return args;
		}
	}
	export class IfcStructuralLoadGroup extends IFC2X3.IfcGroup {
		PredefinedType: (Handle<IFC2X3.IfcLoadGroupTypeEnum> | IFC2X3.IfcLoadGroupTypeEnum) ;
		ActionType: (Handle<IFC2X3.IfcActionTypeEnum> | IFC2X3.IfcActionTypeEnum) ;
		ActionSource: (Handle<IFC2X3.IfcActionSourceTypeEnum> | IFC2X3.IfcActionSourceTypeEnum) ;
		Coefficient: (Handle<IFC2X3.IfcRatioMeasure> | IFC2X3.IfcRatioMeasure) | null;
		Purpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		SourceOfResultGroup!: (Handle<IFC2X3.IfcStructuralResultGroup> | IFC2X3.IfcStructuralResultGroup)[] | null;
		LoadGroupFor!: (Handle<IFC2X3.IfcStructuralAnalysisModel> | IFC2X3.IfcStructuralAnalysisModel)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcLoadGroupTypeEnum> | IFC2X3.IfcLoadGroupTypeEnum) , ActionType: (Handle<IFC2X3.IfcActionTypeEnum> | IFC2X3.IfcActionTypeEnum) , ActionSource: (Handle<IFC2X3.IfcActionSourceTypeEnum> | IFC2X3.IfcActionSourceTypeEnum) , Coefficient: (Handle<IFC2X3.IfcRatioMeasure> | IFC2X3.IfcRatioMeasure) | null, Purpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadGroup
		{
			return new IfcStructuralLoadGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.ActionType, this.ActionSource, this.Coefficient, this.Purpose);
			return args;
		}
	}
	export class IfcStructuralPlanarAction extends IFC2X3.IfcStructuralAction {
		ProjectedOrTrue: (Handle<IFC2X3.IfcProjectedOrTrueLengthEnum> | IFC2X3.IfcProjectedOrTrueLengthEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) , DestabilizingLoad: boolean , CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null, ProjectedOrTrue: (Handle<IFC2X3.IfcProjectedOrTrueLengthEnum> | IFC2X3.IfcProjectedOrTrueLengthEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy);
			this.ProjectedOrTrue = ProjectedOrTrue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPlanarAction
		{
			return new IfcStructuralPlanarAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.CausedBy, this.ProjectedOrTrue);
			return args;
		}
	}
	export class IfcStructuralPlanarActionVarying extends IFC2X3.IfcStructuralPlanarAction {
		VaryingAppliedLoadLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) ;
		SubsequentAppliedLoads: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) , DestabilizingLoad: boolean , CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null, ProjectedOrTrue: (Handle<IFC2X3.IfcProjectedOrTrueLengthEnum> | IFC2X3.IfcProjectedOrTrueLengthEnum) , VaryingAppliedLoadLocation: (Handle<IFC2X3.IfcShapeAspect> | IFC2X3.IfcShapeAspect) , SubsequentAppliedLoads: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy, ProjectedOrTrue);
			this.VaryingAppliedLoadLocation = VaryingAppliedLoadLocation;
			this.SubsequentAppliedLoads = SubsequentAppliedLoads;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPlanarActionVarying
		{
			return new IfcStructuralPlanarActionVarying(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.CausedBy, this.ProjectedOrTrue, this.VaryingAppliedLoadLocation, this.SubsequentAppliedLoads);
			return args;
		}
	}
	export class IfcStructuralPointAction extends IFC2X3.IfcStructuralAction {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) , DestabilizingLoad: boolean , CausedBy: (Handle<IFC2X3.IfcStructuralReaction> | IFC2X3.IfcStructuralReaction) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointAction
		{
			return new IfcStructuralPointAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.CausedBy);
			return args;
		}
	}
	export class IfcStructuralPointConnection extends IFC2X3.IfcStructuralConnection {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointConnection
		{
			return new IfcStructuralPointConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition);
			return args;
		}
	}
	export class IfcStructuralPointReaction extends IFC2X3.IfcStructuralReaction {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC2X3.IfcStructuralLoad> | IFC2X3.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC2X3.IfcGlobalOrLocalEnum> | IFC2X3.IfcGlobalOrLocalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointReaction
		{
			return new IfcStructuralPointReaction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcStructuralResultGroup extends IFC2X3.IfcGroup {
		TheoryType: (Handle<IFC2X3.IfcAnalysisTheoryTypeEnum> | IFC2X3.IfcAnalysisTheoryTypeEnum) ;
		ResultForLoadGroup: (Handle<IFC2X3.IfcStructuralLoadGroup> | IFC2X3.IfcStructuralLoadGroup) | null;
		IsLinear: boolean ;
		ResultGroupFor!: (Handle<IFC2X3.IfcStructuralAnalysisModel> | IFC2X3.IfcStructuralAnalysisModel)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, TheoryType: (Handle<IFC2X3.IfcAnalysisTheoryTypeEnum> | IFC2X3.IfcAnalysisTheoryTypeEnum) , ResultForLoadGroup: (Handle<IFC2X3.IfcStructuralLoadGroup> | IFC2X3.IfcStructuralLoadGroup) | null, IsLinear: boolean )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.TheoryType = TheoryType;
			this.ResultForLoadGroup = ResultForLoadGroup;
			this.IsLinear = IsLinear;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralResultGroup
		{
			return new IfcStructuralResultGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TheoryType, this.ResultForLoadGroup, this.IsLinear);
			return args;
		}
	}
	export class IfcStructuralSurfaceConnection extends IFC2X3.IfcStructuralConnection {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC2X3.IfcBoundaryCondition> | IFC2X3.IfcBoundaryCondition) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceConnection
		{
			return new IfcStructuralSurfaceConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition);
			return args;
		}
	}
	export class IfcSubContractResource extends IFC2X3.IfcConstructionResource {
		SubContractor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null;
		JobDescription: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null, SubContractor: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) | null, JobDescription: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity);
			this.SubContractor = SubContractor;
			this.JobDescription = JobDescription;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSubContractResource
		{
			return new IfcSubContractResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity, this.SubContractor, this.JobDescription);
			return args;
		}
	}
	export class IfcSwitchingDeviceType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcSwitchingDeviceTypeEnum> | IFC2X3.IfcSwitchingDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcSwitchingDeviceTypeEnum> | IFC2X3.IfcSwitchingDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSwitchingDeviceType
		{
			return new IfcSwitchingDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSystem extends IFC2X3.IfcGroup {
		ServicesBuildings!: (Handle<IFC2X3.IfcRelServicesBuildings> | IFC2X3.IfcRelServicesBuildings)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSystem
		{
			return new IfcSystem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcTankType extends IFC2X3.IfcFlowStorageDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcTankTypeEnum> | IFC2X3.IfcTankTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcTankTypeEnum> | IFC2X3.IfcTankTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTankType
		{
			return new IfcTankType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTimeSeriesSchedule extends IFC2X3.IfcControl {
		ApplicableDates: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect)[] | null;
		TimeSeriesScheduleType: (Handle<IFC2X3.IfcTimeSeriesScheduleTypeEnum> | IFC2X3.IfcTimeSeriesScheduleTypeEnum) ;
		TimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ApplicableDates: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect)[] | null, TimeSeriesScheduleType: (Handle<IFC2X3.IfcTimeSeriesScheduleTypeEnum> | IFC2X3.IfcTimeSeriesScheduleTypeEnum) , TimeSeries: (Handle<IFC2X3.IfcTimeSeries> | IFC2X3.IfcTimeSeries) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ApplicableDates = ApplicableDates;
			this.TimeSeriesScheduleType = TimeSeriesScheduleType;
			this.TimeSeries = TimeSeries;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeriesSchedule
		{
			return new IfcTimeSeriesSchedule(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ApplicableDates, this.TimeSeriesScheduleType, this.TimeSeries);
			return args;
		}
	}
	export class IfcTransformerType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcTransformerTypeEnum> | IFC2X3.IfcTransformerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcTransformerTypeEnum> | IFC2X3.IfcTransformerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransformerType
		{
			return new IfcTransformerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTransportElement extends IFC2X3.IfcElement {
		OperationType: (Handle<IFC2X3.IfcTransportElementTypeEnum> | IFC2X3.IfcTransportElementTypeEnum) | null;
		CapacityByWeight: (Handle<IFC2X3.IfcMassMeasure> | IFC2X3.IfcMassMeasure) | null;
		CapacityByNumber: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, OperationType: (Handle<IFC2X3.IfcTransportElementTypeEnum> | IFC2X3.IfcTransportElementTypeEnum) | null, CapacityByWeight: (Handle<IFC2X3.IfcMassMeasure> | IFC2X3.IfcMassMeasure) | null, CapacityByNumber: (Handle<IFC2X3.IfcCountMeasure> | IFC2X3.IfcCountMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.OperationType = OperationType;
			this.CapacityByWeight = CapacityByWeight;
			this.CapacityByNumber = CapacityByNumber;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransportElement
		{
			return new IfcTransportElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OperationType, this.CapacityByWeight, this.CapacityByNumber);
			return args;
		}
	}
	export class IfcTrimmedCurve extends IFC2X3.IfcBoundedCurve {
		BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) ;
		Trim1: (Handle<IFC2X3.IfcTrimmingSelect> | IFC2X3.IfcTrimmingSelect)[] ;
		Trim2: (Handle<IFC2X3.IfcTrimmingSelect> | IFC2X3.IfcTrimmingSelect)[] ;
		SenseAgreement: boolean ;
		MasterRepresentation: (Handle<IFC2X3.IfcTrimmingPreference> | IFC2X3.IfcTrimmingPreference) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC2X3.IfcCurve> | IFC2X3.IfcCurve) , Trim1: (Handle<IFC2X3.IfcTrimmingSelect> | IFC2X3.IfcTrimmingSelect)[] , Trim2: (Handle<IFC2X3.IfcTrimmingSelect> | IFC2X3.IfcTrimmingSelect)[] , SenseAgreement: boolean , MasterRepresentation: (Handle<IFC2X3.IfcTrimmingPreference> | IFC2X3.IfcTrimmingPreference) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.Trim1 = Trim1;
			this.Trim2 = Trim2;
			this.SenseAgreement = SenseAgreement;
			this.MasterRepresentation = MasterRepresentation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTrimmedCurve
		{
			return new IfcTrimmedCurve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.Trim1, this.Trim2, this.SenseAgreement, this.MasterRepresentation);
			return args;
		}
	}
	export class IfcTubeBundleType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcTubeBundleTypeEnum> | IFC2X3.IfcTubeBundleTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcTubeBundleTypeEnum> | IFC2X3.IfcTubeBundleTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTubeBundleType
		{
			return new IfcTubeBundleType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcUnitaryEquipmentType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcUnitaryEquipmentTypeEnum> | IFC2X3.IfcUnitaryEquipmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcUnitaryEquipmentTypeEnum> | IFC2X3.IfcUnitaryEquipmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryEquipmentType
		{
			return new IfcUnitaryEquipmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcValveType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcValveTypeEnum> | IFC2X3.IfcValveTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcValveTypeEnum> | IFC2X3.IfcValveTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcValveType
		{
			return new IfcValveType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcVirtualElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVirtualElement
		{
			return new IfcVirtualElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcWallType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcWallTypeEnum> | IFC2X3.IfcWallTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcWallTypeEnum> | IFC2X3.IfcWallTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWallType
		{
			return new IfcWallType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcWasteTerminalType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcWasteTerminalTypeEnum> | IFC2X3.IfcWasteTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcWasteTerminalTypeEnum> | IFC2X3.IfcWasteTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWasteTerminalType
		{
			return new IfcWasteTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcWorkControl extends IFC2X3.IfcControl {
		Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		CreationDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		Creators: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] | null;
		Purpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		Duration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		TotalFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null;
		StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		FinishTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null;
		WorkControlType: (Handle<IFC2X3.IfcWorkControlTypeEnum> | IFC2X3.IfcWorkControlTypeEnum) | null;
		UserDefinedControlType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , CreationDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , Creators: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] | null, Purpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Duration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, TotalFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , FinishTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, WorkControlType: (Handle<IFC2X3.IfcWorkControlTypeEnum> | IFC2X3.IfcWorkControlTypeEnum) | null, UserDefinedControlType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Identifier = Identifier;
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
			this.WorkControlType = WorkControlType;
			this.UserDefinedControlType = UserDefinedControlType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkControl
		{
			return new IfcWorkControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identifier, this.CreationDate, this.Creators, this.Purpose, this.Duration, this.TotalFloat, this.StartTime, this.FinishTime, this.WorkControlType, this.UserDefinedControlType);
			return args;
		}
	}
	export class IfcWorkPlan extends IFC2X3.IfcWorkControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , CreationDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , Creators: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] | null, Purpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Duration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, TotalFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , FinishTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, WorkControlType: (Handle<IFC2X3.IfcWorkControlTypeEnum> | IFC2X3.IfcWorkControlTypeEnum) | null, UserDefinedControlType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identifier, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, WorkControlType, UserDefinedControlType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkPlan
		{
			return new IfcWorkPlan(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identifier, this.CreationDate, this.Creators, this.Purpose, this.Duration, this.TotalFloat, this.StartTime, this.FinishTime, this.WorkControlType, this.UserDefinedControlType);
			return args;
		}
	}
	export class IfcWorkSchedule extends IFC2X3.IfcWorkControl {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Identifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , CreationDate: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , Creators: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson)[] | null, Purpose: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Duration: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, TotalFloat: (Handle<IFC2X3.IfcTimeMeasure> | IFC2X3.IfcTimeMeasure) | null, StartTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) , FinishTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) | null, WorkControlType: (Handle<IFC2X3.IfcWorkControlTypeEnum> | IFC2X3.IfcWorkControlTypeEnum) | null, UserDefinedControlType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identifier, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, WorkControlType, UserDefinedControlType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkSchedule
		{
			return new IfcWorkSchedule(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identifier, this.CreationDate, this.Creators, this.Purpose, this.Duration, this.TotalFloat, this.StartTime, this.FinishTime, this.WorkControlType, this.UserDefinedControlType);
			return args;
		}
	}
	export class IfcZone extends IFC2X3.IfcGroup {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcZone
		{
			return new IfcZone(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class Ifc2DCompositeCurve extends IFC2X3.IfcCompositeCurve {
		constructor(expressID: number, type: number, Segments: (Handle<IFC2X3.IfcCompositeCurveSegment> | IFC2X3.IfcCompositeCurveSegment)[] , SelfIntersect: boolean )
		{
			super(expressID,type,Segments, SelfIntersect);
		}
		static FromTape(expressID: number, type: number, tape: any[]): Ifc2DCompositeCurve
		{
			return new Ifc2DCompositeCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcActionRequest extends IFC2X3.IfcControl {
		RequestID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, RequestID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.RequestID = RequestID;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActionRequest
		{
			return new IfcActionRequest(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.RequestID);
			return args;
		}
	}
	export class IfcAirTerminalBoxType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcAirTerminalBoxTypeEnum> | IFC2X3.IfcAirTerminalBoxTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcAirTerminalBoxTypeEnum> | IFC2X3.IfcAirTerminalBoxTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalBoxType
		{
			return new IfcAirTerminalBoxType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirTerminalType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcAirTerminalTypeEnum> | IFC2X3.IfcAirTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcAirTerminalTypeEnum> | IFC2X3.IfcAirTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalType
		{
			return new IfcAirTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirToAirHeatRecoveryType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcAirToAirHeatRecoveryTypeEnum> | IFC2X3.IfcAirToAirHeatRecoveryTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcAirToAirHeatRecoveryTypeEnum> | IFC2X3.IfcAirToAirHeatRecoveryTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirToAirHeatRecoveryType
		{
			return new IfcAirToAirHeatRecoveryType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAngularDimension extends IFC2X3.IfcDimensionCurveDirectedCallout {
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type,Contents);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAngularDimension
		{
			return new IfcAngularDimension(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcAsset extends IFC2X3.IfcGroup {
		AssetID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) ;
		OriginalValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) ;
		CurrentValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) ;
		TotalReplacementCost: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) ;
		Owner: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) ;
		User: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) ;
		ResponsiblePerson: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson) ;
		IncorporationDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) ;
		DepreciatedValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, AssetID: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) , OriginalValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) , CurrentValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) , TotalReplacementCost: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) , Owner: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) , User: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect) , ResponsiblePerson: (Handle<IFC2X3.IfcPerson> | IFC2X3.IfcPerson) , IncorporationDate: (Handle<IFC2X3.IfcCalendarDate> | IFC2X3.IfcCalendarDate) , DepreciatedValue: (Handle<IFC2X3.IfcCostValue> | IFC2X3.IfcCostValue) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.AssetID = AssetID;
			this.OriginalValue = OriginalValue;
			this.CurrentValue = CurrentValue;
			this.TotalReplacementCost = TotalReplacementCost;
			this.Owner = Owner;
			this.User = User;
			this.ResponsiblePerson = ResponsiblePerson;
			this.IncorporationDate = IncorporationDate;
			this.DepreciatedValue = DepreciatedValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAsset
		{
			return new IfcAsset(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.AssetID, this.OriginalValue, this.CurrentValue, this.TotalReplacementCost, this.Owner, this.User, this.ResponsiblePerson, this.IncorporationDate, this.DepreciatedValue);
			return args;
		}
	}
	export class IfcBSplineCurve extends IFC2X3.IfcBoundedCurve {
		Degree: number ;
		ControlPointsList: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] ;
		CurveForm: (Handle<IFC2X3.IfcBSplineCurveForm> | IFC2X3.IfcBSplineCurveForm) ;
		ClosedCurve: boolean ;
		SelfIntersect: boolean ;
		constructor(expressID: number, type: number, Degree: number , ControlPointsList: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] , CurveForm: (Handle<IFC2X3.IfcBSplineCurveForm> | IFC2X3.IfcBSplineCurveForm) , ClosedCurve: boolean , SelfIntersect: boolean )
		{
			super(expressID,type);
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineCurve
		{
			return new IfcBSplineCurve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Degree, this.ControlPointsList, this.CurveForm, this.ClosedCurve, this.SelfIntersect);
			return args;
		}
	}
	export class IfcBeamType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcBeamTypeEnum> | IFC2X3.IfcBeamTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcBeamTypeEnum> | IFC2X3.IfcBeamTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBeamType
		{
			return new IfcBeamType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBezierCurve extends IFC2X3.IfcBSplineCurve {
		constructor(expressID: number, type: number, Degree: number , ControlPointsList: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] , CurveForm: (Handle<IFC2X3.IfcBSplineCurveForm> | IFC2X3.IfcBSplineCurveForm) , ClosedCurve: boolean , SelfIntersect: boolean )
		{
			super(expressID,type,Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBezierCurve
		{
			return new IfcBezierCurve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Degree, this.ControlPointsList, this.CurveForm, this.ClosedCurve, this.SelfIntersect);
			return args;
		}
	}
	export class IfcBoilerType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcBoilerTypeEnum> | IFC2X3.IfcBoilerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcBoilerTypeEnum> | IFC2X3.IfcBoilerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoilerType
		{
			return new IfcBoilerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBuildingElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElement
		{
			return new IfcBuildingElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcBuildingElementComponent extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementComponent
		{
			return new IfcBuildingElementComponent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcBuildingElementPart extends IFC2X3.IfcBuildingElementComponent {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementPart
		{
			return new IfcBuildingElementPart(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcBuildingElementProxy extends IFC2X3.IfcBuildingElement {
		CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, CompositionType: (Handle<IFC2X3.IfcElementCompositionEnum> | IFC2X3.IfcElementCompositionEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.CompositionType = CompositionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementProxy
		{
			return new IfcBuildingElementProxy(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.CompositionType);
			return args;
		}
	}
	export class IfcBuildingElementProxyType extends IFC2X3.IfcBuildingElementType {
		PredefinedType: (Handle<IFC2X3.IfcBuildingElementProxyTypeEnum> | IFC2X3.IfcBuildingElementProxyTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcBuildingElementProxyTypeEnum> | IFC2X3.IfcBuildingElementProxyTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementProxyType
		{
			return new IfcBuildingElementProxyType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableCarrierFittingType extends IFC2X3.IfcFlowFittingType {
		PredefinedType: (Handle<IFC2X3.IfcCableCarrierFittingTypeEnum> | IFC2X3.IfcCableCarrierFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCableCarrierFittingTypeEnum> | IFC2X3.IfcCableCarrierFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierFittingType
		{
			return new IfcCableCarrierFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableCarrierSegmentType extends IFC2X3.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC2X3.IfcCableCarrierSegmentTypeEnum> | IFC2X3.IfcCableCarrierSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCableCarrierSegmentTypeEnum> | IFC2X3.IfcCableCarrierSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierSegmentType
		{
			return new IfcCableCarrierSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableSegmentType extends IFC2X3.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC2X3.IfcCableSegmentTypeEnum> | IFC2X3.IfcCableSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCableSegmentTypeEnum> | IFC2X3.IfcCableSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableSegmentType
		{
			return new IfcCableSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcChillerType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcChillerTypeEnum> | IFC2X3.IfcChillerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcChillerTypeEnum> | IFC2X3.IfcChillerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcChillerType
		{
			return new IfcChillerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCircle extends IFC2X3.IfcConic {
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC2X3.IfcAxis2Placement> | IFC2X3.IfcAxis2Placement) , Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCircle
		{
			return new IfcCircle(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Radius);
			return args;
		}
	}
	export class IfcCoilType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcCoilTypeEnum> | IFC2X3.IfcCoilTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCoilTypeEnum> | IFC2X3.IfcCoilTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoilType
		{
			return new IfcCoilType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcColumn extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColumn
		{
			return new IfcColumn(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcCompressorType extends IFC2X3.IfcFlowMovingDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcCompressorTypeEnum> | IFC2X3.IfcCompressorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCompressorTypeEnum> | IFC2X3.IfcCompressorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompressorType
		{
			return new IfcCompressorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCondenserType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcCondenserTypeEnum> | IFC2X3.IfcCondenserTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCondenserTypeEnum> | IFC2X3.IfcCondenserTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCondenserType
		{
			return new IfcCondenserType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCondition extends IFC2X3.IfcGroup {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCondition
		{
			return new IfcCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcConditionCriterion extends IFC2X3.IfcControl {
		Criterion: (Handle<IFC2X3.IfcConditionCriterionSelect> | IFC2X3.IfcConditionCriterionSelect) ;
		CriterionDateTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Criterion: (Handle<IFC2X3.IfcConditionCriterionSelect> | IFC2X3.IfcConditionCriterionSelect) , CriterionDateTime: (Handle<IFC2X3.IfcDateTimeSelect> | IFC2X3.IfcDateTimeSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Criterion = Criterion;
			this.CriterionDateTime = CriterionDateTime;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConditionCriterion
		{
			return new IfcConditionCriterion(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Criterion, this.CriterionDateTime);
			return args;
		}
	}
	export class IfcConstructionEquipmentResource extends IFC2X3.IfcConstructionResource {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionEquipmentResource
		{
			return new IfcConstructionEquipmentResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity);
			return args;
		}
	}
	export class IfcConstructionMaterialResource extends IFC2X3.IfcConstructionResource {
		Suppliers: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect)[] | null;
		UsageRatio: (Handle<IFC2X3.IfcRatioMeasure> | IFC2X3.IfcRatioMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null, Suppliers: (Handle<IFC2X3.IfcActorSelect> | IFC2X3.IfcActorSelect)[] | null, UsageRatio: (Handle<IFC2X3.IfcRatioMeasure> | IFC2X3.IfcRatioMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity);
			this.Suppliers = Suppliers;
			this.UsageRatio = UsageRatio;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionMaterialResource
		{
			return new IfcConstructionMaterialResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity, this.Suppliers, this.UsageRatio);
			return args;
		}
	}
	export class IfcConstructionProductResource extends IFC2X3.IfcConstructionResource {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceIdentifier: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ResourceGroup: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ResourceConsumption: (Handle<IFC2X3.IfcResourceConsumptionEnum> | IFC2X3.IfcResourceConsumptionEnum) | null, BaseQuantity: (Handle<IFC2X3.IfcMeasureWithUnit> | IFC2X3.IfcMeasureWithUnit) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionProductResource
		{
			return new IfcConstructionProductResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ResourceIdentifier, this.ResourceGroup, this.ResourceConsumption, this.BaseQuantity);
			return args;
		}
	}
	export class IfcCooledBeamType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcCooledBeamTypeEnum> | IFC2X3.IfcCooledBeamTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCooledBeamTypeEnum> | IFC2X3.IfcCooledBeamTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCooledBeamType
		{
			return new IfcCooledBeamType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCoolingTowerType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcCoolingTowerTypeEnum> | IFC2X3.IfcCoolingTowerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcCoolingTowerTypeEnum> | IFC2X3.IfcCoolingTowerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoolingTowerType
		{
			return new IfcCoolingTowerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCovering extends IFC2X3.IfcBuildingElement {
		PredefinedType: (Handle<IFC2X3.IfcCoveringTypeEnum> | IFC2X3.IfcCoveringTypeEnum) | null;
		CoversSpaces!: (Handle<IFC2X3.IfcRelCoversSpaces> | IFC2X3.IfcRelCoversSpaces)[] | null;
		Covers!: (Handle<IFC2X3.IfcRelCoversBldgElements> | IFC2X3.IfcRelCoversBldgElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, PredefinedType: (Handle<IFC2X3.IfcCoveringTypeEnum> | IFC2X3.IfcCoveringTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCovering
		{
			return new IfcCovering(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCurtainWall extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurtainWall
		{
			return new IfcCurtainWall(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDamperType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcDamperTypeEnum> | IFC2X3.IfcDamperTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcDamperTypeEnum> | IFC2X3.IfcDamperTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDamperType
		{
			return new IfcDamperType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDiameterDimension extends IFC2X3.IfcDimensionCurveDirectedCallout {
		constructor(expressID: number, type: number, Contents: (Handle<IFC2X3.IfcDraughtingCalloutElement> | IFC2X3.IfcDraughtingCalloutElement)[] )
		{
			super(expressID,type,Contents);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDiameterDimension
		{
			return new IfcDiameterDimension(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Contents);
			return args;
		}
	}
	export class IfcDiscreteAccessory extends IFC2X3.IfcElementComponent {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDiscreteAccessory
		{
			return new IfcDiscreteAccessory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDiscreteAccessoryType extends IFC2X3.IfcElementComponentType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDiscreteAccessoryType
		{
			return new IfcDiscreteAccessoryType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcDistributionChamberElementType extends IFC2X3.IfcDistributionFlowElementType {
		PredefinedType: (Handle<IFC2X3.IfcDistributionChamberElementTypeEnum> | IFC2X3.IfcDistributionChamberElementTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcDistributionChamberElementTypeEnum> | IFC2X3.IfcDistributionChamberElementTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionChamberElementType
		{
			return new IfcDistributionChamberElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionControlElementType extends IFC2X3.IfcDistributionElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionControlElementType
		{
			return new IfcDistributionControlElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcDistributionElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionElement
		{
			return new IfcDistributionElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDistributionFlowElement extends IFC2X3.IfcDistributionElement {
		HasControlElements!: (Handle<IFC2X3.IfcRelFlowControlElements> | IFC2X3.IfcRelFlowControlElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionFlowElement
		{
			return new IfcDistributionFlowElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDistributionPort extends IFC2X3.IfcPort {
		FlowDirection: (Handle<IFC2X3.IfcFlowDirectionEnum> | IFC2X3.IfcFlowDirectionEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, FlowDirection: (Handle<IFC2X3.IfcFlowDirectionEnum> | IFC2X3.IfcFlowDirectionEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.FlowDirection = FlowDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionPort
		{
			return new IfcDistributionPort(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.FlowDirection);
			return args;
		}
	}
	export class IfcDoor extends IFC2X3.IfcBuildingElement {
		OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoor
		{
			return new IfcDoor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OverallHeight, this.OverallWidth);
			return args;
		}
	}
	export class IfcDuctFittingType extends IFC2X3.IfcFlowFittingType {
		PredefinedType: (Handle<IFC2X3.IfcDuctFittingTypeEnum> | IFC2X3.IfcDuctFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcDuctFittingTypeEnum> | IFC2X3.IfcDuctFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctFittingType
		{
			return new IfcDuctFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDuctSegmentType extends IFC2X3.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC2X3.IfcDuctSegmentTypeEnum> | IFC2X3.IfcDuctSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcDuctSegmentTypeEnum> | IFC2X3.IfcDuctSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSegmentType
		{
			return new IfcDuctSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDuctSilencerType extends IFC2X3.IfcFlowTreatmentDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcDuctSilencerTypeEnum> | IFC2X3.IfcDuctSilencerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcDuctSilencerTypeEnum> | IFC2X3.IfcDuctSilencerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSilencerType
		{
			return new IfcDuctSilencerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcEdgeFeature extends IFC2X3.IfcFeatureElementSubtraction {
		FeatureLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, FeatureLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.FeatureLength = FeatureLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeFeature
		{
			return new IfcEdgeFeature(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.FeatureLength);
			return args;
		}
	}
	export class IfcElectricApplianceType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcElectricApplianceTypeEnum> | IFC2X3.IfcElectricApplianceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcElectricApplianceTypeEnum> | IFC2X3.IfcElectricApplianceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricApplianceType
		{
			return new IfcElectricApplianceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricFlowStorageDeviceType extends IFC2X3.IfcFlowStorageDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcElectricFlowStorageDeviceTypeEnum> | IFC2X3.IfcElectricFlowStorageDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcElectricFlowStorageDeviceTypeEnum> | IFC2X3.IfcElectricFlowStorageDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricFlowStorageDeviceType
		{
			return new IfcElectricFlowStorageDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricGeneratorType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcElectricGeneratorTypeEnum> | IFC2X3.IfcElectricGeneratorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcElectricGeneratorTypeEnum> | IFC2X3.IfcElectricGeneratorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricGeneratorType
		{
			return new IfcElectricGeneratorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricHeaterType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcElectricHeaterTypeEnum> | IFC2X3.IfcElectricHeaterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcElectricHeaterTypeEnum> | IFC2X3.IfcElectricHeaterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricHeaterType
		{
			return new IfcElectricHeaterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricMotorType extends IFC2X3.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcElectricMotorTypeEnum> | IFC2X3.IfcElectricMotorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcElectricMotorTypeEnum> | IFC2X3.IfcElectricMotorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricMotorType
		{
			return new IfcElectricMotorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricTimeControlType extends IFC2X3.IfcFlowControllerType {
		PredefinedType: (Handle<IFC2X3.IfcElectricTimeControlTypeEnum> | IFC2X3.IfcElectricTimeControlTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcElectricTimeControlTypeEnum> | IFC2X3.IfcElectricTimeControlTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricTimeControlType
		{
			return new IfcElectricTimeControlType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricalCircuit extends IFC2X3.IfcSystem {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricalCircuit
		{
			return new IfcElectricalCircuit(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcElectricalElement extends IFC2X3.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricalElement
		{
			return new IfcElectricalElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcEnergyConversionDevice extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyConversionDevice
		{
			return new IfcEnergyConversionDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFanType extends IFC2X3.IfcFlowMovingDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcFanTypeEnum> | IFC2X3.IfcFanTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcFanTypeEnum> | IFC2X3.IfcFanTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFanType
		{
			return new IfcFanType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFilterType extends IFC2X3.IfcFlowTreatmentDeviceType {
		PredefinedType: (Handle<IFC2X3.IfcFilterTypeEnum> | IFC2X3.IfcFilterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcFilterTypeEnum> | IFC2X3.IfcFilterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFilterType
		{
			return new IfcFilterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFireSuppressionTerminalType extends IFC2X3.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC2X3.IfcFireSuppressionTerminalTypeEnum> | IFC2X3.IfcFireSuppressionTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcFireSuppressionTerminalTypeEnum> | IFC2X3.IfcFireSuppressionTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFireSuppressionTerminalType
		{
			return new IfcFireSuppressionTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowController extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowController
		{
			return new IfcFlowController(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowFitting extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowFitting
		{
			return new IfcFlowFitting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowInstrumentType extends IFC2X3.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC2X3.IfcFlowInstrumentTypeEnum> | IFC2X3.IfcFlowInstrumentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcFlowInstrumentTypeEnum> | IFC2X3.IfcFlowInstrumentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowInstrumentType
		{
			return new IfcFlowInstrumentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowMovingDevice extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMovingDevice
		{
			return new IfcFlowMovingDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowSegment extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowSegment
		{
			return new IfcFlowSegment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowStorageDevice extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowStorageDevice
		{
			return new IfcFlowStorageDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowTerminal extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTerminal
		{
			return new IfcFlowTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowTreatmentDevice extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTreatmentDevice
		{
			return new IfcFlowTreatmentDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFooting extends IFC2X3.IfcBuildingElement {
		PredefinedType: (Handle<IFC2X3.IfcFootingTypeEnum> | IFC2X3.IfcFootingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, PredefinedType: (Handle<IFC2X3.IfcFootingTypeEnum> | IFC2X3.IfcFootingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFooting
		{
			return new IfcFooting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcMember extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMember
		{
			return new IfcMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcPile extends IFC2X3.IfcBuildingElement {
		PredefinedType: (Handle<IFC2X3.IfcPileTypeEnum> | IFC2X3.IfcPileTypeEnum) ;
		ConstructionType: (Handle<IFC2X3.IfcPileConstructionEnum> | IFC2X3.IfcPileConstructionEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, PredefinedType: (Handle<IFC2X3.IfcPileTypeEnum> | IFC2X3.IfcPileTypeEnum) , ConstructionType: (Handle<IFC2X3.IfcPileConstructionEnum> | IFC2X3.IfcPileConstructionEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
			this.ConstructionType = ConstructionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPile
		{
			return new IfcPile(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType, this.ConstructionType);
			return args;
		}
	}
	export class IfcPlate extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlate
		{
			return new IfcPlate(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcRailing extends IFC2X3.IfcBuildingElement {
		PredefinedType: (Handle<IFC2X3.IfcRailingTypeEnum> | IFC2X3.IfcRailingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, PredefinedType: (Handle<IFC2X3.IfcRailingTypeEnum> | IFC2X3.IfcRailingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRailing
		{
			return new IfcRailing(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcRamp extends IFC2X3.IfcBuildingElement {
		ShapeType: (Handle<IFC2X3.IfcRampTypeEnum> | IFC2X3.IfcRampTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ShapeType: (Handle<IFC2X3.IfcRampTypeEnum> | IFC2X3.IfcRampTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.ShapeType = ShapeType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRamp
		{
			return new IfcRamp(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.ShapeType);
			return args;
		}
	}
	export class IfcRampFlight extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRampFlight
		{
			return new IfcRampFlight(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcRationalBezierCurve extends IFC2X3.IfcBezierCurve {
		WeightsData: number[] ;
		constructor(expressID: number, type: number, Degree: number , ControlPointsList: (Handle<IFC2X3.IfcCartesianPoint> | IFC2X3.IfcCartesianPoint)[] , CurveForm: (Handle<IFC2X3.IfcBSplineCurveForm> | IFC2X3.IfcBSplineCurveForm) , ClosedCurve: boolean , SelfIntersect: boolean , WeightsData: number[] )
		{
			super(expressID,type,Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect);
			this.WeightsData = WeightsData;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRationalBezierCurve
		{
			return new IfcRationalBezierCurve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Degree, this.ControlPointsList, this.CurveForm, this.ClosedCurve, this.SelfIntersect, this.WeightsData);
			return args;
		}
	}
	export class IfcReinforcingElement extends IFC2X3.IfcBuildingElementComponent {
		SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.SteelGrade = SteelGrade;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingElement
		{
			return new IfcReinforcingElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade);
			return args;
		}
	}
	export class IfcReinforcingMesh extends IFC2X3.IfcReinforcingElement {
		MeshLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		MeshWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		LongitudinalBarNominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		TransverseBarNominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		LongitudinalBarCrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		TransverseBarCrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		LongitudinalBarSpacing: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		TransverseBarSpacing: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, MeshLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MeshWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, LongitudinalBarNominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , TransverseBarNominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , LongitudinalBarCrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) , TransverseBarCrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) , LongitudinalBarSpacing: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , TransverseBarSpacing: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingMesh
		{
			return new IfcReinforcingMesh(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.MeshLength, this.MeshWidth, this.LongitudinalBarNominalDiameter, this.TransverseBarNominalDiameter, this.LongitudinalBarCrossSectionArea, this.TransverseBarCrossSectionArea, this.LongitudinalBarSpacing, this.TransverseBarSpacing);
			return args;
		}
	}
	export class IfcRoof extends IFC2X3.IfcBuildingElement {
		ShapeType: (Handle<IFC2X3.IfcRoofTypeEnum> | IFC2X3.IfcRoofTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ShapeType: (Handle<IFC2X3.IfcRoofTypeEnum> | IFC2X3.IfcRoofTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.ShapeType = ShapeType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoof
		{
			return new IfcRoof(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.ShapeType);
			return args;
		}
	}
	export class IfcRoundedEdgeFeature extends IFC2X3.IfcEdgeFeature {
		Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, FeatureLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, Radius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, FeatureLength);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoundedEdgeFeature
		{
			return new IfcRoundedEdgeFeature(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.FeatureLength, this.Radius);
			return args;
		}
	}
	export class IfcSensorType extends IFC2X3.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC2X3.IfcSensorTypeEnum> | IFC2X3.IfcSensorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcSensorTypeEnum> | IFC2X3.IfcSensorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSensorType
		{
			return new IfcSensorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSlab extends IFC2X3.IfcBuildingElement {
		PredefinedType: (Handle<IFC2X3.IfcSlabTypeEnum> | IFC2X3.IfcSlabTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, PredefinedType: (Handle<IFC2X3.IfcSlabTypeEnum> | IFC2X3.IfcSlabTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlab
		{
			return new IfcSlab(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcStair extends IFC2X3.IfcBuildingElement {
		ShapeType: (Handle<IFC2X3.IfcStairTypeEnum> | IFC2X3.IfcStairTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ShapeType: (Handle<IFC2X3.IfcStairTypeEnum> | IFC2X3.IfcStairTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.ShapeType = ShapeType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStair
		{
			return new IfcStair(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.ShapeType);
			return args;
		}
	}
	export class IfcStairFlight extends IFC2X3.IfcBuildingElement {
		NumberOfRiser: number | null;
		NumberOfTreads: number | null;
		RiserHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		TreadLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, NumberOfRiser: number | null, NumberOfTreads: number | null, RiserHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, TreadLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.NumberOfRiser = NumberOfRiser;
			this.NumberOfTreads = NumberOfTreads;
			this.RiserHeight = RiserHeight;
			this.TreadLength = TreadLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStairFlight
		{
			return new IfcStairFlight(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.NumberOfRiser, this.NumberOfTreads, this.RiserHeight, this.TreadLength);
			return args;
		}
	}
	export class IfcStructuralAnalysisModel extends IFC2X3.IfcSystem {
		PredefinedType: (Handle<IFC2X3.IfcAnalysisModelTypeEnum> | IFC2X3.IfcAnalysisModelTypeEnum) ;
		OrientationOf2DPlane: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) | null;
		LoadedBy: (Handle<IFC2X3.IfcStructuralLoadGroup> | IFC2X3.IfcStructuralLoadGroup)[] | null;
		HasResults: (Handle<IFC2X3.IfcStructuralResultGroup> | IFC2X3.IfcStructuralResultGroup)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcAnalysisModelTypeEnum> | IFC2X3.IfcAnalysisModelTypeEnum) , OrientationOf2DPlane: (Handle<IFC2X3.IfcAxis2Placement3D> | IFC2X3.IfcAxis2Placement3D) | null, LoadedBy: (Handle<IFC2X3.IfcStructuralLoadGroup> | IFC2X3.IfcStructuralLoadGroup)[] | null, HasResults: (Handle<IFC2X3.IfcStructuralResultGroup> | IFC2X3.IfcStructuralResultGroup)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PredefinedType = PredefinedType;
			this.OrientationOf2DPlane = OrientationOf2DPlane;
			this.LoadedBy = LoadedBy;
			this.HasResults = HasResults;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralAnalysisModel
		{
			return new IfcStructuralAnalysisModel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.OrientationOf2DPlane, this.LoadedBy, this.HasResults);
			return args;
		}
	}
	export class IfcTendon extends IFC2X3.IfcReinforcingElement {
		PredefinedType: (Handle<IFC2X3.IfcTendonTypeEnum> | IFC2X3.IfcTendonTypeEnum) ;
		NominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		TensionForce: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null;
		PreStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null;
		FrictionCoefficient: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null;
		AnchorageSlip: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		MinCurvatureRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcTendonTypeEnum> | IFC2X3.IfcTendonTypeEnum) , NominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) , TensionForce: (Handle<IFC2X3.IfcForceMeasure> | IFC2X3.IfcForceMeasure) | null, PreStress: (Handle<IFC2X3.IfcPressureMeasure> | IFC2X3.IfcPressureMeasure) | null, FrictionCoefficient: (Handle<IFC2X3.IfcNormalisedRatioMeasure> | IFC2X3.IfcNormalisedRatioMeasure) | null, AnchorageSlip: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, MinCurvatureRadius: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.TensionForce = TensionForce;
			this.PreStress = PreStress;
			this.FrictionCoefficient = FrictionCoefficient;
			this.AnchorageSlip = AnchorageSlip;
			this.MinCurvatureRadius = MinCurvatureRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTendon
		{
			return new IfcTendon(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.PredefinedType, this.NominalDiameter, this.CrossSectionArea, this.TensionForce, this.PreStress, this.FrictionCoefficient, this.AnchorageSlip, this.MinCurvatureRadius);
			return args;
		}
	}
	export class IfcTendonAnchor extends IFC2X3.IfcReinforcingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTendonAnchor
		{
			return new IfcTendonAnchor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade);
			return args;
		}
	}
	export class IfcVibrationIsolatorType extends IFC2X3.IfcDiscreteAccessoryType {
		PredefinedType: (Handle<IFC2X3.IfcVibrationIsolatorTypeEnum> | IFC2X3.IfcVibrationIsolatorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcVibrationIsolatorTypeEnum> | IFC2X3.IfcVibrationIsolatorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationIsolatorType
		{
			return new IfcVibrationIsolatorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcWall extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWall
		{
			return new IfcWall(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcWallStandardCase extends IFC2X3.IfcWall {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWallStandardCase
		{
			return new IfcWallStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcWindow extends IFC2X3.IfcBuildingElement {
		OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, OverallHeight: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, OverallWidth: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindow
		{
			return new IfcWindow(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OverallHeight, this.OverallWidth);
			return args;
		}
	}
	export class IfcActuatorType extends IFC2X3.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC2X3.IfcActuatorTypeEnum> | IFC2X3.IfcActuatorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcActuatorTypeEnum> | IFC2X3.IfcActuatorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActuatorType
		{
			return new IfcActuatorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAlarmType extends IFC2X3.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC2X3.IfcAlarmTypeEnum> | IFC2X3.IfcAlarmTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcAlarmTypeEnum> | IFC2X3.IfcAlarmTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAlarmType
		{
			return new IfcAlarmType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBeam extends IFC2X3.IfcBuildingElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBeam
		{
			return new IfcBeam(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcChamferEdgeFeature extends IFC2X3.IfcEdgeFeature {
		Width: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, FeatureLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, Width: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, Height: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, FeatureLength);
			this.Width = Width;
			this.Height = Height;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcChamferEdgeFeature
		{
			return new IfcChamferEdgeFeature(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.FeatureLength, this.Width, this.Height);
			return args;
		}
	}
	export class IfcControllerType extends IFC2X3.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC2X3.IfcControllerTypeEnum> | IFC2X3.IfcControllerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ApplicableOccurrence: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, HasPropertySets: (Handle<IFC2X3.IfcPropertySetDefinition> | IFC2X3.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC2X3.IfcRepresentationMap> | IFC2X3.IfcRepresentationMap)[] | null, Tag: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ElementType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, PredefinedType: (Handle<IFC2X3.IfcControllerTypeEnum> | IFC2X3.IfcControllerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcControllerType
		{
			return new IfcControllerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionChamberElement extends IFC2X3.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionChamberElement
		{
			return new IfcDistributionChamberElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDistributionControlElement extends IFC2X3.IfcDistributionElement {
		ControlElementId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null;
		AssignedToFlowElement!: (Handle<IFC2X3.IfcRelFlowControlElements> | IFC2X3.IfcRelFlowControlElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, ControlElementId: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.ControlElementId = ControlElementId;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionControlElement
		{
			return new IfcDistributionControlElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.ControlElementId);
			return args;
		}
	}
	export class IfcElectricDistributionPoint extends IFC2X3.IfcFlowController {
		DistributionPointFunction: (Handle<IFC2X3.IfcElectricDistributionPointFunctionEnum> | IFC2X3.IfcElectricDistributionPointFunctionEnum) ;
		UserDefinedFunction: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, DistributionPointFunction: (Handle<IFC2X3.IfcElectricDistributionPointFunctionEnum> | IFC2X3.IfcElectricDistributionPointFunctionEnum) , UserDefinedFunction: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.DistributionPointFunction = DistributionPointFunction;
			this.UserDefinedFunction = UserDefinedFunction;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricDistributionPoint
		{
			return new IfcElectricDistributionPoint(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.DistributionPointFunction, this.UserDefinedFunction);
			return args;
		}
	}
	export class IfcReinforcingBar extends IFC2X3.IfcReinforcingElement {
		NominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) ;
		CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) ;
		BarLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null;
		BarRole: (Handle<IFC2X3.IfcReinforcingBarRoleEnum> | IFC2X3.IfcReinforcingBarRoleEnum) ;
		BarSurface: (Handle<IFC2X3.IfcReinforcingBarSurfaceEnum> | IFC2X3.IfcReinforcingBarSurfaceEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC2X3.IfcGloballyUniqueId> | IFC2X3.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC2X3.IfcOwnerHistory> | IFC2X3.IfcOwnerHistory) , Name: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, Description: (Handle<IFC2X3.IfcText> | IFC2X3.IfcText) | null, ObjectType: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, ObjectPlacement: (Handle<IFC2X3.IfcObjectPlacement> | IFC2X3.IfcObjectPlacement) | null, Representation: (Handle<IFC2X3.IfcProductRepresentation> | IFC2X3.IfcProductRepresentation) | null, Tag: (Handle<IFC2X3.IfcIdentifier> | IFC2X3.IfcIdentifier) | null, SteelGrade: (Handle<IFC2X3.IfcLabel> | IFC2X3.IfcLabel) | null, NominalDiameter: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) , CrossSectionArea: (Handle<IFC2X3.IfcAreaMeasure> | IFC2X3.IfcAreaMeasure) , BarLength: (Handle<IFC2X3.IfcPositiveLengthMeasure> | IFC2X3.IfcPositiveLengthMeasure) | null, BarRole: (Handle<IFC2X3.IfcReinforcingBarRoleEnum> | IFC2X3.IfcReinforcingBarRoleEnum) , BarSurface: (Handle<IFC2X3.IfcReinforcingBarSurfaceEnum> | IFC2X3.IfcReinforcingBarSurfaceEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.BarRole = BarRole;
			this.BarSurface = BarSurface;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingBar
		{
			return new IfcReinforcingBar(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.NominalDiameter, this.CrossSectionArea, this.BarLength, this.BarRole, this.BarSurface);
			return args;
		}
	}
}
export namespace IFC4 {
	export class IfcAbsorbedDoseMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAccelerationMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAmountOfSubstanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAngularVelocityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcArcIndex {
		valueType !: number | null;
		label !: string | null;
		value: Array<IfcPositiveInteger>;
		constructor(v: Array<IfcPositiveInteger>) { this.value = v;}
	};
	export class IfcAreaDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcAreaMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcBinary {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcBoolean {
		value: boolean;
		label !: string| null;
		valueType !: number| null;
		constructor(v: boolean) { this.value = v;}
	}
	export class IfcBoxAlignment {
		value: IfcLabel;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcLabel) { this.value = v;}
	}
	export class IfcCardinalPointReference {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcComplexNumber {
		valueType !: number | null;
		label !: string | null;
		value: Array<number>;
		constructor(v: Array<number>) { this.value = v;}
	};
	export class IfcCompoundPlaneAngleMeasure {
		valueType !: number | null;
		label !: string | null;
		value: Array<number>;
		constructor(v: Array<number>) { this.value = v;}
	};
	export class IfcContextDependentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcCountMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcCurvatureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDate {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcDateTime {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcDayInMonthNumber {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDayInWeekNumber {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDescriptiveMeasure {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcDimensionCount {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDoseEquivalentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcDuration {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcDynamicViscosityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricCapacitanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricChargeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricConductanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricCurrentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricResistanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcElectricVoltageMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcEnergyMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcFontStyle {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcFontVariant {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcFontWeight {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcForceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcFrequencyMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcGloballyUniqueId {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcHeatFluxDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcHeatingValueMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIdentifier {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcIlluminanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcInductanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcInteger {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIntegerCountRateMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIonConcentrationMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcIsothermalMoistureCapacityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcKinematicViscosityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLabel {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcLanguageId {
		value: IfcIdentifier;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcIdentifier) { this.value = v;}
	}
	export class IfcLengthMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLineIndex {
		valueType !: number | null;
		label !: string | null;
		value: Array<IfcPositiveInteger>;
		constructor(v: Array<IfcPositiveInteger>) { this.value = v;}
	};
	export class IfcLinearForceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearMomentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearStiffnessMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLinearVelocityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLogical {
		value: boolean;
		label !: string| null;
		valueType !: number| null;
		constructor(v: boolean) { this.value = v;}
	}
	export class IfcLuminousFluxMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLuminousIntensityDistributionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcLuminousIntensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMagneticFluxDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMagneticFluxMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassDensityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassFlowRateMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMassPerLengthMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfElasticityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfLinearSubgradeReactionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfRotationalSubgradeReactionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcModulusOfSubgradeReactionMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMoistureDiffusivityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMolecularWeightMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMomentOfInertiaMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMonetaryMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcMonthInYearNumber {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcNonNegativeLengthMeasure {
		value: IfcLengthMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcLengthMeasure) { this.value = v;}
	}
	export class IfcNormalisedRatioMeasure {
		value: IfcRatioMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcRatioMeasure) { this.value = v;}
	}
	export class IfcNumericMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPHMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcParameterValue {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPlanarForceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPlaneAngleMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPositiveInteger {
		value: IfcInteger;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcInteger) { this.value = v;}
	}
	export class IfcPositiveLengthMeasure {
		value: IfcLengthMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcLengthMeasure) { this.value = v;}
	}
	export class IfcPositivePlaneAngleMeasure {
		value: IfcPlaneAngleMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcPlaneAngleMeasure) { this.value = v;}
	}
	export class IfcPositiveRatioMeasure {
		value: IfcRatioMeasure;
		label !: string| null;
		valueType !: number| null;
		constructor(v: IfcRatioMeasure) { this.value = v;}
	}
	export class IfcPowerMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPresentableText {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcPressureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcPropertySetDefinitionSet {
		valueType !: number | null;
		label !: string | null;
		value: Array<IfcPropertySetDefinition>;
		constructor(v: Array<IfcPropertySetDefinition>) { this.value = v;}
	};
	export class IfcRadioActivityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRatioMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcReal {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRotationalFrequencyMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRotationalMassMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcRotationalStiffnessMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSectionModulusMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSectionalAreaIntegralMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcShearModulusMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSolidAngleMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSoundPowerLevelMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSoundPowerMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSoundPressureLevelMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSoundPressureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSpecificHeatCapacityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSpecularExponent {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcSpecularRoughness {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTemperatureGradientMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTemperatureRateOfChangeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcText {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextAlignment {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextDecoration {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextFontName {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTextTransformation {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcThermalAdmittanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalConductivityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalExpansionCoefficientMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalResistanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermalTransmittanceMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcThermodynamicTemperatureMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTime {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcTimeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTimeStamp {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcTorqueMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcURIReference {
		value: string;
		label !: string| null;
		valueType !: number| null;
		constructor(v: string) { this.value = v;}
	}
	export class IfcVaporPermeabilityMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcVolumeMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcVolumetricFlowRateMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcWarpingConstantMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcWarpingMomentMeasure {
		value: number;
		label !: string| null;
		valueType !: number| null;
		constructor(v: number) { this.value = v;}
	}
	export class IfcActionRequestTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static EMAIL = "EMAIL";
		static FAX = "FAX";
		static PHONE = "PHONE";
		static POST = "POST";
		static VERBAL = "VERBAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcActionSourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DEAD_LOAD_G = "DEAD_LOAD_G";
		static COMPLETION_G1 = "COMPLETION_G1";
		static LIVE_LOAD_Q = "LIVE_LOAD_Q";
		static SNOW_S = "SNOW_S";
		static WIND_W = "WIND_W";
		static PRESTRESSING_P = "PRESTRESSING_P";
		static SETTLEMENT_U = "SETTLEMENT_U";
		static TEMPERATURE_T = "TEMPERATURE_T";
		static EARTHQUAKE_E = "EARTHQUAKE_E";
		static FIRE = "FIRE";
		static IMPULSE = "IMPULSE";
		static IMPACT = "IMPACT";
		static TRANSPORT = "TRANSPORT";
		static ERECTION = "ERECTION";
		static PROPPING = "PROPPING";
		static SYSTEM_IMPERFECTION = "SYSTEM_IMPERFECTION";
		static SHRINKAGE = "SHRINKAGE";
		static CREEP = "CREEP";
		static LACK_OF_FIT = "LACK_OF_FIT";
		static BUOYANCY = "BUOYANCY";
		static ICE = "ICE";
		static CURRENT = "CURRENT";
		static WAVE = "WAVE";
		static RAIN = "RAIN";
		static BRAKES = "BRAKES";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcActionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PERMANENT_G = "PERMANENT_G";
		static VARIABLE_Q = "VARIABLE_Q";
		static EXTRAORDINARY_A = "EXTRAORDINARY_A";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcActuatorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELECTRICACTUATOR = "ELECTRICACTUATOR";
		static HANDOPERATEDACTUATOR = "HANDOPERATEDACTUATOR";
		static HYDRAULICACTUATOR = "HYDRAULICACTUATOR";
		static PNEUMATICACTUATOR = "PNEUMATICACTUATOR";
		static THERMOSTATICACTUATOR = "THERMOSTATICACTUATOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAddressTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static OFFICE = "OFFICE";
		static SITE = "SITE";
		static HOME = "HOME";
		static DISTRIBUTIONPOINT = "DISTRIBUTIONPOINT";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcAirTerminalBoxTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONSTANTFLOW = "CONSTANTFLOW";
		static VARIABLEFLOWPRESSUREDEPENDANT = "VARIABLEFLOWPRESSUREDEPENDANT";
		static VARIABLEFLOWPRESSUREINDEPENDANT = "VARIABLEFLOWPRESSUREINDEPENDANT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAirTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DIFFUSER = "DIFFUSER";
		static GRILLE = "GRILLE";
		static LOUVRE = "LOUVRE";
		static REGISTER = "REGISTER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAirToAirHeatRecoveryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FIXEDPLATECOUNTERFLOWEXCHANGER = "FIXEDPLATECOUNTERFLOWEXCHANGER";
		static FIXEDPLATECROSSFLOWEXCHANGER = "FIXEDPLATECROSSFLOWEXCHANGER";
		static FIXEDPLATEPARALLELFLOWEXCHANGER = "FIXEDPLATEPARALLELFLOWEXCHANGER";
		static ROTARYWHEEL = "ROTARYWHEEL";
		static RUNAROUNDCOILLOOP = "RUNAROUNDCOILLOOP";
		static HEATPIPE = "HEATPIPE";
		static TWINTOWERENTHALPYRECOVERYLOOPS = "TWINTOWERENTHALPYRECOVERYLOOPS";
		static THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS";
		static THERMOSIPHONCOILTYPEHEATEXCHANGERS = "THERMOSIPHONCOILTYPEHEATEXCHANGERS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAlarmTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BELL = "BELL";
		static BREAKGLASSBUTTON = "BREAKGLASSBUTTON";
		static LIGHT = "LIGHT";
		static MANUALPULLBOX = "MANUALPULLBOX";
		static SIREN = "SIREN";
		static WHISTLE = "WHISTLE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAnalysisModelTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static IN_PLANE_LOADING_2D = "IN_PLANE_LOADING_2D";
		static OUT_PLANE_LOADING_2D = "OUT_PLANE_LOADING_2D";
		static LOADING_3D = "LOADING_3D";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAnalysisTheoryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FIRST_ORDER_THEORY = "FIRST_ORDER_THEORY";
		static SECOND_ORDER_THEORY = "SECOND_ORDER_THEORY";
		static THIRD_ORDER_THEORY = "THIRD_ORDER_THEORY";
		static FULL_NONLINEAR_THEORY = "FULL_NONLINEAR_THEORY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcArithmeticOperatorEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ADD = "ADD";
		static DIVIDE = "DIVIDE";
		static MULTIPLY = "MULTIPLY";
		static SUBTRACT = "SUBTRACT";
	}
	export class IfcAssemblyPlaceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SITE = "SITE";
		static FACTORY = "FACTORY";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcAudioVisualApplianceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AMPLIFIER = "AMPLIFIER";
		static CAMERA = "CAMERA";
		static DISPLAY = "DISPLAY";
		static MICROPHONE = "MICROPHONE";
		static PLAYER = "PLAYER";
		static PROJECTOR = "PROJECTOR";
		static RECEIVER = "RECEIVER";
		static SPEAKER = "SPEAKER";
		static SWITCHER = "SWITCHER";
		static TELEPHONE = "TELEPHONE";
		static TUNER = "TUNER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBSplineCurveForm {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POLYLINE_FORM = "POLYLINE_FORM";
		static CIRCULAR_ARC = "CIRCULAR_ARC";
		static ELLIPTIC_ARC = "ELLIPTIC_ARC";
		static PARABOLIC_ARC = "PARABOLIC_ARC";
		static HYPERBOLIC_ARC = "HYPERBOLIC_ARC";
		static UNSPECIFIED = "UNSPECIFIED";
	}
	export class IfcBSplineSurfaceForm {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PLANE_SURF = "PLANE_SURF";
		static CYLINDRICAL_SURF = "CYLINDRICAL_SURF";
		static CONICAL_SURF = "CONICAL_SURF";
		static SPHERICAL_SURF = "SPHERICAL_SURF";
		static TOROIDAL_SURF = "TOROIDAL_SURF";
		static SURF_OF_REVOLUTION = "SURF_OF_REVOLUTION";
		static RULED_SURF = "RULED_SURF";
		static GENERALISED_CONE = "GENERALISED_CONE";
		static QUADRIC_SURF = "QUADRIC_SURF";
		static SURF_OF_LINEAR_EXTRUSION = "SURF_OF_LINEAR_EXTRUSION";
		static UNSPECIFIED = "UNSPECIFIED";
	}
	export class IfcBeamTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEAM = "BEAM";
		static JOIST = "JOIST";
		static HOLLOWCORE = "HOLLOWCORE";
		static LINTEL = "LINTEL";
		static SPANDREL = "SPANDREL";
		static T_BEAM = "T_BEAM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBenchmarkEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GREATERTHAN = "GREATERTHAN";
		static GREATERTHANOREQUALTO = "GREATERTHANOREQUALTO";
		static LESSTHAN = "LESSTHAN";
		static LESSTHANOREQUALTO = "LESSTHANOREQUALTO";
		static EQUALTO = "EQUALTO";
		static NOTEQUALTO = "NOTEQUALTO";
		static INCLUDES = "INCLUDES";
		static NOTINCLUDES = "NOTINCLUDES";
		static INCLUDEDIN = "INCLUDEDIN";
		static NOTINCLUDEDIN = "NOTINCLUDEDIN";
	}
	export class IfcBoilerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static WATER = "WATER";
		static STEAM = "STEAM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBooleanOperator {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static UNION = "UNION";
		static INTERSECTION = "INTERSECTION";
		static DIFFERENCE = "DIFFERENCE";
	}
	export class IfcBuildingElementPartTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static INSULATION = "INSULATION";
		static PRECASTPANEL = "PRECASTPANEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBuildingElementProxyTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPLEX = "COMPLEX";
		static ELEMENT = "ELEMENT";
		static PARTIAL = "PARTIAL";
		static PROVISIONFORVOID = "PROVISIONFORVOID";
		static PROVISIONFORSPACE = "PROVISIONFORSPACE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBuildingSystemTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FENESTRATION = "FENESTRATION";
		static FOUNDATION = "FOUNDATION";
		static LOADBEARING = "LOADBEARING";
		static OUTERSHELL = "OUTERSHELL";
		static SHADING = "SHADING";
		static TRANSPORT = "TRANSPORT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcBurnerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableCarrierFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEND = "BEND";
		static CROSS = "CROSS";
		static REDUCER = "REDUCER";
		static TEE = "TEE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableCarrierSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CABLELADDERSEGMENT = "CABLELADDERSEGMENT";
		static CABLETRAYSEGMENT = "CABLETRAYSEGMENT";
		static CABLETRUNKINGSEGMENT = "CABLETRUNKINGSEGMENT";
		static CONDUITSEGMENT = "CONDUITSEGMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONNECTOR = "CONNECTOR";
		static ENTRY = "ENTRY";
		static EXIT = "EXIT";
		static JUNCTION = "JUNCTION";
		static TRANSITION = "TRANSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCableSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BUSBARSEGMENT = "BUSBARSEGMENT";
		static CABLESEGMENT = "CABLESEGMENT";
		static CONDUCTORSEGMENT = "CONDUCTORSEGMENT";
		static CORESEGMENT = "CORESEGMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcChangeActionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static NOCHANGE = "NOCHANGE";
		static MODIFIED = "MODIFIED";
		static ADDED = "ADDED";
		static DELETED = "DELETED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcChillerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRCOOLED = "AIRCOOLED";
		static WATERCOOLED = "WATERCOOLED";
		static HEATRECOVERY = "HEATRECOVERY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcChimneyTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCoilTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DXCOOLINGCOIL = "DXCOOLINGCOIL";
		static ELECTRICHEATINGCOIL = "ELECTRICHEATINGCOIL";
		static GASHEATINGCOIL = "GASHEATINGCOIL";
		static HYDRONICCOIL = "HYDRONICCOIL";
		static STEAMHEATINGCOIL = "STEAMHEATINGCOIL";
		static WATERCOOLINGCOIL = "WATERCOOLINGCOIL";
		static WATERHEATINGCOIL = "WATERHEATINGCOIL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcColumnTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COLUMN = "COLUMN";
		static PILASTER = "PILASTER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCommunicationsApplianceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANTENNA = "ANTENNA";
		static COMPUTER = "COMPUTER";
		static FAX = "FAX";
		static GATEWAY = "GATEWAY";
		static MODEM = "MODEM";
		static NETWORKAPPLIANCE = "NETWORKAPPLIANCE";
		static NETWORKBRIDGE = "NETWORKBRIDGE";
		static NETWORKHUB = "NETWORKHUB";
		static PRINTER = "PRINTER";
		static REPEATER = "REPEATER";
		static ROUTER = "ROUTER";
		static SCANNER = "SCANNER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcComplexPropertyTemplateTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static P_COMPLEX = "P_COMPLEX";
		static Q_COMPLEX = "Q_COMPLEX";
	}
	export class IfcCompressorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DYNAMIC = "DYNAMIC";
		static RECIPROCATING = "RECIPROCATING";
		static ROTARY = "ROTARY";
		static SCROLL = "SCROLL";
		static TROCHOIDAL = "TROCHOIDAL";
		static SINGLESTAGE = "SINGLESTAGE";
		static BOOSTER = "BOOSTER";
		static OPENTYPE = "OPENTYPE";
		static HERMETIC = "HERMETIC";
		static SEMIHERMETIC = "SEMIHERMETIC";
		static WELDEDSHELLHERMETIC = "WELDEDSHELLHERMETIC";
		static ROLLINGPISTON = "ROLLINGPISTON";
		static ROTARYVANE = "ROTARYVANE";
		static SINGLESCREW = "SINGLESCREW";
		static TWINSCREW = "TWINSCREW";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCondenserTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRCOOLED = "AIRCOOLED";
		static EVAPORATIVECOOLED = "EVAPORATIVECOOLED";
		static WATERCOOLED = "WATERCOOLED";
		static WATERCOOLEDBRAZEDPLATE = "WATERCOOLEDBRAZEDPLATE";
		static WATERCOOLEDSHELLCOIL = "WATERCOOLEDSHELLCOIL";
		static WATERCOOLEDSHELLTUBE = "WATERCOOLEDSHELLTUBE";
		static WATERCOOLEDTUBEINTUBE = "WATERCOOLEDTUBEINTUBE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcConnectionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ATPATH = "ATPATH";
		static ATSTART = "ATSTART";
		static ATEND = "ATEND";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcConstraintEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static HARD = "HARD";
		static SOFT = "SOFT";
		static ADVISORY = "ADVISORY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcConstructionEquipmentResourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DEMOLISHING = "DEMOLISHING";
		static EARTHMOVING = "EARTHMOVING";
		static ERECTING = "ERECTING";
		static HEATING = "HEATING";
		static LIGHTING = "LIGHTING";
		static PAVING = "PAVING";
		static PUMPING = "PUMPING";
		static TRANSPORTING = "TRANSPORTING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcConstructionMaterialResourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AGGREGATES = "AGGREGATES";
		static CONCRETE = "CONCRETE";
		static DRYWALL = "DRYWALL";
		static FUEL = "FUEL";
		static GYPSUM = "GYPSUM";
		static MASONRY = "MASONRY";
		static METAL = "METAL";
		static PLASTIC = "PLASTIC";
		static WOOD = "WOOD";
		static NOTDEFINED = "NOTDEFINED";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcConstructionProductResourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ASSEMBLY = "ASSEMBLY";
		static FORMWORK = "FORMWORK";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcControllerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLOATING = "FLOATING";
		static PROGRAMMABLE = "PROGRAMMABLE";
		static PROPORTIONAL = "PROPORTIONAL";
		static MULTIPOSITION = "MULTIPOSITION";
		static TWOPOSITION = "TWOPOSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCooledBeamTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACTIVE = "ACTIVE";
		static PASSIVE = "PASSIVE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCoolingTowerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static NATURALDRAFT = "NATURALDRAFT";
		static MECHANICALINDUCEDDRAFT = "MECHANICALINDUCEDDRAFT";
		static MECHANICALFORCEDDRAFT = "MECHANICALFORCEDDRAFT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCostItemTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCostScheduleTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BUDGET = "BUDGET";
		static COSTPLAN = "COSTPLAN";
		static ESTIMATE = "ESTIMATE";
		static TENDER = "TENDER";
		static PRICEDBILLOFQUANTITIES = "PRICEDBILLOFQUANTITIES";
		static UNPRICEDBILLOFQUANTITIES = "UNPRICEDBILLOFQUANTITIES";
		static SCHEDULEOFRATES = "SCHEDULEOFRATES";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCoveringTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CEILING = "CEILING";
		static FLOORING = "FLOORING";
		static CLADDING = "CLADDING";
		static ROOFING = "ROOFING";
		static MOLDING = "MOLDING";
		static SKIRTINGBOARD = "SKIRTINGBOARD";
		static INSULATION = "INSULATION";
		static MEMBRANE = "MEMBRANE";
		static SLEEVING = "SLEEVING";
		static WRAPPING = "WRAPPING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCrewResourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static OFFICE = "OFFICE";
		static SITE = "SITE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCurtainWallTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcCurveInterpolationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LINEAR = "LINEAR";
		static LOG_LINEAR = "LOG_LINEAR";
		static LOG_LOG = "LOG_LOG";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDamperTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BACKDRAFTDAMPER = "BACKDRAFTDAMPER";
		static BALANCINGDAMPER = "BALANCINGDAMPER";
		static BLASTDAMPER = "BLASTDAMPER";
		static CONTROLDAMPER = "CONTROLDAMPER";
		static FIREDAMPER = "FIREDAMPER";
		static FIRESMOKEDAMPER = "FIRESMOKEDAMPER";
		static FUMEHOODEXHAUST = "FUMEHOODEXHAUST";
		static GRAVITYDAMPER = "GRAVITYDAMPER";
		static GRAVITYRELIEFDAMPER = "GRAVITYRELIEFDAMPER";
		static RELIEFDAMPER = "RELIEFDAMPER";
		static SMOKEDAMPER = "SMOKEDAMPER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDataOriginEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static MEASURED = "MEASURED";
		static PREDICTED = "PREDICTED";
		static SIMULATED = "SIMULATED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDerivedUnitEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANGULARVELOCITYUNIT = "ANGULARVELOCITYUNIT";
		static AREADENSITYUNIT = "AREADENSITYUNIT";
		static COMPOUNDPLANEANGLEUNIT = "COMPOUNDPLANEANGLEUNIT";
		static DYNAMICVISCOSITYUNIT = "DYNAMICVISCOSITYUNIT";
		static HEATFLUXDENSITYUNIT = "HEATFLUXDENSITYUNIT";
		static INTEGERCOUNTRATEUNIT = "INTEGERCOUNTRATEUNIT";
		static ISOTHERMALMOISTURECAPACITYUNIT = "ISOTHERMALMOISTURECAPACITYUNIT";
		static KINEMATICVISCOSITYUNIT = "KINEMATICVISCOSITYUNIT";
		static LINEARVELOCITYUNIT = "LINEARVELOCITYUNIT";
		static MASSDENSITYUNIT = "MASSDENSITYUNIT";
		static MASSFLOWRATEUNIT = "MASSFLOWRATEUNIT";
		static MOISTUREDIFFUSIVITYUNIT = "MOISTUREDIFFUSIVITYUNIT";
		static MOLECULARWEIGHTUNIT = "MOLECULARWEIGHTUNIT";
		static SPECIFICHEATCAPACITYUNIT = "SPECIFICHEATCAPACITYUNIT";
		static THERMALADMITTANCEUNIT = "THERMALADMITTANCEUNIT";
		static THERMALCONDUCTANCEUNIT = "THERMALCONDUCTANCEUNIT";
		static THERMALRESISTANCEUNIT = "THERMALRESISTANCEUNIT";
		static THERMALTRANSMITTANCEUNIT = "THERMALTRANSMITTANCEUNIT";
		static VAPORPERMEABILITYUNIT = "VAPORPERMEABILITYUNIT";
		static VOLUMETRICFLOWRATEUNIT = "VOLUMETRICFLOWRATEUNIT";
		static ROTATIONALFREQUENCYUNIT = "ROTATIONALFREQUENCYUNIT";
		static TORQUEUNIT = "TORQUEUNIT";
		static MOMENTOFINERTIAUNIT = "MOMENTOFINERTIAUNIT";
		static LINEARMOMENTUNIT = "LINEARMOMENTUNIT";
		static LINEARFORCEUNIT = "LINEARFORCEUNIT";
		static PLANARFORCEUNIT = "PLANARFORCEUNIT";
		static MODULUSOFELASTICITYUNIT = "MODULUSOFELASTICITYUNIT";
		static SHEARMODULUSUNIT = "SHEARMODULUSUNIT";
		static LINEARSTIFFNESSUNIT = "LINEARSTIFFNESSUNIT";
		static ROTATIONALSTIFFNESSUNIT = "ROTATIONALSTIFFNESSUNIT";
		static MODULUSOFSUBGRADEREACTIONUNIT = "MODULUSOFSUBGRADEREACTIONUNIT";
		static ACCELERATIONUNIT = "ACCELERATIONUNIT";
		static CURVATUREUNIT = "CURVATUREUNIT";
		static HEATINGVALUEUNIT = "HEATINGVALUEUNIT";
		static IONCONCENTRATIONUNIT = "IONCONCENTRATIONUNIT";
		static LUMINOUSINTENSITYDISTRIBUTIONUNIT = "LUMINOUSINTENSITYDISTRIBUTIONUNIT";
		static MASSPERLENGTHUNIT = "MASSPERLENGTHUNIT";
		static MODULUSOFLINEARSUBGRADEREACTIONUNIT = "MODULUSOFLINEARSUBGRADEREACTIONUNIT";
		static MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT";
		static PHUNIT = "PHUNIT";
		static ROTATIONALMASSUNIT = "ROTATIONALMASSUNIT";
		static SECTIONAREAINTEGRALUNIT = "SECTIONAREAINTEGRALUNIT";
		static SECTIONMODULUSUNIT = "SECTIONMODULUSUNIT";
		static SOUNDPOWERLEVELUNIT = "SOUNDPOWERLEVELUNIT";
		static SOUNDPOWERUNIT = "SOUNDPOWERUNIT";
		static SOUNDPRESSURELEVELUNIT = "SOUNDPRESSURELEVELUNIT";
		static SOUNDPRESSUREUNIT = "SOUNDPRESSUREUNIT";
		static TEMPERATUREGRADIENTUNIT = "TEMPERATUREGRADIENTUNIT";
		static TEMPERATURERATEOFCHANGEUNIT = "TEMPERATURERATEOFCHANGEUNIT";
		static THERMALEXPANSIONCOEFFICIENTUNIT = "THERMALEXPANSIONCOEFFICIENTUNIT";
		static WARPINGCONSTANTUNIT = "WARPINGCONSTANTUNIT";
		static WARPINGMOMENTUNIT = "WARPINGMOMENTUNIT";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcDirectionSenseEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POSITIVE = "POSITIVE";
		static NEGATIVE = "NEGATIVE";
	}
	export class IfcDiscreteAccessoryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANCHORPLATE = "ANCHORPLATE";
		static BRACKET = "BRACKET";
		static SHOE = "SHOE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDistributionChamberElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FORMEDDUCT = "FORMEDDUCT";
		static INSPECTIONCHAMBER = "INSPECTIONCHAMBER";
		static INSPECTIONPIT = "INSPECTIONPIT";
		static MANHOLE = "MANHOLE";
		static METERCHAMBER = "METERCHAMBER";
		static SUMP = "SUMP";
		static TRENCH = "TRENCH";
		static VALVECHAMBER = "VALVECHAMBER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDistributionPortTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CABLE = "CABLE";
		static CABLECARRIER = "CABLECARRIER";
		static DUCT = "DUCT";
		static PIPE = "PIPE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDistributionSystemEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRCONDITIONING = "AIRCONDITIONING";
		static AUDIOVISUAL = "AUDIOVISUAL";
		static CHEMICAL = "CHEMICAL";
		static CHILLEDWATER = "CHILLEDWATER";
		static COMMUNICATION = "COMMUNICATION";
		static COMPRESSEDAIR = "COMPRESSEDAIR";
		static CONDENSERWATER = "CONDENSERWATER";
		static CONTROL = "CONTROL";
		static CONVEYING = "CONVEYING";
		static DATA = "DATA";
		static DISPOSAL = "DISPOSAL";
		static DOMESTICCOLDWATER = "DOMESTICCOLDWATER";
		static DOMESTICHOTWATER = "DOMESTICHOTWATER";
		static DRAINAGE = "DRAINAGE";
		static EARTHING = "EARTHING";
		static ELECTRICAL = "ELECTRICAL";
		static ELECTROACOUSTIC = "ELECTROACOUSTIC";
		static EXHAUST = "EXHAUST";
		static FIREPROTECTION = "FIREPROTECTION";
		static FUEL = "FUEL";
		static GAS = "GAS";
		static HAZARDOUS = "HAZARDOUS";
		static HEATING = "HEATING";
		static LIGHTING = "LIGHTING";
		static LIGHTNINGPROTECTION = "LIGHTNINGPROTECTION";
		static MUNICIPALSOLIDWASTE = "MUNICIPALSOLIDWASTE";
		static OIL = "OIL";
		static OPERATIONAL = "OPERATIONAL";
		static POWERGENERATION = "POWERGENERATION";
		static RAINWATER = "RAINWATER";
		static REFRIGERATION = "REFRIGERATION";
		static SECURITY = "SECURITY";
		static SEWAGE = "SEWAGE";
		static SIGNAL = "SIGNAL";
		static STORMWATER = "STORMWATER";
		static TELEPHONE = "TELEPHONE";
		static TV = "TV";
		static VACUUM = "VACUUM";
		static VENT = "VENT";
		static VENTILATION = "VENTILATION";
		static WASTEWATER = "WASTEWATER";
		static WATERSUPPLY = "WATERSUPPLY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDocumentConfidentialityEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PUBLIC = "PUBLIC";
		static RESTRICTED = "RESTRICTED";
		static CONFIDENTIAL = "CONFIDENTIAL";
		static PERSONAL = "PERSONAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDocumentStatusEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DRAFT = "DRAFT";
		static FINALDRAFT = "FINALDRAFT";
		static FINAL = "FINAL";
		static REVISION = "REVISION";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorPanelOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SWINGING = "SWINGING";
		static DOUBLE_ACTING = "DOUBLE_ACTING";
		static SLIDING = "SLIDING";
		static FOLDING = "FOLDING";
		static REVOLVING = "REVOLVING";
		static ROLLINGUP = "ROLLINGUP";
		static FIXEDPANEL = "FIXEDPANEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorPanelPositionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LEFT = "LEFT";
		static MIDDLE = "MIDDLE";
		static RIGHT = "RIGHT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorStyleConstructionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALUMINIUM = "ALUMINIUM";
		static HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
		static STEEL = "STEEL";
		static WOOD = "WOOD";
		static ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
		static ALUMINIUM_PLASTIC = "ALUMINIUM_PLASTIC";
		static PLASTIC = "PLASTIC";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorStyleOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
		static SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
		static DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
		static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
		static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
		static DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
		static DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
		static DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
		static SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
		static SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
		static DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
		static FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
		static FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
		static DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
		static REVOLVING = "REVOLVING";
		static ROLLINGUP = "ROLLINGUP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DOOR = "DOOR";
		static GATE = "GATE";
		static TRAPDOOR = "TRAPDOOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDoorTypeOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
		static SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
		static DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
		static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
		static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
		static DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
		static DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
		static DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
		static SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
		static SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
		static DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
		static FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
		static FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
		static DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
		static REVOLVING = "REVOLVING";
		static ROLLINGUP = "ROLLINGUP";
		static SWING_FIXED_LEFT = "SWING_FIXED_LEFT";
		static SWING_FIXED_RIGHT = "SWING_FIXED_RIGHT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDuctFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEND = "BEND";
		static CONNECTOR = "CONNECTOR";
		static ENTRY = "ENTRY";
		static EXIT = "EXIT";
		static JUNCTION = "JUNCTION";
		static OBSTRUCTION = "OBSTRUCTION";
		static TRANSITION = "TRANSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDuctSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static RIGIDSEGMENT = "RIGIDSEGMENT";
		static FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcDuctSilencerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLATOVAL = "FLATOVAL";
		static RECTANGULAR = "RECTANGULAR";
		static ROUND = "ROUND";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricApplianceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DISHWASHER = "DISHWASHER";
		static ELECTRICCOOKER = "ELECTRICCOOKER";
		static FREESTANDINGELECTRICHEATER = "FREESTANDINGELECTRICHEATER";
		static FREESTANDINGFAN = "FREESTANDINGFAN";
		static FREESTANDINGWATERHEATER = "FREESTANDINGWATERHEATER";
		static FREESTANDINGWATERCOOLER = "FREESTANDINGWATERCOOLER";
		static FREEZER = "FREEZER";
		static FRIDGE_FREEZER = "FRIDGE_FREEZER";
		static HANDDRYER = "HANDDRYER";
		static KITCHENMACHINE = "KITCHENMACHINE";
		static MICROWAVE = "MICROWAVE";
		static PHOTOCOPIER = "PHOTOCOPIER";
		static REFRIGERATOR = "REFRIGERATOR";
		static TUMBLEDRYER = "TUMBLEDRYER";
		static VENDINGMACHINE = "VENDINGMACHINE";
		static WASHINGMACHINE = "WASHINGMACHINE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricDistributionBoardTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONSUMERUNIT = "CONSUMERUNIT";
		static DISTRIBUTIONBOARD = "DISTRIBUTIONBOARD";
		static MOTORCONTROLCENTRE = "MOTORCONTROLCENTRE";
		static SWITCHBOARD = "SWITCHBOARD";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricFlowStorageDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BATTERY = "BATTERY";
		static CAPACITORBANK = "CAPACITORBANK";
		static HARMONICFILTER = "HARMONICFILTER";
		static INDUCTORBANK = "INDUCTORBANK";
		static UPS = "UPS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricGeneratorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CHP = "CHP";
		static ENGINEGENERATOR = "ENGINEGENERATOR";
		static STANDALONE = "STANDALONE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricMotorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DC = "DC";
		static INDUCTION = "INDUCTION";
		static POLYPHASE = "POLYPHASE";
		static RELUCTANCESYNCHRONOUS = "RELUCTANCESYNCHRONOUS";
		static SYNCHRONOUS = "SYNCHRONOUS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElectricTimeControlTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static TIMECLOCK = "TIMECLOCK";
		static TIMEDELAY = "TIMEDELAY";
		static RELAY = "RELAY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElementAssemblyTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACCESSORY_ASSEMBLY = "ACCESSORY_ASSEMBLY";
		static ARCH = "ARCH";
		static BEAM_GRID = "BEAM_GRID";
		static BRACED_FRAME = "BRACED_FRAME";
		static GIRDER = "GIRDER";
		static REINFORCEMENT_UNIT = "REINFORCEMENT_UNIT";
		static RIGID_FRAME = "RIGID_FRAME";
		static SLAB_FIELD = "SLAB_FIELD";
		static TRUSS = "TRUSS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcElementCompositionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPLEX = "COMPLEX";
		static ELEMENT = "ELEMENT";
		static PARTIAL = "PARTIAL";
	}
	export class IfcEngineTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static EXTERNALCOMBUSTION = "EXTERNALCOMBUSTION";
		static INTERNALCOMBUSTION = "INTERNALCOMBUSTION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEvaporativeCoolerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = "DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER";
		static DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER";
		static DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER";
		static DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER";
		static DIRECTEVAPORATIVEAIRWASHER = "DIRECTEVAPORATIVEAIRWASHER";
		static INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER";
		static INDIRECTEVAPORATIVEWETCOIL = "INDIRECTEVAPORATIVEWETCOIL";
		static INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER";
		static INDIRECTDIRECTCOMBINATION = "INDIRECTDIRECTCOMBINATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEvaporatorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DIRECTEXPANSION = "DIRECTEXPANSION";
		static DIRECTEXPANSIONSHELLANDTUBE = "DIRECTEXPANSIONSHELLANDTUBE";
		static DIRECTEXPANSIONTUBEINTUBE = "DIRECTEXPANSIONTUBEINTUBE";
		static DIRECTEXPANSIONBRAZEDPLATE = "DIRECTEXPANSIONBRAZEDPLATE";
		static FLOODEDSHELLANDTUBE = "FLOODEDSHELLANDTUBE";
		static SHELLANDCOIL = "SHELLANDCOIL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEventTriggerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static EVENTRULE = "EVENTRULE";
		static EVENTMESSAGE = "EVENTMESSAGE";
		static EVENTTIME = "EVENTTIME";
		static EVENTCOMPLEX = "EVENTCOMPLEX";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcEventTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STARTEVENT = "STARTEVENT";
		static ENDEVENT = "ENDEVENT";
		static INTERMEDIATEEVENT = "INTERMEDIATEEVENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcExternalSpatialElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static EXTERNAL = "EXTERNAL";
		static EXTERNAL_EARTH = "EXTERNAL_EARTH";
		static EXTERNAL_WATER = "EXTERNAL_WATER";
		static EXTERNAL_FIRE = "EXTERNAL_FIRE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFanTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CENTRIFUGALFORWARDCURVED = "CENTRIFUGALFORWARDCURVED";
		static CENTRIFUGALRADIAL = "CENTRIFUGALRADIAL";
		static CENTRIFUGALBACKWARDINCLINEDCURVED = "CENTRIFUGALBACKWARDINCLINEDCURVED";
		static CENTRIFUGALAIRFOIL = "CENTRIFUGALAIRFOIL";
		static TUBEAXIAL = "TUBEAXIAL";
		static VANEAXIAL = "VANEAXIAL";
		static PROPELLORAXIAL = "PROPELLORAXIAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFastenerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GLUE = "GLUE";
		static MORTAR = "MORTAR";
		static WELD = "WELD";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFilterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRPARTICLEFILTER = "AIRPARTICLEFILTER";
		static COMPRESSEDAIRFILTER = "COMPRESSEDAIRFILTER";
		static ODORFILTER = "ODORFILTER";
		static OILFILTER = "OILFILTER";
		static STRAINER = "STRAINER";
		static WATERFILTER = "WATERFILTER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFireSuppressionTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BREECHINGINLET = "BREECHINGINLET";
		static FIREHYDRANT = "FIREHYDRANT";
		static HOSEREEL = "HOSEREEL";
		static SPRINKLER = "SPRINKLER";
		static SPRINKLERDEFLECTOR = "SPRINKLERDEFLECTOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFlowDirectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SOURCE = "SOURCE";
		static SINK = "SINK";
		static SOURCEANDSINK = "SOURCEANDSINK";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFlowInstrumentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PRESSUREGAUGE = "PRESSUREGAUGE";
		static THERMOMETER = "THERMOMETER";
		static AMMETER = "AMMETER";
		static FREQUENCYMETER = "FREQUENCYMETER";
		static POWERFACTORMETER = "POWERFACTORMETER";
		static PHASEANGLEMETER = "PHASEANGLEMETER";
		static VOLTMETER_PEAK = "VOLTMETER_PEAK";
		static VOLTMETER_RMS = "VOLTMETER_RMS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFlowMeterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ENERGYMETER = "ENERGYMETER";
		static GASMETER = "GASMETER";
		static OILMETER = "OILMETER";
		static WATERMETER = "WATERMETER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFootingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CAISSON_FOUNDATION = "CAISSON_FOUNDATION";
		static FOOTING_BEAM = "FOOTING_BEAM";
		static PAD_FOOTING = "PAD_FOOTING";
		static PILE_CAP = "PILE_CAP";
		static STRIP_FOOTING = "STRIP_FOOTING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcFurnitureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CHAIR = "CHAIR";
		static TABLE = "TABLE";
		static DESK = "DESK";
		static BED = "BED";
		static FILECABINET = "FILECABINET";
		static SHELF = "SHELF";
		static SOFA = "SOFA";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcGeographicElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static TERRAIN = "TERRAIN";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcGeometricProjectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GRAPH_VIEW = "GRAPH_VIEW";
		static SKETCH_VIEW = "SKETCH_VIEW";
		static MODEL_VIEW = "MODEL_VIEW";
		static PLAN_VIEW = "PLAN_VIEW";
		static REFLECTED_PLAN_VIEW = "REFLECTED_PLAN_VIEW";
		static SECTION_VIEW = "SECTION_VIEW";
		static ELEVATION_VIEW = "ELEVATION_VIEW";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcGlobalOrLocalEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GLOBAL_COORDS = "GLOBAL_COORDS";
		static LOCAL_COORDS = "LOCAL_COORDS";
	}
	export class IfcGridTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static RECTANGULAR = "RECTANGULAR";
		static RADIAL = "RADIAL";
		static TRIANGULAR = "TRIANGULAR";
		static IRREGULAR = "IRREGULAR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcHeatExchangerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PLATE = "PLATE";
		static SHELLANDTUBE = "SHELLANDTUBE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcHumidifierTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STEAMINJECTION = "STEAMINJECTION";
		static ADIABATICAIRWASHER = "ADIABATICAIRWASHER";
		static ADIABATICPAN = "ADIABATICPAN";
		static ADIABATICWETTEDELEMENT = "ADIABATICWETTEDELEMENT";
		static ADIABATICATOMIZING = "ADIABATICATOMIZING";
		static ADIABATICULTRASONIC = "ADIABATICULTRASONIC";
		static ADIABATICRIGIDMEDIA = "ADIABATICRIGIDMEDIA";
		static ADIABATICCOMPRESSEDAIRNOZZLE = "ADIABATICCOMPRESSEDAIRNOZZLE";
		static ASSISTEDELECTRIC = "ASSISTEDELECTRIC";
		static ASSISTEDNATURALGAS = "ASSISTEDNATURALGAS";
		static ASSISTEDPROPANE = "ASSISTEDPROPANE";
		static ASSISTEDBUTANE = "ASSISTEDBUTANE";
		static ASSISTEDSTEAM = "ASSISTEDSTEAM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcInterceptorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CYCLONIC = "CYCLONIC";
		static GREASE = "GREASE";
		static OIL = "OIL";
		static PETROL = "PETROL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcInternalOrExternalEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static INTERNAL = "INTERNAL";
		static EXTERNAL = "EXTERNAL";
		static EXTERNAL_EARTH = "EXTERNAL_EARTH";
		static EXTERNAL_WATER = "EXTERNAL_WATER";
		static EXTERNAL_FIRE = "EXTERNAL_FIRE";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcInventoryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ASSETINVENTORY = "ASSETINVENTORY";
		static SPACEINVENTORY = "SPACEINVENTORY";
		static FURNITUREINVENTORY = "FURNITUREINVENTORY";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcJunctionBoxTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DATA = "DATA";
		static POWER = "POWER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcKnotType {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static UNIFORM_KNOTS = "UNIFORM_KNOTS";
		static QUASI_UNIFORM_KNOTS = "QUASI_UNIFORM_KNOTS";
		static PIECEWISE_BEZIER_KNOTS = "PIECEWISE_BEZIER_KNOTS";
		static UNSPECIFIED = "UNSPECIFIED";
	}
	export class IfcLaborResourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ADMINISTRATION = "ADMINISTRATION";
		static CARPENTRY = "CARPENTRY";
		static CLEANING = "CLEANING";
		static CONCRETE = "CONCRETE";
		static DRYWALL = "DRYWALL";
		static ELECTRIC = "ELECTRIC";
		static FINISHING = "FINISHING";
		static FLOORING = "FLOORING";
		static GENERAL = "GENERAL";
		static HVAC = "HVAC";
		static LANDSCAPING = "LANDSCAPING";
		static MASONRY = "MASONRY";
		static PAINTING = "PAINTING";
		static PAVING = "PAVING";
		static PLUMBING = "PLUMBING";
		static ROOFING = "ROOFING";
		static SITEGRADING = "SITEGRADING";
		static STEELWORK = "STEELWORK";
		static SURVEYING = "SURVEYING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLampTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
		static FLUORESCENT = "FLUORESCENT";
		static HALOGEN = "HALOGEN";
		static HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
		static HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
		static LED = "LED";
		static METALHALIDE = "METALHALIDE";
		static OLED = "OLED";
		static TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLayerSetDirectionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AXIS1 = "AXIS1";
		static AXIS2 = "AXIS2";
		static AXIS3 = "AXIS3";
	}
	export class IfcLightDistributionCurveEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static TYPE_A = "TYPE_A";
		static TYPE_B = "TYPE_B";
		static TYPE_C = "TYPE_C";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLightEmissionSourceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
		static FLUORESCENT = "FLUORESCENT";
		static HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
		static HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
		static LIGHTEMITTINGDIODE = "LIGHTEMITTINGDIODE";
		static LOWPRESSURESODIUM = "LOWPRESSURESODIUM";
		static LOWVOLTAGEHALOGEN = "LOWVOLTAGEHALOGEN";
		static MAINVOLTAGEHALOGEN = "MAINVOLTAGEHALOGEN";
		static METALHALIDE = "METALHALIDE";
		static TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLightFixtureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POINTSOURCE = "POINTSOURCE";
		static DIRECTIONSOURCE = "DIRECTIONSOURCE";
		static SECURITYLIGHTING = "SECURITYLIGHTING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLoadGroupTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LOAD_GROUP = "LOAD_GROUP";
		static LOAD_CASE = "LOAD_CASE";
		static LOAD_COMBINATION = "LOAD_COMBINATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcLogicalOperatorEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LOGICALAND = "LOGICALAND";
		static LOGICALOR = "LOGICALOR";
		static LOGICALXOR = "LOGICALXOR";
		static LOGICALNOTAND = "LOGICALNOTAND";
		static LOGICALNOTOR = "LOGICALNOTOR";
	}
	export class IfcMechanicalFastenerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANCHORBOLT = "ANCHORBOLT";
		static BOLT = "BOLT";
		static DOWEL = "DOWEL";
		static NAIL = "NAIL";
		static NAILPLATE = "NAILPLATE";
		static RIVET = "RIVET";
		static SCREW = "SCREW";
		static SHEARCONNECTOR = "SHEARCONNECTOR";
		static STAPLE = "STAPLE";
		static STUDSHEARCONNECTOR = "STUDSHEARCONNECTOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcMedicalDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRSTATION = "AIRSTATION";
		static FEEDAIRUNIT = "FEEDAIRUNIT";
		static OXYGENGENERATOR = "OXYGENGENERATOR";
		static OXYGENPLANT = "OXYGENPLANT";
		static VACUUMSTATION = "VACUUMSTATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcMemberTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BRACE = "BRACE";
		static CHORD = "CHORD";
		static COLLAR = "COLLAR";
		static MEMBER = "MEMBER";
		static MULLION = "MULLION";
		static PLATE = "PLATE";
		static POST = "POST";
		static PURLIN = "PURLIN";
		static RAFTER = "RAFTER";
		static STRINGER = "STRINGER";
		static STRUT = "STRUT";
		static STUD = "STUD";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcMotorConnectionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BELTDRIVE = "BELTDRIVE";
		static COUPLING = "COUPLING";
		static DIRECTDRIVE = "DIRECTDRIVE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcNullStyle {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static NULL = "NULL";
	}
	export class IfcObjectTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PRODUCT = "PRODUCT";
		static PROCESS = "PROCESS";
		static CONTROL = "CONTROL";
		static RESOURCE = "RESOURCE";
		static ACTOR = "ACTOR";
		static GROUP = "GROUP";
		static PROJECT = "PROJECT";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcObjectiveEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CODECOMPLIANCE = "CODECOMPLIANCE";
		static CODEWAIVER = "CODEWAIVER";
		static DESIGNINTENT = "DESIGNINTENT";
		static EXTERNAL = "EXTERNAL";
		static HEALTHANDSAFETY = "HEALTHANDSAFETY";
		static MERGECONFLICT = "MERGECONFLICT";
		static MODELVIEW = "MODELVIEW";
		static PARAMETER = "PARAMETER";
		static REQUIREMENT = "REQUIREMENT";
		static SPECIFICATION = "SPECIFICATION";
		static TRIGGERCONDITION = "TRIGGERCONDITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcOccupantTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ASSIGNEE = "ASSIGNEE";
		static ASSIGNOR = "ASSIGNOR";
		static LESSEE = "LESSEE";
		static LESSOR = "LESSOR";
		static LETTINGAGENT = "LETTINGAGENT";
		static OWNER = "OWNER";
		static TENANT = "TENANT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcOpeningElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static OPENING = "OPENING";
		static RECESS = "RECESS";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcOutletTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AUDIOVISUALOUTLET = "AUDIOVISUALOUTLET";
		static COMMUNICATIONSOUTLET = "COMMUNICATIONSOUTLET";
		static POWEROUTLET = "POWEROUTLET";
		static DATAOUTLET = "DATAOUTLET";
		static TELEPHONEOUTLET = "TELEPHONEOUTLET";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPerformanceHistoryTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPermeableCoveringOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static GRILL = "GRILL";
		static LOUVER = "LOUVER";
		static SCREEN = "SCREEN";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPermitTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACCESS = "ACCESS";
		static BUILDING = "BUILDING";
		static WORK = "WORK";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPhysicalOrVirtualEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PHYSICAL = "PHYSICAL";
		static VIRTUAL = "VIRTUAL";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPileConstructionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CAST_IN_PLACE = "CAST_IN_PLACE";
		static COMPOSITE = "COMPOSITE";
		static PRECAST_CONCRETE = "PRECAST_CONCRETE";
		static PREFAB_STEEL = "PREFAB_STEEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPileTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BORED = "BORED";
		static DRIVEN = "DRIVEN";
		static JETGROUTING = "JETGROUTING";
		static COHESION = "COHESION";
		static FRICTION = "FRICTION";
		static SUPPORT = "SUPPORT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPipeFittingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BEND = "BEND";
		static CONNECTOR = "CONNECTOR";
		static ENTRY = "ENTRY";
		static EXIT = "EXIT";
		static JUNCTION = "JUNCTION";
		static OBSTRUCTION = "OBSTRUCTION";
		static TRANSITION = "TRANSITION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPipeSegmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CULVERT = "CULVERT";
		static FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
		static RIGIDSEGMENT = "RIGIDSEGMENT";
		static GUTTER = "GUTTER";
		static SPOOL = "SPOOL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPlateTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURTAIN_PANEL = "CURTAIN_PANEL";
		static SHEET = "SHEET";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPreferredSurfaceCurveRepresentation {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURVE3D = "CURVE3D";
		static PCURVE_S1 = "PCURVE_S1";
		static PCURVE_S2 = "PCURVE_S2";
	}
	export class IfcProcedureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ADVICE_CAUTION = "ADVICE_CAUTION";
		static ADVICE_NOTE = "ADVICE_NOTE";
		static ADVICE_WARNING = "ADVICE_WARNING";
		static CALIBRATION = "CALIBRATION";
		static DIAGNOSTIC = "DIAGNOSTIC";
		static SHUTDOWN = "SHUTDOWN";
		static STARTUP = "STARTUP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProfileTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURVE = "CURVE";
		static AREA = "AREA";
	}
	export class IfcProjectOrderTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CHANGEORDER = "CHANGEORDER";
		static MAINTENANCEWORKORDER = "MAINTENANCEWORKORDER";
		static MOVEORDER = "MOVEORDER";
		static PURCHASEORDER = "PURCHASEORDER";
		static WORKORDER = "WORKORDER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProjectedOrTrueLengthEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PROJECTED_LENGTH = "PROJECTED_LENGTH";
		static TRUE_LENGTH = "TRUE_LENGTH";
	}
	export class IfcProjectionElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPropertySetTemplateTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PSET_TYPEDRIVENONLY = "PSET_TYPEDRIVENONLY";
		static PSET_TYPEDRIVENOVERRIDE = "PSET_TYPEDRIVENOVERRIDE";
		static PSET_OCCURRENCEDRIVEN = "PSET_OCCURRENCEDRIVEN";
		static PSET_PERFORMANCEDRIVEN = "PSET_PERFORMANCEDRIVEN";
		static QTO_TYPEDRIVENONLY = "QTO_TYPEDRIVENONLY";
		static QTO_TYPEDRIVENOVERRIDE = "QTO_TYPEDRIVENOVERRIDE";
		static QTO_OCCURRENCEDRIVEN = "QTO_OCCURRENCEDRIVEN";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProtectiveDeviceTrippingUnitTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELECTRONIC = "ELECTRONIC";
		static ELECTROMAGNETIC = "ELECTROMAGNETIC";
		static RESIDUALCURRENT = "RESIDUALCURRENT";
		static THERMAL = "THERMAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcProtectiveDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CIRCUITBREAKER = "CIRCUITBREAKER";
		static EARTHLEAKAGECIRCUITBREAKER = "EARTHLEAKAGECIRCUITBREAKER";
		static EARTHINGSWITCH = "EARTHINGSWITCH";
		static FUSEDISCONNECTOR = "FUSEDISCONNECTOR";
		static RESIDUALCURRENTCIRCUITBREAKER = "RESIDUALCURRENTCIRCUITBREAKER";
		static RESIDUALCURRENTSWITCH = "RESIDUALCURRENTSWITCH";
		static VARISTOR = "VARISTOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcPumpTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CIRCULATOR = "CIRCULATOR";
		static ENDSUCTION = "ENDSUCTION";
		static SPLITCASE = "SPLITCASE";
		static SUBMERSIBLEPUMP = "SUBMERSIBLEPUMP";
		static SUMPPUMP = "SUMPPUMP";
		static VERTICALINLINE = "VERTICALINLINE";
		static VERTICALTURBINE = "VERTICALTURBINE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRailingTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static HANDRAIL = "HANDRAIL";
		static GUARDRAIL = "GUARDRAIL";
		static BALUSTRADE = "BALUSTRADE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRampFlightTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT = "STRAIGHT";
		static SPIRAL = "SPIRAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRampTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT_RUN_RAMP = "STRAIGHT_RUN_RAMP";
		static TWO_STRAIGHT_RUN_RAMP = "TWO_STRAIGHT_RUN_RAMP";
		static QUARTER_TURN_RAMP = "QUARTER_TURN_RAMP";
		static TWO_QUARTER_TURN_RAMP = "TWO_QUARTER_TURN_RAMP";
		static HALF_TURN_RAMP = "HALF_TURN_RAMP";
		static SPIRAL_RAMP = "SPIRAL_RAMP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRecurrenceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DAILY = "DAILY";
		static WEEKLY = "WEEKLY";
		static MONTHLY_BY_DAY_OF_MONTH = "MONTHLY_BY_DAY_OF_MONTH";
		static MONTHLY_BY_POSITION = "MONTHLY_BY_POSITION";
		static BY_DAY_COUNT = "BY_DAY_COUNT";
		static BY_WEEKDAY_COUNT = "BY_WEEKDAY_COUNT";
		static YEARLY_BY_DAY_OF_MONTH = "YEARLY_BY_DAY_OF_MONTH";
		static YEARLY_BY_POSITION = "YEARLY_BY_POSITION";
	}
	export class IfcReflectanceMethodEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BLINN = "BLINN";
		static FLAT = "FLAT";
		static GLASS = "GLASS";
		static MATT = "MATT";
		static METAL = "METAL";
		static MIRROR = "MIRROR";
		static PHONG = "PHONG";
		static PLASTIC = "PLASTIC";
		static STRAUSS = "STRAUSS";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcReinforcingBarRoleEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static MAIN = "MAIN";
		static SHEAR = "SHEAR";
		static LIGATURE = "LIGATURE";
		static STUD = "STUD";
		static PUNCHING = "PUNCHING";
		static EDGE = "EDGE";
		static RING = "RING";
		static ANCHORING = "ANCHORING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcReinforcingBarSurfaceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PLAIN = "PLAIN";
		static TEXTURED = "TEXTURED";
	}
	export class IfcReinforcingBarTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ANCHORING = "ANCHORING";
		static EDGE = "EDGE";
		static LIGATURE = "LIGATURE";
		static MAIN = "MAIN";
		static PUNCHING = "PUNCHING";
		static RING = "RING";
		static SHEAR = "SHEAR";
		static STUD = "STUD";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcReinforcingMeshTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcRoleEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SUPPLIER = "SUPPLIER";
		static MANUFACTURER = "MANUFACTURER";
		static CONTRACTOR = "CONTRACTOR";
		static SUBCONTRACTOR = "SUBCONTRACTOR";
		static ARCHITECT = "ARCHITECT";
		static STRUCTURALENGINEER = "STRUCTURALENGINEER";
		static COSTENGINEER = "COSTENGINEER";
		static CLIENT = "CLIENT";
		static BUILDINGOWNER = "BUILDINGOWNER";
		static BUILDINGOPERATOR = "BUILDINGOPERATOR";
		static MECHANICALENGINEER = "MECHANICALENGINEER";
		static ELECTRICALENGINEER = "ELECTRICALENGINEER";
		static PROJECTMANAGER = "PROJECTMANAGER";
		static FACILITIESMANAGER = "FACILITIESMANAGER";
		static CIVILENGINEER = "CIVILENGINEER";
		static COMMISSIONINGENGINEER = "COMMISSIONINGENGINEER";
		static ENGINEER = "ENGINEER";
		static OWNER = "OWNER";
		static CONSULTANT = "CONSULTANT";
		static CONSTRUCTIONMANAGER = "CONSTRUCTIONMANAGER";
		static FIELDCONSTRUCTIONMANAGER = "FIELDCONSTRUCTIONMANAGER";
		static RESELLER = "RESELLER";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcRoofTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLAT_ROOF = "FLAT_ROOF";
		static SHED_ROOF = "SHED_ROOF";
		static GABLE_ROOF = "GABLE_ROOF";
		static HIP_ROOF = "HIP_ROOF";
		static HIPPED_GABLE_ROOF = "HIPPED_GABLE_ROOF";
		static GAMBREL_ROOF = "GAMBREL_ROOF";
		static MANSARD_ROOF = "MANSARD_ROOF";
		static BARREL_ROOF = "BARREL_ROOF";
		static RAINBOW_ROOF = "RAINBOW_ROOF";
		static BUTTERFLY_ROOF = "BUTTERFLY_ROOF";
		static PAVILION_ROOF = "PAVILION_ROOF";
		static DOME_ROOF = "DOME_ROOF";
		static FREEFORM = "FREEFORM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSIPrefix {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static EXA = "EXA";
		static PETA = "PETA";
		static TERA = "TERA";
		static GIGA = "GIGA";
		static MEGA = "MEGA";
		static KILO = "KILO";
		static HECTO = "HECTO";
		static DECA = "DECA";
		static DECI = "DECI";
		static CENTI = "CENTI";
		static MILLI = "MILLI";
		static MICRO = "MICRO";
		static NANO = "NANO";
		static PICO = "PICO";
		static FEMTO = "FEMTO";
		static ATTO = "ATTO";
	}
	export class IfcSIUnitName {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AMPERE = "AMPERE";
		static BECQUEREL = "BECQUEREL";
		static CANDELA = "CANDELA";
		static COULOMB = "COULOMB";
		static CUBIC_METRE = "CUBIC_METRE";
		static DEGREE_CELSIUS = "DEGREE_CELSIUS";
		static FARAD = "FARAD";
		static GRAM = "GRAM";
		static GRAY = "GRAY";
		static HENRY = "HENRY";
		static HERTZ = "HERTZ";
		static JOULE = "JOULE";
		static KELVIN = "KELVIN";
		static LUMEN = "LUMEN";
		static LUX = "LUX";
		static METRE = "METRE";
		static MOLE = "MOLE";
		static NEWTON = "NEWTON";
		static OHM = "OHM";
		static PASCAL = "PASCAL";
		static RADIAN = "RADIAN";
		static SECOND = "SECOND";
		static SIEMENS = "SIEMENS";
		static SIEVERT = "SIEVERT";
		static SQUARE_METRE = "SQUARE_METRE";
		static STERADIAN = "STERADIAN";
		static TESLA = "TESLA";
		static VOLT = "VOLT";
		static WATT = "WATT";
		static WEBER = "WEBER";
	}
	export class IfcSanitaryTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BATH = "BATH";
		static BIDET = "BIDET";
		static CISTERN = "CISTERN";
		static SHOWER = "SHOWER";
		static SINK = "SINK";
		static SANITARYFOUNTAIN = "SANITARYFOUNTAIN";
		static TOILETPAN = "TOILETPAN";
		static URINAL = "URINAL";
		static WASHHANDBASIN = "WASHHANDBASIN";
		static WCSEAT = "WCSEAT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSectionTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static UNIFORM = "UNIFORM";
		static TAPERED = "TAPERED";
	}
	export class IfcSensorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COSENSOR = "COSENSOR";
		static CO2SENSOR = "CO2SENSOR";
		static CONDUCTANCESENSOR = "CONDUCTANCESENSOR";
		static CONTACTSENSOR = "CONTACTSENSOR";
		static FIRESENSOR = "FIRESENSOR";
		static FLOWSENSOR = "FLOWSENSOR";
		static FROSTSENSOR = "FROSTSENSOR";
		static GASSENSOR = "GASSENSOR";
		static HEATSENSOR = "HEATSENSOR";
		static HUMIDITYSENSOR = "HUMIDITYSENSOR";
		static IDENTIFIERSENSOR = "IDENTIFIERSENSOR";
		static IONCONCENTRATIONSENSOR = "IONCONCENTRATIONSENSOR";
		static LEVELSENSOR = "LEVELSENSOR";
		static LIGHTSENSOR = "LIGHTSENSOR";
		static MOISTURESENSOR = "MOISTURESENSOR";
		static MOVEMENTSENSOR = "MOVEMENTSENSOR";
		static PHSENSOR = "PHSENSOR";
		static PRESSURESENSOR = "PRESSURESENSOR";
		static RADIATIONSENSOR = "RADIATIONSENSOR";
		static RADIOACTIVITYSENSOR = "RADIOACTIVITYSENSOR";
		static SMOKESENSOR = "SMOKESENSOR";
		static SOUNDSENSOR = "SOUNDSENSOR";
		static TEMPERATURESENSOR = "TEMPERATURESENSOR";
		static WINDSENSOR = "WINDSENSOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSequenceEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static START_START = "START_START";
		static START_FINISH = "START_FINISH";
		static FINISH_START = "FINISH_START";
		static FINISH_FINISH = "FINISH_FINISH";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcShadingDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static JALOUSIE = "JALOUSIE";
		static SHUTTER = "SHUTTER";
		static AWNING = "AWNING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSimplePropertyTemplateTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static P_SINGLEVALUE = "P_SINGLEVALUE";
		static P_ENUMERATEDVALUE = "P_ENUMERATEDVALUE";
		static P_BOUNDEDVALUE = "P_BOUNDEDVALUE";
		static P_LISTVALUE = "P_LISTVALUE";
		static P_TABLEVALUE = "P_TABLEVALUE";
		static P_REFERENCEVALUE = "P_REFERENCEVALUE";
		static Q_LENGTH = "Q_LENGTH";
		static Q_AREA = "Q_AREA";
		static Q_VOLUME = "Q_VOLUME";
		static Q_COUNT = "Q_COUNT";
		static Q_WEIGHT = "Q_WEIGHT";
		static Q_TIME = "Q_TIME";
	}
	export class IfcSlabTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLOOR = "FLOOR";
		static ROOF = "ROOF";
		static LANDING = "LANDING";
		static BASESLAB = "BASESLAB";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSolarDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SOLARCOLLECTOR = "SOLARCOLLECTOR";
		static SOLARPANEL = "SOLARPANEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSpaceHeaterTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONVECTOR = "CONVECTOR";
		static RADIATOR = "RADIATOR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSpaceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SPACE = "SPACE";
		static PARKING = "PARKING";
		static GFA = "GFA";
		static INTERNAL = "INTERNAL";
		static EXTERNAL = "EXTERNAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSpatialZoneTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONSTRUCTION = "CONSTRUCTION";
		static FIRESAFETY = "FIRESAFETY";
		static LIGHTING = "LIGHTING";
		static OCCUPANCY = "OCCUPANCY";
		static SECURITY = "SECURITY";
		static THERMAL = "THERMAL";
		static TRANSPORT = "TRANSPORT";
		static VENTILATION = "VENTILATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStackTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BIRDCAGE = "BIRDCAGE";
		static COWL = "COWL";
		static RAINWATERHOPPER = "RAINWATERHOPPER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStairFlightTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT = "STRAIGHT";
		static WINDER = "WINDER";
		static SPIRAL = "SPIRAL";
		static CURVED = "CURVED";
		static FREEFORM = "FREEFORM";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStairTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static STRAIGHT_RUN_STAIR = "STRAIGHT_RUN_STAIR";
		static TWO_STRAIGHT_RUN_STAIR = "TWO_STRAIGHT_RUN_STAIR";
		static QUARTER_WINDING_STAIR = "QUARTER_WINDING_STAIR";
		static QUARTER_TURN_STAIR = "QUARTER_TURN_STAIR";
		static HALF_WINDING_STAIR = "HALF_WINDING_STAIR";
		static HALF_TURN_STAIR = "HALF_TURN_STAIR";
		static TWO_QUARTER_WINDING_STAIR = "TWO_QUARTER_WINDING_STAIR";
		static TWO_QUARTER_TURN_STAIR = "TWO_QUARTER_TURN_STAIR";
		static THREE_QUARTER_WINDING_STAIR = "THREE_QUARTER_WINDING_STAIR";
		static THREE_QUARTER_TURN_STAIR = "THREE_QUARTER_TURN_STAIR";
		static SPIRAL_STAIR = "SPIRAL_STAIR";
		static DOUBLE_RETURN_STAIR = "DOUBLE_RETURN_STAIR";
		static CURVED_RUN_STAIR = "CURVED_RUN_STAIR";
		static TWO_CURVED_RUN_STAIR = "TWO_CURVED_RUN_STAIR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStateEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static READWRITE = "READWRITE";
		static READONLY = "READONLY";
		static LOCKED = "LOCKED";
		static READWRITELOCKED = "READWRITELOCKED";
		static READONLYLOCKED = "READONLYLOCKED";
	}
	export class IfcStructuralCurveActivityTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONST = "CONST";
		static LINEAR = "LINEAR";
		static POLYGONAL = "POLYGONAL";
		static EQUIDISTANT = "EQUIDISTANT";
		static SINUS = "SINUS";
		static PARABOLA = "PARABOLA";
		static DISCRETE = "DISCRETE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStructuralCurveMemberTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static RIGID_JOINED_MEMBER = "RIGID_JOINED_MEMBER";
		static PIN_JOINED_MEMBER = "PIN_JOINED_MEMBER";
		static CABLE = "CABLE";
		static TENSION_MEMBER = "TENSION_MEMBER";
		static COMPRESSION_MEMBER = "COMPRESSION_MEMBER";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStructuralSurfaceActivityTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONST = "CONST";
		static BILINEAR = "BILINEAR";
		static DISCRETE = "DISCRETE";
		static ISOCONTOUR = "ISOCONTOUR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcStructuralSurfaceMemberTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BENDING_ELEMENT = "BENDING_ELEMENT";
		static MEMBRANE_ELEMENT = "MEMBRANE_ELEMENT";
		static SHELL = "SHELL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSubContractResourceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PURCHASE = "PURCHASE";
		static WORK = "WORK";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSurfaceFeatureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static MARK = "MARK";
		static TAG = "TAG";
		static TREATMENT = "TREATMENT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSurfaceSide {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static POSITIVE = "POSITIVE";
		static NEGATIVE = "NEGATIVE";
		static BOTH = "BOTH";
	}
	export class IfcSwitchingDeviceTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONTACTOR = "CONTACTOR";
		static DIMMERSWITCH = "DIMMERSWITCH";
		static EMERGENCYSTOP = "EMERGENCYSTOP";
		static KEYPAD = "KEYPAD";
		static MOMENTARYSWITCH = "MOMENTARYSWITCH";
		static SELECTORSWITCH = "SELECTORSWITCH";
		static STARTER = "STARTER";
		static SWITCHDISCONNECTOR = "SWITCHDISCONNECTOR";
		static TOGGLESWITCH = "TOGGLESWITCH";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcSystemFurnitureElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static PANEL = "PANEL";
		static WORKSURFACE = "WORKSURFACE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTankTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BASIN = "BASIN";
		static BREAKPRESSURE = "BREAKPRESSURE";
		static EXPANSION = "EXPANSION";
		static FEEDANDEXPANSION = "FEEDANDEXPANSION";
		static PRESSUREVESSEL = "PRESSUREVESSEL";
		static STORAGE = "STORAGE";
		static VESSEL = "VESSEL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTaskDurationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELAPSEDTIME = "ELAPSEDTIME";
		static WORKTIME = "WORKTIME";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTaskTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ATTENDANCE = "ATTENDANCE";
		static CONSTRUCTION = "CONSTRUCTION";
		static DEMOLITION = "DEMOLITION";
		static DISMANTLE = "DISMANTLE";
		static DISPOSAL = "DISPOSAL";
		static INSTALLATION = "INSTALLATION";
		static LOGISTIC = "LOGISTIC";
		static MAINTENANCE = "MAINTENANCE";
		static MOVE = "MOVE";
		static OPERATION = "OPERATION";
		static REMOVAL = "REMOVAL";
		static RENOVATION = "RENOVATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTendonAnchorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COUPLER = "COUPLER";
		static FIXED_END = "FIXED_END";
		static TENSIONING_END = "TENSIONING_END";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTendonTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static BAR = "BAR";
		static COATED = "COATED";
		static STRAND = "STRAND";
		static WIRE = "WIRE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTextPath {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LEFT = "LEFT";
		static RIGHT = "RIGHT";
		static UP = "UP";
		static DOWN = "DOWN";
	}
	export class IfcTimeSeriesDataTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CONTINUOUS = "CONTINUOUS";
		static DISCRETE = "DISCRETE";
		static DISCRETEBINARY = "DISCRETEBINARY";
		static PIECEWISEBINARY = "PIECEWISEBINARY";
		static PIECEWISECONSTANT = "PIECEWISECONSTANT";
		static PIECEWISECONTINUOUS = "PIECEWISECONTINUOUS";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTransformerTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CURRENT = "CURRENT";
		static FREQUENCY = "FREQUENCY";
		static INVERTER = "INVERTER";
		static RECTIFIER = "RECTIFIER";
		static VOLTAGE = "VOLTAGE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTransitionCode {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static DISCONTINUOUS = "DISCONTINUOUS";
		static CONTINUOUS = "CONTINUOUS";
		static CONTSAMEGRADIENT = "CONTSAMEGRADIENT";
		static CONTSAMEGRADIENTSAMECURVATURE = "CONTSAMEGRADIENTSAMECURVATURE";
	}
	export class IfcTransportElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ELEVATOR = "ELEVATOR";
		static ESCALATOR = "ESCALATOR";
		static MOVINGWALKWAY = "MOVINGWALKWAY";
		static CRANEWAY = "CRANEWAY";
		static LIFTINGGEAR = "LIFTINGGEAR";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcTrimmingPreference {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CARTESIAN = "CARTESIAN";
		static PARAMETER = "PARAMETER";
		static UNSPECIFIED = "UNSPECIFIED";
	}
	export class IfcTubeBundleTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FINNED = "FINNED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcUnitEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ABSORBEDDOSEUNIT = "ABSORBEDDOSEUNIT";
		static AMOUNTOFSUBSTANCEUNIT = "AMOUNTOFSUBSTANCEUNIT";
		static AREAUNIT = "AREAUNIT";
		static DOSEEQUIVALENTUNIT = "DOSEEQUIVALENTUNIT";
		static ELECTRICCAPACITANCEUNIT = "ELECTRICCAPACITANCEUNIT";
		static ELECTRICCHARGEUNIT = "ELECTRICCHARGEUNIT";
		static ELECTRICCONDUCTANCEUNIT = "ELECTRICCONDUCTANCEUNIT";
		static ELECTRICCURRENTUNIT = "ELECTRICCURRENTUNIT";
		static ELECTRICRESISTANCEUNIT = "ELECTRICRESISTANCEUNIT";
		static ELECTRICVOLTAGEUNIT = "ELECTRICVOLTAGEUNIT";
		static ENERGYUNIT = "ENERGYUNIT";
		static FORCEUNIT = "FORCEUNIT";
		static FREQUENCYUNIT = "FREQUENCYUNIT";
		static ILLUMINANCEUNIT = "ILLUMINANCEUNIT";
		static INDUCTANCEUNIT = "INDUCTANCEUNIT";
		static LENGTHUNIT = "LENGTHUNIT";
		static LUMINOUSFLUXUNIT = "LUMINOUSFLUXUNIT";
		static LUMINOUSINTENSITYUNIT = "LUMINOUSINTENSITYUNIT";
		static MAGNETICFLUXDENSITYUNIT = "MAGNETICFLUXDENSITYUNIT";
		static MAGNETICFLUXUNIT = "MAGNETICFLUXUNIT";
		static MASSUNIT = "MASSUNIT";
		static PLANEANGLEUNIT = "PLANEANGLEUNIT";
		static POWERUNIT = "POWERUNIT";
		static PRESSUREUNIT = "PRESSUREUNIT";
		static RADIOACTIVITYUNIT = "RADIOACTIVITYUNIT";
		static SOLIDANGLEUNIT = "SOLIDANGLEUNIT";
		static THERMODYNAMICTEMPERATUREUNIT = "THERMODYNAMICTEMPERATUREUNIT";
		static TIMEUNIT = "TIMEUNIT";
		static VOLUMEUNIT = "VOLUMEUNIT";
		static USERDEFINED = "USERDEFINED";
	}
	export class IfcUnitaryControlElementTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALARMPANEL = "ALARMPANEL";
		static CONTROLPANEL = "CONTROLPANEL";
		static GASDETECTIONPANEL = "GASDETECTIONPANEL";
		static INDICATORPANEL = "INDICATORPANEL";
		static MIMICPANEL = "MIMICPANEL";
		static HUMIDISTAT = "HUMIDISTAT";
		static THERMOSTAT = "THERMOSTAT";
		static WEATHERSTATION = "WEATHERSTATION";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcUnitaryEquipmentTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRHANDLER = "AIRHANDLER";
		static AIRCONDITIONINGUNIT = "AIRCONDITIONINGUNIT";
		static DEHUMIDIFIER = "DEHUMIDIFIER";
		static SPLITSYSTEM = "SPLITSYSTEM";
		static ROOFTOPUNIT = "ROOFTOPUNIT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcValveTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static AIRRELEASE = "AIRRELEASE";
		static ANTIVACUUM = "ANTIVACUUM";
		static CHANGEOVER = "CHANGEOVER";
		static CHECK = "CHECK";
		static COMMISSIONING = "COMMISSIONING";
		static DIVERTING = "DIVERTING";
		static DRAWOFFCOCK = "DRAWOFFCOCK";
		static DOUBLECHECK = "DOUBLECHECK";
		static DOUBLEREGULATING = "DOUBLEREGULATING";
		static FAUCET = "FAUCET";
		static FLUSHING = "FLUSHING";
		static GASCOCK = "GASCOCK";
		static GASTAP = "GASTAP";
		static ISOLATING = "ISOLATING";
		static MIXING = "MIXING";
		static PRESSUREREDUCING = "PRESSUREREDUCING";
		static PRESSURERELIEF = "PRESSURERELIEF";
		static REGULATING = "REGULATING";
		static SAFETYCUTOFF = "SAFETYCUTOFF";
		static STEAMTRAP = "STEAMTRAP";
		static STOPCOCK = "STOPCOCK";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcVibrationIsolatorTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static COMPRESSION = "COMPRESSION";
		static SPRING = "SPRING";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcVoidingFeatureTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static CUTOUT = "CUTOUT";
		static NOTCH = "NOTCH";
		static HOLE = "HOLE";
		static MITER = "MITER";
		static CHAMFER = "CHAMFER";
		static EDGE = "EDGE";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWallTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static MOVABLE = "MOVABLE";
		static PARAPET = "PARAPET";
		static PARTITIONING = "PARTITIONING";
		static PLUMBINGWALL = "PLUMBINGWALL";
		static SHEAR = "SHEAR";
		static SOLIDWALL = "SOLIDWALL";
		static STANDARD = "STANDARD";
		static POLYGONAL = "POLYGONAL";
		static ELEMENTEDWALL = "ELEMENTEDWALL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWasteTerminalTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FLOORTRAP = "FLOORTRAP";
		static FLOORWASTE = "FLOORWASTE";
		static GULLYSUMP = "GULLYSUMP";
		static GULLYTRAP = "GULLYTRAP";
		static ROOFDRAIN = "ROOFDRAIN";
		static WASTEDISPOSALUNIT = "WASTEDISPOSALUNIT";
		static WASTETRAP = "WASTETRAP";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowPanelOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SIDEHUNGRIGHTHAND = "SIDEHUNGRIGHTHAND";
		static SIDEHUNGLEFTHAND = "SIDEHUNGLEFTHAND";
		static TILTANDTURNRIGHTHAND = "TILTANDTURNRIGHTHAND";
		static TILTANDTURNLEFTHAND = "TILTANDTURNLEFTHAND";
		static TOPHUNG = "TOPHUNG";
		static BOTTOMHUNG = "BOTTOMHUNG";
		static PIVOTHORIZONTAL = "PIVOTHORIZONTAL";
		static PIVOTVERTICAL = "PIVOTVERTICAL";
		static SLIDINGHORIZONTAL = "SLIDINGHORIZONTAL";
		static SLIDINGVERTICAL = "SLIDINGVERTICAL";
		static REMOVABLECASEMENT = "REMOVABLECASEMENT";
		static FIXEDCASEMENT = "FIXEDCASEMENT";
		static OTHEROPERATION = "OTHEROPERATION";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowPanelPositionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static LEFT = "LEFT";
		static MIDDLE = "MIDDLE";
		static RIGHT = "RIGHT";
		static BOTTOM = "BOTTOM";
		static TOP = "TOP";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowStyleConstructionEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ALUMINIUM = "ALUMINIUM";
		static HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
		static STEEL = "STEEL";
		static WOOD = "WOOD";
		static ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
		static PLASTIC = "PLASTIC";
		static OTHER_CONSTRUCTION = "OTHER_CONSTRUCTION";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowStyleOperationEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SINGLE_PANEL = "SINGLE_PANEL";
		static DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
		static DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
		static TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
		static TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
		static TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
		static TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
		static TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
		static TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static WINDOW = "WINDOW";
		static SKYLIGHT = "SKYLIGHT";
		static LIGHTDOME = "LIGHTDOME";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWindowTypePartitioningEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static SINGLE_PANEL = "SINGLE_PANEL";
		static DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
		static DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
		static TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
		static TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
		static TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
		static TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
		static TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
		static TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWorkCalendarTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static FIRSTSHIFT = "FIRSTSHIFT";
		static SECONDSHIFT = "SECONDSHIFT";
		static THIRDSHIFT = "THIRDSHIFT";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWorkPlanTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACTUAL = "ACTUAL";
		static BASELINE = "BASELINE";
		static PLANNED = "PLANNED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export class IfcWorkScheduleTypeEnum {
		value : string;
		label !: string | null;
		valueType !: number | null;
		constructor(v: string) { this.value = v;}
		static ACTUAL = "ACTUAL";
		static BASELINE = "BASELINE";
		static PLANNED = "PLANNED";
		static USERDEFINED = "USERDEFINED";
		static NOTDEFINED = "NOTDEFINED";
	}
	export type IfcActorSelect = 
		| (Handle<IfcOrganization> | IfcOrganization)
		| (Handle<IfcPerson> | IfcPerson)
		| (Handle<IfcPersonAndOrganization> | IfcPersonAndOrganization)
	;
	export type IfcAppliedValueSelect = 
		| (Handle<IfcMeasureWithUnit> | IfcMeasureWithUnit)
		| (Handle<IfcReference> | IfcReference)
		| IfcValue
	;
	export type IfcAxis2Placement = 
		| (Handle<IfcAxis2Placement2D> | IfcAxis2Placement2D)
		| (Handle<IfcAxis2Placement3D> | IfcAxis2Placement3D)
	;
	export type IfcBendingParameterSelect = 
		| IfcLengthMeasure
		| IfcPlaneAngleMeasure
	;
	export type IfcBooleanOperand = 
		| (Handle<IfcBooleanResult> | IfcBooleanResult)
		| (Handle<IfcCsgPrimitive3D> | IfcCsgPrimitive3D)
		| (Handle<IfcHalfSpaceSolid> | IfcHalfSpaceSolid)
		| (Handle<IfcSolidModel> | IfcSolidModel)
		| (Handle<IfcTessellatedFaceSet> | IfcTessellatedFaceSet)
	;
	export type IfcClassificationReferenceSelect = 
		| (Handle<IfcClassification> | IfcClassification)
		| (Handle<IfcClassificationReference> | IfcClassificationReference)
	;
	export type IfcClassificationSelect = 
		| (Handle<IfcClassification> | IfcClassification)
		| (Handle<IfcClassificationReference> | IfcClassificationReference)
	;
	export type IfcColour = 
		| (Handle<IfcColourSpecification> | IfcColourSpecification)
		| (Handle<IfcPreDefinedColour> | IfcPreDefinedColour)
	;
	export type IfcColourOrFactor = 
		| (Handle<IfcColourRgb> | IfcColourRgb)
		| IfcNormalisedRatioMeasure
	;
	export type IfcCoordinateReferenceSystemSelect = 
		| (Handle<IfcCoordinateReferenceSystem> | IfcCoordinateReferenceSystem)
		| (Handle<IfcGeometricRepresentationContext> | IfcGeometricRepresentationContext)
	;
	export type IfcCsgSelect = 
		| (Handle<IfcBooleanResult> | IfcBooleanResult)
		| (Handle<IfcCsgPrimitive3D> | IfcCsgPrimitive3D)
	;
	export type IfcCurveFontOrScaledCurveFontSelect = 
		| (Handle<IfcCurveStyleFontAndScaling> | IfcCurveStyleFontAndScaling)
		| IfcCurveStyleFontSelect
	;
	export type IfcCurveOnSurface = 
		| (Handle<IfcCompositeCurveOnSurface> | IfcCompositeCurveOnSurface)
		| (Handle<IfcPcurve> | IfcPcurve)
		| (Handle<IfcSurfaceCurve> | IfcSurfaceCurve)
	;
	export type IfcCurveOrEdgeCurve = 
		| (Handle<IfcBoundedCurve> | IfcBoundedCurve)
		| (Handle<IfcEdgeCurve> | IfcEdgeCurve)
	;
	export type IfcCurveStyleFontSelect = 
		| (Handle<IfcCurveStyleFont> | IfcCurveStyleFont)
		| (Handle<IfcPreDefinedCurveFont> | IfcPreDefinedCurveFont)
	;
	export type IfcDefinitionSelect = 
		| (Handle<IfcObjectDefinition> | IfcObjectDefinition)
		| (Handle<IfcPropertyDefinition> | IfcPropertyDefinition)
	;
	export type IfcDerivedMeasureValue = 
		| IfcAbsorbedDoseMeasure
		| IfcAccelerationMeasure
		| IfcAngularVelocityMeasure
		| IfcAreaDensityMeasure
		| IfcCompoundPlaneAngleMeasure
		| IfcCurvatureMeasure
		| IfcDoseEquivalentMeasure
		| IfcDynamicViscosityMeasure
		| IfcElectricCapacitanceMeasure
		| IfcElectricChargeMeasure
		| IfcElectricConductanceMeasure
		| IfcElectricResistanceMeasure
		| IfcElectricVoltageMeasure
		| IfcEnergyMeasure
		| IfcForceMeasure
		| IfcFrequencyMeasure
		| IfcHeatFluxDensityMeasure
		| IfcHeatingValueMeasure
		| IfcIlluminanceMeasure
		| IfcInductanceMeasure
		| IfcIntegerCountRateMeasure
		| IfcIonConcentrationMeasure
		| IfcIsothermalMoistureCapacityMeasure
		| IfcKinematicViscosityMeasure
		| IfcLinearForceMeasure
		| IfcLinearMomentMeasure
		| IfcLinearStiffnessMeasure
		| IfcLinearVelocityMeasure
		| IfcLuminousFluxMeasure
		| IfcLuminousIntensityDistributionMeasure
		| IfcMagneticFluxDensityMeasure
		| IfcMagneticFluxMeasure
		| IfcMassDensityMeasure
		| IfcMassFlowRateMeasure
		| IfcMassPerLengthMeasure
		| IfcModulusOfElasticityMeasure
		| IfcModulusOfLinearSubgradeReactionMeasure
		| IfcModulusOfRotationalSubgradeReactionMeasure
		| IfcModulusOfSubgradeReactionMeasure
		| IfcMoistureDiffusivityMeasure
		| IfcMolecularWeightMeasure
		| IfcMomentOfInertiaMeasure
		| IfcMonetaryMeasure
		| IfcPHMeasure
		| IfcPlanarForceMeasure
		| IfcPowerMeasure
		| IfcPressureMeasure
		| IfcRadioActivityMeasure
		| IfcRotationalFrequencyMeasure
		| IfcRotationalMassMeasure
		| IfcRotationalStiffnessMeasure
		| IfcSectionModulusMeasure
		| IfcSectionalAreaIntegralMeasure
		| IfcShearModulusMeasure
		| IfcSoundPowerLevelMeasure
		| IfcSoundPowerMeasure
		| IfcSoundPressureLevelMeasure
		| IfcSoundPressureMeasure
		| IfcSpecificHeatCapacityMeasure
		| IfcTemperatureGradientMeasure
		| IfcTemperatureRateOfChangeMeasure
		| IfcThermalAdmittanceMeasure
		| IfcThermalConductivityMeasure
		| IfcThermalExpansionCoefficientMeasure
		| IfcThermalResistanceMeasure
		| IfcThermalTransmittanceMeasure
		| IfcTorqueMeasure
		| IfcVaporPermeabilityMeasure
		| IfcVolumetricFlowRateMeasure
		| IfcWarpingConstantMeasure
		| IfcWarpingMomentMeasure
	;
	export type IfcDocumentSelect = 
		| (Handle<IfcDocumentInformation> | IfcDocumentInformation)
		| (Handle<IfcDocumentReference> | IfcDocumentReference)
	;
	export type IfcFillStyleSelect = 
		| IfcColour
		| (Handle<IfcExternallyDefinedHatchStyle> | IfcExternallyDefinedHatchStyle)
		| (Handle<IfcFillAreaStyleHatching> | IfcFillAreaStyleHatching)
		| (Handle<IfcFillAreaStyleTiles> | IfcFillAreaStyleTiles)
	;
	export type IfcGeometricSetSelect = 
		| (Handle<IfcCurve> | IfcCurve)
		| (Handle<IfcPoint> | IfcPoint)
		| (Handle<IfcSurface> | IfcSurface)
	;
	export type IfcGridPlacementDirectionSelect = 
		| (Handle<IfcDirection> | IfcDirection)
		| (Handle<IfcVirtualGridIntersection> | IfcVirtualGridIntersection)
	;
	export type IfcHatchLineDistanceSelect = 
		| IfcPositiveLengthMeasure
		| (Handle<IfcVector> | IfcVector)
	;
	export type IfcLayeredItem = 
		| (Handle<IfcRepresentation> | IfcRepresentation)
		| (Handle<IfcRepresentationItem> | IfcRepresentationItem)
	;
	export type IfcLibrarySelect = 
		| (Handle<IfcLibraryInformation> | IfcLibraryInformation)
		| (Handle<IfcLibraryReference> | IfcLibraryReference)
	;
	export type IfcLightDistributionDataSourceSelect = 
		| (Handle<IfcExternalReference> | IfcExternalReference)
		| (Handle<IfcLightIntensityDistribution> | IfcLightIntensityDistribution)
	;
	export type IfcMaterialSelect = 
		| (Handle<IfcMaterialDefinition> | IfcMaterialDefinition)
		| (Handle<IfcMaterialList> | IfcMaterialList)
		| (Handle<IfcMaterialUsageDefinition> | IfcMaterialUsageDefinition)
	;
	export type IfcMeasureValue = 
		| IfcAmountOfSubstanceMeasure
		| IfcAreaMeasure
		| IfcComplexNumber
		| IfcContextDependentMeasure
		| IfcCountMeasure
		| IfcDescriptiveMeasure
		| IfcElectricCurrentMeasure
		| IfcLengthMeasure
		| IfcLuminousIntensityMeasure
		| IfcMassMeasure
		| IfcNonNegativeLengthMeasure
		| IfcNormalisedRatioMeasure
		| IfcNumericMeasure
		| IfcParameterValue
		| IfcPlaneAngleMeasure
		| IfcPositiveLengthMeasure
		| IfcPositivePlaneAngleMeasure
		| IfcPositiveRatioMeasure
		| IfcRatioMeasure
		| IfcSolidAngleMeasure
		| IfcThermodynamicTemperatureMeasure
		| IfcTimeMeasure
		| IfcVolumeMeasure
	;
	export type IfcMetricValueSelect = 
		| (Handle<IfcAppliedValue> | IfcAppliedValue)
		| (Handle<IfcMeasureWithUnit> | IfcMeasureWithUnit)
		| (Handle<IfcReference> | IfcReference)
		| (Handle<IfcTable> | IfcTable)
		| (Handle<IfcTimeSeries> | IfcTimeSeries)
		| IfcValue
	;
	export type IfcModulusOfRotationalSubgradeReactionSelect = 
		| IfcBoolean
		| IfcModulusOfRotationalSubgradeReactionMeasure
	;
	export type IfcModulusOfSubgradeReactionSelect = 
		| IfcBoolean
		| IfcModulusOfSubgradeReactionMeasure
	;
	export type IfcModulusOfTranslationalSubgradeReactionSelect = 
		| IfcBoolean
		| IfcModulusOfLinearSubgradeReactionMeasure
	;
	export type IfcObjectReferenceSelect = 
		| (Handle<IfcAddress> | IfcAddress)
		| (Handle<IfcAppliedValue> | IfcAppliedValue)
		| (Handle<IfcExternalReference> | IfcExternalReference)
		| (Handle<IfcMaterialDefinition> | IfcMaterialDefinition)
		| (Handle<IfcOrganization> | IfcOrganization)
		| (Handle<IfcPerson> | IfcPerson)
		| (Handle<IfcPersonAndOrganization> | IfcPersonAndOrganization)
		| (Handle<IfcTable> | IfcTable)
		| (Handle<IfcTimeSeries> | IfcTimeSeries)
	;
	export type IfcPointOrVertexPoint = 
		| (Handle<IfcPoint> | IfcPoint)
		| (Handle<IfcVertexPoint> | IfcVertexPoint)
	;
	export type IfcPresentationStyleSelect = 
		| (Handle<IfcCurveStyle> | IfcCurveStyle)
		| (Handle<IfcFillAreaStyle> | IfcFillAreaStyle)
		| IfcNullStyle
		| (Handle<IfcSurfaceStyle> | IfcSurfaceStyle)
		| (Handle<IfcTextStyle> | IfcTextStyle)
	;
	export type IfcProcessSelect = 
		| (Handle<IfcProcess> | IfcProcess)
		| (Handle<IfcTypeProcess> | IfcTypeProcess)
	;
	export type IfcProductRepresentationSelect = 
		| (Handle<IfcProductDefinitionShape> | IfcProductDefinitionShape)
		| (Handle<IfcRepresentationMap> | IfcRepresentationMap)
	;
	export type IfcProductSelect = 
		| (Handle<IfcProduct> | IfcProduct)
		| (Handle<IfcTypeProduct> | IfcTypeProduct)
	;
	export type IfcPropertySetDefinitionSelect = 
		| (Handle<IfcPropertySetDefinition> | IfcPropertySetDefinition)
		| IfcPropertySetDefinitionSet
	;
	export type IfcResourceObjectSelect = 
		| (Handle<IfcActorRole> | IfcActorRole)
		| (Handle<IfcAppliedValue> | IfcAppliedValue)
		| (Handle<IfcApproval> | IfcApproval)
		| (Handle<IfcConstraint> | IfcConstraint)
		| (Handle<IfcContextDependentUnit> | IfcContextDependentUnit)
		| (Handle<IfcConversionBasedUnit> | IfcConversionBasedUnit)
		| (Handle<IfcExternalInformation> | IfcExternalInformation)
		| (Handle<IfcExternalReference> | IfcExternalReference)
		| (Handle<IfcMaterialDefinition> | IfcMaterialDefinition)
		| (Handle<IfcOrganization> | IfcOrganization)
		| (Handle<IfcPerson> | IfcPerson)
		| (Handle<IfcPersonAndOrganization> | IfcPersonAndOrganization)
		| (Handle<IfcPhysicalQuantity> | IfcPhysicalQuantity)
		| (Handle<IfcProfileDef> | IfcProfileDef)
		| (Handle<IfcPropertyAbstraction> | IfcPropertyAbstraction)
		| (Handle<IfcTimeSeries> | IfcTimeSeries)
	;
	export type IfcResourceSelect = 
		| (Handle<IfcResource> | IfcResource)
		| (Handle<IfcTypeResource> | IfcTypeResource)
	;
	export type IfcRotationalStiffnessSelect = 
		| IfcBoolean
		| IfcRotationalStiffnessMeasure
	;
	export type IfcSegmentIndexSelect = 
		| IfcArcIndex
		| IfcLineIndex
	;
	export type IfcShell = 
		| (Handle<IfcClosedShell> | IfcClosedShell)
		| (Handle<IfcOpenShell> | IfcOpenShell)
	;
	export type IfcSimpleValue = 
		| IfcBinary
		| IfcBoolean
		| IfcDate
		| IfcDateTime
		| IfcDuration
		| IfcIdentifier
		| IfcInteger
		| IfcLabel
		| IfcLogical
		| IfcPositiveInteger
		| IfcReal
		| IfcText
		| IfcTime
		| IfcTimeStamp
	;
	export type IfcSizeSelect = 
		| IfcDescriptiveMeasure
		| IfcLengthMeasure
		| IfcNormalisedRatioMeasure
		| IfcPositiveLengthMeasure
		| IfcPositiveRatioMeasure
		| IfcRatioMeasure
	;
	export type IfcSolidOrShell = 
		| (Handle<IfcClosedShell> | IfcClosedShell)
		| (Handle<IfcSolidModel> | IfcSolidModel)
	;
	export type IfcSpaceBoundarySelect = 
		| (Handle<IfcExternalSpatialElement> | IfcExternalSpatialElement)
		| (Handle<IfcSpace> | IfcSpace)
	;
	export type IfcSpecularHighlightSelect = 
		| IfcSpecularExponent
		| IfcSpecularRoughness
	;
	export type IfcStructuralActivityAssignmentSelect = 
		| (Handle<IfcElement> | IfcElement)
		| (Handle<IfcStructuralItem> | IfcStructuralItem)
	;
	export type IfcStyleAssignmentSelect = 
		| (Handle<IfcPresentationStyle> | IfcPresentationStyle)
		| (Handle<IfcPresentationStyleAssignment> | IfcPresentationStyleAssignment)
	;
	export type IfcSurfaceOrFaceSurface = 
		| (Handle<IfcFaceBasedSurfaceModel> | IfcFaceBasedSurfaceModel)
		| (Handle<IfcFaceSurface> | IfcFaceSurface)
		| (Handle<IfcSurface> | IfcSurface)
	;
	export type IfcSurfaceStyleElementSelect = 
		| (Handle<IfcExternallyDefinedSurfaceStyle> | IfcExternallyDefinedSurfaceStyle)
		| (Handle<IfcSurfaceStyleLighting> | IfcSurfaceStyleLighting)
		| (Handle<IfcSurfaceStyleRefraction> | IfcSurfaceStyleRefraction)
		| (Handle<IfcSurfaceStyleShading> | IfcSurfaceStyleShading)
		| (Handle<IfcSurfaceStyleWithTextures> | IfcSurfaceStyleWithTextures)
	;
	export type IfcTextFontSelect = 
		| (Handle<IfcExternallyDefinedTextFont> | IfcExternallyDefinedTextFont)
		| (Handle<IfcPreDefinedTextFont> | IfcPreDefinedTextFont)
	;
	export type IfcTimeOrRatioSelect = 
		| IfcDuration
		| IfcRatioMeasure
	;
	export type IfcTranslationalStiffnessSelect = 
		| IfcBoolean
		| IfcLinearStiffnessMeasure
	;
	export type IfcTrimmingSelect = 
		| (Handle<IfcCartesianPoint> | IfcCartesianPoint)
		| IfcParameterValue
	;
	export type IfcUnit = 
		| (Handle<IfcDerivedUnit> | IfcDerivedUnit)
		| (Handle<IfcMonetaryUnit> | IfcMonetaryUnit)
		| (Handle<IfcNamedUnit> | IfcNamedUnit)
	;
	export type IfcValue = 
		| IfcDerivedMeasureValue
		| IfcMeasureValue
		| IfcSimpleValue
	;
	export type IfcVectorOrDirection = 
		| (Handle<IfcDirection> | IfcDirection)
		| (Handle<IfcVector> | IfcVector)
	;
	export type IfcWarpingStiffnessSelect = 
		| IfcBoolean
		| IfcWarpingMomentMeasure
	;
	export class IfcActorRole {
		expressID: number;
		type: number;
		Role: (Handle<IFC4.IfcRoleEnum> | IFC4.IfcRoleEnum) ;
		UserDefinedRole: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		HasExternalReference!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Role: (Handle<IFC4.IfcRoleEnum> | IFC4.IfcRoleEnum) , UserDefinedRole: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Role = Role;
			this.UserDefinedRole = UserDefinedRole;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActorRole
		{
			return new IfcActorRole(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Role, this.UserDefinedRole, this.Description);
			return args;
		}
	}
	export class IfcAddress {
		expressID: number;
		type: number;
		Purpose: (Handle<IFC4.IfcAddressTypeEnum> | IFC4.IfcAddressTypeEnum) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		UserDefinedPurpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		OfPerson!: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null;
		OfOrganization!: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization)[] | null;
		constructor(expressID: number, type: number, Purpose: (Handle<IFC4.IfcAddressTypeEnum> | IFC4.IfcAddressTypeEnum) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UserDefinedPurpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAddress
		{
			return new IfcAddress(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Purpose, this.Description, this.UserDefinedPurpose);
			return args;
		}
	}
	export class IfcApplication {
		expressID: number;
		type: number;
		ApplicationDeveloper: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization) ;
		Version: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		ApplicationFullName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		ApplicationIdentifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) ;
		constructor(expressID: number, type: number, ApplicationDeveloper: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization) , Version: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , ApplicationFullName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , ApplicationIdentifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ApplicationDeveloper = ApplicationDeveloper;
			this.Version = Version;
			this.ApplicationFullName = ApplicationFullName;
			this.ApplicationIdentifier = ApplicationIdentifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApplication
		{
			return new IfcApplication(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ApplicationDeveloper, this.Version, this.ApplicationFullName, this.ApplicationIdentifier);
			return args;
		}
	}
	export class IfcAppliedValue {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		AppliedValue: (Handle<IFC4.IfcAppliedValueSelect> | IFC4.IfcAppliedValueSelect) | null;
		UnitBasis: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) | null;
		ApplicableDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		FixedUntilDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Condition: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ArithmeticOperator: (Handle<IFC4.IfcArithmeticOperatorEnum> | IFC4.IfcArithmeticOperatorEnum) | null;
		Components: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null;
		HasExternalReference!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, AppliedValue: (Handle<IFC4.IfcAppliedValueSelect> | IFC4.IfcAppliedValueSelect) | null, UnitBasis: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) | null, ApplicableDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, FixedUntilDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Condition: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ArithmeticOperator: (Handle<IFC4.IfcArithmeticOperatorEnum> | IFC4.IfcArithmeticOperatorEnum) | null, Components: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
			this.Category = Category;
			this.Condition = Condition;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Components = Components;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAppliedValue
		{
			return new IfcAppliedValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AppliedValue, this.UnitBasis, this.ApplicableDate, this.FixedUntilDate, this.Category, this.Condition, this.ArithmeticOperator, this.Components);
			return args;
		}
	}
	export class IfcApproval {
		expressID: number;
		type: number;
		Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		TimeOfApproval: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Level: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Qualifier: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		RequestingApproval: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		GivingApproval: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		HasExternalReferences!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		ApprovedObjects!: (Handle<IFC4.IfcRelAssociatesApproval> | IFC4.IfcRelAssociatesApproval)[] | null;
		ApprovedResources!: (Handle<IFC4.IfcResourceApprovalRelationship> | IFC4.IfcResourceApprovalRelationship)[] | null;
		IsRelatedWith!: (Handle<IFC4.IfcApprovalRelationship> | IFC4.IfcApprovalRelationship)[] | null;
		Relates!: (Handle<IFC4.IfcApprovalRelationship> | IFC4.IfcApprovalRelationship)[] | null;
		constructor(expressID: number, type: number, Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, TimeOfApproval: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Level: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Qualifier: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RequestingApproval: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, GivingApproval: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Identifier = Identifier;
			this.Name = Name;
			this.Description = Description;
			this.TimeOfApproval = TimeOfApproval;
			this.Status = Status;
			this.Level = Level;
			this.Qualifier = Qualifier;
			this.RequestingApproval = RequestingApproval;
			this.GivingApproval = GivingApproval;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApproval
		{
			return new IfcApproval(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Identifier, this.Name, this.Description, this.TimeOfApproval, this.Status, this.Level, this.Qualifier, this.RequestingApproval, this.GivingApproval);
			return args;
		}
	}
	export class IfcBoundaryCondition {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryCondition
		{
			return new IfcBoundaryCondition(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcBoundaryEdgeCondition extends IFC4.IfcBoundaryCondition {
		TranslationalStiffnessByLengthX: (Handle<IFC4.IfcModulusOfTranslationalSubgradeReactionSelect> | IFC4.IfcModulusOfTranslationalSubgradeReactionSelect) | null;
		TranslationalStiffnessByLengthY: (Handle<IFC4.IfcModulusOfTranslationalSubgradeReactionSelect> | IFC4.IfcModulusOfTranslationalSubgradeReactionSelect) | null;
		TranslationalStiffnessByLengthZ: (Handle<IFC4.IfcModulusOfTranslationalSubgradeReactionSelect> | IFC4.IfcModulusOfTranslationalSubgradeReactionSelect) | null;
		RotationalStiffnessByLengthX: (Handle<IFC4.IfcModulusOfRotationalSubgradeReactionSelect> | IFC4.IfcModulusOfRotationalSubgradeReactionSelect) | null;
		RotationalStiffnessByLengthY: (Handle<IFC4.IfcModulusOfRotationalSubgradeReactionSelect> | IFC4.IfcModulusOfRotationalSubgradeReactionSelect) | null;
		RotationalStiffnessByLengthZ: (Handle<IFC4.IfcModulusOfRotationalSubgradeReactionSelect> | IFC4.IfcModulusOfRotationalSubgradeReactionSelect) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TranslationalStiffnessByLengthX: (Handle<IFC4.IfcModulusOfTranslationalSubgradeReactionSelect> | IFC4.IfcModulusOfTranslationalSubgradeReactionSelect) | null, TranslationalStiffnessByLengthY: (Handle<IFC4.IfcModulusOfTranslationalSubgradeReactionSelect> | IFC4.IfcModulusOfTranslationalSubgradeReactionSelect) | null, TranslationalStiffnessByLengthZ: (Handle<IFC4.IfcModulusOfTranslationalSubgradeReactionSelect> | IFC4.IfcModulusOfTranslationalSubgradeReactionSelect) | null, RotationalStiffnessByLengthX: (Handle<IFC4.IfcModulusOfRotationalSubgradeReactionSelect> | IFC4.IfcModulusOfRotationalSubgradeReactionSelect) | null, RotationalStiffnessByLengthY: (Handle<IFC4.IfcModulusOfRotationalSubgradeReactionSelect> | IFC4.IfcModulusOfRotationalSubgradeReactionSelect) | null, RotationalStiffnessByLengthZ: (Handle<IFC4.IfcModulusOfRotationalSubgradeReactionSelect> | IFC4.IfcModulusOfRotationalSubgradeReactionSelect) | null)
		{
			super(expressID,type,Name);
			this.TranslationalStiffnessByLengthX = TranslationalStiffnessByLengthX;
			this.TranslationalStiffnessByLengthY = TranslationalStiffnessByLengthY;
			this.TranslationalStiffnessByLengthZ = TranslationalStiffnessByLengthZ;
			this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
			this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
			this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryEdgeCondition
		{
			return new IfcBoundaryEdgeCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TranslationalStiffnessByLengthX, this.TranslationalStiffnessByLengthY, this.TranslationalStiffnessByLengthZ, this.RotationalStiffnessByLengthX, this.RotationalStiffnessByLengthY, this.RotationalStiffnessByLengthZ);
			return args;
		}
	}
	export class IfcBoundaryFaceCondition extends IFC4.IfcBoundaryCondition {
		TranslationalStiffnessByAreaX: (Handle<IFC4.IfcModulusOfSubgradeReactionSelect> | IFC4.IfcModulusOfSubgradeReactionSelect) | null;
		TranslationalStiffnessByAreaY: (Handle<IFC4.IfcModulusOfSubgradeReactionSelect> | IFC4.IfcModulusOfSubgradeReactionSelect) | null;
		TranslationalStiffnessByAreaZ: (Handle<IFC4.IfcModulusOfSubgradeReactionSelect> | IFC4.IfcModulusOfSubgradeReactionSelect) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TranslationalStiffnessByAreaX: (Handle<IFC4.IfcModulusOfSubgradeReactionSelect> | IFC4.IfcModulusOfSubgradeReactionSelect) | null, TranslationalStiffnessByAreaY: (Handle<IFC4.IfcModulusOfSubgradeReactionSelect> | IFC4.IfcModulusOfSubgradeReactionSelect) | null, TranslationalStiffnessByAreaZ: (Handle<IFC4.IfcModulusOfSubgradeReactionSelect> | IFC4.IfcModulusOfSubgradeReactionSelect) | null)
		{
			super(expressID,type,Name);
			this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
			this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
			this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryFaceCondition
		{
			return new IfcBoundaryFaceCondition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TranslationalStiffnessByAreaX, this.TranslationalStiffnessByAreaY, this.TranslationalStiffnessByAreaZ);
			return args;
		}
	}
	export class IfcBoundaryNodeCondition extends IFC4.IfcBoundaryCondition {
		TranslationalStiffnessX: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null;
		TranslationalStiffnessY: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null;
		TranslationalStiffnessZ: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null;
		RotationalStiffnessX: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null;
		RotationalStiffnessY: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null;
		RotationalStiffnessZ: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TranslationalStiffnessX: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null, TranslationalStiffnessY: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null, TranslationalStiffnessZ: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null, RotationalStiffnessX: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null, RotationalStiffnessY: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null, RotationalStiffnessZ: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null)
		{
			super(expressID,type,Name);
			this.TranslationalStiffnessX = TranslationalStiffnessX;
			this.TranslationalStiffnessY = TranslationalStiffnessY;
			this.TranslationalStiffnessZ = TranslationalStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryNodeCondition
		{
			return new IfcBoundaryNodeCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TranslationalStiffnessX, this.TranslationalStiffnessY, this.TranslationalStiffnessZ, this.RotationalStiffnessX, this.RotationalStiffnessY, this.RotationalStiffnessZ);
			return args;
		}
	}
	export class IfcBoundaryNodeConditionWarping extends IFC4.IfcBoundaryNodeCondition {
		WarpingStiffness: (Handle<IFC4.IfcWarpingStiffnessSelect> | IFC4.IfcWarpingStiffnessSelect) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TranslationalStiffnessX: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null, TranslationalStiffnessY: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null, TranslationalStiffnessZ: (Handle<IFC4.IfcTranslationalStiffnessSelect> | IFC4.IfcTranslationalStiffnessSelect) | null, RotationalStiffnessX: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null, RotationalStiffnessY: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null, RotationalStiffnessZ: (Handle<IFC4.IfcRotationalStiffnessSelect> | IFC4.IfcRotationalStiffnessSelect) | null, WarpingStiffness: (Handle<IFC4.IfcWarpingStiffnessSelect> | IFC4.IfcWarpingStiffnessSelect) | null)
		{
			super(expressID,type,Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ);
			this.WarpingStiffness = WarpingStiffness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryNodeConditionWarping
		{
			return new IfcBoundaryNodeConditionWarping(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TranslationalStiffnessX, this.TranslationalStiffnessY, this.TranslationalStiffnessZ, this.RotationalStiffnessX, this.RotationalStiffnessY, this.RotationalStiffnessZ, this.WarpingStiffness);
			return args;
		}
	}
	export class IfcConnectionGeometry {
		expressID: number;
		type: number;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionGeometry
		{
			return new IfcConnectionGeometry(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcConnectionPointGeometry extends IFC4.IfcConnectionGeometry {
		PointOnRelatingElement: (Handle<IFC4.IfcPointOrVertexPoint> | IFC4.IfcPointOrVertexPoint) ;
		PointOnRelatedElement: (Handle<IFC4.IfcPointOrVertexPoint> | IFC4.IfcPointOrVertexPoint) | null;
		constructor(expressID: number, type: number, PointOnRelatingElement: (Handle<IFC4.IfcPointOrVertexPoint> | IFC4.IfcPointOrVertexPoint) , PointOnRelatedElement: (Handle<IFC4.IfcPointOrVertexPoint> | IFC4.IfcPointOrVertexPoint) | null)
		{
			super(expressID,type);
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPointGeometry
		{
			return new IfcConnectionPointGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PointOnRelatingElement, this.PointOnRelatedElement);
			return args;
		}
	}
	export class IfcConnectionSurfaceGeometry extends IFC4.IfcConnectionGeometry {
		SurfaceOnRelatingElement: (Handle<IFC4.IfcSurfaceOrFaceSurface> | IFC4.IfcSurfaceOrFaceSurface) ;
		SurfaceOnRelatedElement: (Handle<IFC4.IfcSurfaceOrFaceSurface> | IFC4.IfcSurfaceOrFaceSurface) | null;
		constructor(expressID: number, type: number, SurfaceOnRelatingElement: (Handle<IFC4.IfcSurfaceOrFaceSurface> | IFC4.IfcSurfaceOrFaceSurface) , SurfaceOnRelatedElement: (Handle<IFC4.IfcSurfaceOrFaceSurface> | IFC4.IfcSurfaceOrFaceSurface) | null)
		{
			super(expressID,type);
			this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
			this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionSurfaceGeometry
		{
			return new IfcConnectionSurfaceGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SurfaceOnRelatingElement, this.SurfaceOnRelatedElement);
			return args;
		}
	}
	export class IfcConnectionVolumeGeometry extends IFC4.IfcConnectionGeometry {
		VolumeOnRelatingElement: (Handle<IFC4.IfcSolidOrShell> | IFC4.IfcSolidOrShell) ;
		VolumeOnRelatedElement: (Handle<IFC4.IfcSolidOrShell> | IFC4.IfcSolidOrShell) | null;
		constructor(expressID: number, type: number, VolumeOnRelatingElement: (Handle<IFC4.IfcSolidOrShell> | IFC4.IfcSolidOrShell) , VolumeOnRelatedElement: (Handle<IFC4.IfcSolidOrShell> | IFC4.IfcSolidOrShell) | null)
		{
			super(expressID,type);
			this.VolumeOnRelatingElement = VolumeOnRelatingElement;
			this.VolumeOnRelatedElement = VolumeOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionVolumeGeometry
		{
			return new IfcConnectionVolumeGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.VolumeOnRelatingElement, this.VolumeOnRelatedElement);
			return args;
		}
	}
	export class IfcConstraint {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		ConstraintGrade: (Handle<IFC4.IfcConstraintEnum> | IFC4.IfcConstraintEnum) ;
		ConstraintSource: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		CreatingActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		CreationTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		UserDefinedGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		HasExternalReferences!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		PropertiesForConstraint!: (Handle<IFC4.IfcResourceConstraintRelationship> | IFC4.IfcResourceConstraintRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ConstraintGrade: (Handle<IFC4.IfcConstraintEnum> | IFC4.IfcConstraintEnum) , ConstraintSource: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CreatingActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, CreationTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, UserDefinedGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstraint
		{
			return new IfcConstraint(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ConstraintGrade, this.ConstraintSource, this.CreatingActor, this.CreationTime, this.UserDefinedGrade);
			return args;
		}
	}
	export class IfcCoordinateOperation {
		expressID: number;
		type: number;
		SourceCRS: (Handle<IFC4.IfcCoordinateReferenceSystemSelect> | IFC4.IfcCoordinateReferenceSystemSelect) ;
		TargetCRS: (Handle<IFC4.IfcCoordinateReferenceSystem> | IFC4.IfcCoordinateReferenceSystem) ;
		constructor(expressID: number, type: number, SourceCRS: (Handle<IFC4.IfcCoordinateReferenceSystemSelect> | IFC4.IfcCoordinateReferenceSystemSelect) , TargetCRS: (Handle<IFC4.IfcCoordinateReferenceSystem> | IFC4.IfcCoordinateReferenceSystem) )
		{
			this.expressID = expressID;
			this.type = type;
			this.SourceCRS = SourceCRS;
			this.TargetCRS = TargetCRS;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoordinateOperation
		{
			return new IfcCoordinateOperation(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SourceCRS, this.TargetCRS);
			return args;
		}
	}
	export class IfcCoordinateReferenceSystem {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		GeodeticDatum: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		VerticalDatum: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		HasCoordinateOperation!: (Handle<IFC4.IfcCoordinateOperation> | IFC4.IfcCoordinateOperation)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, GeodeticDatum: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, VerticalDatum: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.GeodeticDatum = GeodeticDatum;
			this.VerticalDatum = VerticalDatum;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoordinateReferenceSystem
		{
			return new IfcCoordinateReferenceSystem(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.GeodeticDatum, this.VerticalDatum);
			return args;
		}
	}
	export class IfcCostValue extends IFC4.IfcAppliedValue {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, AppliedValue: (Handle<IFC4.IfcAppliedValueSelect> | IFC4.IfcAppliedValueSelect) | null, UnitBasis: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) | null, ApplicableDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, FixedUntilDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Condition: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ArithmeticOperator: (Handle<IFC4.IfcArithmeticOperatorEnum> | IFC4.IfcArithmeticOperatorEnum) | null, Components: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null)
		{
			super(expressID,type,Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCostValue
		{
			return new IfcCostValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AppliedValue, this.UnitBasis, this.ApplicableDate, this.FixedUntilDate, this.Category, this.Condition, this.ArithmeticOperator, this.Components);
			return args;
		}
	}
	export class IfcDerivedUnit {
		expressID: number;
		type: number;
		Elements: (Handle<IFC4.IfcDerivedUnitElement> | IFC4.IfcDerivedUnitElement)[] ;
		UnitType: (Handle<IFC4.IfcDerivedUnitEnum> | IFC4.IfcDerivedUnitEnum) ;
		UserDefinedType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Elements: (Handle<IFC4.IfcDerivedUnitElement> | IFC4.IfcDerivedUnitElement)[] , UnitType: (Handle<IFC4.IfcDerivedUnitEnum> | IFC4.IfcDerivedUnitEnum) , UserDefinedType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Elements = Elements;
			this.UnitType = UnitType;
			this.UserDefinedType = UserDefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedUnit
		{
			return new IfcDerivedUnit(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Elements, this.UnitType, this.UserDefinedType);
			return args;
		}
	}
	export class IfcDerivedUnitElement {
		expressID: number;
		type: number;
		Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) ;
		Exponent: number ;
		constructor(expressID: number, type: number, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) , Exponent: number )
		{
			this.expressID = expressID;
			this.type = type;
			this.Unit = Unit;
			this.Exponent = Exponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedUnitElement
		{
			return new IfcDerivedUnitElement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Unit, this.Exponent);
			return args;
		}
	}
	export class IfcDimensionalExponents {
		expressID: number;
		type: number;
		LengthExponent: number ;
		MassExponent: number ;
		TimeExponent: number ;
		ElectricCurrentExponent: number ;
		ThermodynamicTemperatureExponent: number ;
		AmountOfSubstanceExponent: number ;
		LuminousIntensityExponent: number ;
		constructor(expressID: number, type: number, LengthExponent: number , MassExponent: number , TimeExponent: number , ElectricCurrentExponent: number , ThermodynamicTemperatureExponent: number , AmountOfSubstanceExponent: number , LuminousIntensityExponent: number )
		{
			this.expressID = expressID;
			this.type = type;
			this.LengthExponent = LengthExponent;
			this.MassExponent = MassExponent;
			this.TimeExponent = TimeExponent;
			this.ElectricCurrentExponent = ElectricCurrentExponent;
			this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
			this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
			this.LuminousIntensityExponent = LuminousIntensityExponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionalExponents
		{
			return new IfcDimensionalExponents(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LengthExponent, this.MassExponent, this.TimeExponent, this.ElectricCurrentExponent, this.ThermodynamicTemperatureExponent, this.AmountOfSubstanceExponent, this.LuminousIntensityExponent);
			return args;
		}
	}
	export class IfcExternalInformation {
		expressID: number;
		type: number;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternalInformation
		{
			return new IfcExternalInformation(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcExternalReference {
		expressID: number;
		type: number;
		Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null;
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ExternalReferenceForResources!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternalReference
		{
			return new IfcExternalReference(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedHatchStyle extends IFC4.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Location, Identification, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedHatchStyle
		{
			return new IfcExternallyDefinedHatchStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedSurfaceStyle extends IFC4.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Location, Identification, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedSurfaceStyle
		{
			return new IfcExternallyDefinedSurfaceStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name);
			return args;
		}
	}
	export class IfcExternallyDefinedTextFont extends IFC4.IfcExternalReference {
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Location, Identification, Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedTextFont
		{
			return new IfcExternallyDefinedTextFont(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name);
			return args;
		}
	}
	export class IfcGridAxis {
		expressID: number;
		type: number;
		AxisTag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		AxisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		PartOfW!: (Handle<IFC4.IfcGrid> | IFC4.IfcGrid)[] | null;
		PartOfV!: (Handle<IFC4.IfcGrid> | IFC4.IfcGrid)[] | null;
		PartOfU!: (Handle<IFC4.IfcGrid> | IFC4.IfcGrid)[] | null;
		HasIntersections!: (Handle<IFC4.IfcVirtualGridIntersection> | IFC4.IfcVirtualGridIntersection)[] | null;
		constructor(expressID: number, type: number, AxisTag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, AxisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			this.expressID = expressID;
			this.type = type;
			this.AxisTag = AxisTag;
			this.AxisCurve = AxisCurve;
			this.SameSense = SameSense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGridAxis
		{
			return new IfcGridAxis(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.AxisTag, this.AxisCurve, this.SameSense);
			return args;
		}
	}
	export class IfcIrregularTimeSeriesValue {
		expressID: number;
		type: number;
		TimeStamp: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) ;
		ListValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] ;
		constructor(expressID: number, type: number, TimeStamp: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , ListValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.TimeStamp = TimeStamp;
			this.ListValues = ListValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIrregularTimeSeriesValue
		{
			return new IfcIrregularTimeSeriesValue(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TimeStamp, this.ListValues);
			return args;
		}
	}
	export class IfcLibraryInformation extends IFC4.IfcExternalInformation {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Version: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Publisher: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		VersionDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		LibraryInfoForObjects!: (Handle<IFC4.IfcRelAssociatesLibrary> | IFC4.IfcRelAssociatesLibrary)[] | null;
		HasLibraryReferences!: (Handle<IFC4.IfcLibraryReference> | IFC4.IfcLibraryReference)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Version: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Publisher: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, VersionDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Version = Version;
			this.Publisher = Publisher;
			this.VersionDate = VersionDate;
			this.Location = Location;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLibraryInformation
		{
			return new IfcLibraryInformation(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Version, this.Publisher, this.VersionDate, this.Location, this.Description);
			return args;
		}
	}
	export class IfcLibraryReference extends IFC4.IfcExternalReference {
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Language: (Handle<IFC4.IfcLanguageId> | IFC4.IfcLanguageId) | null;
		ReferencedLibrary: (Handle<IFC4.IfcLibraryInformation> | IFC4.IfcLibraryInformation) | null;
		LibraryRefForObjects!: (Handle<IFC4.IfcRelAssociatesLibrary> | IFC4.IfcRelAssociatesLibrary)[] | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Language: (Handle<IFC4.IfcLanguageId> | IFC4.IfcLanguageId) | null, ReferencedLibrary: (Handle<IFC4.IfcLibraryInformation> | IFC4.IfcLibraryInformation) | null)
		{
			super(expressID,type,Location, Identification, Name);
			this.Description = Description;
			this.Language = Language;
			this.ReferencedLibrary = ReferencedLibrary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLibraryReference
		{
			return new IfcLibraryReference(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name, this.Description, this.Language, this.ReferencedLibrary);
			return args;
		}
	}
	export class IfcLightDistributionData {
		expressID: number;
		type: number;
		MainPlaneAngle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) ;
		SecondaryPlaneAngle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure)[] ;
		LuminousIntensity: (Handle<IFC4.IfcLuminousIntensityDistributionMeasure> | IFC4.IfcLuminousIntensityDistributionMeasure)[] ;
		constructor(expressID: number, type: number, MainPlaneAngle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) , SecondaryPlaneAngle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure)[] , LuminousIntensity: (Handle<IFC4.IfcLuminousIntensityDistributionMeasure> | IFC4.IfcLuminousIntensityDistributionMeasure)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.MainPlaneAngle = MainPlaneAngle;
			this.SecondaryPlaneAngle = SecondaryPlaneAngle;
			this.LuminousIntensity = LuminousIntensity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightDistributionData
		{
			return new IfcLightDistributionData(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MainPlaneAngle, this.SecondaryPlaneAngle, this.LuminousIntensity);
			return args;
		}
	}
	export class IfcLightIntensityDistribution {
		expressID: number;
		type: number;
		LightDistributionCurve: (Handle<IFC4.IfcLightDistributionCurveEnum> | IFC4.IfcLightDistributionCurveEnum) ;
		DistributionData: (Handle<IFC4.IfcLightDistributionData> | IFC4.IfcLightDistributionData)[] ;
		constructor(expressID: number, type: number, LightDistributionCurve: (Handle<IFC4.IfcLightDistributionCurveEnum> | IFC4.IfcLightDistributionCurveEnum) , DistributionData: (Handle<IFC4.IfcLightDistributionData> | IFC4.IfcLightDistributionData)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.LightDistributionCurve = LightDistributionCurve;
			this.DistributionData = DistributionData;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightIntensityDistribution
		{
			return new IfcLightIntensityDistribution(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LightDistributionCurve, this.DistributionData);
			return args;
		}
	}
	export class IfcMapConversion extends IFC4.IfcCoordinateOperation {
		Eastings: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		Northings: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		OrthogonalHeight: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		XAxisAbscissa: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		XAxisOrdinate: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		constructor(expressID: number, type: number, SourceCRS: (Handle<IFC4.IfcCoordinateReferenceSystemSelect> | IFC4.IfcCoordinateReferenceSystemSelect) , TargetCRS: (Handle<IFC4.IfcCoordinateReferenceSystem> | IFC4.IfcCoordinateReferenceSystem) , Eastings: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , Northings: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , OrthogonalHeight: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , XAxisAbscissa: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, XAxisOrdinate: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null)
		{
			super(expressID,type,SourceCRS, TargetCRS);
			this.Eastings = Eastings;
			this.Northings = Northings;
			this.OrthogonalHeight = OrthogonalHeight;
			this.XAxisAbscissa = XAxisAbscissa;
			this.XAxisOrdinate = XAxisOrdinate;
			this.Scale = Scale;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMapConversion
		{
			return new IfcMapConversion(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SourceCRS, this.TargetCRS, this.Eastings, this.Northings, this.OrthogonalHeight, this.XAxisAbscissa, this.XAxisOrdinate, this.Scale);
			return args;
		}
	}
	export class IfcMaterialClassificationRelationship {
		expressID: number;
		type: number;
		MaterialClassifications: (Handle<IFC4.IfcClassificationSelect> | IFC4.IfcClassificationSelect)[] ;
		ClassifiedMaterial: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) ;
		constructor(expressID: number, type: number, MaterialClassifications: (Handle<IFC4.IfcClassificationSelect> | IFC4.IfcClassificationSelect)[] , ClassifiedMaterial: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) )
		{
			this.expressID = expressID;
			this.type = type;
			this.MaterialClassifications = MaterialClassifications;
			this.ClassifiedMaterial = ClassifiedMaterial;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialClassificationRelationship
		{
			return new IfcMaterialClassificationRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MaterialClassifications, this.ClassifiedMaterial);
			return args;
		}
	}
	export class IfcMaterialDefinition {
		expressID: number;
		type: number;
		AssociatedTo!: (Handle<IFC4.IfcRelAssociatesMaterial> | IFC4.IfcRelAssociatesMaterial)[] | null;
		HasExternalReferences!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		HasProperties!: (Handle<IFC4.IfcMaterialProperties> | IFC4.IfcMaterialProperties)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialDefinition
		{
			return new IfcMaterialDefinition(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcMaterialLayer extends IFC4.IfcMaterialDefinition {
		Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) | null;
		LayerThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) ;
		IsVentilated: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		ToMaterialLayerSet!: (Handle<IFC4.IfcMaterialLayerSet> | IFC4.IfcMaterialLayerSet) | null;
		constructor(expressID: number, type: number, Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) | null, LayerThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) , IsVentilated: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null)
		{
			super(expressID,type);
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
			this.Priority = Priority;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayer
		{
			return new IfcMaterialLayer(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.LayerThickness, this.IsVentilated, this.Name, this.Description, this.Category, this.Priority);
			return args;
		}
	}
	export class IfcMaterialLayerSet extends IFC4.IfcMaterialDefinition {
		MaterialLayers: (Handle<IFC4.IfcMaterialLayer> | IFC4.IfcMaterialLayer)[] ;
		LayerSetName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, MaterialLayers: (Handle<IFC4.IfcMaterialLayer> | IFC4.IfcMaterialLayer)[] , LayerSetName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type);
			this.MaterialLayers = MaterialLayers;
			this.LayerSetName = LayerSetName;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerSet
		{
			return new IfcMaterialLayerSet(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MaterialLayers, this.LayerSetName, this.Description);
			return args;
		}
	}
	export class IfcMaterialLayerWithOffsets extends IFC4.IfcMaterialLayer {
		OffsetDirection: (Handle<IFC4.IfcLayerSetDirectionEnum> | IFC4.IfcLayerSetDirectionEnum) ;
		OffsetValues: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) | null, LayerThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) , IsVentilated: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, OffsetDirection: (Handle<IFC4.IfcLayerSetDirectionEnum> | IFC4.IfcLayerSetDirectionEnum) , OffsetValues: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) )
		{
			super(expressID,type,Material, LayerThickness, IsVentilated, Name, Description, Category, Priority);
			this.OffsetDirection = OffsetDirection;
			this.OffsetValues = OffsetValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerWithOffsets
		{
			return new IfcMaterialLayerWithOffsets(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Material, this.LayerThickness, this.IsVentilated, this.Name, this.Description, this.Category, this.Priority, this.OffsetDirection, this.OffsetValues);
			return args;
		}
	}
	export class IfcMaterialList {
		expressID: number;
		type: number;
		Materials: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial)[] ;
		constructor(expressID: number, type: number, Materials: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Materials = Materials;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialList
		{
			return new IfcMaterialList(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Materials);
			return args;
		}
	}
	export class IfcMaterialProfile extends IFC4.IfcMaterialDefinition {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) | null;
		Profile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ToMaterialProfileSet!: (Handle<IFC4.IfcMaterialProfileSet> | IFC4.IfcMaterialProfileSet) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) | null, Profile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Profile = Profile;
			this.Priority = Priority;
			this.Category = Category;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfile
		{
			return new IfcMaterialProfile(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Material, this.Profile, this.Priority, this.Category);
			return args;
		}
	}
	export class IfcMaterialProfileSet extends IFC4.IfcMaterialDefinition {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		MaterialProfiles: (Handle<IFC4.IfcMaterialProfile> | IFC4.IfcMaterialProfile)[] ;
		CompositeProfile: (Handle<IFC4.IfcCompositeProfileDef> | IFC4.IfcCompositeProfileDef) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, MaterialProfiles: (Handle<IFC4.IfcMaterialProfile> | IFC4.IfcMaterialProfile)[] , CompositeProfile: (Handle<IFC4.IfcCompositeProfileDef> | IFC4.IfcCompositeProfileDef) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
			this.MaterialProfiles = MaterialProfiles;
			this.CompositeProfile = CompositeProfile;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileSet
		{
			return new IfcMaterialProfileSet(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.MaterialProfiles, this.CompositeProfile);
			return args;
		}
	}
	export class IfcMaterialProfileWithOffsets extends IFC4.IfcMaterialProfile {
		OffsetValues: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) | null, Profile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, OffsetValues: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) )
		{
			super(expressID,type,Name, Description, Material, Profile, Priority, Category);
			this.OffsetValues = OffsetValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileWithOffsets
		{
			return new IfcMaterialProfileWithOffsets(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Material, this.Profile, this.Priority, this.Category, this.OffsetValues);
			return args;
		}
	}
	export class IfcMaterialUsageDefinition {
		expressID: number;
		type: number;
		AssociatedTo!: (Handle<IFC4.IfcRelAssociatesMaterial> | IFC4.IfcRelAssociatesMaterial)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialUsageDefinition
		{
			return new IfcMaterialUsageDefinition(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcMeasureWithUnit {
		expressID: number;
		type: number;
		ValueComponent: (Handle<IFC4.IfcValue> | IFC4.IfcValue) ;
		UnitComponent: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) ;
		constructor(expressID: number, type: number, ValueComponent: (Handle<IFC4.IfcValue> | IFC4.IfcValue) , UnitComponent: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) )
		{
			this.expressID = expressID;
			this.type = type;
			this.ValueComponent = ValueComponent;
			this.UnitComponent = UnitComponent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMeasureWithUnit
		{
			return new IfcMeasureWithUnit(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ValueComponent, this.UnitComponent);
			return args;
		}
	}
	export class IfcMetric extends IFC4.IfcConstraint {
		Benchmark: (Handle<IFC4.IfcBenchmarkEnum> | IFC4.IfcBenchmarkEnum) ;
		ValueSource: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		DataValue: (Handle<IFC4.IfcMetricValueSelect> | IFC4.IfcMetricValueSelect) | null;
		ReferencePath: (Handle<IFC4.IfcReference> | IFC4.IfcReference) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ConstraintGrade: (Handle<IFC4.IfcConstraintEnum> | IFC4.IfcConstraintEnum) , ConstraintSource: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CreatingActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, CreationTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, UserDefinedGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Benchmark: (Handle<IFC4.IfcBenchmarkEnum> | IFC4.IfcBenchmarkEnum) , ValueSource: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataValue: (Handle<IFC4.IfcMetricValueSelect> | IFC4.IfcMetricValueSelect) | null, ReferencePath: (Handle<IFC4.IfcReference> | IFC4.IfcReference) | null)
		{
			super(expressID,type,Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade);
			this.Benchmark = Benchmark;
			this.ValueSource = ValueSource;
			this.DataValue = DataValue;
			this.ReferencePath = ReferencePath;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMetric
		{
			return new IfcMetric(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ConstraintGrade, this.ConstraintSource, this.CreatingActor, this.CreationTime, this.UserDefinedGrade, this.Benchmark, this.ValueSource, this.DataValue, this.ReferencePath);
			return args;
		}
	}
	export class IfcMonetaryUnit {
		expressID: number;
		type: number;
		Currency: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		constructor(expressID: number, type: number, Currency: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Currency = Currency;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMonetaryUnit
		{
			return new IfcMonetaryUnit(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Currency);
			return args;
		}
	}
	export class IfcNamedUnit {
		expressID: number;
		type: number;
		Dimensions: (Handle<IFC4.IfcDimensionalExponents> | IFC4.IfcDimensionalExponents) ;
		UnitType: (Handle<IFC4.IfcUnitEnum> | IFC4.IfcUnitEnum) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC4.IfcDimensionalExponents> | IFC4.IfcDimensionalExponents) , UnitType: (Handle<IFC4.IfcUnitEnum> | IFC4.IfcUnitEnum) )
		{
			this.expressID = expressID;
			this.type = type;
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcNamedUnit
		{
			return new IfcNamedUnit(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType);
			return args;
		}
	}
	export class IfcObjectPlacement {
		expressID: number;
		type: number;
		PlacesObject!: (Handle<IFC4.IfcProduct> | IFC4.IfcProduct)[] | null;
		ReferencedByPlacements!: (Handle<IFC4.IfcLocalPlacement> | IFC4.IfcLocalPlacement)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObjectPlacement
		{
			return new IfcObjectPlacement(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcObjective extends IFC4.IfcConstraint {
		BenchmarkValues: (Handle<IFC4.IfcConstraint> | IFC4.IfcConstraint)[] | null;
		LogicalAggregator: (Handle<IFC4.IfcLogicalOperatorEnum> | IFC4.IfcLogicalOperatorEnum) | null;
		ObjectiveQualifier: (Handle<IFC4.IfcObjectiveEnum> | IFC4.IfcObjectiveEnum) ;
		UserDefinedQualifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ConstraintGrade: (Handle<IFC4.IfcConstraintEnum> | IFC4.IfcConstraintEnum) , ConstraintSource: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CreatingActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, CreationTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, UserDefinedGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BenchmarkValues: (Handle<IFC4.IfcConstraint> | IFC4.IfcConstraint)[] | null, LogicalAggregator: (Handle<IFC4.IfcLogicalOperatorEnum> | IFC4.IfcLogicalOperatorEnum) | null, ObjectiveQualifier: (Handle<IFC4.IfcObjectiveEnum> | IFC4.IfcObjectiveEnum) , UserDefinedQualifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade);
			this.BenchmarkValues = BenchmarkValues;
			this.LogicalAggregator = LogicalAggregator;
			this.ObjectiveQualifier = ObjectiveQualifier;
			this.UserDefinedQualifier = UserDefinedQualifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObjective
		{
			return new IfcObjective(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ConstraintGrade, this.ConstraintSource, this.CreatingActor, this.CreationTime, this.UserDefinedGrade, this.BenchmarkValues, this.LogicalAggregator, this.ObjectiveQualifier, this.UserDefinedQualifier);
			return args;
		}
	}
	export class IfcOrganization {
		expressID: number;
		type: number;
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Roles: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole)[] | null;
		Addresses: (Handle<IFC4.IfcAddress> | IFC4.IfcAddress)[] | null;
		IsRelatedBy!: (Handle<IFC4.IfcOrganizationRelationship> | IFC4.IfcOrganizationRelationship)[] | null;
		Relates!: (Handle<IFC4.IfcOrganizationRelationship> | IFC4.IfcOrganizationRelationship)[] | null;
		Engages!: (Handle<IFC4.IfcPersonAndOrganization> | IFC4.IfcPersonAndOrganization)[] | null;
		constructor(expressID: number, type: number, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Roles: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole)[] | null, Addresses: (Handle<IFC4.IfcAddress> | IFC4.IfcAddress)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrganization
		{
			return new IfcOrganization(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Identification, this.Name, this.Description, this.Roles, this.Addresses);
			return args;
		}
	}
	export class IfcOwnerHistory {
		expressID: number;
		type: number;
		OwningUser: (Handle<IFC4.IfcPersonAndOrganization> | IFC4.IfcPersonAndOrganization) ;
		OwningApplication: (Handle<IFC4.IfcApplication> | IFC4.IfcApplication) ;
		State: (Handle<IFC4.IfcStateEnum> | IFC4.IfcStateEnum) | null;
		ChangeAction: (Handle<IFC4.IfcChangeActionEnum> | IFC4.IfcChangeActionEnum) | null;
		LastModifiedDate: (Handle<IFC4.IfcTimeStamp> | IFC4.IfcTimeStamp) | null;
		LastModifyingUser: (Handle<IFC4.IfcPersonAndOrganization> | IFC4.IfcPersonAndOrganization) | null;
		LastModifyingApplication: (Handle<IFC4.IfcApplication> | IFC4.IfcApplication) | null;
		CreationDate: (Handle<IFC4.IfcTimeStamp> | IFC4.IfcTimeStamp) ;
		constructor(expressID: number, type: number, OwningUser: (Handle<IFC4.IfcPersonAndOrganization> | IFC4.IfcPersonAndOrganization) , OwningApplication: (Handle<IFC4.IfcApplication> | IFC4.IfcApplication) , State: (Handle<IFC4.IfcStateEnum> | IFC4.IfcStateEnum) | null, ChangeAction: (Handle<IFC4.IfcChangeActionEnum> | IFC4.IfcChangeActionEnum) | null, LastModifiedDate: (Handle<IFC4.IfcTimeStamp> | IFC4.IfcTimeStamp) | null, LastModifyingUser: (Handle<IFC4.IfcPersonAndOrganization> | IFC4.IfcPersonAndOrganization) | null, LastModifyingApplication: (Handle<IFC4.IfcApplication> | IFC4.IfcApplication) | null, CreationDate: (Handle<IFC4.IfcTimeStamp> | IFC4.IfcTimeStamp) )
		{
			this.expressID = expressID;
			this.type = type;
			this.OwningUser = OwningUser;
			this.OwningApplication = OwningApplication;
			this.State = State;
			this.ChangeAction = ChangeAction;
			this.LastModifiedDate = LastModifiedDate;
			this.LastModifyingUser = LastModifyingUser;
			this.LastModifyingApplication = LastModifyingApplication;
			this.CreationDate = CreationDate;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOwnerHistory
		{
			return new IfcOwnerHistory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.OwningUser, this.OwningApplication, this.State, this.ChangeAction, this.LastModifiedDate, this.LastModifyingUser, this.LastModifyingApplication, this.CreationDate);
			return args;
		}
	}
	export class IfcPerson {
		expressID: number;
		type: number;
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		FamilyName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		GivenName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		MiddleNames: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		PrefixTitles: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		SuffixTitles: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		Roles: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole)[] | null;
		Addresses: (Handle<IFC4.IfcAddress> | IFC4.IfcAddress)[] | null;
		EngagedIn!: (Handle<IFC4.IfcPersonAndOrganization> | IFC4.IfcPersonAndOrganization)[] | null;
		constructor(expressID: number, type: number, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, FamilyName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, GivenName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, MiddleNames: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, PrefixTitles: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, SuffixTitles: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, Roles: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole)[] | null, Addresses: (Handle<IFC4.IfcAddress> | IFC4.IfcAddress)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Identification = Identification;
			this.FamilyName = FamilyName;
			this.GivenName = GivenName;
			this.MiddleNames = MiddleNames;
			this.PrefixTitles = PrefixTitles;
			this.SuffixTitles = SuffixTitles;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPerson
		{
			return new IfcPerson(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Identification, this.FamilyName, this.GivenName, this.MiddleNames, this.PrefixTitles, this.SuffixTitles, this.Roles, this.Addresses);
			return args;
		}
	}
	export class IfcPersonAndOrganization {
		expressID: number;
		type: number;
		ThePerson: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson) ;
		TheOrganization: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization) ;
		Roles: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole)[] | null;
		constructor(expressID: number, type: number, ThePerson: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson) , TheOrganization: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization) , Roles: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ThePerson = ThePerson;
			this.TheOrganization = TheOrganization;
			this.Roles = Roles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPersonAndOrganization
		{
			return new IfcPersonAndOrganization(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ThePerson, this.TheOrganization, this.Roles);
			return args;
		}
	}
	export class IfcPhysicalQuantity {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		HasExternalReferences!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		PartOfComplex!: (Handle<IFC4.IfcPhysicalComplexQuantity> | IFC4.IfcPhysicalComplexQuantity)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalQuantity
		{
			return new IfcPhysicalQuantity(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcPhysicalSimpleQuantity extends IFC4.IfcPhysicalQuantity {
		Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalSimpleQuantity
		{
			return new IfcPhysicalSimpleQuantity(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit);
			return args;
		}
	}
	export class IfcPostalAddress extends IFC4.IfcAddress {
		InternalLocation: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		AddressLines: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		PostalBox: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Town: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Region: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		PostalCode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Country: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Purpose: (Handle<IFC4.IfcAddressTypeEnum> | IFC4.IfcAddressTypeEnum) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UserDefinedPurpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, InternalLocation: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, AddressLines: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, PostalBox: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Town: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Region: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PostalCode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Country: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Purpose, Description, UserDefinedPurpose);
			this.InternalLocation = InternalLocation;
			this.AddressLines = AddressLines;
			this.PostalBox = PostalBox;
			this.Town = Town;
			this.Region = Region;
			this.PostalCode = PostalCode;
			this.Country = Country;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPostalAddress
		{
			return new IfcPostalAddress(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Purpose, this.Description, this.UserDefinedPurpose, this.InternalLocation, this.AddressLines, this.PostalBox, this.Town, this.Region, this.PostalCode, this.Country);
			return args;
		}
	}
	export class IfcPresentationItem {
		expressID: number;
		type: number;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationItem
		{
			return new IfcPresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcPresentationLayerAssignment {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		AssignedItems: (Handle<IFC4.IfcLayeredItem> | IFC4.IfcLayeredItem)[] ;
		Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, AssignedItems: (Handle<IFC4.IfcLayeredItem> | IFC4.IfcLayeredItem)[] , Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationLayerAssignment
		{
			return new IfcPresentationLayerAssignment(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AssignedItems, this.Identifier);
			return args;
		}
	}
	export class IfcPresentationLayerWithStyle extends IFC4.IfcPresentationLayerAssignment {
		LayerOn: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		LayerFrozen: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		LayerBlocked: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		LayerStyles: (Handle<IFC4.IfcPresentationStyle> | IFC4.IfcPresentationStyle)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, AssignedItems: (Handle<IFC4.IfcLayeredItem> | IFC4.IfcLayeredItem)[] , Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LayerOn: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , LayerFrozen: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , LayerBlocked: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , LayerStyles: (Handle<IFC4.IfcPresentationStyle> | IFC4.IfcPresentationStyle)[] )
		{
			super(expressID,type,Name, Description, AssignedItems, Identifier);
			this.LayerOn = LayerOn;
			this.LayerFrozen = LayerFrozen;
			this.LayerBlocked = LayerBlocked;
			this.LayerStyles = LayerStyles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationLayerWithStyle
		{
			return new IfcPresentationLayerWithStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.AssignedItems, this.Identifier, this.LayerOn, this.LayerFrozen, this.LayerBlocked, this.LayerStyles);
			return args;
		}
	}
	export class IfcPresentationStyle {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationStyle
		{
			return new IfcPresentationStyle(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPresentationStyleAssignment {
		expressID: number;
		type: number;
		Styles: (Handle<IFC4.IfcPresentationStyleSelect> | IFC4.IfcPresentationStyleSelect)[] ;
		constructor(expressID: number, type: number, Styles: (Handle<IFC4.IfcPresentationStyleSelect> | IFC4.IfcPresentationStyleSelect)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Styles = Styles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationStyleAssignment
		{
			return new IfcPresentationStyleAssignment(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Styles);
			return args;
		}
	}
	export class IfcProductRepresentation {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Representations: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Representations: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProductRepresentation
		{
			return new IfcProductRepresentation(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Representations);
			return args;
		}
	}
	export class IfcProfileDef {
		expressID: number;
		type: number;
		ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) ;
		ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		HasExternalReference!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		HasProperties!: (Handle<IFC4.IfcProfileProperties> | IFC4.IfcProfileProperties)[] | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProfileDef
		{
			return new IfcProfileDef(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName);
			return args;
		}
	}
	export class IfcProjectedCRS extends IFC4.IfcCoordinateReferenceSystem {
		MapProjection: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		MapZone: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		MapUnit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, GeodeticDatum: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, VerticalDatum: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, MapProjection: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, MapZone: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, MapUnit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null)
		{
			super(expressID,type,Name, Description, GeodeticDatum, VerticalDatum);
			this.MapProjection = MapProjection;
			this.MapZone = MapZone;
			this.MapUnit = MapUnit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectedCRS
		{
			return new IfcProjectedCRS(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.GeodeticDatum, this.VerticalDatum, this.MapProjection, this.MapZone, this.MapUnit);
			return args;
		}
	}
	export class IfcPropertyAbstraction {
		expressID: number;
		type: number;
		HasExternalReferences!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyAbstraction
		{
			return new IfcPropertyAbstraction(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcPropertyEnumeration extends IFC4.IfcPropertyAbstraction {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		EnumerationValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] ;
		Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , EnumerationValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] , Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.EnumerationValues = EnumerationValues;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyEnumeration
		{
			return new IfcPropertyEnumeration(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.EnumerationValues, this.Unit);
			return args;
		}
	}
	export class IfcQuantityArea extends IFC4.IfcPhysicalSimpleQuantity {
		AreaValue: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) ;
		Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null, AreaValue: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) , Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, Unit);
			this.AreaValue = AreaValue;
			this.Formula = Formula;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityArea
		{
			return new IfcQuantityArea(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.AreaValue, this.Formula);
			return args;
		}
	}
	export class IfcQuantityCount extends IFC4.IfcPhysicalSimpleQuantity {
		CountValue: (Handle<IFC4.IfcCountMeasure> | IFC4.IfcCountMeasure) ;
		Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null, CountValue: (Handle<IFC4.IfcCountMeasure> | IFC4.IfcCountMeasure) , Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, Unit);
			this.CountValue = CountValue;
			this.Formula = Formula;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityCount
		{
			return new IfcQuantityCount(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.CountValue, this.Formula);
			return args;
		}
	}
	export class IfcQuantityLength extends IFC4.IfcPhysicalSimpleQuantity {
		LengthValue: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null, LengthValue: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, Unit);
			this.LengthValue = LengthValue;
			this.Formula = Formula;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityLength
		{
			return new IfcQuantityLength(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.LengthValue, this.Formula);
			return args;
		}
	}
	export class IfcQuantityTime extends IFC4.IfcPhysicalSimpleQuantity {
		TimeValue: (Handle<IFC4.IfcTimeMeasure> | IFC4.IfcTimeMeasure) ;
		Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null, TimeValue: (Handle<IFC4.IfcTimeMeasure> | IFC4.IfcTimeMeasure) , Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, Unit);
			this.TimeValue = TimeValue;
			this.Formula = Formula;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityTime
		{
			return new IfcQuantityTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.TimeValue, this.Formula);
			return args;
		}
	}
	export class IfcQuantityVolume extends IFC4.IfcPhysicalSimpleQuantity {
		VolumeValue: (Handle<IFC4.IfcVolumeMeasure> | IFC4.IfcVolumeMeasure) ;
		Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null, VolumeValue: (Handle<IFC4.IfcVolumeMeasure> | IFC4.IfcVolumeMeasure) , Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, Unit);
			this.VolumeValue = VolumeValue;
			this.Formula = Formula;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityVolume
		{
			return new IfcQuantityVolume(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.VolumeValue, this.Formula);
			return args;
		}
	}
	export class IfcQuantityWeight extends IFC4.IfcPhysicalSimpleQuantity {
		WeightValue: (Handle<IFC4.IfcMassMeasure> | IFC4.IfcMassMeasure) ;
		Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcNamedUnit> | IFC4.IfcNamedUnit) | null, WeightValue: (Handle<IFC4.IfcMassMeasure> | IFC4.IfcMassMeasure) , Formula: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description, Unit);
			this.WeightValue = WeightValue;
			this.Formula = Formula;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityWeight
		{
			return new IfcQuantityWeight(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Unit, this.WeightValue, this.Formula);
			return args;
		}
	}
	export class IfcRecurrencePattern {
		expressID: number;
		type: number;
		RecurrenceType: (Handle<IFC4.IfcRecurrenceTypeEnum> | IFC4.IfcRecurrenceTypeEnum) ;
		DayComponent: (Handle<IFC4.IfcDayInMonthNumber> | IFC4.IfcDayInMonthNumber)[] | null;
		WeekdayComponent: (Handle<IFC4.IfcDayInWeekNumber> | IFC4.IfcDayInWeekNumber)[] | null;
		MonthComponent: (Handle<IFC4.IfcMonthInYearNumber> | IFC4.IfcMonthInYearNumber)[] | null;
		Position: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		Interval: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		Occurrences: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		TimePeriods: (Handle<IFC4.IfcTimePeriod> | IFC4.IfcTimePeriod)[] | null;
		constructor(expressID: number, type: number, RecurrenceType: (Handle<IFC4.IfcRecurrenceTypeEnum> | IFC4.IfcRecurrenceTypeEnum) , DayComponent: (Handle<IFC4.IfcDayInMonthNumber> | IFC4.IfcDayInMonthNumber)[] | null, WeekdayComponent: (Handle<IFC4.IfcDayInWeekNumber> | IFC4.IfcDayInWeekNumber)[] | null, MonthComponent: (Handle<IFC4.IfcMonthInYearNumber> | IFC4.IfcMonthInYearNumber)[] | null, Position: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, Interval: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, Occurrences: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, TimePeriods: (Handle<IFC4.IfcTimePeriod> | IFC4.IfcTimePeriod)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RecurrenceType = RecurrenceType;
			this.DayComponent = DayComponent;
			this.WeekdayComponent = WeekdayComponent;
			this.MonthComponent = MonthComponent;
			this.Position = Position;
			this.Interval = Interval;
			this.Occurrences = Occurrences;
			this.TimePeriods = TimePeriods;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRecurrencePattern
		{
			return new IfcRecurrencePattern(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RecurrenceType, this.DayComponent, this.WeekdayComponent, this.MonthComponent, this.Position, this.Interval, this.Occurrences, this.TimePeriods);
			return args;
		}
	}
	export class IfcReference {
		expressID: number;
		type: number;
		TypeIdentifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		AttributeIdentifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		InstanceName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ListPositions: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] | null;
		InnerReference: (Handle<IFC4.IfcReference> | IFC4.IfcReference) | null;
		constructor(expressID: number, type: number, TypeIdentifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, AttributeIdentifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, InstanceName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ListPositions: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] | null, InnerReference: (Handle<IFC4.IfcReference> | IFC4.IfcReference) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.TypeIdentifier = TypeIdentifier;
			this.AttributeIdentifier = AttributeIdentifier;
			this.InstanceName = InstanceName;
			this.ListPositions = ListPositions;
			this.InnerReference = InnerReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReference
		{
			return new IfcReference(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TypeIdentifier, this.AttributeIdentifier, this.InstanceName, this.ListPositions, this.InnerReference);
			return args;
		}
	}
	export class IfcRepresentation {
		expressID: number;
		type: number;
		ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) ;
		RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] ;
		RepresentationMap!: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null;
		LayerAssignments!: (Handle<IFC4.IfcPresentationLayerAssignment> | IFC4.IfcPresentationLayerAssignment)[] | null;
		OfProductRepresentation!: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation)[] | null;
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentation
		{
			return new IfcRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcRepresentationContext {
		expressID: number;
		type: number;
		ContextIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ContextType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		RepresentationsInContext!: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation)[] | null;
		constructor(expressID: number, type: number, ContextIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ContextType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationContext
		{
			return new IfcRepresentationContext(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextIdentifier, this.ContextType);
			return args;
		}
	}
	export class IfcRepresentationItem {
		expressID: number;
		type: number;
		LayerAssignment!: (Handle<IFC4.IfcPresentationLayerAssignment> | IFC4.IfcPresentationLayerAssignment)[] | null;
		StyledByItem!: (Handle<IFC4.IfcStyledItem> | IFC4.IfcStyledItem)[] | null;
		constructor(expressID: number, type: number, )
		{
			this.expressID = expressID;
			this.type = type;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationItem
		{
			return new IfcRepresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcRepresentationMap {
		expressID: number;
		type: number;
		MappingOrigin: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) ;
		MappedRepresentation: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation) ;
		HasShapeAspects!: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect)[] | null;
		MapUsage!: (Handle<IFC4.IfcMappedItem> | IFC4.IfcMappedItem)[] | null;
		constructor(expressID: number, type: number, MappingOrigin: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , MappedRepresentation: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation) )
		{
			this.expressID = expressID;
			this.type = type;
			this.MappingOrigin = MappingOrigin;
			this.MappedRepresentation = MappedRepresentation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationMap
		{
			return new IfcRepresentationMap(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MappingOrigin, this.MappedRepresentation);
			return args;
		}
	}
	export class IfcResourceLevelRelationship {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcResourceLevelRelationship
		{
			return new IfcResourceLevelRelationship(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcRoot {
		expressID: number;
		type: number;
		GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) ;
		OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoot
		{
			return new IfcRoot(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcSIUnit extends IFC4.IfcNamedUnit {
		Prefix: (Handle<IFC4.IfcSIPrefix> | IFC4.IfcSIPrefix) | null;
		Name: (Handle<IFC4.IfcSIUnitName> | IFC4.IfcSIUnitName) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC4.IfcDimensionalExponents> | IFC4.IfcDimensionalExponents) , UnitType: (Handle<IFC4.IfcUnitEnum> | IFC4.IfcUnitEnum) , Prefix: (Handle<IFC4.IfcSIPrefix> | IFC4.IfcSIPrefix) | null, Name: (Handle<IFC4.IfcSIUnitName> | IFC4.IfcSIUnitName) )
		{
			super(expressID,type,Dimensions, UnitType);
			this.Prefix = Prefix;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSIUnit
		{
			return new IfcSIUnit(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Prefix, this.Name);
			return args;
		}
	}
	export class IfcSchedulingTime {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null;
		UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSchedulingTime
		{
			return new IfcSchedulingTime(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin);
			return args;
		}
	}
	export class IfcShapeAspect {
		expressID: number;
		type: number;
		ShapeRepresentations: (Handle<IFC4.IfcShapeModel> | IFC4.IfcShapeModel)[] ;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		ProductDefinitional: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		PartOfProductDefinitionShape: (Handle<IFC4.IfcProductRepresentationSelect> | IFC4.IfcProductRepresentationSelect) | null;
		constructor(expressID: number, type: number, ShapeRepresentations: (Handle<IFC4.IfcShapeModel> | IFC4.IfcShapeModel)[] , Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ProductDefinitional: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , PartOfProductDefinitionShape: (Handle<IFC4.IfcProductRepresentationSelect> | IFC4.IfcProductRepresentationSelect) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.ShapeRepresentations = ShapeRepresentations;
			this.Name = Name;
			this.Description = Description;
			this.ProductDefinitional = ProductDefinitional;
			this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShapeAspect
		{
			return new IfcShapeAspect(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ShapeRepresentations, this.Name, this.Description, this.ProductDefinitional, this.PartOfProductDefinitionShape);
			return args;
		}
	}
	export class IfcShapeModel extends IFC4.IfcRepresentation {
		OfShapeAspect!: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect)[] | null;
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShapeModel
		{
			return new IfcShapeModel(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcShapeRepresentation extends IFC4.IfcShapeModel {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShapeRepresentation
		{
			return new IfcShapeRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcStructuralConnectionCondition {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralConnectionCondition
		{
			return new IfcStructuralConnectionCondition(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoad {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoad
		{
			return new IfcStructuralLoad(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoadConfiguration extends IFC4.IfcStructuralLoad {
		Values: (Handle<IFC4.IfcStructuralLoadOrResult> | IFC4.IfcStructuralLoadOrResult)[] ;
		Locations: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Values: (Handle<IFC4.IfcStructuralLoadOrResult> | IFC4.IfcStructuralLoadOrResult)[] , Locations: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] | null)
		{
			super(expressID,type,Name);
			this.Values = Values;
			this.Locations = Locations;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadConfiguration
		{
			return new IfcStructuralLoadConfiguration(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Values, this.Locations);
			return args;
		}
	}
	export class IfcStructuralLoadOrResult extends IFC4.IfcStructuralLoad {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadOrResult
		{
			return new IfcStructuralLoadOrResult(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoadStatic extends IFC4.IfcStructuralLoadOrResult {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadStatic
		{
			return new IfcStructuralLoadStatic(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcStructuralLoadTemperature extends IFC4.IfcStructuralLoadStatic {
		DeltaTConstant: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) | null;
		DeltaTY: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) | null;
		DeltaTZ: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DeltaTConstant: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) | null, DeltaTY: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) | null, DeltaTZ: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) | null)
		{
			super(expressID,type,Name);
			this.DeltaTConstant = DeltaTConstant;
			this.DeltaTY = DeltaTY;
			this.DeltaTZ = DeltaTZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadTemperature
		{
			return new IfcStructuralLoadTemperature(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DeltaTConstant, this.DeltaTY, this.DeltaTZ);
			return args;
		}
	}
	export class IfcStyleModel extends IFC4.IfcRepresentation {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStyleModel
		{
			return new IfcStyleModel(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcStyledItem extends IFC4.IfcRepresentationItem {
		Item: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem) | null;
		Styles: (Handle<IFC4.IfcStyleAssignmentSelect> | IFC4.IfcStyleAssignmentSelect)[] ;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Item: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem) | null, Styles: (Handle<IFC4.IfcStyleAssignmentSelect> | IFC4.IfcStyleAssignmentSelect)[] , Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type);
			this.Item = Item;
			this.Styles = Styles;
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStyledItem
		{
			return new IfcStyledItem(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Item, this.Styles, this.Name);
			return args;
		}
	}
	export class IfcStyledRepresentation extends IFC4.IfcStyleModel {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStyledRepresentation
		{
			return new IfcStyledRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcSurfaceReinforcementArea extends IFC4.IfcStructuralLoadOrResult {
		SurfaceReinforcement1: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] | null;
		SurfaceReinforcement2: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] | null;
		ShearReinforcement: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, SurfaceReinforcement1: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] | null, SurfaceReinforcement2: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] | null, ShearReinforcement: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) | null)
		{
			super(expressID,type,Name);
			this.SurfaceReinforcement1 = SurfaceReinforcement1;
			this.SurfaceReinforcement2 = SurfaceReinforcement2;
			this.ShearReinforcement = ShearReinforcement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceReinforcementArea
		{
			return new IfcSurfaceReinforcementArea(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.SurfaceReinforcement1, this.SurfaceReinforcement2, this.ShearReinforcement);
			return args;
		}
	}
	export class IfcSurfaceStyle extends IFC4.IfcPresentationStyle {
		Side: (Handle<IFC4.IfcSurfaceSide> | IFC4.IfcSurfaceSide) ;
		Styles: (Handle<IFC4.IfcSurfaceStyleElementSelect> | IFC4.IfcSurfaceStyleElementSelect)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Side: (Handle<IFC4.IfcSurfaceSide> | IFC4.IfcSurfaceSide) , Styles: (Handle<IFC4.IfcSurfaceStyleElementSelect> | IFC4.IfcSurfaceStyleElementSelect)[] )
		{
			super(expressID,type,Name);
			this.Side = Side;
			this.Styles = Styles;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyle
		{
			return new IfcSurfaceStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Side, this.Styles);
			return args;
		}
	}
	export class IfcSurfaceStyleLighting extends IFC4.IfcPresentationItem {
		DiffuseTransmissionColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) ;
		DiffuseReflectionColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) ;
		TransmissionColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) ;
		ReflectanceColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) ;
		constructor(expressID: number, type: number, DiffuseTransmissionColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , DiffuseReflectionColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , TransmissionColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , ReflectanceColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) )
		{
			super(expressID,type);
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.DiffuseReflectionColour = DiffuseReflectionColour;
			this.TransmissionColour = TransmissionColour;
			this.ReflectanceColour = ReflectanceColour;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleLighting
		{
			return new IfcSurfaceStyleLighting(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DiffuseTransmissionColour, this.DiffuseReflectionColour, this.TransmissionColour, this.ReflectanceColour);
			return args;
		}
	}
	export class IfcSurfaceStyleRefraction extends IFC4.IfcPresentationItem {
		RefractionIndex: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		DispersionFactor: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		constructor(expressID: number, type: number, RefractionIndex: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, DispersionFactor: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null)
		{
			super(expressID,type);
			this.RefractionIndex = RefractionIndex;
			this.DispersionFactor = DispersionFactor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleRefraction
		{
			return new IfcSurfaceStyleRefraction(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RefractionIndex, this.DispersionFactor);
			return args;
		}
	}
	export class IfcSurfaceStyleShading extends IFC4.IfcPresentationItem {
		SurfaceColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) ;
		Transparency: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		constructor(expressID: number, type: number, SurfaceColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , Transparency: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null)
		{
			super(expressID,type);
			this.SurfaceColour = SurfaceColour;
			this.Transparency = Transparency;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleShading
		{
			return new IfcSurfaceStyleShading(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SurfaceColour, this.Transparency);
			return args;
		}
	}
	export class IfcSurfaceStyleWithTextures extends IFC4.IfcPresentationItem {
		Textures: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] ;
		constructor(expressID: number, type: number, Textures: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] )
		{
			super(expressID,type);
			this.Textures = Textures;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleWithTextures
		{
			return new IfcSurfaceStyleWithTextures(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Textures);
			return args;
		}
	}
	export class IfcSurfaceTexture extends IFC4.IfcPresentationItem {
		RepeatS: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		RepeatT: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		Mode: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		TextureTransform: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) | null;
		Parameter: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null;
		IsMappedBy!: (Handle<IFC4.IfcTextureCoordinate> | IFC4.IfcTextureCoordinate)[] | null;
		UsedInStyles!: (Handle<IFC4.IfcSurfaceStyleWithTextures> | IFC4.IfcSurfaceStyleWithTextures)[] | null;
		constructor(expressID: number, type: number, RepeatS: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , RepeatT: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Mode: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, TextureTransform: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) | null, Parameter: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null)
		{
			super(expressID,type);
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.Mode = Mode;
			this.TextureTransform = TextureTransform;
			this.Parameter = Parameter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceTexture
		{
			return new IfcSurfaceTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.Mode, this.TextureTransform, this.Parameter);
			return args;
		}
	}
	export class IfcTable {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Rows: (Handle<IFC4.IfcTableRow> | IFC4.IfcTableRow)[] | null;
		Columns: (Handle<IFC4.IfcTableColumn> | IFC4.IfcTableColumn)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Rows: (Handle<IFC4.IfcTableRow> | IFC4.IfcTableRow)[] | null, Columns: (Handle<IFC4.IfcTableColumn> | IFC4.IfcTableColumn)[] | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Rows = Rows;
			this.Columns = Columns;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTable
		{
			return new IfcTable(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Rows, this.Columns);
			return args;
		}
	}
	export class IfcTableColumn {
		expressID: number;
		type: number;
		Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		ReferencePath: (Handle<IFC4.IfcReference> | IFC4.IfcReference) | null;
		constructor(expressID: number, type: number, Identifier: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, ReferencePath: (Handle<IFC4.IfcReference> | IFC4.IfcReference) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Identifier = Identifier;
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.ReferencePath = ReferencePath;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTableColumn
		{
			return new IfcTableColumn(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Identifier, this.Name, this.Description, this.Unit, this.ReferencePath);
			return args;
		}
	}
	export class IfcTableRow {
		expressID: number;
		type: number;
		RowCells: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null;
		IsHeading: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		constructor(expressID: number, type: number, RowCells: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null, IsHeading: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.RowCells = RowCells;
			this.IsHeading = IsHeading;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTableRow
		{
			return new IfcTableRow(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RowCells, this.IsHeading);
			return args;
		}
	}
	export class IfcTaskTime extends IFC4.IfcSchedulingTime {
		DurationType: (Handle<IFC4.IfcTaskDurationEnum> | IFC4.IfcTaskDurationEnum) | null;
		ScheduleDuration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		ScheduleStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ScheduleFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		EarlyStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		EarlyFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		LateStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		LateFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		FreeFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		IsCritical: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		StatusTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ActualDuration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		ActualStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ActualFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		RemainingTime: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		Completion: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DurationType: (Handle<IFC4.IfcTaskDurationEnum> | IFC4.IfcTaskDurationEnum) | null, ScheduleDuration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, ScheduleStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ScheduleFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, EarlyStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, EarlyFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, LateStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, LateFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, FreeFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, IsCritical: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, StatusTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ActualDuration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, ActualStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ActualFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, RemainingTime: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, Completion: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null)
		{
			super(expressID,type,Name, DataOrigin, UserDefinedDataOrigin);
			this.DurationType = DurationType;
			this.ScheduleDuration = ScheduleDuration;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.EarlyStart = EarlyStart;
			this.EarlyFinish = EarlyFinish;
			this.LateStart = LateStart;
			this.LateFinish = LateFinish;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.ActualDuration = ActualDuration;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingTime = RemainingTime;
			this.Completion = Completion;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTaskTime
		{
			return new IfcTaskTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18], tape[19]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin, this.DurationType, this.ScheduleDuration, this.ScheduleStart, this.ScheduleFinish, this.EarlyStart, this.EarlyFinish, this.LateStart, this.LateFinish, this.FreeFloat, this.TotalFloat, this.IsCritical, this.StatusTime, this.ActualDuration, this.ActualStart, this.ActualFinish, this.RemainingTime, this.Completion);
			return args;
		}
	}
	export class IfcTaskTimeRecurring extends IFC4.IfcTaskTime {
		Recurrence: (Handle<IFC4.IfcRecurrencePattern> | IFC4.IfcRecurrencePattern) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DurationType: (Handle<IFC4.IfcTaskDurationEnum> | IFC4.IfcTaskDurationEnum) | null, ScheduleDuration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, ScheduleStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ScheduleFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, EarlyStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, EarlyFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, LateStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, LateFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, FreeFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, IsCritical: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, StatusTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ActualDuration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, ActualStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ActualFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, RemainingTime: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, Completion: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null, Recurrence: (Handle<IFC4.IfcRecurrencePattern> | IFC4.IfcRecurrencePattern) )
		{
			super(expressID,type,Name, DataOrigin, UserDefinedDataOrigin, DurationType, ScheduleDuration, ScheduleStart, ScheduleFinish, EarlyStart, EarlyFinish, LateStart, LateFinish, FreeFloat, TotalFloat, IsCritical, StatusTime, ActualDuration, ActualStart, ActualFinish, RemainingTime, Completion);
			this.Recurrence = Recurrence;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTaskTimeRecurring
		{
			return new IfcTaskTimeRecurring(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18], tape[19], tape[20]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin, this.DurationType, this.ScheduleDuration, this.ScheduleStart, this.ScheduleFinish, this.EarlyStart, this.EarlyFinish, this.LateStart, this.LateFinish, this.FreeFloat, this.TotalFloat, this.IsCritical, this.StatusTime, this.ActualDuration, this.ActualStart, this.ActualFinish, this.RemainingTime, this.Completion, this.Recurrence);
			return args;
		}
	}
	export class IfcTelecomAddress extends IFC4.IfcAddress {
		TelephoneNumbers: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		FacsimileNumbers: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		PagerNumber: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ElectronicMailAddresses: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null;
		WWWHomePageURL: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null;
		MessagingIDs: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference)[] | null;
		constructor(expressID: number, type: number, Purpose: (Handle<IFC4.IfcAddressTypeEnum> | IFC4.IfcAddressTypeEnum) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UserDefinedPurpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TelephoneNumbers: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, FacsimileNumbers: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, PagerNumber: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElectronicMailAddresses: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel)[] | null, WWWHomePageURL: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, MessagingIDs: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference)[] | null)
		{
			super(expressID,type,Purpose, Description, UserDefinedPurpose);
			this.TelephoneNumbers = TelephoneNumbers;
			this.FacsimileNumbers = FacsimileNumbers;
			this.PagerNumber = PagerNumber;
			this.ElectronicMailAddresses = ElectronicMailAddresses;
			this.WWWHomePageURL = WWWHomePageURL;
			this.MessagingIDs = MessagingIDs;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTelecomAddress
		{
			return new IfcTelecomAddress(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Purpose, this.Description, this.UserDefinedPurpose, this.TelephoneNumbers, this.FacsimileNumbers, this.PagerNumber, this.ElectronicMailAddresses, this.WWWHomePageURL, this.MessagingIDs);
			return args;
		}
	}
	export class IfcTextStyle extends IFC4.IfcPresentationStyle {
		TextCharacterAppearance: (Handle<IFC4.IfcTextStyleForDefinedFont> | IFC4.IfcTextStyleForDefinedFont) | null;
		TextStyle: (Handle<IFC4.IfcTextStyleTextModel> | IFC4.IfcTextStyleTextModel) | null;
		TextFontStyle: (Handle<IFC4.IfcTextFontSelect> | IFC4.IfcTextFontSelect) ;
		ModelOrDraughting: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TextCharacterAppearance: (Handle<IFC4.IfcTextStyleForDefinedFont> | IFC4.IfcTextStyleForDefinedFont) | null, TextStyle: (Handle<IFC4.IfcTextStyleTextModel> | IFC4.IfcTextStyleTextModel) | null, TextFontStyle: (Handle<IFC4.IfcTextFontSelect> | IFC4.IfcTextFontSelect) , ModelOrDraughting: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			super(expressID,type,Name);
			this.TextCharacterAppearance = TextCharacterAppearance;
			this.TextStyle = TextStyle;
			this.TextFontStyle = TextFontStyle;
			this.ModelOrDraughting = ModelOrDraughting;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyle
		{
			return new IfcTextStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TextCharacterAppearance, this.TextStyle, this.TextFontStyle, this.ModelOrDraughting);
			return args;
		}
	}
	export class IfcTextStyleForDefinedFont extends IFC4.IfcPresentationItem {
		Colour: (Handle<IFC4.IfcColour> | IFC4.IfcColour) ;
		BackgroundColour: (Handle<IFC4.IfcColour> | IFC4.IfcColour) | null;
		constructor(expressID: number, type: number, Colour: (Handle<IFC4.IfcColour> | IFC4.IfcColour) , BackgroundColour: (Handle<IFC4.IfcColour> | IFC4.IfcColour) | null)
		{
			super(expressID,type);
			this.Colour = Colour;
			this.BackgroundColour = BackgroundColour;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleForDefinedFont
		{
			return new IfcTextStyleForDefinedFont(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Colour, this.BackgroundColour);
			return args;
		}
	}
	export class IfcTextStyleTextModel extends IFC4.IfcPresentationItem {
		TextIndent: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null;
		TextAlign: (Handle<IFC4.IfcTextAlignment> | IFC4.IfcTextAlignment) | null;
		TextDecoration: (Handle<IFC4.IfcTextDecoration> | IFC4.IfcTextDecoration) | null;
		LetterSpacing: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null;
		WordSpacing: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null;
		TextTransform: (Handle<IFC4.IfcTextTransformation> | IFC4.IfcTextTransformation) | null;
		LineHeight: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null;
		constructor(expressID: number, type: number, TextIndent: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null, TextAlign: (Handle<IFC4.IfcTextAlignment> | IFC4.IfcTextAlignment) | null, TextDecoration: (Handle<IFC4.IfcTextDecoration> | IFC4.IfcTextDecoration) | null, LetterSpacing: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null, WordSpacing: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null, TextTransform: (Handle<IFC4.IfcTextTransformation> | IFC4.IfcTextTransformation) | null, LineHeight: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null)
		{
			super(expressID,type);
			this.TextIndent = TextIndent;
			this.TextAlign = TextAlign;
			this.TextDecoration = TextDecoration;
			this.LetterSpacing = LetterSpacing;
			this.WordSpacing = WordSpacing;
			this.TextTransform = TextTransform;
			this.LineHeight = LineHeight;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleTextModel
		{
			return new IfcTextStyleTextModel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TextIndent, this.TextAlign, this.TextDecoration, this.LetterSpacing, this.WordSpacing, this.TextTransform, this.LineHeight);
			return args;
		}
	}
	export class IfcTextureCoordinate extends IFC4.IfcPresentationItem {
		Maps: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] ;
		constructor(expressID: number, type: number, Maps: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] )
		{
			super(expressID,type);
			this.Maps = Maps;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureCoordinate
		{
			return new IfcTextureCoordinate(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Maps);
			return args;
		}
	}
	export class IfcTextureCoordinateGenerator extends IFC4.IfcTextureCoordinate {
		Mode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Parameter: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] | null;
		constructor(expressID: number, type: number, Maps: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] , Mode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Parameter: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] | null)
		{
			super(expressID,type,Maps);
			this.Mode = Mode;
			this.Parameter = Parameter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureCoordinateGenerator
		{
			return new IfcTextureCoordinateGenerator(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Maps, this.Mode, this.Parameter);
			return args;
		}
	}
	export class IfcTextureMap extends IFC4.IfcTextureCoordinate {
		Vertices: (Handle<IFC4.IfcTextureVertex> | IFC4.IfcTextureVertex)[] ;
		MappedTo: (Handle<IFC4.IfcFace> | IFC4.IfcFace) ;
		constructor(expressID: number, type: number, Maps: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] , Vertices: (Handle<IFC4.IfcTextureVertex> | IFC4.IfcTextureVertex)[] , MappedTo: (Handle<IFC4.IfcFace> | IFC4.IfcFace) )
		{
			super(expressID,type,Maps);
			this.Vertices = Vertices;
			this.MappedTo = MappedTo;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureMap
		{
			return new IfcTextureMap(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Maps, this.Vertices, this.MappedTo);
			return args;
		}
	}
	export class IfcTextureVertex extends IFC4.IfcPresentationItem {
		Coordinates: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] ;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] )
		{
			super(expressID,type);
			this.Coordinates = Coordinates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureVertex
		{
			return new IfcTextureVertex(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates);
			return args;
		}
	}
	export class IfcTextureVertexList extends IFC4.IfcPresentationItem {
		TexCoordsList: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] ;
		constructor(expressID: number, type: number, TexCoordsList: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] )
		{
			super(expressID,type);
			this.TexCoordsList = TexCoordsList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextureVertexList
		{
			return new IfcTextureVertexList(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TexCoordsList);
			return args;
		}
	}
	export class IfcTimePeriod {
		expressID: number;
		type: number;
		StartTime: (Handle<IFC4.IfcTime> | IFC4.IfcTime) ;
		EndTime: (Handle<IFC4.IfcTime> | IFC4.IfcTime) ;
		constructor(expressID: number, type: number, StartTime: (Handle<IFC4.IfcTime> | IFC4.IfcTime) , EndTime: (Handle<IFC4.IfcTime> | IFC4.IfcTime) )
		{
			this.expressID = expressID;
			this.type = type;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimePeriod
		{
			return new IfcTimePeriod(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.StartTime, this.EndTime);
			return args;
		}
	}
	export class IfcTimeSeries {
		expressID: number;
		type: number;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) ;
		EndTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) ;
		TimeSeriesDataType: (Handle<IFC4.IfcTimeSeriesDataTypeEnum> | IFC4.IfcTimeSeriesDataTypeEnum) ;
		DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) ;
		UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		HasExternalReference!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , EndTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , TimeSeriesDataType: (Handle<IFC4.IfcTimeSeriesDataTypeEnum> | IFC4.IfcTimeSeriesDataTypeEnum) , DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) , UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null)
		{
			this.expressID = expressID;
			this.type = type;
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeries
		{
			return new IfcTimeSeries(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.StartTime, this.EndTime, this.TimeSeriesDataType, this.DataOrigin, this.UserDefinedDataOrigin, this.Unit);
			return args;
		}
	}
	export class IfcTimeSeriesValue {
		expressID: number;
		type: number;
		ListValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] ;
		constructor(expressID: number, type: number, ListValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.ListValues = ListValues;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeriesValue
		{
			return new IfcTimeSeriesValue(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ListValues);
			return args;
		}
	}
	export class IfcTopologicalRepresentationItem extends IFC4.IfcRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTopologicalRepresentationItem
		{
			return new IfcTopologicalRepresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcTopologyRepresentation extends IFC4.IfcShapeModel {
		constructor(expressID: number, type: number, ContextOfItems: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext) , RepresentationIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Items: (Handle<IFC4.IfcRepresentationItem> | IFC4.IfcRepresentationItem)[] )
		{
			super(expressID,type,ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTopologyRepresentation
		{
			return new IfcTopologyRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextOfItems, this.RepresentationIdentifier, this.RepresentationType, this.Items);
			return args;
		}
	}
	export class IfcUnitAssignment {
		expressID: number;
		type: number;
		Units: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit)[] ;
		constructor(expressID: number, type: number, Units: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.Units = Units;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitAssignment
		{
			return new IfcUnitAssignment(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Units);
			return args;
		}
	}
	export class IfcVertex extends IFC4.IfcTopologicalRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertex
		{
			return new IfcVertex(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcVertexPoint extends IFC4.IfcVertex {
		VertexGeometry: (Handle<IFC4.IfcPoint> | IFC4.IfcPoint) ;
		constructor(expressID: number, type: number, VertexGeometry: (Handle<IFC4.IfcPoint> | IFC4.IfcPoint) )
		{
			super(expressID,type);
			this.VertexGeometry = VertexGeometry;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertexPoint
		{
			return new IfcVertexPoint(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.VertexGeometry);
			return args;
		}
	}
	export class IfcVirtualGridIntersection {
		expressID: number;
		type: number;
		IntersectingAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] ;
		OffsetDistances: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] ;
		constructor(expressID: number, type: number, IntersectingAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] , OffsetDistances: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] )
		{
			this.expressID = expressID;
			this.type = type;
			this.IntersectingAxes = IntersectingAxes;
			this.OffsetDistances = OffsetDistances;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVirtualGridIntersection
		{
			return new IfcVirtualGridIntersection(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.IntersectingAxes, this.OffsetDistances);
			return args;
		}
	}
	export class IfcWorkTime extends IFC4.IfcSchedulingTime {
		RecurrencePattern: (Handle<IFC4.IfcRecurrencePattern> | IFC4.IfcRecurrencePattern) | null;
		Start: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		Finish: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RecurrencePattern: (Handle<IFC4.IfcRecurrencePattern> | IFC4.IfcRecurrencePattern) | null, Start: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, Finish: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null)
		{
			super(expressID,type,Name, DataOrigin, UserDefinedDataOrigin);
			this.RecurrencePattern = RecurrencePattern;
			this.Start = Start;
			this.Finish = Finish;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkTime
		{
			return new IfcWorkTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin, this.RecurrencePattern, this.Start, this.Finish);
			return args;
		}
	}
	export class IfcApprovalRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingApproval: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval) ;
		RelatedApprovals: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingApproval: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval) , RelatedApprovals: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval)[] )
		{
			super(expressID,type,Name, Description);
			this.RelatingApproval = RelatingApproval;
			this.RelatedApprovals = RelatedApprovals;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcApprovalRelationship
		{
			return new IfcApprovalRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingApproval, this.RelatedApprovals);
			return args;
		}
	}
	export class IfcArbitraryClosedProfileDef extends IFC4.IfcProfileDef {
		OuterCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, OuterCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) )
		{
			super(expressID,type,ProfileType, ProfileName);
			this.OuterCurve = OuterCurve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryClosedProfileDef
		{
			return new IfcArbitraryClosedProfileDef(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.OuterCurve);
			return args;
		}
	}
	export class IfcArbitraryOpenProfileDef extends IFC4.IfcProfileDef {
		Curve: (Handle<IFC4.IfcBoundedCurve> | IFC4.IfcBoundedCurve) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Curve: (Handle<IFC4.IfcBoundedCurve> | IFC4.IfcBoundedCurve) )
		{
			super(expressID,type,ProfileType, ProfileName);
			this.Curve = Curve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryOpenProfileDef
		{
			return new IfcArbitraryOpenProfileDef(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Curve);
			return args;
		}
	}
	export class IfcArbitraryProfileDefWithVoids extends IFC4.IfcArbitraryClosedProfileDef {
		InnerCurves: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve)[] ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, OuterCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , InnerCurves: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve)[] )
		{
			super(expressID,type,ProfileType, ProfileName, OuterCurve);
			this.InnerCurves = InnerCurves;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryProfileDefWithVoids
		{
			return new IfcArbitraryProfileDefWithVoids(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.OuterCurve, this.InnerCurves);
			return args;
		}
	}
	export class IfcBlobTexture extends IFC4.IfcSurfaceTexture {
		RasterFormat: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) ;
		RasterCode: (Handle<IFC4.IfcBinary> | IFC4.IfcBinary) ;
		constructor(expressID: number, type: number, RepeatS: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , RepeatT: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Mode: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, TextureTransform: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) | null, Parameter: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null, RasterFormat: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , RasterCode: (Handle<IFC4.IfcBinary> | IFC4.IfcBinary) )
		{
			super(expressID,type,RepeatS, RepeatT, Mode, TextureTransform, Parameter);
			this.RasterFormat = RasterFormat;
			this.RasterCode = RasterCode;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBlobTexture
		{
			return new IfcBlobTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.Mode, this.TextureTransform, this.Parameter, this.RasterFormat, this.RasterCode);
			return args;
		}
	}
	export class IfcCenterLineProfileDef extends IFC4.IfcArbitraryOpenProfileDef {
		Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Curve: (Handle<IFC4.IfcBoundedCurve> | IFC4.IfcBoundedCurve) , Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Curve);
			this.Thickness = Thickness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCenterLineProfileDef
		{
			return new IfcCenterLineProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Curve, this.Thickness);
			return args;
		}
	}
	export class IfcClassification extends IFC4.IfcExternalInformation {
		Source: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Edition: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		EditionDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null;
		ReferenceTokens: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null;
		ClassificationForObjects!: (Handle<IFC4.IfcRelAssociatesClassification> | IFC4.IfcRelAssociatesClassification)[] | null;
		HasReferences!: (Handle<IFC4.IfcClassificationReference> | IFC4.IfcClassificationReference)[] | null;
		constructor(expressID: number, type: number, Source: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Edition: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, EditionDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, ReferenceTokens: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null)
		{
			super(expressID,type);
			this.Source = Source;
			this.Edition = Edition;
			this.EditionDate = EditionDate;
			this.Name = Name;
			this.Description = Description;
			this.Location = Location;
			this.ReferenceTokens = ReferenceTokens;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassification
		{
			return new IfcClassification(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Source, this.Edition, this.EditionDate, this.Name, this.Description, this.Location, this.ReferenceTokens);
			return args;
		}
	}
	export class IfcClassificationReference extends IFC4.IfcExternalReference {
		ReferencedSource: (Handle<IFC4.IfcClassificationReferenceSelect> | IFC4.IfcClassificationReferenceSelect) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Sort: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		ClassificationRefForObjects!: (Handle<IFC4.IfcRelAssociatesClassification> | IFC4.IfcRelAssociatesClassification)[] | null;
		HasReferences!: (Handle<IFC4.IfcClassificationReference> | IFC4.IfcClassificationReference)[] | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ReferencedSource: (Handle<IFC4.IfcClassificationReferenceSelect> | IFC4.IfcClassificationReferenceSelect) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Sort: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,Location, Identification, Name);
			this.ReferencedSource = ReferencedSource;
			this.Description = Description;
			this.Sort = Sort;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationReference
		{
			return new IfcClassificationReference(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name, this.ReferencedSource, this.Description, this.Sort);
			return args;
		}
	}
	export class IfcColourRgbList extends IFC4.IfcPresentationItem {
		ColourList: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure)[] ;
		constructor(expressID: number, type: number, ColourList: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure)[] )
		{
			super(expressID,type);
			this.ColourList = ColourList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColourRgbList
		{
			return new IfcColourRgbList(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ColourList);
			return args;
		}
	}
	export class IfcColourSpecification extends IFC4.IfcPresentationItem {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type);
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColourSpecification
		{
			return new IfcColourSpecification(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcCompositeProfileDef extends IFC4.IfcProfileDef {
		Profiles: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef)[] ;
		Label: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Profiles: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef)[] , Label: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,ProfileType, ProfileName);
			this.Profiles = Profiles;
			this.Label = Label;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeProfileDef
		{
			return new IfcCompositeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Profiles, this.Label);
			return args;
		}
	}
	export class IfcConnectedFaceSet extends IFC4.IfcTopologicalRepresentationItem {
		CfsFaces: (Handle<IFC4.IfcFace> | IFC4.IfcFace)[] ;
		constructor(expressID: number, type: number, CfsFaces: (Handle<IFC4.IfcFace> | IFC4.IfcFace)[] )
		{
			super(expressID,type);
			this.CfsFaces = CfsFaces;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectedFaceSet
		{
			return new IfcConnectedFaceSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CfsFaces);
			return args;
		}
	}
	export class IfcConnectionCurveGeometry extends IFC4.IfcConnectionGeometry {
		CurveOnRelatingElement: (Handle<IFC4.IfcCurveOrEdgeCurve> | IFC4.IfcCurveOrEdgeCurve) ;
		CurveOnRelatedElement: (Handle<IFC4.IfcCurveOrEdgeCurve> | IFC4.IfcCurveOrEdgeCurve) | null;
		constructor(expressID: number, type: number, CurveOnRelatingElement: (Handle<IFC4.IfcCurveOrEdgeCurve> | IFC4.IfcCurveOrEdgeCurve) , CurveOnRelatedElement: (Handle<IFC4.IfcCurveOrEdgeCurve> | IFC4.IfcCurveOrEdgeCurve) | null)
		{
			super(expressID,type);
			this.CurveOnRelatingElement = CurveOnRelatingElement;
			this.CurveOnRelatedElement = CurveOnRelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionCurveGeometry
		{
			return new IfcConnectionCurveGeometry(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CurveOnRelatingElement, this.CurveOnRelatedElement);
			return args;
		}
	}
	export class IfcConnectionPointEccentricity extends IFC4.IfcConnectionPointGeometry {
		EccentricityInX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		EccentricityInY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		EccentricityInZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, PointOnRelatingElement: (Handle<IFC4.IfcPointOrVertexPoint> | IFC4.IfcPointOrVertexPoint) , PointOnRelatedElement: (Handle<IFC4.IfcPointOrVertexPoint> | IFC4.IfcPointOrVertexPoint) | null, EccentricityInX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, EccentricityInY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, EccentricityInZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null)
		{
			super(expressID,type,PointOnRelatingElement, PointOnRelatedElement);
			this.EccentricityInX = EccentricityInX;
			this.EccentricityInY = EccentricityInY;
			this.EccentricityInZ = EccentricityInZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPointEccentricity
		{
			return new IfcConnectionPointEccentricity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PointOnRelatingElement, this.PointOnRelatedElement, this.EccentricityInX, this.EccentricityInY, this.EccentricityInZ);
			return args;
		}
	}
	export class IfcContextDependentUnit extends IFC4.IfcNamedUnit {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		HasExternalReference!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC4.IfcDimensionalExponents> | IFC4.IfcDimensionalExponents) , UnitType: (Handle<IFC4.IfcUnitEnum> | IFC4.IfcUnitEnum) , Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type,Dimensions, UnitType);
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcContextDependentUnit
		{
			return new IfcContextDependentUnit(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Name);
			return args;
		}
	}
	export class IfcConversionBasedUnit extends IFC4.IfcNamedUnit {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		ConversionFactor: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) ;
		HasExternalReference!: (Handle<IFC4.IfcExternalReferenceRelationship> | IFC4.IfcExternalReferenceRelationship)[] | null;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC4.IfcDimensionalExponents> | IFC4.IfcDimensionalExponents) , UnitType: (Handle<IFC4.IfcUnitEnum> | IFC4.IfcUnitEnum) , Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , ConversionFactor: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) )
		{
			super(expressID,type,Dimensions, UnitType);
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConversionBasedUnit
		{
			return new IfcConversionBasedUnit(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Name, this.ConversionFactor);
			return args;
		}
	}
	export class IfcConversionBasedUnitWithOffset extends IFC4.IfcConversionBasedUnit {
		ConversionOffset: (Handle<IFC4.IfcReal> | IFC4.IfcReal) ;
		constructor(expressID: number, type: number, Dimensions: (Handle<IFC4.IfcDimensionalExponents> | IFC4.IfcDimensionalExponents) , UnitType: (Handle<IFC4.IfcUnitEnum> | IFC4.IfcUnitEnum) , Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , ConversionFactor: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) , ConversionOffset: (Handle<IFC4.IfcReal> | IFC4.IfcReal) )
		{
			super(expressID,type,Dimensions, UnitType, Name, ConversionFactor);
			this.ConversionOffset = ConversionOffset;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConversionBasedUnitWithOffset
		{
			return new IfcConversionBasedUnitWithOffset(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Dimensions, this.UnitType, this.Name, this.ConversionFactor, this.ConversionOffset);
			return args;
		}
	}
	export class IfcCurrencyRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingMonetaryUnit: (Handle<IFC4.IfcMonetaryUnit> | IFC4.IfcMonetaryUnit) ;
		RelatedMonetaryUnit: (Handle<IFC4.IfcMonetaryUnit> | IFC4.IfcMonetaryUnit) ;
		ExchangeRate: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) ;
		RateDateTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		RateSource: (Handle<IFC4.IfcLibraryInformation> | IFC4.IfcLibraryInformation) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingMonetaryUnit: (Handle<IFC4.IfcMonetaryUnit> | IFC4.IfcMonetaryUnit) , RelatedMonetaryUnit: (Handle<IFC4.IfcMonetaryUnit> | IFC4.IfcMonetaryUnit) , ExchangeRate: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) , RateDateTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, RateSource: (Handle<IFC4.IfcLibraryInformation> | IFC4.IfcLibraryInformation) | null)
		{
			super(expressID,type,Name, Description);
			this.RelatingMonetaryUnit = RelatingMonetaryUnit;
			this.RelatedMonetaryUnit = RelatedMonetaryUnit;
			this.ExchangeRate = ExchangeRate;
			this.RateDateTime = RateDateTime;
			this.RateSource = RateSource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurrencyRelationship
		{
			return new IfcCurrencyRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingMonetaryUnit, this.RelatedMonetaryUnit, this.ExchangeRate, this.RateDateTime, this.RateSource);
			return args;
		}
	}
	export class IfcCurveStyle extends IFC4.IfcPresentationStyle {
		CurveFont: (Handle<IFC4.IfcCurveFontOrScaledCurveFontSelect> | IFC4.IfcCurveFontOrScaledCurveFontSelect) | null;
		CurveWidth: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null;
		CurveColour: (Handle<IFC4.IfcColour> | IFC4.IfcColour) | null;
		ModelOrDraughting: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CurveFont: (Handle<IFC4.IfcCurveFontOrScaledCurveFontSelect> | IFC4.IfcCurveFontOrScaledCurveFontSelect) | null, CurveWidth: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) | null, CurveColour: (Handle<IFC4.IfcColour> | IFC4.IfcColour) | null, ModelOrDraughting: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			super(expressID,type,Name);
			this.CurveFont = CurveFont;
			this.CurveWidth = CurveWidth;
			this.CurveColour = CurveColour;
			this.ModelOrDraughting = ModelOrDraughting;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyle
		{
			return new IfcCurveStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.CurveFont, this.CurveWidth, this.CurveColour, this.ModelOrDraughting);
			return args;
		}
	}
	export class IfcCurveStyleFont extends IFC4.IfcPresentationItem {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		PatternList: (Handle<IFC4.IfcCurveStyleFontPattern> | IFC4.IfcCurveStyleFontPattern)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PatternList: (Handle<IFC4.IfcCurveStyleFontPattern> | IFC4.IfcCurveStyleFontPattern)[] )
		{
			super(expressID,type);
			this.Name = Name;
			this.PatternList = PatternList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFont
		{
			return new IfcCurveStyleFont(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.PatternList);
			return args;
		}
	}
	export class IfcCurveStyleFontAndScaling extends IFC4.IfcPresentationItem {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		CurveFont: (Handle<IFC4.IfcCurveStyleFontSelect> | IFC4.IfcCurveStyleFontSelect) ;
		CurveFontScaling: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CurveFont: (Handle<IFC4.IfcCurveStyleFontSelect> | IFC4.IfcCurveStyleFontSelect) , CurveFontScaling: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) )
		{
			super(expressID,type);
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveFontScaling = CurveFontScaling;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFontAndScaling
		{
			return new IfcCurveStyleFontAndScaling(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.CurveFont, this.CurveFontScaling);
			return args;
		}
	}
	export class IfcCurveStyleFontPattern extends IFC4.IfcPresentationItem {
		VisibleSegmentLength: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		InvisibleSegmentLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, VisibleSegmentLength: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , InvisibleSegmentLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type);
			this.VisibleSegmentLength = VisibleSegmentLength;
			this.InvisibleSegmentLength = InvisibleSegmentLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFontPattern
		{
			return new IfcCurveStyleFontPattern(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.VisibleSegmentLength, this.InvisibleSegmentLength);
			return args;
		}
	}
	export class IfcDerivedProfileDef extends IFC4.IfcProfileDef {
		ParentProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		Operator: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) ;
		Label: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ParentProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Operator: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) , Label: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,ProfileType, ProfileName);
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedProfileDef
		{
			return new IfcDerivedProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.ParentProfile, this.Operator, this.Label);
			return args;
		}
	}
	export class IfcDocumentInformation extends IFC4.IfcExternalInformation {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) ;
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null;
		Purpose: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		IntendedUse: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Scope: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Revision: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		DocumentOwner: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		Editors: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect)[] | null;
		CreationTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		LastRevisionTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ElectronicFormat: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		ValidFrom: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		ValidUntil: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		Confidentiality: (Handle<IFC4.IfcDocumentConfidentialityEnum> | IFC4.IfcDocumentConfidentialityEnum) | null;
		Status: (Handle<IFC4.IfcDocumentStatusEnum> | IFC4.IfcDocumentStatusEnum) | null;
		DocumentInfoForObjects!: (Handle<IFC4.IfcRelAssociatesDocument> | IFC4.IfcRelAssociatesDocument)[] | null;
		HasDocumentReferences!: (Handle<IFC4.IfcDocumentReference> | IFC4.IfcDocumentReference)[] | null;
		IsPointedTo!: (Handle<IFC4.IfcDocumentInformationRelationship> | IFC4.IfcDocumentInformationRelationship)[] | null;
		IsPointer!: (Handle<IFC4.IfcDocumentInformationRelationship> | IFC4.IfcDocumentInformationRelationship)[] | null;
		constructor(expressID: number, type: number, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Purpose: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, IntendedUse: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Scope: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Revision: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DocumentOwner: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, Editors: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect)[] | null, CreationTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, LastRevisionTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ElectronicFormat: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, ValidFrom: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, ValidUntil: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, Confidentiality: (Handle<IFC4.IfcDocumentConfidentialityEnum> | IFC4.IfcDocumentConfidentialityEnum) | null, Status: (Handle<IFC4.IfcDocumentStatusEnum> | IFC4.IfcDocumentStatusEnum) | null)
		{
			super(expressID,type);
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Location = Location;
			this.Purpose = Purpose;
			this.IntendedUse = IntendedUse;
			this.Scope = Scope;
			this.Revision = Revision;
			this.DocumentOwner = DocumentOwner;
			this.Editors = Editors;
			this.CreationTime = CreationTime;
			this.LastRevisionTime = LastRevisionTime;
			this.ElectronicFormat = ElectronicFormat;
			this.ValidFrom = ValidFrom;
			this.ValidUntil = ValidUntil;
			this.Confidentiality = Confidentiality;
			this.Status = Status;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentInformation
		{
			return new IfcDocumentInformation(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Identification, this.Name, this.Description, this.Location, this.Purpose, this.IntendedUse, this.Scope, this.Revision, this.DocumentOwner, this.Editors, this.CreationTime, this.LastRevisionTime, this.ElectronicFormat, this.ValidFrom, this.ValidUntil, this.Confidentiality, this.Status);
			return args;
		}
	}
	export class IfcDocumentInformationRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingDocument: (Handle<IFC4.IfcDocumentInformation> | IFC4.IfcDocumentInformation) ;
		RelatedDocuments: (Handle<IFC4.IfcDocumentInformation> | IFC4.IfcDocumentInformation)[] ;
		RelationshipType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingDocument: (Handle<IFC4.IfcDocumentInformation> | IFC4.IfcDocumentInformation) , RelatedDocuments: (Handle<IFC4.IfcDocumentInformation> | IFC4.IfcDocumentInformation)[] , RelationshipType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description);
			this.RelatingDocument = RelatingDocument;
			this.RelatedDocuments = RelatedDocuments;
			this.RelationshipType = RelationshipType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentInformationRelationship
		{
			return new IfcDocumentInformationRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingDocument, this.RelatedDocuments, this.RelationshipType);
			return args;
		}
	}
	export class IfcDocumentReference extends IFC4.IfcExternalReference {
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		ReferencedDocument: (Handle<IFC4.IfcDocumentInformation> | IFC4.IfcDocumentInformation) | null;
		DocumentRefForObjects!: (Handle<IFC4.IfcRelAssociatesDocument> | IFC4.IfcRelAssociatesDocument)[] | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ReferencedDocument: (Handle<IFC4.IfcDocumentInformation> | IFC4.IfcDocumentInformation) | null)
		{
			super(expressID,type,Location, Identification, Name);
			this.Description = Description;
			this.ReferencedDocument = ReferencedDocument;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentReference
		{
			return new IfcDocumentReference(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Identification, this.Name, this.Description, this.ReferencedDocument);
			return args;
		}
	}
	export class IfcEdge extends IFC4.IfcTopologicalRepresentationItem {
		EdgeStart: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) ;
		EdgeEnd: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , EdgeEnd: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) )
		{
			super(expressID,type);
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdge
		{
			return new IfcEdge(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd);
			return args;
		}
	}
	export class IfcEdgeCurve extends IFC4.IfcEdge {
		EdgeGeometry: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , EdgeEnd: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , EdgeGeometry: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,EdgeStart, EdgeEnd);
			this.EdgeGeometry = EdgeGeometry;
			this.SameSense = SameSense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeCurve
		{
			return new IfcEdgeCurve(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd, this.EdgeGeometry, this.SameSense);
			return args;
		}
	}
	export class IfcEventTime extends IFC4.IfcSchedulingTime {
		ActualDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		EarlyDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		LateDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ScheduleDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ActualDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, EarlyDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, LateDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ScheduleDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null)
		{
			super(expressID,type,Name, DataOrigin, UserDefinedDataOrigin);
			this.ActualDate = ActualDate;
			this.EarlyDate = EarlyDate;
			this.LateDate = LateDate;
			this.ScheduleDate = ScheduleDate;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEventTime
		{
			return new IfcEventTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin, this.ActualDate, this.EarlyDate, this.LateDate, this.ScheduleDate);
			return args;
		}
	}
	export class IfcExtendedProperties extends IFC4.IfcPropertyAbstraction {
		Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Properties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Properties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] )
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
			this.Properties = Properties;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExtendedProperties
		{
			return new IfcExtendedProperties(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Properties);
			return args;
		}
	}
	export class IfcExternalReferenceRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingReference: (Handle<IFC4.IfcExternalReference> | IFC4.IfcExternalReference) ;
		RelatedResourceObjects: (Handle<IFC4.IfcResourceObjectSelect> | IFC4.IfcResourceObjectSelect)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingReference: (Handle<IFC4.IfcExternalReference> | IFC4.IfcExternalReference) , RelatedResourceObjects: (Handle<IFC4.IfcResourceObjectSelect> | IFC4.IfcResourceObjectSelect)[] )
		{
			super(expressID,type,Name, Description);
			this.RelatingReference = RelatingReference;
			this.RelatedResourceObjects = RelatedResourceObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternalReferenceRelationship
		{
			return new IfcExternalReferenceRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingReference, this.RelatedResourceObjects);
			return args;
		}
	}
	export class IfcFace extends IFC4.IfcTopologicalRepresentationItem {
		Bounds: (Handle<IFC4.IfcFaceBound> | IFC4.IfcFaceBound)[] ;
		HasTextureMaps!: (Handle<IFC4.IfcTextureMap> | IFC4.IfcTextureMap)[] | null;
		constructor(expressID: number, type: number, Bounds: (Handle<IFC4.IfcFaceBound> | IFC4.IfcFaceBound)[] )
		{
			super(expressID,type);
			this.Bounds = Bounds;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFace
		{
			return new IfcFace(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bounds);
			return args;
		}
	}
	export class IfcFaceBound extends IFC4.IfcTopologicalRepresentationItem {
		Bound: (Handle<IFC4.IfcLoop> | IFC4.IfcLoop) ;
		Orientation: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, Bound: (Handle<IFC4.IfcLoop> | IFC4.IfcLoop) , Orientation: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type);
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceBound
		{
			return new IfcFaceBound(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bound, this.Orientation);
			return args;
		}
	}
	export class IfcFaceOuterBound extends IFC4.IfcFaceBound {
		constructor(expressID: number, type: number, Bound: (Handle<IFC4.IfcLoop> | IFC4.IfcLoop) , Orientation: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,Bound, Orientation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceOuterBound
		{
			return new IfcFaceOuterBound(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bound, this.Orientation);
			return args;
		}
	}
	export class IfcFaceSurface extends IFC4.IfcFace {
		FaceSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, Bounds: (Handle<IFC4.IfcFaceBound> | IFC4.IfcFaceBound)[] , FaceSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,Bounds);
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceSurface
		{
			return new IfcFaceSurface(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bounds, this.FaceSurface, this.SameSense);
			return args;
		}
	}
	export class IfcFailureConnectionCondition extends IFC4.IfcStructuralConnectionCondition {
		TensionFailureX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		TensionFailureY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		TensionFailureZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		CompressionFailureX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		CompressionFailureY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		CompressionFailureZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TensionFailureX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, TensionFailureY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, TensionFailureZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, CompressionFailureX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, CompressionFailureY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, CompressionFailureZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null)
		{
			super(expressID,type,Name);
			this.TensionFailureX = TensionFailureX;
			this.TensionFailureY = TensionFailureY;
			this.TensionFailureZ = TensionFailureZ;
			this.CompressionFailureX = CompressionFailureX;
			this.CompressionFailureY = CompressionFailureY;
			this.CompressionFailureZ = CompressionFailureZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFailureConnectionCondition
		{
			return new IfcFailureConnectionCondition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.TensionFailureX, this.TensionFailureY, this.TensionFailureZ, this.CompressionFailureX, this.CompressionFailureY, this.CompressionFailureZ);
			return args;
		}
	}
	export class IfcFillAreaStyle extends IFC4.IfcPresentationStyle {
		FillStyles: (Handle<IFC4.IfcFillStyleSelect> | IFC4.IfcFillStyleSelect)[] ;
		ModelorDraughting: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, FillStyles: (Handle<IFC4.IfcFillStyleSelect> | IFC4.IfcFillStyleSelect)[] , ModelorDraughting: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			super(expressID,type,Name);
			this.FillStyles = FillStyles;
			this.ModelorDraughting = ModelorDraughting;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyle
		{
			return new IfcFillAreaStyle(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.FillStyles, this.ModelorDraughting);
			return args;
		}
	}
	export class IfcGeometricRepresentationContext extends IFC4.IfcRepresentationContext {
		CoordinateSpaceDimension: (Handle<IFC4.IfcDimensionCount> | IFC4.IfcDimensionCount) ;
		Precision: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		WorldCoordinateSystem: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) ;
		TrueNorth: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		HasSubContexts!: (Handle<IFC4.IfcGeometricRepresentationSubContext> | IFC4.IfcGeometricRepresentationSubContext)[] | null;
		HasCoordinateOperation!: (Handle<IFC4.IfcCoordinateOperation> | IFC4.IfcCoordinateOperation)[] | null;
		constructor(expressID: number, type: number, ContextIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ContextType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CoordinateSpaceDimension: (Handle<IFC4.IfcDimensionCount> | IFC4.IfcDimensionCount) , Precision: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, WorldCoordinateSystem: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , TrueNorth: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null)
		{
			super(expressID,type,ContextIdentifier, ContextType);
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationContext
		{
			return new IfcGeometricRepresentationContext(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextIdentifier, this.ContextType, this.CoordinateSpaceDimension, this.Precision, this.WorldCoordinateSystem, this.TrueNorth);
			return args;
		}
	}
	export class IfcGeometricRepresentationItem extends IFC4.IfcRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationItem
		{
			return new IfcGeometricRepresentationItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcGeometricRepresentationSubContext extends IFC4.IfcGeometricRepresentationContext {
		ParentContext: (Handle<IFC4.IfcGeometricRepresentationContext> | IFC4.IfcGeometricRepresentationContext) ;
		TargetScale: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null;
		TargetView: (Handle<IFC4.IfcGeometricProjectionEnum> | IFC4.IfcGeometricProjectionEnum) ;
		UserDefinedTargetView: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, ContextIdentifier: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ContextType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CoordinateSpaceDimension: (Handle<IFC4.IfcDimensionCount> | IFC4.IfcDimensionCount) , Precision: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, WorldCoordinateSystem: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , TrueNorth: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, ParentContext: (Handle<IFC4.IfcGeometricRepresentationContext> | IFC4.IfcGeometricRepresentationContext) , TargetScale: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null, TargetView: (Handle<IFC4.IfcGeometricProjectionEnum> | IFC4.IfcGeometricProjectionEnum) , UserDefinedTargetView: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth);
			this.ParentContext = ParentContext;
			this.TargetScale = TargetScale;
			this.TargetView = TargetView;
			this.UserDefinedTargetView = UserDefinedTargetView;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationSubContext
		{
			return new IfcGeometricRepresentationSubContext(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ContextIdentifier, this.ContextType, this.CoordinateSpaceDimension, this.Precision, this.WorldCoordinateSystem, this.TrueNorth, this.ParentContext, this.TargetScale, this.TargetView, this.UserDefinedTargetView);
			return args;
		}
	}
	export class IfcGeometricSet extends IFC4.IfcGeometricRepresentationItem {
		Elements: (Handle<IFC4.IfcGeometricSetSelect> | IFC4.IfcGeometricSetSelect)[] ;
		constructor(expressID: number, type: number, Elements: (Handle<IFC4.IfcGeometricSetSelect> | IFC4.IfcGeometricSetSelect)[] )
		{
			super(expressID,type);
			this.Elements = Elements;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricSet
		{
			return new IfcGeometricSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Elements);
			return args;
		}
	}
	export class IfcGridPlacement extends IFC4.IfcObjectPlacement {
		PlacementLocation: (Handle<IFC4.IfcVirtualGridIntersection> | IFC4.IfcVirtualGridIntersection) ;
		PlacementRefDirection: (Handle<IFC4.IfcGridPlacementDirectionSelect> | IFC4.IfcGridPlacementDirectionSelect) | null;
		constructor(expressID: number, type: number, PlacementLocation: (Handle<IFC4.IfcVirtualGridIntersection> | IFC4.IfcVirtualGridIntersection) , PlacementRefDirection: (Handle<IFC4.IfcGridPlacementDirectionSelect> | IFC4.IfcGridPlacementDirectionSelect) | null)
		{
			super(expressID,type);
			this.PlacementLocation = PlacementLocation;
			this.PlacementRefDirection = PlacementRefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGridPlacement
		{
			return new IfcGridPlacement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PlacementLocation, this.PlacementRefDirection);
			return args;
		}
	}
	export class IfcHalfSpaceSolid extends IFC4.IfcGeometricRepresentationItem {
		BaseSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		AgreementFlag: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, BaseSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , AgreementFlag: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type);
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHalfSpaceSolid
		{
			return new IfcHalfSpaceSolid(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BaseSurface, this.AgreementFlag);
			return args;
		}
	}
	export class IfcImageTexture extends IFC4.IfcSurfaceTexture {
		URLReference: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) ;
		constructor(expressID: number, type: number, RepeatS: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , RepeatT: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Mode: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, TextureTransform: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) | null, Parameter: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null, URLReference: (Handle<IFC4.IfcURIReference> | IFC4.IfcURIReference) )
		{
			super(expressID,type,RepeatS, RepeatT, Mode, TextureTransform, Parameter);
			this.URLReference = URLReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcImageTexture
		{
			return new IfcImageTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.Mode, this.TextureTransform, this.Parameter, this.URLReference);
			return args;
		}
	}
	export class IfcIndexedColourMap extends IFC4.IfcPresentationItem {
		MappedTo: (Handle<IFC4.IfcTessellatedFaceSet> | IFC4.IfcTessellatedFaceSet) ;
		Opacity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		Colours: (Handle<IFC4.IfcColourRgbList> | IFC4.IfcColourRgbList) ;
		ColourIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] ;
		constructor(expressID: number, type: number, MappedTo: (Handle<IFC4.IfcTessellatedFaceSet> | IFC4.IfcTessellatedFaceSet) , Opacity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Colours: (Handle<IFC4.IfcColourRgbList> | IFC4.IfcColourRgbList) , ColourIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] )
		{
			super(expressID,type);
			this.MappedTo = MappedTo;
			this.Opacity = Opacity;
			this.Colours = Colours;
			this.ColourIndex = ColourIndex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedColourMap
		{
			return new IfcIndexedColourMap(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MappedTo, this.Opacity, this.Colours, this.ColourIndex);
			return args;
		}
	}
	export class IfcIndexedTextureMap extends IFC4.IfcTextureCoordinate {
		MappedTo: (Handle<IFC4.IfcTessellatedFaceSet> | IFC4.IfcTessellatedFaceSet) ;
		TexCoords: (Handle<IFC4.IfcTextureVertexList> | IFC4.IfcTextureVertexList) ;
		constructor(expressID: number, type: number, Maps: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] , MappedTo: (Handle<IFC4.IfcTessellatedFaceSet> | IFC4.IfcTessellatedFaceSet) , TexCoords: (Handle<IFC4.IfcTextureVertexList> | IFC4.IfcTextureVertexList) )
		{
			super(expressID,type,Maps);
			this.MappedTo = MappedTo;
			this.TexCoords = TexCoords;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedTextureMap
		{
			return new IfcIndexedTextureMap(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Maps, this.MappedTo, this.TexCoords);
			return args;
		}
	}
	export class IfcIndexedTriangleTextureMap extends IFC4.IfcIndexedTextureMap {
		TexCoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] | null;
		constructor(expressID: number, type: number, Maps: (Handle<IFC4.IfcSurfaceTexture> | IFC4.IfcSurfaceTexture)[] , MappedTo: (Handle<IFC4.IfcTessellatedFaceSet> | IFC4.IfcTessellatedFaceSet) , TexCoords: (Handle<IFC4.IfcTextureVertexList> | IFC4.IfcTextureVertexList) , TexCoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] | null)
		{
			super(expressID,type,Maps, MappedTo, TexCoords);
			this.TexCoordIndex = TexCoordIndex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedTriangleTextureMap
		{
			return new IfcIndexedTriangleTextureMap(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Maps, this.MappedTo, this.TexCoords, this.TexCoordIndex);
			return args;
		}
	}
	export class IfcIrregularTimeSeries extends IFC4.IfcTimeSeries {
		Values: (Handle<IFC4.IfcIrregularTimeSeriesValue> | IFC4.IfcIrregularTimeSeriesValue)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , EndTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , TimeSeriesDataType: (Handle<IFC4.IfcTimeSeriesDataTypeEnum> | IFC4.IfcTimeSeriesDataTypeEnum) , DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) , UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, Values: (Handle<IFC4.IfcIrregularTimeSeriesValue> | IFC4.IfcIrregularTimeSeriesValue)[] )
		{
			super(expressID,type,Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit);
			this.Values = Values;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIrregularTimeSeries
		{
			return new IfcIrregularTimeSeries(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.StartTime, this.EndTime, this.TimeSeriesDataType, this.DataOrigin, this.UserDefinedDataOrigin, this.Unit, this.Values);
			return args;
		}
	}
	export class IfcLagTime extends IFC4.IfcSchedulingTime {
		LagValue: (Handle<IFC4.IfcTimeOrRatioSelect> | IFC4.IfcTimeOrRatioSelect) ;
		DurationType: (Handle<IFC4.IfcTaskDurationEnum> | IFC4.IfcTaskDurationEnum) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LagValue: (Handle<IFC4.IfcTimeOrRatioSelect> | IFC4.IfcTimeOrRatioSelect) , DurationType: (Handle<IFC4.IfcTaskDurationEnum> | IFC4.IfcTaskDurationEnum) )
		{
			super(expressID,type,Name, DataOrigin, UserDefinedDataOrigin);
			this.LagValue = LagValue;
			this.DurationType = DurationType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLagTime
		{
			return new IfcLagTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin, this.LagValue, this.DurationType);
			return args;
		}
	}
	export class IfcLightSource extends IFC4.IfcGeometricRepresentationItem {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) ;
		AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSource
		{
			return new IfcLightSource(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity);
			return args;
		}
	}
	export class IfcLightSourceAmbient extends IFC4.IfcLightSource {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null)
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceAmbient
		{
			return new IfcLightSourceAmbient(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity);
			return args;
		}
	}
	export class IfcLightSourceDirectional extends IFC4.IfcLightSource {
		Orientation: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Orientation: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
			this.Orientation = Orientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceDirectional
		{
			return new IfcLightSourceDirectional(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Orientation);
			return args;
		}
	}
	export class IfcLightSourceGoniometric extends IFC4.IfcLightSource {
		Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) ;
		ColourAppearance: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) | null;
		ColourTemperature: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) ;
		LuminousFlux: (Handle<IFC4.IfcLuminousFluxMeasure> | IFC4.IfcLuminousFluxMeasure) ;
		LightEmissionSource: (Handle<IFC4.IfcLightEmissionSourceEnum> | IFC4.IfcLightEmissionSourceEnum) ;
		LightDistributionDataSource: (Handle<IFC4.IfcLightDistributionDataSourceSelect> | IFC4.IfcLightDistributionDataSourceSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , ColourAppearance: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) | null, ColourTemperature: (Handle<IFC4.IfcThermodynamicTemperatureMeasure> | IFC4.IfcThermodynamicTemperatureMeasure) , LuminousFlux: (Handle<IFC4.IfcLuminousFluxMeasure> | IFC4.IfcLuminousFluxMeasure) , LightEmissionSource: (Handle<IFC4.IfcLightEmissionSourceEnum> | IFC4.IfcLightEmissionSourceEnum) , LightDistributionDataSource: (Handle<IFC4.IfcLightDistributionDataSourceSelect> | IFC4.IfcLightDistributionDataSourceSelect) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
			this.Position = Position;
			this.ColourAppearance = ColourAppearance;
			this.ColourTemperature = ColourTemperature;
			this.LuminousFlux = LuminousFlux;
			this.LightEmissionSource = LightEmissionSource;
			this.LightDistributionDataSource = LightDistributionDataSource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceGoniometric
		{
			return new IfcLightSourceGoniometric(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Position, this.ColourAppearance, this.ColourTemperature, this.LuminousFlux, this.LightEmissionSource, this.LightDistributionDataSource);
			return args;
		}
	}
	export class IfcLightSourcePositional extends IFC4.IfcLightSource {
		Position: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) ;
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		ConstantAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) ;
		DistanceAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) ;
		QuadricAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Position: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , ConstantAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) , DistanceAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) , QuadricAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity);
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourcePositional
		{
			return new IfcLightSourcePositional(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Position, this.Radius, this.ConstantAttenuation, this.DistanceAttenuation, this.QuadricAttenuation);
			return args;
		}
	}
	export class IfcLightSourceSpot extends IFC4.IfcLightSourcePositional {
		Orientation: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		ConcentrationExponent: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		SpreadAngle: (Handle<IFC4.IfcPositivePlaneAngleMeasure> | IFC4.IfcPositivePlaneAngleMeasure) ;
		BeamWidthAngle: (Handle<IFC4.IfcPositivePlaneAngleMeasure> | IFC4.IfcPositivePlaneAngleMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LightColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , AmbientIntensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Intensity: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Position: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , ConstantAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) , DistanceAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) , QuadricAttenuation: (Handle<IFC4.IfcReal> | IFC4.IfcReal) , Orientation: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) , ConcentrationExponent: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, SpreadAngle: (Handle<IFC4.IfcPositivePlaneAngleMeasure> | IFC4.IfcPositivePlaneAngleMeasure) , BeamWidthAngle: (Handle<IFC4.IfcPositivePlaneAngleMeasure> | IFC4.IfcPositivePlaneAngleMeasure) )
		{
			super(expressID,type,Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation);
			this.Orientation = Orientation;
			this.ConcentrationExponent = ConcentrationExponent;
			this.SpreadAngle = SpreadAngle;
			this.BeamWidthAngle = BeamWidthAngle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceSpot
		{
			return new IfcLightSourceSpot(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LightColour, this.AmbientIntensity, this.Intensity, this.Position, this.Radius, this.ConstantAttenuation, this.DistanceAttenuation, this.QuadricAttenuation, this.Orientation, this.ConcentrationExponent, this.SpreadAngle, this.BeamWidthAngle);
			return args;
		}
	}
	export class IfcLocalPlacement extends IFC4.IfcObjectPlacement {
		PlacementRelTo: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null;
		RelativePlacement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) ;
		constructor(expressID: number, type: number, PlacementRelTo: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, RelativePlacement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) )
		{
			super(expressID,type);
			this.PlacementRelTo = PlacementRelTo;
			this.RelativePlacement = RelativePlacement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLocalPlacement
		{
			return new IfcLocalPlacement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.PlacementRelTo, this.RelativePlacement);
			return args;
		}
	}
	export class IfcLoop extends IFC4.IfcTopologicalRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLoop
		{
			return new IfcLoop(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcMappedItem extends IFC4.IfcRepresentationItem {
		MappingSource: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap) ;
		MappingTarget: (Handle<IFC4.IfcCartesianTransformationOperator> | IFC4.IfcCartesianTransformationOperator) ;
		constructor(expressID: number, type: number, MappingSource: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap) , MappingTarget: (Handle<IFC4.IfcCartesianTransformationOperator> | IFC4.IfcCartesianTransformationOperator) )
		{
			super(expressID,type);
			this.MappingSource = MappingSource;
			this.MappingTarget = MappingTarget;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMappedItem
		{
			return new IfcMappedItem(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.MappingSource, this.MappingTarget);
			return args;
		}
	}
	export class IfcMaterial extends IFC4.IfcMaterialDefinition {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		HasRepresentation!: (Handle<IFC4.IfcMaterialDefinitionRepresentation> | IFC4.IfcMaterialDefinitionRepresentation)[] | null;
		IsRelatedWith!: (Handle<IFC4.IfcMaterialRelationship> | IFC4.IfcMaterialRelationship)[] | null;
		RelatesTo!: (Handle<IFC4.IfcMaterialRelationship> | IFC4.IfcMaterialRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterial
		{
			return new IfcMaterial(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Category);
			return args;
		}
	}
	export class IfcMaterialConstituent extends IFC4.IfcMaterialDefinition {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) ;
		Fraction: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ToMaterialConstituentSet!: (Handle<IFC4.IfcMaterialConstituentSet> | IFC4.IfcMaterialConstituentSet) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Material: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) , Fraction: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, Category: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Fraction = Fraction;
			this.Category = Category;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialConstituent
		{
			return new IfcMaterialConstituent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Material, this.Fraction, this.Category);
			return args;
		}
	}
	export class IfcMaterialConstituentSet extends IFC4.IfcMaterialDefinition {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		MaterialConstituents: (Handle<IFC4.IfcMaterialConstituent> | IFC4.IfcMaterialConstituent)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, MaterialConstituents: (Handle<IFC4.IfcMaterialConstituent> | IFC4.IfcMaterialConstituent)[] | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
			this.MaterialConstituents = MaterialConstituents;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialConstituentSet
		{
			return new IfcMaterialConstituentSet(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.MaterialConstituents);
			return args;
		}
	}
	export class IfcMaterialDefinitionRepresentation extends IFC4.IfcProductRepresentation {
		RepresentedMaterial: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Representations: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation)[] , RepresentedMaterial: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) )
		{
			super(expressID,type,Name, Description, Representations);
			this.RepresentedMaterial = RepresentedMaterial;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialDefinitionRepresentation
		{
			return new IfcMaterialDefinitionRepresentation(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Representations, this.RepresentedMaterial);
			return args;
		}
	}
	export class IfcMaterialLayerSetUsage extends IFC4.IfcMaterialUsageDefinition {
		ForLayerSet: (Handle<IFC4.IfcMaterialLayerSet> | IFC4.IfcMaterialLayerSet) ;
		LayerSetDirection: (Handle<IFC4.IfcLayerSetDirectionEnum> | IFC4.IfcLayerSetDirectionEnum) ;
		DirectionSense: (Handle<IFC4.IfcDirectionSenseEnum> | IFC4.IfcDirectionSenseEnum) ;
		OffsetFromReferenceLine: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		ReferenceExtent: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ForLayerSet: (Handle<IFC4.IfcMaterialLayerSet> | IFC4.IfcMaterialLayerSet) , LayerSetDirection: (Handle<IFC4.IfcLayerSetDirectionEnum> | IFC4.IfcLayerSetDirectionEnum) , DirectionSense: (Handle<IFC4.IfcDirectionSenseEnum> | IFC4.IfcDirectionSenseEnum) , OffsetFromReferenceLine: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , ReferenceExtent: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type);
			this.ForLayerSet = ForLayerSet;
			this.LayerSetDirection = LayerSetDirection;
			this.DirectionSense = DirectionSense;
			this.OffsetFromReferenceLine = OffsetFromReferenceLine;
			this.ReferenceExtent = ReferenceExtent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerSetUsage
		{
			return new IfcMaterialLayerSetUsage(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ForLayerSet, this.LayerSetDirection, this.DirectionSense, this.OffsetFromReferenceLine, this.ReferenceExtent);
			return args;
		}
	}
	export class IfcMaterialProfileSetUsage extends IFC4.IfcMaterialUsageDefinition {
		ForProfileSet: (Handle<IFC4.IfcMaterialProfileSet> | IFC4.IfcMaterialProfileSet) ;
		CardinalPoint: (Handle<IFC4.IfcCardinalPointReference> | IFC4.IfcCardinalPointReference) | null;
		ReferenceExtent: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, ForProfileSet: (Handle<IFC4.IfcMaterialProfileSet> | IFC4.IfcMaterialProfileSet) , CardinalPoint: (Handle<IFC4.IfcCardinalPointReference> | IFC4.IfcCardinalPointReference) | null, ReferenceExtent: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type);
			this.ForProfileSet = ForProfileSet;
			this.CardinalPoint = CardinalPoint;
			this.ReferenceExtent = ReferenceExtent;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileSetUsage
		{
			return new IfcMaterialProfileSetUsage(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ForProfileSet, this.CardinalPoint, this.ReferenceExtent);
			return args;
		}
	}
	export class IfcMaterialProfileSetUsageTapering extends IFC4.IfcMaterialProfileSetUsage {
		ForProfileEndSet: (Handle<IFC4.IfcMaterialProfileSet> | IFC4.IfcMaterialProfileSet) ;
		CardinalEndPoint: (Handle<IFC4.IfcCardinalPointReference> | IFC4.IfcCardinalPointReference) | null;
		constructor(expressID: number, type: number, ForProfileSet: (Handle<IFC4.IfcMaterialProfileSet> | IFC4.IfcMaterialProfileSet) , CardinalPoint: (Handle<IFC4.IfcCardinalPointReference> | IFC4.IfcCardinalPointReference) | null, ReferenceExtent: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, ForProfileEndSet: (Handle<IFC4.IfcMaterialProfileSet> | IFC4.IfcMaterialProfileSet) , CardinalEndPoint: (Handle<IFC4.IfcCardinalPointReference> | IFC4.IfcCardinalPointReference) | null)
		{
			super(expressID,type,ForProfileSet, CardinalPoint, ReferenceExtent);
			this.ForProfileEndSet = ForProfileEndSet;
			this.CardinalEndPoint = CardinalEndPoint;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileSetUsageTapering
		{
			return new IfcMaterialProfileSetUsageTapering(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ForProfileSet, this.CardinalPoint, this.ReferenceExtent, this.ForProfileEndSet, this.CardinalEndPoint);
			return args;
		}
	}
	export class IfcMaterialProperties extends IFC4.IfcExtendedProperties {
		Material: (Handle<IFC4.IfcMaterialDefinition> | IFC4.IfcMaterialDefinition) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Properties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] , Material: (Handle<IFC4.IfcMaterialDefinition> | IFC4.IfcMaterialDefinition) )
		{
			super(expressID,type,Name, Description, Properties);
			this.Material = Material;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProperties
		{
			return new IfcMaterialProperties(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Properties, this.Material);
			return args;
		}
	}
	export class IfcMaterialRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingMaterial: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) ;
		RelatedMaterials: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial)[] ;
		Expression: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingMaterial: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial) , RelatedMaterials: (Handle<IFC4.IfcMaterial> | IFC4.IfcMaterial)[] , Expression: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description);
			this.RelatingMaterial = RelatingMaterial;
			this.RelatedMaterials = RelatedMaterials;
			this.Expression = Expression;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialRelationship
		{
			return new IfcMaterialRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingMaterial, this.RelatedMaterials, this.Expression);
			return args;
		}
	}
	export class IfcMirroredProfileDef extends IFC4.IfcDerivedProfileDef {
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ParentProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Operator: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) , Label: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,ProfileType, ProfileName, ParentProfile, Operator, Label);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMirroredProfileDef
		{
			return new IfcMirroredProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.ParentProfile, this.Operator, this.Label);
			return args;
		}
	}
	export class IfcObjectDefinition extends IFC4.IfcRoot {
		HasAssignments!: (Handle<IFC4.IfcRelAssigns> | IFC4.IfcRelAssigns)[] | null;
		Nests!: (Handle<IFC4.IfcRelNests> | IFC4.IfcRelNests)[] | null;
		IsNestedBy!: (Handle<IFC4.IfcRelNests> | IFC4.IfcRelNests)[] | null;
		HasContext!: (Handle<IFC4.IfcRelDeclares> | IFC4.IfcRelDeclares)[] | null;
		IsDecomposedBy!: (Handle<IFC4.IfcRelAggregates> | IFC4.IfcRelAggregates)[] | null;
		Decomposes!: (Handle<IFC4.IfcRelAggregates> | IFC4.IfcRelAggregates)[] | null;
		HasAssociations!: (Handle<IFC4.IfcRelAssociates> | IFC4.IfcRelAssociates)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObjectDefinition
		{
			return new IfcObjectDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcOpenShell extends IFC4.IfcConnectedFaceSet {
		constructor(expressID: number, type: number, CfsFaces: (Handle<IFC4.IfcFace> | IFC4.IfcFace)[] )
		{
			super(expressID,type,CfsFaces);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOpenShell
		{
			return new IfcOpenShell(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CfsFaces);
			return args;
		}
	}
	export class IfcOrganizationRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingOrganization: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization) ;
		RelatedOrganizations: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingOrganization: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization) , RelatedOrganizations: (Handle<IFC4.IfcOrganization> | IFC4.IfcOrganization)[] )
		{
			super(expressID,type,Name, Description);
			this.RelatingOrganization = RelatingOrganization;
			this.RelatedOrganizations = RelatedOrganizations;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrganizationRelationship
		{
			return new IfcOrganizationRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingOrganization, this.RelatedOrganizations);
			return args;
		}
	}
	export class IfcOrientedEdge extends IFC4.IfcEdge {
		EdgeElement: (Handle<IFC4.IfcEdge> | IFC4.IfcEdge) ;
		Orientation: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , EdgeEnd: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , EdgeElement: (Handle<IFC4.IfcEdge> | IFC4.IfcEdge) , Orientation: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,EdgeStart, EdgeEnd);
			this.EdgeElement = EdgeElement;
			this.Orientation = Orientation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOrientedEdge
		{
			return new IfcOrientedEdge(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd, this.EdgeElement, this.Orientation);
			return args;
		}
	}
	export class IfcParameterizedProfileDef extends IFC4.IfcProfileDef {
		Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null)
		{
			super(expressID,type,ProfileType, ProfileName);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcParameterizedProfileDef
		{
			return new IfcParameterizedProfileDef(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position);
			return args;
		}
	}
	export class IfcPath extends IFC4.IfcTopologicalRepresentationItem {
		EdgeList: (Handle<IFC4.IfcOrientedEdge> | IFC4.IfcOrientedEdge)[] ;
		constructor(expressID: number, type: number, EdgeList: (Handle<IFC4.IfcOrientedEdge> | IFC4.IfcOrientedEdge)[] )
		{
			super(expressID,type);
			this.EdgeList = EdgeList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPath
		{
			return new IfcPath(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeList);
			return args;
		}
	}
	export class IfcPhysicalComplexQuantity extends IFC4.IfcPhysicalQuantity {
		HasQuantities: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity)[] ;
		Discrimination: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		Quality: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Usage: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, HasQuantities: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity)[] , Discrimination: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Quality: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Usage: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,Name, Description);
			this.HasQuantities = HasQuantities;
			this.Discrimination = Discrimination;
			this.Quality = Quality;
			this.Usage = Usage;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalComplexQuantity
		{
			return new IfcPhysicalComplexQuantity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.HasQuantities, this.Discrimination, this.Quality, this.Usage);
			return args;
		}
	}
	export class IfcPixelTexture extends IFC4.IfcSurfaceTexture {
		Width: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) ;
		Height: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) ;
		ColourComponents: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) ;
		Pixel: (Handle<IFC4.IfcBinary> | IFC4.IfcBinary)[] ;
		constructor(expressID: number, type: number, RepeatS: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , RepeatT: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Mode: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, TextureTransform: (Handle<IFC4.IfcCartesianTransformationOperator2D> | IFC4.IfcCartesianTransformationOperator2D) | null, Parameter: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier)[] | null, Width: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , Height: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ColourComponents: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , Pixel: (Handle<IFC4.IfcBinary> | IFC4.IfcBinary)[] )
		{
			super(expressID,type,RepeatS, RepeatT, Mode, TextureTransform, Parameter);
			this.Width = Width;
			this.Height = Height;
			this.ColourComponents = ColourComponents;
			this.Pixel = Pixel;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPixelTexture
		{
			return new IfcPixelTexture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.RepeatS, this.RepeatT, this.Mode, this.TextureTransform, this.Parameter, this.Width, this.Height, this.ColourComponents, this.Pixel);
			return args;
		}
	}
	export class IfcPlacement extends IFC4.IfcGeometricRepresentationItem {
		Location: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) ;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) )
		{
			super(expressID,type);
			this.Location = Location;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlacement
		{
			return new IfcPlacement(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location);
			return args;
		}
	}
	export class IfcPlanarExtent extends IFC4.IfcGeometricRepresentationItem {
		SizeInX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		SizeInY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, SizeInX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , SizeInY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) )
		{
			super(expressID,type);
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlanarExtent
		{
			return new IfcPlanarExtent(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SizeInX, this.SizeInY);
			return args;
		}
	}
	export class IfcPoint extends IFC4.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPoint
		{
			return new IfcPoint(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcPointOnCurve extends IFC4.IfcPoint {
		BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		PointParameter: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , PointParameter: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.PointParameter = PointParameter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPointOnCurve
		{
			return new IfcPointOnCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.PointParameter);
			return args;
		}
	}
	export class IfcPointOnSurface extends IFC4.IfcPoint {
		BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		PointParameterU: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		PointParameterV: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , PointParameterU: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) , PointParameterV: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.PointParameterU = PointParameterU;
			this.PointParameterV = PointParameterV;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPointOnSurface
		{
			return new IfcPointOnSurface(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.PointParameterU, this.PointParameterV);
			return args;
		}
	}
	export class IfcPolyLoop extends IFC4.IfcLoop {
		Polygon: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] ;
		constructor(expressID: number, type: number, Polygon: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] )
		{
			super(expressID,type);
			this.Polygon = Polygon;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolyLoop
		{
			return new IfcPolyLoop(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Polygon);
			return args;
		}
	}
	export class IfcPolygonalBoundedHalfSpace extends IFC4.IfcHalfSpaceSolid {
		Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) ;
		PolygonalBoundary: (Handle<IFC4.IfcBoundedCurve> | IFC4.IfcBoundedCurve) ;
		constructor(expressID: number, type: number, BaseSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , AgreementFlag: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , PolygonalBoundary: (Handle<IFC4.IfcBoundedCurve> | IFC4.IfcBoundedCurve) )
		{
			super(expressID,type,BaseSurface, AgreementFlag);
			this.Position = Position;
			this.PolygonalBoundary = PolygonalBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolygonalBoundedHalfSpace
		{
			return new IfcPolygonalBoundedHalfSpace(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BaseSurface, this.AgreementFlag, this.Position, this.PolygonalBoundary);
			return args;
		}
	}
	export class IfcPreDefinedItem extends IFC4.IfcPresentationItem {
		Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type);
			this.Name = Name;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedItem
		{
			return new IfcPreDefinedItem(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedProperties extends IFC4.IfcPropertyAbstraction {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedProperties
		{
			return new IfcPreDefinedProperties(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcPreDefinedTextFont extends IFC4.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedTextFont
		{
			return new IfcPreDefinedTextFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcProductDefinitionShape extends IFC4.IfcProductRepresentation {
		ShapeOfProduct!: (Handle<IFC4.IfcProduct> | IFC4.IfcProduct)[] | null;
		HasShapeAspects!: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Representations: (Handle<IFC4.IfcRepresentation> | IFC4.IfcRepresentation)[] )
		{
			super(expressID,type,Name, Description, Representations);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProductDefinitionShape
		{
			return new IfcProductDefinitionShape(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Representations);
			return args;
		}
	}
	export class IfcProfileProperties extends IFC4.IfcExtendedProperties {
		ProfileDefinition: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Properties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] , ProfileDefinition: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) )
		{
			super(expressID,type,Name, Description, Properties);
			this.ProfileDefinition = ProfileDefinition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProfileProperties
		{
			return new IfcProfileProperties(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.Properties, this.ProfileDefinition);
			return args;
		}
	}
	export class IfcProperty extends IFC4.IfcPropertyAbstraction {
		Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) ;
		Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		PartOfPset!: (Handle<IFC4.IfcPropertySet> | IFC4.IfcPropertySet)[] | null;
		PropertyForDependance!: (Handle<IFC4.IfcPropertyDependencyRelationship> | IFC4.IfcPropertyDependencyRelationship)[] | null;
		PropertyDependsOn!: (Handle<IFC4.IfcPropertyDependencyRelationship> | IFC4.IfcPropertyDependencyRelationship)[] | null;
		PartOfComplex!: (Handle<IFC4.IfcComplexProperty> | IFC4.IfcComplexProperty)[] | null;
		HasConstraints!: (Handle<IFC4.IfcResourceConstraintRelationship> | IFC4.IfcResourceConstraintRelationship)[] | null;
		HasApprovals!: (Handle<IFC4.IfcResourceApprovalRelationship> | IFC4.IfcResourceApprovalRelationship)[] | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type);
			this.Name = Name;
			this.Description = Description;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProperty
		{
			return new IfcProperty(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertyDefinition extends IFC4.IfcRoot {
		HasContext!: (Handle<IFC4.IfcRelDeclares> | IFC4.IfcRelDeclares)[] | null;
		HasAssociations!: (Handle<IFC4.IfcRelAssociates> | IFC4.IfcRelAssociates)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyDefinition
		{
			return new IfcPropertyDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertyDependencyRelationship extends IFC4.IfcResourceLevelRelationship {
		DependingProperty: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty) ;
		DependantProperty: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty) ;
		Expression: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, DependingProperty: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty) , DependantProperty: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty) , Expression: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,Name, Description);
			this.DependingProperty = DependingProperty;
			this.DependantProperty = DependantProperty;
			this.Expression = Expression;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyDependencyRelationship
		{
			return new IfcPropertyDependencyRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.DependingProperty, this.DependantProperty, this.Expression);
			return args;
		}
	}
	export class IfcPropertySetDefinition extends IFC4.IfcPropertyDefinition {
		DefinesType!: (Handle<IFC4.IfcTypeObject> | IFC4.IfcTypeObject)[] | null;
		IsDefinedBy!: (Handle<IFC4.IfcRelDefinesByTemplate> | IFC4.IfcRelDefinesByTemplate)[] | null;
		DefinesOccurrence!: (Handle<IFC4.IfcRelDefinesByProperties> | IFC4.IfcRelDefinesByProperties)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySetDefinition
		{
			return new IfcPropertySetDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcPropertyTemplateDefinition extends IFC4.IfcPropertyDefinition {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTemplateDefinition
		{
			return new IfcPropertyTemplateDefinition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcQuantitySet extends IFC4.IfcPropertySetDefinition {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcQuantitySet
		{
			return new IfcQuantitySet(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcRectangleProfileDef extends IFC4.IfcParameterizedProfileDef {
		XDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, XDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.XDim = XDim;
			this.YDim = YDim;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangleProfileDef
		{
			return new IfcRectangleProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.XDim, this.YDim);
			return args;
		}
	}
	export class IfcRegularTimeSeries extends IFC4.IfcTimeSeries {
		TimeStep: (Handle<IFC4.IfcTimeMeasure> | IFC4.IfcTimeMeasure) ;
		Values: (Handle<IFC4.IfcTimeSeriesValue> | IFC4.IfcTimeSeriesValue)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , EndTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , TimeSeriesDataType: (Handle<IFC4.IfcTimeSeriesDataTypeEnum> | IFC4.IfcTimeSeriesDataTypeEnum) , DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) , UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, TimeStep: (Handle<IFC4.IfcTimeMeasure> | IFC4.IfcTimeMeasure) , Values: (Handle<IFC4.IfcTimeSeriesValue> | IFC4.IfcTimeSeriesValue)[] )
		{
			super(expressID,type,Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit);
			this.TimeStep = TimeStep;
			this.Values = Values;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRegularTimeSeries
		{
			return new IfcRegularTimeSeries(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.StartTime, this.EndTime, this.TimeSeriesDataType, this.DataOrigin, this.UserDefinedDataOrigin, this.Unit, this.TimeStep, this.Values);
			return args;
		}
	}
	export class IfcReinforcementBarProperties extends IFC4.IfcPreDefinedProperties {
		TotalCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) ;
		SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		BarSurface: (Handle<IFC4.IfcReinforcingBarSurfaceEnum> | IFC4.IfcReinforcingBarSurfaceEnum) | null;
		EffectiveDepth: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		NominalBarDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		BarCount: (Handle<IFC4.IfcCountMeasure> | IFC4.IfcCountMeasure) | null;
		constructor(expressID: number, type: number, TotalCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) , SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , BarSurface: (Handle<IFC4.IfcReinforcingBarSurfaceEnum> | IFC4.IfcReinforcingBarSurfaceEnum) | null, EffectiveDepth: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, NominalBarDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, BarCount: (Handle<IFC4.IfcCountMeasure> | IFC4.IfcCountMeasure) | null)
		{
			super(expressID,type);
			this.TotalCrossSectionArea = TotalCrossSectionArea;
			this.SteelGrade = SteelGrade;
			this.BarSurface = BarSurface;
			this.EffectiveDepth = EffectiveDepth;
			this.NominalBarDiameter = NominalBarDiameter;
			this.BarCount = BarCount;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcementBarProperties
		{
			return new IfcReinforcementBarProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TotalCrossSectionArea, this.SteelGrade, this.BarSurface, this.EffectiveDepth, this.NominalBarDiameter, this.BarCount);
			return args;
		}
	}
	export class IfcRelationship extends IFC4.IfcRoot {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelationship
		{
			return new IfcRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcResourceApprovalRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatedResourceObjects: (Handle<IFC4.IfcResourceObjectSelect> | IFC4.IfcResourceObjectSelect)[] ;
		RelatingApproval: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedResourceObjects: (Handle<IFC4.IfcResourceObjectSelect> | IFC4.IfcResourceObjectSelect)[] , RelatingApproval: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval) )
		{
			super(expressID,type,Name, Description);
			this.RelatedResourceObjects = RelatedResourceObjects;
			this.RelatingApproval = RelatingApproval;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcResourceApprovalRelationship
		{
			return new IfcResourceApprovalRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatedResourceObjects, this.RelatingApproval);
			return args;
		}
	}
	export class IfcResourceConstraintRelationship extends IFC4.IfcResourceLevelRelationship {
		RelatingConstraint: (Handle<IFC4.IfcConstraint> | IFC4.IfcConstraint) ;
		RelatedResourceObjects: (Handle<IFC4.IfcResourceObjectSelect> | IFC4.IfcResourceObjectSelect)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingConstraint: (Handle<IFC4.IfcConstraint> | IFC4.IfcConstraint) , RelatedResourceObjects: (Handle<IFC4.IfcResourceObjectSelect> | IFC4.IfcResourceObjectSelect)[] )
		{
			super(expressID,type,Name, Description);
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedResourceObjects = RelatedResourceObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcResourceConstraintRelationship
		{
			return new IfcResourceConstraintRelationship(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.RelatingConstraint, this.RelatedResourceObjects);
			return args;
		}
	}
	export class IfcResourceTime extends IFC4.IfcSchedulingTime {
		ScheduleWork: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		ScheduleUsage: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null;
		ScheduleStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ScheduleFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ScheduleContour: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		LevelingDelay: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		IsOverAllocated: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		StatusTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ActualWork: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		ActualUsage: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null;
		ActualStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		ActualFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		RemainingWork: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		RemainingUsage: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null;
		Completion: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DataOrigin: (Handle<IFC4.IfcDataOriginEnum> | IFC4.IfcDataOriginEnum) | null, UserDefinedDataOrigin: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ScheduleWork: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, ScheduleUsage: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null, ScheduleStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ScheduleFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ScheduleContour: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LevelingDelay: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, IsOverAllocated: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, StatusTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ActualWork: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, ActualUsage: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null, ActualStart: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, ActualFinish: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, RemainingWork: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, RemainingUsage: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null, Completion: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) | null)
		{
			super(expressID,type,Name, DataOrigin, UserDefinedDataOrigin);
			this.ScheduleWork = ScheduleWork;
			this.ScheduleUsage = ScheduleUsage;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.ScheduleContour = ScheduleContour;
			this.LevelingDelay = LevelingDelay;
			this.IsOverAllocated = IsOverAllocated;
			this.StatusTime = StatusTime;
			this.ActualWork = ActualWork;
			this.ActualUsage = ActualUsage;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingWork = RemainingWork;
			this.RemainingUsage = RemainingUsage;
			this.Completion = Completion;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcResourceTime
		{
			return new IfcResourceTime(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DataOrigin, this.UserDefinedDataOrigin, this.ScheduleWork, this.ScheduleUsage, this.ScheduleStart, this.ScheduleFinish, this.ScheduleContour, this.LevelingDelay, this.IsOverAllocated, this.StatusTime, this.ActualWork, this.ActualUsage, this.ActualStart, this.ActualFinish, this.RemainingWork, this.RemainingUsage, this.Completion);
			return args;
		}
	}
	export class IfcRoundedRectangleProfileDef extends IFC4.IfcRectangleProfileDef {
		RoundingRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, XDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , RoundingRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position, XDim, YDim);
			this.RoundingRadius = RoundingRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoundedRectangleProfileDef
		{
			return new IfcRoundedRectangleProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.XDim, this.YDim, this.RoundingRadius);
			return args;
		}
	}
	export class IfcSectionProperties extends IFC4.IfcPreDefinedProperties {
		SectionType: (Handle<IFC4.IfcSectionTypeEnum> | IFC4.IfcSectionTypeEnum) ;
		StartProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		EndProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) | null;
		constructor(expressID: number, type: number, SectionType: (Handle<IFC4.IfcSectionTypeEnum> | IFC4.IfcSectionTypeEnum) , StartProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , EndProfile: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) | null)
		{
			super(expressID,type);
			this.SectionType = SectionType;
			this.StartProfile = StartProfile;
			this.EndProfile = EndProfile;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSectionProperties
		{
			return new IfcSectionProperties(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SectionType, this.StartProfile, this.EndProfile);
			return args;
		}
	}
	export class IfcSectionReinforcementProperties extends IFC4.IfcPreDefinedProperties {
		LongitudinalStartPosition: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		LongitudinalEndPosition: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		TransversePosition: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		ReinforcementRole: (Handle<IFC4.IfcReinforcingBarRoleEnum> | IFC4.IfcReinforcingBarRoleEnum) ;
		SectionDefinition: (Handle<IFC4.IfcSectionProperties> | IFC4.IfcSectionProperties) ;
		CrossSectionReinforcementDefinitions: (Handle<IFC4.IfcReinforcementBarProperties> | IFC4.IfcReinforcementBarProperties)[] ;
		constructor(expressID: number, type: number, LongitudinalStartPosition: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , LongitudinalEndPosition: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , TransversePosition: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, ReinforcementRole: (Handle<IFC4.IfcReinforcingBarRoleEnum> | IFC4.IfcReinforcingBarRoleEnum) , SectionDefinition: (Handle<IFC4.IfcSectionProperties> | IFC4.IfcSectionProperties) , CrossSectionReinforcementDefinitions: (Handle<IFC4.IfcReinforcementBarProperties> | IFC4.IfcReinforcementBarProperties)[] )
		{
			super(expressID,type);
			this.LongitudinalStartPosition = LongitudinalStartPosition;
			this.LongitudinalEndPosition = LongitudinalEndPosition;
			this.TransversePosition = TransversePosition;
			this.ReinforcementRole = ReinforcementRole;
			this.SectionDefinition = SectionDefinition;
			this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSectionReinforcementProperties
		{
			return new IfcSectionReinforcementProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LongitudinalStartPosition, this.LongitudinalEndPosition, this.TransversePosition, this.ReinforcementRole, this.SectionDefinition, this.CrossSectionReinforcementDefinitions);
			return args;
		}
	}
	export class IfcSectionedSpine extends IFC4.IfcGeometricRepresentationItem {
		SpineCurve: (Handle<IFC4.IfcCompositeCurve> | IFC4.IfcCompositeCurve) ;
		CrossSections: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef)[] ;
		CrossSectionPositions: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D)[] ;
		constructor(expressID: number, type: number, SpineCurve: (Handle<IFC4.IfcCompositeCurve> | IFC4.IfcCompositeCurve) , CrossSections: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef)[] , CrossSectionPositions: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D)[] )
		{
			super(expressID,type);
			this.SpineCurve = SpineCurve;
			this.CrossSections = CrossSections;
			this.CrossSectionPositions = CrossSectionPositions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSectionedSpine
		{
			return new IfcSectionedSpine(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SpineCurve, this.CrossSections, this.CrossSectionPositions);
			return args;
		}
	}
	export class IfcShellBasedSurfaceModel extends IFC4.IfcGeometricRepresentationItem {
		SbsmBoundary: (Handle<IFC4.IfcShell> | IFC4.IfcShell)[] ;
		constructor(expressID: number, type: number, SbsmBoundary: (Handle<IFC4.IfcShell> | IFC4.IfcShell)[] )
		{
			super(expressID,type);
			this.SbsmBoundary = SbsmBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShellBasedSurfaceModel
		{
			return new IfcShellBasedSurfaceModel(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SbsmBoundary);
			return args;
		}
	}
	export class IfcSimpleProperty extends IFC4.IfcProperty {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSimpleProperty
		{
			return new IfcSimpleProperty(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description);
			return args;
		}
	}
	export class IfcSlippageConnectionCondition extends IFC4.IfcStructuralConnectionCondition {
		SlippageX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		SlippageY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		SlippageZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, SlippageX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, SlippageY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, SlippageZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null)
		{
			super(expressID,type,Name);
			this.SlippageX = SlippageX;
			this.SlippageY = SlippageY;
			this.SlippageZ = SlippageZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlippageConnectionCondition
		{
			return new IfcSlippageConnectionCondition(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.SlippageX, this.SlippageY, this.SlippageZ);
			return args;
		}
	}
	export class IfcSolidModel extends IFC4.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSolidModel
		{
			return new IfcSolidModel(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcStructuralLoadLinearForce extends IFC4.IfcStructuralLoadStatic {
		LinearForceX: (Handle<IFC4.IfcLinearForceMeasure> | IFC4.IfcLinearForceMeasure) | null;
		LinearForceY: (Handle<IFC4.IfcLinearForceMeasure> | IFC4.IfcLinearForceMeasure) | null;
		LinearForceZ: (Handle<IFC4.IfcLinearForceMeasure> | IFC4.IfcLinearForceMeasure) | null;
		LinearMomentX: (Handle<IFC4.IfcLinearMomentMeasure> | IFC4.IfcLinearMomentMeasure) | null;
		LinearMomentY: (Handle<IFC4.IfcLinearMomentMeasure> | IFC4.IfcLinearMomentMeasure) | null;
		LinearMomentZ: (Handle<IFC4.IfcLinearMomentMeasure> | IFC4.IfcLinearMomentMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LinearForceX: (Handle<IFC4.IfcLinearForceMeasure> | IFC4.IfcLinearForceMeasure) | null, LinearForceY: (Handle<IFC4.IfcLinearForceMeasure> | IFC4.IfcLinearForceMeasure) | null, LinearForceZ: (Handle<IFC4.IfcLinearForceMeasure> | IFC4.IfcLinearForceMeasure) | null, LinearMomentX: (Handle<IFC4.IfcLinearMomentMeasure> | IFC4.IfcLinearMomentMeasure) | null, LinearMomentY: (Handle<IFC4.IfcLinearMomentMeasure> | IFC4.IfcLinearMomentMeasure) | null, LinearMomentZ: (Handle<IFC4.IfcLinearMomentMeasure> | IFC4.IfcLinearMomentMeasure) | null)
		{
			super(expressID,type,Name);
			this.LinearForceX = LinearForceX;
			this.LinearForceY = LinearForceY;
			this.LinearForceZ = LinearForceZ;
			this.LinearMomentX = LinearMomentX;
			this.LinearMomentY = LinearMomentY;
			this.LinearMomentZ = LinearMomentZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadLinearForce
		{
			return new IfcStructuralLoadLinearForce(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.LinearForceX, this.LinearForceY, this.LinearForceZ, this.LinearMomentX, this.LinearMomentY, this.LinearMomentZ);
			return args;
		}
	}
	export class IfcStructuralLoadPlanarForce extends IFC4.IfcStructuralLoadStatic {
		PlanarForceX: (Handle<IFC4.IfcPlanarForceMeasure> | IFC4.IfcPlanarForceMeasure) | null;
		PlanarForceY: (Handle<IFC4.IfcPlanarForceMeasure> | IFC4.IfcPlanarForceMeasure) | null;
		PlanarForceZ: (Handle<IFC4.IfcPlanarForceMeasure> | IFC4.IfcPlanarForceMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PlanarForceX: (Handle<IFC4.IfcPlanarForceMeasure> | IFC4.IfcPlanarForceMeasure) | null, PlanarForceY: (Handle<IFC4.IfcPlanarForceMeasure> | IFC4.IfcPlanarForceMeasure) | null, PlanarForceZ: (Handle<IFC4.IfcPlanarForceMeasure> | IFC4.IfcPlanarForceMeasure) | null)
		{
			super(expressID,type,Name);
			this.PlanarForceX = PlanarForceX;
			this.PlanarForceY = PlanarForceY;
			this.PlanarForceZ = PlanarForceZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadPlanarForce
		{
			return new IfcStructuralLoadPlanarForce(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.PlanarForceX, this.PlanarForceY, this.PlanarForceZ);
			return args;
		}
	}
	export class IfcStructuralLoadSingleDisplacement extends IFC4.IfcStructuralLoadStatic {
		DisplacementX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		DisplacementY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		DisplacementZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		RotationalDisplacementRX: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		RotationalDisplacementRY: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		RotationalDisplacementRZ: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DisplacementX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, DisplacementY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, DisplacementZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, RotationalDisplacementRX: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, RotationalDisplacementRY: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, RotationalDisplacementRZ: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,Name);
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleDisplacement
		{
			return new IfcStructuralLoadSingleDisplacement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DisplacementX, this.DisplacementY, this.DisplacementZ, this.RotationalDisplacementRX, this.RotationalDisplacementRY, this.RotationalDisplacementRZ);
			return args;
		}
	}
	export class IfcStructuralLoadSingleDisplacementDistortion extends IFC4.IfcStructuralLoadSingleDisplacement {
		Distortion: (Handle<IFC4.IfcCurvatureMeasure> | IFC4.IfcCurvatureMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, DisplacementX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, DisplacementY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, DisplacementZ: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, RotationalDisplacementRX: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, RotationalDisplacementRY: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, RotationalDisplacementRZ: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, Distortion: (Handle<IFC4.IfcCurvatureMeasure> | IFC4.IfcCurvatureMeasure) | null)
		{
			super(expressID,type,Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ);
			this.Distortion = Distortion;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleDisplacementDistortion
		{
			return new IfcStructuralLoadSingleDisplacementDistortion(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.DisplacementX, this.DisplacementY, this.DisplacementZ, this.RotationalDisplacementRX, this.RotationalDisplacementRY, this.RotationalDisplacementRZ, this.Distortion);
			return args;
		}
	}
	export class IfcStructuralLoadSingleForce extends IFC4.IfcStructuralLoadStatic {
		ForceX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		ForceY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		ForceZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		MomentX: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null;
		MomentY: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null;
		MomentZ: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ForceX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, ForceY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, ForceZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, MomentX: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null, MomentY: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null, MomentZ: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null)
		{
			super(expressID,type,Name);
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleForce
		{
			return new IfcStructuralLoadSingleForce(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.ForceX, this.ForceY, this.ForceZ, this.MomentX, this.MomentY, this.MomentZ);
			return args;
		}
	}
	export class IfcStructuralLoadSingleForceWarping extends IFC4.IfcStructuralLoadSingleForce {
		WarpingMoment: (Handle<IFC4.IfcWarpingMomentMeasure> | IFC4.IfcWarpingMomentMeasure) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ForceX: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, ForceY: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, ForceZ: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, MomentX: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null, MomentY: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null, MomentZ: (Handle<IFC4.IfcTorqueMeasure> | IFC4.IfcTorqueMeasure) | null, WarpingMoment: (Handle<IFC4.IfcWarpingMomentMeasure> | IFC4.IfcWarpingMomentMeasure) | null)
		{
			super(expressID,type,Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ);
			this.WarpingMoment = WarpingMoment;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleForceWarping
		{
			return new IfcStructuralLoadSingleForceWarping(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.ForceX, this.ForceY, this.ForceZ, this.MomentX, this.MomentY, this.MomentZ, this.WarpingMoment);
			return args;
		}
	}
	export class IfcSubedge extends IFC4.IfcEdge {
		ParentEdge: (Handle<IFC4.IfcEdge> | IFC4.IfcEdge) ;
		constructor(expressID: number, type: number, EdgeStart: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , EdgeEnd: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) , ParentEdge: (Handle<IFC4.IfcEdge> | IFC4.IfcEdge) )
		{
			super(expressID,type,EdgeStart, EdgeEnd);
			this.ParentEdge = ParentEdge;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSubedge
		{
			return new IfcSubedge(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeStart, this.EdgeEnd, this.ParentEdge);
			return args;
		}
	}
	export class IfcSurface extends IFC4.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurface
		{
			return new IfcSurface(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcSurfaceStyleRendering extends IFC4.IfcSurfaceStyleShading {
		DiffuseColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null;
		TransmissionColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null;
		DiffuseTransmissionColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null;
		ReflectionColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null;
		SpecularColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null;
		SpecularHighlight: (Handle<IFC4.IfcSpecularHighlightSelect> | IFC4.IfcSpecularHighlightSelect) | null;
		ReflectanceMethod: (Handle<IFC4.IfcReflectanceMethodEnum> | IFC4.IfcReflectanceMethodEnum) ;
		constructor(expressID: number, type: number, SurfaceColour: (Handle<IFC4.IfcColourRgb> | IFC4.IfcColourRgb) , Transparency: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, DiffuseColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null, TransmissionColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null, DiffuseTransmissionColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null, ReflectionColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null, SpecularColour: (Handle<IFC4.IfcColourOrFactor> | IFC4.IfcColourOrFactor) | null, SpecularHighlight: (Handle<IFC4.IfcSpecularHighlightSelect> | IFC4.IfcSpecularHighlightSelect) | null, ReflectanceMethod: (Handle<IFC4.IfcReflectanceMethodEnum> | IFC4.IfcReflectanceMethodEnum) )
		{
			super(expressID,type,SurfaceColour, Transparency);
			this.DiffuseColour = DiffuseColour;
			this.TransmissionColour = TransmissionColour;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.ReflectionColour = ReflectionColour;
			this.SpecularColour = SpecularColour;
			this.SpecularHighlight = SpecularHighlight;
			this.ReflectanceMethod = ReflectanceMethod;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleRendering
		{
			return new IfcSurfaceStyleRendering(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SurfaceColour, this.Transparency, this.DiffuseColour, this.TransmissionColour, this.DiffuseTransmissionColour, this.ReflectionColour, this.SpecularColour, this.SpecularHighlight, this.ReflectanceMethod);
			return args;
		}
	}
	export class IfcSweptAreaSolid extends IFC4.IfcSolidModel {
		SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null)
		{
			super(expressID,type);
			this.SweptArea = SweptArea;
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptAreaSolid
		{
			return new IfcSweptAreaSolid(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position);
			return args;
		}
	}
	export class IfcSweptDiskSolid extends IFC4.IfcSolidModel {
		Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		InnerRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null;
		EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null;
		constructor(expressID: number, type: number, Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , InnerRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null)
		{
			super(expressID,type);
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptDiskSolid
		{
			return new IfcSweptDiskSolid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Directrix, this.Radius, this.InnerRadius, this.StartParam, this.EndParam);
			return args;
		}
	}
	export class IfcSweptDiskSolidPolygonal extends IFC4.IfcSweptDiskSolid {
		FilletRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , InnerRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, FilletRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,Directrix, Radius, InnerRadius, StartParam, EndParam);
			this.FilletRadius = FilletRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptDiskSolidPolygonal
		{
			return new IfcSweptDiskSolidPolygonal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Directrix, this.Radius, this.InnerRadius, this.StartParam, this.EndParam, this.FilletRadius);
			return args;
		}
	}
	export class IfcSweptSurface extends IFC4.IfcSurface {
		SweptCurve: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null;
		constructor(expressID: number, type: number, SweptCurve: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null)
		{
			super(expressID,type);
			this.SweptCurve = SweptCurve;
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSweptSurface
		{
			return new IfcSweptSurface(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptCurve, this.Position);
			return args;
		}
	}
	export class IfcTShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		FlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		WebEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		WebSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		FlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, FlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, WebEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, WebSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, FlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.WebEdgeRadius = WebEdgeRadius;
			this.WebSlope = WebSlope;
			this.FlangeSlope = FlangeSlope;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTShapeProfileDef
		{
			return new IfcTShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.FlangeWidth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.FlangeEdgeRadius, this.WebEdgeRadius, this.WebSlope, this.FlangeSlope);
			return args;
		}
	}
	export class IfcTessellatedItem extends IFC4.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTessellatedItem
		{
			return new IfcTessellatedItem(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcTextLiteral extends IFC4.IfcGeometricRepresentationItem {
		Literal: (Handle<IFC4.IfcPresentableText> | IFC4.IfcPresentableText) ;
		Placement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) ;
		Path: (Handle<IFC4.IfcTextPath> | IFC4.IfcTextPath) ;
		constructor(expressID: number, type: number, Literal: (Handle<IFC4.IfcPresentableText> | IFC4.IfcPresentableText) , Placement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , Path: (Handle<IFC4.IfcTextPath> | IFC4.IfcTextPath) )
		{
			super(expressID,type);
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextLiteral
		{
			return new IfcTextLiteral(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Literal, this.Placement, this.Path);
			return args;
		}
	}
	export class IfcTextLiteralWithExtent extends IFC4.IfcTextLiteral {
		Extent: (Handle<IFC4.IfcPlanarExtent> | IFC4.IfcPlanarExtent) ;
		BoxAlignment: (Handle<IFC4.IfcBoxAlignment> | IFC4.IfcBoxAlignment) ;
		constructor(expressID: number, type: number, Literal: (Handle<IFC4.IfcPresentableText> | IFC4.IfcPresentableText) , Placement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , Path: (Handle<IFC4.IfcTextPath> | IFC4.IfcTextPath) , Extent: (Handle<IFC4.IfcPlanarExtent> | IFC4.IfcPlanarExtent) , BoxAlignment: (Handle<IFC4.IfcBoxAlignment> | IFC4.IfcBoxAlignment) )
		{
			super(expressID,type,Literal, Placement, Path);
			this.Extent = Extent;
			this.BoxAlignment = BoxAlignment;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextLiteralWithExtent
		{
			return new IfcTextLiteralWithExtent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Literal, this.Placement, this.Path, this.Extent, this.BoxAlignment);
			return args;
		}
	}
	export class IfcTextStyleFontModel extends IFC4.IfcPreDefinedTextFont {
		FontFamily: (Handle<IFC4.IfcTextFontName> | IFC4.IfcTextFontName)[] ;
		FontStyle: (Handle<IFC4.IfcFontStyle> | IFC4.IfcFontStyle) | null;
		FontVariant: (Handle<IFC4.IfcFontVariant> | IFC4.IfcFontVariant) | null;
		FontWeight: (Handle<IFC4.IfcFontWeight> | IFC4.IfcFontWeight) | null;
		FontSize: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , FontFamily: (Handle<IFC4.IfcTextFontName> | IFC4.IfcTextFontName)[] , FontStyle: (Handle<IFC4.IfcFontStyle> | IFC4.IfcFontStyle) | null, FontVariant: (Handle<IFC4.IfcFontVariant> | IFC4.IfcFontVariant) | null, FontWeight: (Handle<IFC4.IfcFontWeight> | IFC4.IfcFontWeight) | null, FontSize: (Handle<IFC4.IfcSizeSelect> | IFC4.IfcSizeSelect) )
		{
			super(expressID,type,Name);
			this.FontFamily = FontFamily;
			this.FontStyle = FontStyle;
			this.FontVariant = FontVariant;
			this.FontWeight = FontWeight;
			this.FontSize = FontSize;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleFontModel
		{
			return new IfcTextStyleFontModel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.FontFamily, this.FontStyle, this.FontVariant, this.FontWeight, this.FontSize);
			return args;
		}
	}
	export class IfcTrapeziumProfileDef extends IFC4.IfcParameterizedProfileDef {
		BottomXDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		TopXDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		TopXOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, BottomXDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , TopXDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , TopXOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.BottomXDim = BottomXDim;
			this.TopXDim = TopXDim;
			this.YDim = YDim;
			this.TopXOffset = TopXOffset;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTrapeziumProfileDef
		{
			return new IfcTrapeziumProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.BottomXDim, this.TopXDim, this.YDim, this.TopXOffset);
			return args;
		}
	}
	export class IfcTypeObject extends IFC4.IfcObjectDefinition {
		ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null;
		Types!: (Handle<IFC4.IfcRelDefinesByType> | IFC4.IfcRelDefinesByType)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTypeObject
		{
			return new IfcTypeObject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets);
			return args;
		}
	}
	export class IfcTypeProcess extends IFC4.IfcTypeObject {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		ProcessType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		OperatesOn!: (Handle<IFC4.IfcRelAssignsToProcess> | IFC4.IfcRelAssignsToProcess)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ProcessType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets);
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ProcessType = ProcessType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTypeProcess
		{
			return new IfcTypeProcess(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ProcessType);
			return args;
		}
	}
	export class IfcTypeProduct extends IFC4.IfcTypeObject {
		RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null;
		Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ReferencedBy!: (Handle<IFC4.IfcRelAssignsToProduct> | IFC4.IfcRelAssignsToProduct)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets);
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTypeProduct
		{
			return new IfcTypeProduct(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag);
			return args;
		}
	}
	export class IfcTypeResource extends IFC4.IfcTypeObject {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ResourceOf!: (Handle<IFC4.IfcRelAssignsToResource> | IFC4.IfcRelAssignsToResource)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets);
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTypeResource
		{
			return new IfcTypeResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType);
			return args;
		}
	}
	export class IfcUShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		EdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		FlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, EdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, FlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.FlangeSlope = FlangeSlope;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUShapeProfileDef
		{
			return new IfcUShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.FlangeWidth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.EdgeRadius, this.FlangeSlope);
			return args;
		}
	}
	export class IfcVector extends IFC4.IfcGeometricRepresentationItem {
		Orientation: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		Magnitude: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, Orientation: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) , Magnitude: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) )
		{
			super(expressID,type);
			this.Orientation = Orientation;
			this.Magnitude = Magnitude;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVector
		{
			return new IfcVector(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Orientation, this.Magnitude);
			return args;
		}
	}
	export class IfcVertexLoop extends IFC4.IfcLoop {
		LoopVertex: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) ;
		constructor(expressID: number, type: number, LoopVertex: (Handle<IFC4.IfcVertex> | IFC4.IfcVertex) )
		{
			super(expressID,type);
			this.LoopVertex = LoopVertex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVertexLoop
		{
			return new IfcVertexLoop(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.LoopVertex);
			return args;
		}
	}
	export class IfcWindowStyle extends IFC4.IfcTypeProduct {
		ConstructionType: (Handle<IFC4.IfcWindowStyleConstructionEnum> | IFC4.IfcWindowStyleConstructionEnum) ;
		OperationType: (Handle<IFC4.IfcWindowStyleOperationEnum> | IFC4.IfcWindowStyleOperationEnum) ;
		ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		Sizeable: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ConstructionType: (Handle<IFC4.IfcWindowStyleConstructionEnum> | IFC4.IfcWindowStyleConstructionEnum) , OperationType: (Handle<IFC4.IfcWindowStyleOperationEnum> | IFC4.IfcWindowStyleOperationEnum) , ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Sizeable: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.ConstructionType = ConstructionType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowStyle
		{
			return new IfcWindowStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ConstructionType, this.OperationType, this.ParameterTakesPrecedence, this.Sizeable);
			return args;
		}
	}
	export class IfcZShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		EdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, EdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcZShapeProfileDef
		{
			return new IfcZShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.FlangeWidth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.EdgeRadius);
			return args;
		}
	}
	export class IfcAdvancedFace extends IFC4.IfcFaceSurface {
		constructor(expressID: number, type: number, Bounds: (Handle<IFC4.IfcFaceBound> | IFC4.IfcFaceBound)[] , FaceSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,Bounds, FaceSurface, SameSense);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAdvancedFace
		{
			return new IfcAdvancedFace(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Bounds, this.FaceSurface, this.SameSense);
			return args;
		}
	}
	export class IfcAnnotationFillArea extends IFC4.IfcGeometricRepresentationItem {
		OuterBoundary: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		InnerBoundaries: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve)[] | null;
		constructor(expressID: number, type: number, OuterBoundary: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , InnerBoundaries: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve)[] | null)
		{
			super(expressID,type);
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationFillArea
		{
			return new IfcAnnotationFillArea(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.OuterBoundary, this.InnerBoundaries);
			return args;
		}
	}
	export class IfcAsymmetricIShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		BottomFlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		OverallDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		BottomFlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		BottomFlangeFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		TopFlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		TopFlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		TopFlangeFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		BottomFlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		BottomFlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		TopFlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		TopFlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, BottomFlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , OverallDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , BottomFlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , BottomFlangeFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, TopFlangeWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , TopFlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, TopFlangeFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, BottomFlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, BottomFlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null, TopFlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, TopFlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.BottomFlangeWidth = BottomFlangeWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.BottomFlangeThickness = BottomFlangeThickness;
			this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
			this.TopFlangeWidth = TopFlangeWidth;
			this.TopFlangeThickness = TopFlangeThickness;
			this.TopFlangeFilletRadius = TopFlangeFilletRadius;
			this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
			this.BottomFlangeSlope = BottomFlangeSlope;
			this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
			this.TopFlangeSlope = TopFlangeSlope;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAsymmetricIShapeProfileDef
		{
			return new IfcAsymmetricIShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.BottomFlangeWidth, this.OverallDepth, this.WebThickness, this.BottomFlangeThickness, this.BottomFlangeFilletRadius, this.TopFlangeWidth, this.TopFlangeThickness, this.TopFlangeFilletRadius, this.BottomFlangeEdgeRadius, this.BottomFlangeSlope, this.TopFlangeEdgeRadius, this.TopFlangeSlope);
			return args;
		}
	}
	export class IfcAxis1Placement extends IFC4.IfcPlacement {
		Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null)
		{
			super(expressID,type,Location);
			this.Axis = Axis;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAxis1Placement
		{
			return new IfcAxis1Placement(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Axis);
			return args;
		}
	}
	export class IfcAxis2Placement2D extends IFC4.IfcPlacement {
		RefDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , RefDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null)
		{
			super(expressID,type,Location);
			this.RefDirection = RefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAxis2Placement2D
		{
			return new IfcAxis2Placement2D(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.RefDirection);
			return args;
		}
	}
	export class IfcAxis2Placement3D extends IFC4.IfcPlacement {
		Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		RefDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		constructor(expressID: number, type: number, Location: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, RefDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null)
		{
			super(expressID,type,Location);
			this.Axis = Axis;
			this.RefDirection = RefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAxis2Placement3D
		{
			return new IfcAxis2Placement3D(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Location, this.Axis, this.RefDirection);
			return args;
		}
	}
	export class IfcBooleanResult extends IFC4.IfcGeometricRepresentationItem {
		Operator: (Handle<IFC4.IfcBooleanOperator> | IFC4.IfcBooleanOperator) ;
		FirstOperand: (Handle<IFC4.IfcBooleanOperand> | IFC4.IfcBooleanOperand) ;
		SecondOperand: (Handle<IFC4.IfcBooleanOperand> | IFC4.IfcBooleanOperand) ;
		constructor(expressID: number, type: number, Operator: (Handle<IFC4.IfcBooleanOperator> | IFC4.IfcBooleanOperator) , FirstOperand: (Handle<IFC4.IfcBooleanOperand> | IFC4.IfcBooleanOperand) , SecondOperand: (Handle<IFC4.IfcBooleanOperand> | IFC4.IfcBooleanOperand) )
		{
			super(expressID,type);
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBooleanResult
		{
			return new IfcBooleanResult(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Operator, this.FirstOperand, this.SecondOperand);
			return args;
		}
	}
	export class IfcBoundedSurface extends IFC4.IfcSurface {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundedSurface
		{
			return new IfcBoundedSurface(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcBoundingBox extends IFC4.IfcGeometricRepresentationItem {
		Corner: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) ;
		XDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		ZDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Corner: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , XDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , ZDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type);
			this.Corner = Corner;
			this.XDim = XDim;
			this.YDim = YDim;
			this.ZDim = ZDim;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundingBox
		{
			return new IfcBoundingBox(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Corner, this.XDim, this.YDim, this.ZDim);
			return args;
		}
	}
	export class IfcBoxedHalfSpace extends IFC4.IfcHalfSpaceSolid {
		Enclosure: (Handle<IFC4.IfcBoundingBox> | IFC4.IfcBoundingBox) ;
		constructor(expressID: number, type: number, BaseSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , AgreementFlag: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Enclosure: (Handle<IFC4.IfcBoundingBox> | IFC4.IfcBoundingBox) )
		{
			super(expressID,type,BaseSurface, AgreementFlag);
			this.Enclosure = Enclosure;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoxedHalfSpace
		{
			return new IfcBoxedHalfSpace(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BaseSurface, this.AgreementFlag, this.Enclosure);
			return args;
		}
	}
	export class IfcCShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		Width: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		WallThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		Girth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		InternalFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , Width: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WallThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , Girth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , InternalFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.Width = Width;
			this.WallThickness = WallThickness;
			this.Girth = Girth;
			this.InternalFilletRadius = InternalFilletRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCShapeProfileDef
		{
			return new IfcCShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.Width, this.WallThickness, this.Girth, this.InternalFilletRadius);
			return args;
		}
	}
	export class IfcCartesianPoint extends IFC4.IfcPoint {
		Coordinates: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] ;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] )
		{
			super(expressID,type);
			this.Coordinates = Coordinates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPoint
		{
			return new IfcCartesianPoint(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates);
			return args;
		}
	}
	export class IfcCartesianPointList extends IFC4.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPointList
		{
			return new IfcCartesianPointList(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcCartesianPointList2D extends IFC4.IfcCartesianPointList {
		CoordList: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] ;
		constructor(expressID: number, type: number, CoordList: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] )
		{
			super(expressID,type);
			this.CoordList = CoordList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPointList2D
		{
			return new IfcCartesianPointList2D(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CoordList);
			return args;
		}
	}
	export class IfcCartesianPointList3D extends IFC4.IfcCartesianPointList {
		CoordList: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] ;
		constructor(expressID: number, type: number, CoordList: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure)[] )
		{
			super(expressID,type);
			this.CoordList = CoordList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPointList3D
		{
			return new IfcCartesianPointList3D(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CoordList);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator extends IFC4.IfcGeometricRepresentationItem {
		Axis1: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		Axis2: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		LocalOrigin: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) ;
		Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, Axis2: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, LocalOrigin: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null)
		{
			super(expressID,type);
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator
		{
			return new IfcCartesianTransformationOperator(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator2D extends IFC4.IfcCartesianTransformationOperator {
		constructor(expressID: number, type: number, Axis1: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, Axis2: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, LocalOrigin: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator2D
		{
			return new IfcCartesianTransformationOperator2D(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator2DnonUniform extends IFC4.IfcCartesianTransformationOperator2D {
		Scale2: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, Axis2: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, LocalOrigin: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, Scale2: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale);
			this.Scale2 = Scale2;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator2DnonUniform
		{
			return new IfcCartesianTransformationOperator2DnonUniform(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale, this.Scale2);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator3D extends IFC4.IfcCartesianTransformationOperator {
		Axis3: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, Axis2: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, LocalOrigin: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, Axis3: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale);
			this.Axis3 = Axis3;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator3D
		{
			return new IfcCartesianTransformationOperator3D(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale, this.Axis3);
			return args;
		}
	}
	export class IfcCartesianTransformationOperator3DnonUniform extends IFC4.IfcCartesianTransformationOperator3D {
		Scale2: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		Scale3: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null;
		constructor(expressID: number, type: number, Axis1: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, Axis2: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, LocalOrigin: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Scale: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, Axis3: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) | null, Scale2: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null, Scale3: (Handle<IFC4.IfcReal> | IFC4.IfcReal) | null)
		{
			super(expressID,type,Axis1, Axis2, LocalOrigin, Scale, Axis3);
			this.Scale2 = Scale2;
			this.Scale3 = Scale3;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator3DnonUniform
		{
			return new IfcCartesianTransformationOperator3DnonUniform(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Axis1, this.Axis2, this.LocalOrigin, this.Scale, this.Axis3, this.Scale2, this.Scale3);
			return args;
		}
	}
	export class IfcCircleProfileDef extends IFC4.IfcParameterizedProfileDef {
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCircleProfileDef
		{
			return new IfcCircleProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Radius);
			return args;
		}
	}
	export class IfcClosedShell extends IFC4.IfcConnectedFaceSet {
		constructor(expressID: number, type: number, CfsFaces: (Handle<IFC4.IfcFace> | IFC4.IfcFace)[] )
		{
			super(expressID,type,CfsFaces);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcClosedShell
		{
			return new IfcClosedShell(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CfsFaces);
			return args;
		}
	}
	export class IfcColourRgb extends IFC4.IfcColourSpecification {
		Red: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) ;
		Green: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) ;
		Blue: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Red: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) , Green: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) , Blue: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) )
		{
			super(expressID,type,Name);
			this.Red = Red;
			this.Green = Green;
			this.Blue = Blue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColourRgb
		{
			return new IfcColourRgb(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Red, this.Green, this.Blue);
			return args;
		}
	}
	export class IfcComplexProperty extends IFC4.IfcProperty {
		UsageName: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) ;
		HasProperties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] ;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UsageName: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , HasProperties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] )
		{
			super(expressID,type,Name, Description);
			this.UsageName = UsageName;
			this.HasProperties = HasProperties;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcComplexProperty
		{
			return new IfcComplexProperty(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.UsageName, this.HasProperties);
			return args;
		}
	}
	export class IfcCompositeCurveSegment extends IFC4.IfcGeometricRepresentationItem {
		Transition: (Handle<IFC4.IfcTransitionCode> | IFC4.IfcTransitionCode) ;
		SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		ParentCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		UsingCurves!: (Handle<IFC4.IfcCompositeCurve> | IFC4.IfcCompositeCurve)[] | null;
		constructor(expressID: number, type: number, Transition: (Handle<IFC4.IfcTransitionCode> | IFC4.IfcTransitionCode) , SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , ParentCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) )
		{
			super(expressID,type);
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurveSegment
		{
			return new IfcCompositeCurveSegment(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Transition, this.SameSense, this.ParentCurve);
			return args;
		}
	}
	export class IfcConstructionResourceType extends IFC4.IfcTypeResource {
		BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null;
		BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType);
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionResourceType
		{
			return new IfcConstructionResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity);
			return args;
		}
	}
	export class IfcContext extends IFC4.IfcObjectDefinition {
		ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Phase: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		RepresentationContexts: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext)[] | null;
		UnitsInContext: (Handle<IFC4.IfcUnitAssignment> | IFC4.IfcUnitAssignment) | null;
		IsDefinedBy!: (Handle<IFC4.IfcRelDefinesByProperties> | IFC4.IfcRelDefinesByProperties)[] | null;
		Declares!: (Handle<IFC4.IfcRelDeclares> | IFC4.IfcRelDeclares)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Phase: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationContexts: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext)[] | null, UnitsInContext: (Handle<IFC4.IfcUnitAssignment> | IFC4.IfcUnitAssignment) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcContext
		{
			return new IfcContext(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName, this.Phase, this.RepresentationContexts, this.UnitsInContext);
			return args;
		}
	}
	export class IfcCrewResourceType extends IFC4.IfcConstructionResourceType {
		PredefinedType: (Handle<IFC4.IfcCrewResourceTypeEnum> | IFC4.IfcCrewResourceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcCrewResourceTypeEnum> | IFC4.IfcCrewResourceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCrewResourceType
		{
			return new IfcCrewResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcCsgPrimitive3D extends IFC4.IfcGeometricRepresentationItem {
		Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) )
		{
			super(expressID,type);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCsgPrimitive3D
		{
			return new IfcCsgPrimitive3D(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcCsgSolid extends IFC4.IfcSolidModel {
		TreeRootExpression: (Handle<IFC4.IfcCsgSelect> | IFC4.IfcCsgSelect) ;
		constructor(expressID: number, type: number, TreeRootExpression: (Handle<IFC4.IfcCsgSelect> | IFC4.IfcCsgSelect) )
		{
			super(expressID,type);
			this.TreeRootExpression = TreeRootExpression;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCsgSolid
		{
			return new IfcCsgSolid(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TreeRootExpression);
			return args;
		}
	}
	export class IfcCurve extends IFC4.IfcGeometricRepresentationItem {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurve
		{
			return new IfcCurve(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcCurveBoundedPlane extends IFC4.IfcBoundedSurface {
		BasisSurface: (Handle<IFC4.IfcPlane> | IFC4.IfcPlane) ;
		OuterBoundary: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		InnerBoundaries: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve)[] ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC4.IfcPlane> | IFC4.IfcPlane) , OuterBoundary: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , InnerBoundaries: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve)[] )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveBoundedPlane
		{
			return new IfcCurveBoundedPlane(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.OuterBoundary, this.InnerBoundaries);
			return args;
		}
	}
	export class IfcCurveBoundedSurface extends IFC4.IfcBoundedSurface {
		BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		Boundaries: (Handle<IFC4.IfcBoundaryCurve> | IFC4.IfcBoundaryCurve)[] ;
		ImplicitOuter: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , Boundaries: (Handle<IFC4.IfcBoundaryCurve> | IFC4.IfcBoundaryCurve)[] , ImplicitOuter: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.Boundaries = Boundaries;
			this.ImplicitOuter = ImplicitOuter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurveBoundedSurface
		{
			return new IfcCurveBoundedSurface(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.Boundaries, this.ImplicitOuter);
			return args;
		}
	}
	export class IfcDirection extends IFC4.IfcGeometricRepresentationItem {
		DirectionRatios: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] ;
		constructor(expressID: number, type: number, DirectionRatios: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] )
		{
			super(expressID,type);
			this.DirectionRatios = DirectionRatios;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDirection
		{
			return new IfcDirection(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.DirectionRatios);
			return args;
		}
	}
	export class IfcDoorStyle extends IFC4.IfcTypeProduct {
		OperationType: (Handle<IFC4.IfcDoorStyleOperationEnum> | IFC4.IfcDoorStyleOperationEnum) ;
		ConstructionType: (Handle<IFC4.IfcDoorStyleConstructionEnum> | IFC4.IfcDoorStyleConstructionEnum) ;
		ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		Sizeable: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, OperationType: (Handle<IFC4.IfcDoorStyleOperationEnum> | IFC4.IfcDoorStyleOperationEnum) , ConstructionType: (Handle<IFC4.IfcDoorStyleConstructionEnum> | IFC4.IfcDoorStyleConstructionEnum) , ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Sizeable: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.OperationType = OperationType;
			this.ConstructionType = ConstructionType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorStyle
		{
			return new IfcDoorStyle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.OperationType, this.ConstructionType, this.ParameterTakesPrecedence, this.Sizeable);
			return args;
		}
	}
	export class IfcEdgeLoop extends IFC4.IfcLoop {
		EdgeList: (Handle<IFC4.IfcOrientedEdge> | IFC4.IfcOrientedEdge)[] ;
		constructor(expressID: number, type: number, EdgeList: (Handle<IFC4.IfcOrientedEdge> | IFC4.IfcOrientedEdge)[] )
		{
			super(expressID,type);
			this.EdgeList = EdgeList;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeLoop
		{
			return new IfcEdgeLoop(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.EdgeList);
			return args;
		}
	}
	export class IfcElementQuantity extends IFC4.IfcQuantitySet {
		MethodOfMeasurement: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Quantities: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, MethodOfMeasurement: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Quantities: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.MethodOfMeasurement = MethodOfMeasurement;
			this.Quantities = Quantities;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementQuantity
		{
			return new IfcElementQuantity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.MethodOfMeasurement, this.Quantities);
			return args;
		}
	}
	export class IfcElementType extends IFC4.IfcTypeProduct {
		ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.ElementType = ElementType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementType
		{
			return new IfcElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcElementarySurface extends IFC4.IfcSurface {
		Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) )
		{
			super(expressID,type);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementarySurface
		{
			return new IfcElementarySurface(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcEllipseProfileDef extends IFC4.IfcParameterizedProfileDef {
		SemiAxis1: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		SemiAxis2: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, SemiAxis1: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , SemiAxis2: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEllipseProfileDef
		{
			return new IfcEllipseProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.SemiAxis1, this.SemiAxis2);
			return args;
		}
	}
	export class IfcEventType extends IFC4.IfcTypeProcess {
		PredefinedType: (Handle<IFC4.IfcEventTypeEnum> | IFC4.IfcEventTypeEnum) ;
		EventTriggerType: (Handle<IFC4.IfcEventTriggerTypeEnum> | IFC4.IfcEventTriggerTypeEnum) ;
		UserDefinedEventTriggerType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ProcessType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcEventTypeEnum> | IFC4.IfcEventTypeEnum) , EventTriggerType: (Handle<IFC4.IfcEventTriggerTypeEnum> | IFC4.IfcEventTriggerTypeEnum) , UserDefinedEventTriggerType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType);
			this.PredefinedType = PredefinedType;
			this.EventTriggerType = EventTriggerType;
			this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEventType
		{
			return new IfcEventType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ProcessType, this.PredefinedType, this.EventTriggerType, this.UserDefinedEventTriggerType);
			return args;
		}
	}
	export class IfcExtrudedAreaSolid extends IFC4.IfcSweptAreaSolid {
		ExtrudedDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, ExtrudedDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) , Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,SweptArea, Position);
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExtrudedAreaSolid
		{
			return new IfcExtrudedAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.ExtrudedDirection, this.Depth);
			return args;
		}
	}
	export class IfcExtrudedAreaSolidTapered extends IFC4.IfcExtrudedAreaSolid {
		EndSweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, ExtrudedDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) , Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , EndSweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) )
		{
			super(expressID,type,SweptArea, Position, ExtrudedDirection, Depth);
			this.EndSweptArea = EndSweptArea;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExtrudedAreaSolidTapered
		{
			return new IfcExtrudedAreaSolidTapered(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.ExtrudedDirection, this.Depth, this.EndSweptArea);
			return args;
		}
	}
	export class IfcFaceBasedSurfaceModel extends IFC4.IfcGeometricRepresentationItem {
		FbsmFaces: (Handle<IFC4.IfcConnectedFaceSet> | IFC4.IfcConnectedFaceSet)[] ;
		constructor(expressID: number, type: number, FbsmFaces: (Handle<IFC4.IfcConnectedFaceSet> | IFC4.IfcConnectedFaceSet)[] )
		{
			super(expressID,type);
			this.FbsmFaces = FbsmFaces;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFaceBasedSurfaceModel
		{
			return new IfcFaceBasedSurfaceModel(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.FbsmFaces);
			return args;
		}
	}
	export class IfcFillAreaStyleHatching extends IFC4.IfcGeometricRepresentationItem {
		HatchLineAppearance: (Handle<IFC4.IfcCurveStyle> | IFC4.IfcCurveStyle) ;
		StartOfNextHatchLine: (Handle<IFC4.IfcHatchLineDistanceSelect> | IFC4.IfcHatchLineDistanceSelect) ;
		PointOfReferenceHatchLine: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) | null;
		PatternStart: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) | null;
		HatchLineAngle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) ;
		constructor(expressID: number, type: number, HatchLineAppearance: (Handle<IFC4.IfcCurveStyle> | IFC4.IfcCurveStyle) , StartOfNextHatchLine: (Handle<IFC4.IfcHatchLineDistanceSelect> | IFC4.IfcHatchLineDistanceSelect) , PointOfReferenceHatchLine: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) | null, PatternStart: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) | null, HatchLineAngle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) )
		{
			super(expressID,type);
			this.HatchLineAppearance = HatchLineAppearance;
			this.StartOfNextHatchLine = StartOfNextHatchLine;
			this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
			this.PatternStart = PatternStart;
			this.HatchLineAngle = HatchLineAngle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleHatching
		{
			return new IfcFillAreaStyleHatching(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.HatchLineAppearance, this.StartOfNextHatchLine, this.PointOfReferenceHatchLine, this.PatternStart, this.HatchLineAngle);
			return args;
		}
	}
	export class IfcFillAreaStyleTiles extends IFC4.IfcGeometricRepresentationItem {
		TilingPattern: (Handle<IFC4.IfcVector> | IFC4.IfcVector)[] ;
		Tiles: (Handle<IFC4.IfcStyledItem> | IFC4.IfcStyledItem)[] ;
		TilingScale: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) ;
		constructor(expressID: number, type: number, TilingPattern: (Handle<IFC4.IfcVector> | IFC4.IfcVector)[] , Tiles: (Handle<IFC4.IfcStyledItem> | IFC4.IfcStyledItem)[] , TilingScale: (Handle<IFC4.IfcPositiveRatioMeasure> | IFC4.IfcPositiveRatioMeasure) )
		{
			super(expressID,type);
			this.TilingPattern = TilingPattern;
			this.Tiles = Tiles;
			this.TilingScale = TilingScale;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleTiles
		{
			return new IfcFillAreaStyleTiles(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.TilingPattern, this.Tiles, this.TilingScale);
			return args;
		}
	}
	export class IfcFixedReferenceSweptAreaSolid extends IFC4.IfcSweptAreaSolid {
		Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null;
		EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null;
		FixedReference: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, FixedReference: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) )
		{
			super(expressID,type,SweptArea, Position);
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.FixedReference = FixedReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFixedReferenceSweptAreaSolid
		{
			return new IfcFixedReferenceSweptAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.Directrix, this.StartParam, this.EndParam, this.FixedReference);
			return args;
		}
	}
	export class IfcFurnishingElementType extends IFC4.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnishingElementType
		{
			return new IfcFurnishingElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFurnitureType extends IFC4.IfcFurnishingElementType {
		AssemblyPlace: (Handle<IFC4.IfcAssemblyPlaceEnum> | IFC4.IfcAssemblyPlaceEnum) ;
		PredefinedType: (Handle<IFC4.IfcFurnitureTypeEnum> | IFC4.IfcFurnitureTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, AssemblyPlace: (Handle<IFC4.IfcAssemblyPlaceEnum> | IFC4.IfcAssemblyPlaceEnum) , PredefinedType: (Handle<IFC4.IfcFurnitureTypeEnum> | IFC4.IfcFurnitureTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnitureType
		{
			return new IfcFurnitureType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.AssemblyPlace, this.PredefinedType);
			return args;
		}
	}
	export class IfcGeographicElementType extends IFC4.IfcElementType {
		PredefinedType: (Handle<IFC4.IfcGeographicElementTypeEnum> | IFC4.IfcGeographicElementTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcGeographicElementTypeEnum> | IFC4.IfcGeographicElementTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeographicElementType
		{
			return new IfcGeographicElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcGeometricCurveSet extends IFC4.IfcGeometricSet {
		constructor(expressID: number, type: number, Elements: (Handle<IFC4.IfcGeometricSetSelect> | IFC4.IfcGeometricSetSelect)[] )
		{
			super(expressID,type,Elements);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricCurveSet
		{
			return new IfcGeometricCurveSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Elements);
			return args;
		}
	}
	export class IfcIShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		OverallDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		FlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		FlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , OverallDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WebThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FlangeThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, FlangeEdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, FlangeSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.OverallWidth = OverallWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.FlangeSlope = FlangeSlope;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIShapeProfileDef
		{
			return new IfcIShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.OverallWidth, this.OverallDepth, this.WebThickness, this.FlangeThickness, this.FilletRadius, this.FlangeEdgeRadius, this.FlangeSlope);
			return args;
		}
	}
	export class IfcIndexedPolygonalFace extends IFC4.IfcTessellatedItem {
		CoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] ;
		ToFaceSet!: (Handle<IFC4.IfcPolygonalFaceSet> | IFC4.IfcPolygonalFaceSet)[] | null;
		constructor(expressID: number, type: number, CoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] )
		{
			super(expressID,type);
			this.CoordIndex = CoordIndex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedPolygonalFace
		{
			return new IfcIndexedPolygonalFace(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CoordIndex);
			return args;
		}
	}
	export class IfcIndexedPolygonalFaceWithVoids extends IFC4.IfcIndexedPolygonalFace {
		InnerCoordIndices: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] ;
		constructor(expressID: number, type: number, CoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] , InnerCoordIndices: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] )
		{
			super(expressID,type,CoordIndex);
			this.InnerCoordIndices = InnerCoordIndices;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedPolygonalFaceWithVoids
		{
			return new IfcIndexedPolygonalFaceWithVoids(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.CoordIndex, this.InnerCoordIndices);
			return args;
		}
	}
	export class IfcLShapeProfileDef extends IFC4.IfcParameterizedProfileDef {
		Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		Width: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		EdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		LegSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Depth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , Width: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , FilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, EdgeRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, LegSlope: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position);
			this.Depth = Depth;
			this.Width = Width;
			this.Thickness = Thickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.LegSlope = LegSlope;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLShapeProfileDef
		{
			return new IfcLShapeProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Depth, this.Width, this.Thickness, this.FilletRadius, this.EdgeRadius, this.LegSlope);
			return args;
		}
	}
	export class IfcLaborResourceType extends IFC4.IfcConstructionResourceType {
		PredefinedType: (Handle<IFC4.IfcLaborResourceTypeEnum> | IFC4.IfcLaborResourceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcLaborResourceTypeEnum> | IFC4.IfcLaborResourceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLaborResourceType
		{
			return new IfcLaborResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcLine extends IFC4.IfcCurve {
		Pnt: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) ;
		Dir: (Handle<IFC4.IfcVector> | IFC4.IfcVector) ;
		constructor(expressID: number, type: number, Pnt: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint) , Dir: (Handle<IFC4.IfcVector> | IFC4.IfcVector) )
		{
			super(expressID,type);
			this.Pnt = Pnt;
			this.Dir = Dir;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLine
		{
			return new IfcLine(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Pnt, this.Dir);
			return args;
		}
	}
	export class IfcManifoldSolidBrep extends IFC4.IfcSolidModel {
		Outer: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell) ;
		constructor(expressID: number, type: number, Outer: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell) )
		{
			super(expressID,type);
			this.Outer = Outer;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcManifoldSolidBrep
		{
			return new IfcManifoldSolidBrep(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer);
			return args;
		}
	}
	export class IfcObject extends IFC4.IfcObjectDefinition {
		ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		IsDeclaredBy!: (Handle<IFC4.IfcRelDefinesByObject> | IFC4.IfcRelDefinesByObject)[] | null;
		Declares!: (Handle<IFC4.IfcRelDefinesByObject> | IFC4.IfcRelDefinesByObject)[] | null;
		IsTypedBy!: (Handle<IFC4.IfcRelDefinesByType> | IFC4.IfcRelDefinesByType)[] | null;
		IsDefinedBy!: (Handle<IFC4.IfcRelDefinesByProperties> | IFC4.IfcRelDefinesByProperties)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ObjectType = ObjectType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcObject
		{
			return new IfcObject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcOffsetCurve2D extends IFC4.IfcCurve {
		BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		Distance: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , Distance: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve2D
		{
			return new IfcOffsetCurve2D(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.Distance, this.SelfIntersect);
			return args;
		}
	}
	export class IfcOffsetCurve3D extends IFC4.IfcCurve {
		BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		Distance: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		RefDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , Distance: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , RefDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
			this.RefDirection = RefDirection;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve3D
		{
			return new IfcOffsetCurve3D(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.Distance, this.SelfIntersect, this.RefDirection);
			return args;
		}
	}
	export class IfcPcurve extends IFC4.IfcCurve {
		BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		ReferenceCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , ReferenceCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.ReferenceCurve = ReferenceCurve;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPcurve
		{
			return new IfcPcurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.ReferenceCurve);
			return args;
		}
	}
	export class IfcPlanarBox extends IFC4.IfcPlanarExtent {
		Placement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) ;
		constructor(expressID: number, type: number, SizeInX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , SizeInY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) , Placement: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) )
		{
			super(expressID,type,SizeInX, SizeInY);
			this.Placement = Placement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlanarBox
		{
			return new IfcPlanarBox(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SizeInX, this.SizeInY, this.Placement);
			return args;
		}
	}
	export class IfcPlane extends IFC4.IfcElementarySurface {
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) )
		{
			super(expressID,type,Position);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlane
		{
			return new IfcPlane(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcPreDefinedColour extends IFC4.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedColour
		{
			return new IfcPreDefinedColour(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedCurveFont extends IFC4.IfcPreDefinedItem {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedCurveFont
		{
			return new IfcPreDefinedCurveFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcPreDefinedPropertySet extends IFC4.IfcPropertySetDefinition {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedPropertySet
		{
			return new IfcPreDefinedPropertySet(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcProcedureType extends IFC4.IfcTypeProcess {
		PredefinedType: (Handle<IFC4.IfcProcedureTypeEnum> | IFC4.IfcProcedureTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ProcessType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcProcedureTypeEnum> | IFC4.IfcProcedureTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProcedureType
		{
			return new IfcProcedureType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ProcessType, this.PredefinedType);
			return args;
		}
	}
	export class IfcProcess extends IFC4.IfcObject {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		IsPredecessorTo!: (Handle<IFC4.IfcRelSequence> | IFC4.IfcRelSequence)[] | null;
		IsSuccessorFrom!: (Handle<IFC4.IfcRelSequence> | IFC4.IfcRelSequence)[] | null;
		OperatesOn!: (Handle<IFC4.IfcRelAssignsToProcess> | IFC4.IfcRelAssignsToProcess)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Identification = Identification;
			this.LongDescription = LongDescription;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProcess
		{
			return new IfcProcess(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription);
			return args;
		}
	}
	export class IfcProduct extends IFC4.IfcObject {
		ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null;
		Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null;
		ReferencedBy!: (Handle<IFC4.IfcRelAssignsToProduct> | IFC4.IfcRelAssignsToProduct)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProduct
		{
			return new IfcProduct(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcProject extends IFC4.IfcContext {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Phase: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationContexts: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext)[] | null, UnitsInContext: (Handle<IFC4.IfcUnitAssignment> | IFC4.IfcUnitAssignment) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProject
		{
			return new IfcProject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName, this.Phase, this.RepresentationContexts, this.UnitsInContext);
			return args;
		}
	}
	export class IfcProjectLibrary extends IFC4.IfcContext {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Phase: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RepresentationContexts: (Handle<IFC4.IfcRepresentationContext> | IFC4.IfcRepresentationContext)[] | null, UnitsInContext: (Handle<IFC4.IfcUnitAssignment> | IFC4.IfcUnitAssignment) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectLibrary
		{
			return new IfcProjectLibrary(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName, this.Phase, this.RepresentationContexts, this.UnitsInContext);
			return args;
		}
	}
	export class IfcPropertyBoundedValue extends IFC4.IfcSimpleProperty {
		UpperBoundValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null;
		LowerBoundValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null;
		Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		SetPointValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UpperBoundValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null, LowerBoundValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, SetPointValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null)
		{
			super(expressID,type,Name, Description);
			this.UpperBoundValue = UpperBoundValue;
			this.LowerBoundValue = LowerBoundValue;
			this.Unit = Unit;
			this.SetPointValue = SetPointValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyBoundedValue
		{
			return new IfcPropertyBoundedValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.UpperBoundValue, this.LowerBoundValue, this.Unit, this.SetPointValue);
			return args;
		}
	}
	export class IfcPropertyEnumeratedValue extends IFC4.IfcSimpleProperty {
		EnumerationValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null;
		EnumerationReference: (Handle<IFC4.IfcPropertyEnumeration> | IFC4.IfcPropertyEnumeration) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, EnumerationValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null, EnumerationReference: (Handle<IFC4.IfcPropertyEnumeration> | IFC4.IfcPropertyEnumeration) | null)
		{
			super(expressID,type,Name, Description);
			this.EnumerationValues = EnumerationValues;
			this.EnumerationReference = EnumerationReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyEnumeratedValue
		{
			return new IfcPropertyEnumeratedValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.EnumerationValues, this.EnumerationReference);
			return args;
		}
	}
	export class IfcPropertyListValue extends IFC4.IfcSimpleProperty {
		ListValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null;
		Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ListValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.ListValues = ListValues;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyListValue
		{
			return new IfcPropertyListValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.ListValues, this.Unit);
			return args;
		}
	}
	export class IfcPropertyReferenceValue extends IFC4.IfcSimpleProperty {
		UsageName: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		PropertyReference: (Handle<IFC4.IfcObjectReferenceSelect> | IFC4.IfcObjectReferenceSelect) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UsageName: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, PropertyReference: (Handle<IFC4.IfcObjectReferenceSelect> | IFC4.IfcObjectReferenceSelect) | null)
		{
			super(expressID,type,Name, Description);
			this.UsageName = UsageName;
			this.PropertyReference = PropertyReference;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyReferenceValue
		{
			return new IfcPropertyReferenceValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.UsageName, this.PropertyReference);
			return args;
		}
	}
	export class IfcPropertySet extends IFC4.IfcPropertySetDefinition {
		HasProperties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, HasProperties: (Handle<IFC4.IfcProperty> | IFC4.IfcProperty)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.HasProperties = HasProperties;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySet
		{
			return new IfcPropertySet(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.HasProperties);
			return args;
		}
	}
	export class IfcPropertySetTemplate extends IFC4.IfcPropertyTemplateDefinition {
		TemplateType: (Handle<IFC4.IfcPropertySetTemplateTypeEnum> | IFC4.IfcPropertySetTemplateTypeEnum) | null;
		ApplicableEntity: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		HasPropertyTemplates: (Handle<IFC4.IfcPropertyTemplate> | IFC4.IfcPropertyTemplate)[] ;
		Defines!: (Handle<IFC4.IfcRelDefinesByTemplate> | IFC4.IfcRelDefinesByTemplate)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, TemplateType: (Handle<IFC4.IfcPropertySetTemplateTypeEnum> | IFC4.IfcPropertySetTemplateTypeEnum) | null, ApplicableEntity: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertyTemplates: (Handle<IFC4.IfcPropertyTemplate> | IFC4.IfcPropertyTemplate)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.TemplateType = TemplateType;
			this.ApplicableEntity = ApplicableEntity;
			this.HasPropertyTemplates = HasPropertyTemplates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySetTemplate
		{
			return new IfcPropertySetTemplate(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.TemplateType, this.ApplicableEntity, this.HasPropertyTemplates);
			return args;
		}
	}
	export class IfcPropertySingleValue extends IFC4.IfcSimpleProperty {
		NominalValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null;
		Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, NominalValue: (Handle<IFC4.IfcValue> | IFC4.IfcValue) | null, Unit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null)
		{
			super(expressID,type,Name, Description);
			this.NominalValue = NominalValue;
			this.Unit = Unit;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySingleValue
		{
			return new IfcPropertySingleValue(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.NominalValue, this.Unit);
			return args;
		}
	}
	export class IfcPropertyTableValue extends IFC4.IfcSimpleProperty {
		DefiningValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null;
		DefinedValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null;
		Expression: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		DefiningUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		DefinedUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		CurveInterpolation: (Handle<IFC4.IfcCurveInterpolationEnum> | IFC4.IfcCurveInterpolationEnum) | null;
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) , Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, DefiningValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null, DefinedValues: (Handle<IFC4.IfcValue> | IFC4.IfcValue)[] | null, Expression: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, DefiningUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, DefinedUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, CurveInterpolation: (Handle<IFC4.IfcCurveInterpolationEnum> | IFC4.IfcCurveInterpolationEnum) | null)
		{
			super(expressID,type,Name, Description);
			this.DefiningValues = DefiningValues;
			this.DefinedValues = DefinedValues;
			this.Expression = Expression;
			this.DefiningUnit = DefiningUnit;
			this.DefinedUnit = DefinedUnit;
			this.CurveInterpolation = CurveInterpolation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTableValue
		{
			return new IfcPropertyTableValue(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name, this.Description, this.DefiningValues, this.DefinedValues, this.Expression, this.DefiningUnit, this.DefinedUnit, this.CurveInterpolation);
			return args;
		}
	}
	export class IfcPropertyTemplate extends IFC4.IfcPropertyTemplateDefinition {
		PartOfComplexTemplate!: (Handle<IFC4.IfcComplexPropertyTemplate> | IFC4.IfcComplexPropertyTemplate)[] | null;
		PartOfPsetTemplate!: (Handle<IFC4.IfcPropertySetTemplate> | IFC4.IfcPropertySetTemplate)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTemplate
		{
			return new IfcPropertyTemplate(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcProxy extends IFC4.IfcProduct {
		ProxyType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) ;
		Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, ProxyType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) , Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.ProxyType = ProxyType;
			this.Tag = Tag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProxy
		{
			return new IfcProxy(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.ProxyType, this.Tag);
			return args;
		}
	}
	export class IfcRectangleHollowProfileDef extends IFC4.IfcRectangleProfileDef {
		WallThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		InnerFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		OuterFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, XDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YDim: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WallThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , InnerFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, OuterFilletRadius: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null)
		{
			super(expressID,type,ProfileType, ProfileName, Position, XDim, YDim);
			this.WallThickness = WallThickness;
			this.InnerFilletRadius = InnerFilletRadius;
			this.OuterFilletRadius = OuterFilletRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangleHollowProfileDef
		{
			return new IfcRectangleHollowProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.XDim, this.YDim, this.WallThickness, this.InnerFilletRadius, this.OuterFilletRadius);
			return args;
		}
	}
	export class IfcRectangularPyramid extends IFC4.IfcCsgPrimitive3D {
		XLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		YLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		Height: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , XLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , Height: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.XLength = XLength;
			this.YLength = YLength;
			this.Height = Height;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangularPyramid
		{
			return new IfcRectangularPyramid(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.XLength, this.YLength, this.Height);
			return args;
		}
	}
	export class IfcRectangularTrimmedSurface extends IFC4.IfcBoundedSurface {
		BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		U1: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		V1: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		U2: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		V2: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		Usense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		Vsense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		constructor(expressID: number, type: number, BasisSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) , U1: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) , V1: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) , U2: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) , V2: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) , Usense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Vsense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type);
			this.BasisSurface = BasisSurface;
			this.U1 = U1;
			this.V1 = V1;
			this.U2 = U2;
			this.V2 = V2;
			this.Usense = Usense;
			this.Vsense = Vsense;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRectangularTrimmedSurface
		{
			return new IfcRectangularTrimmedSurface(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisSurface, this.U1, this.V1, this.U2, this.V2, this.Usense, this.Vsense);
			return args;
		}
	}
	export class IfcReinforcementDefinitionProperties extends IFC4.IfcPreDefinedPropertySet {
		DefinitionType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ReinforcementSectionDefinitions: (Handle<IFC4.IfcSectionReinforcementProperties> | IFC4.IfcSectionReinforcementProperties)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, DefinitionType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ReinforcementSectionDefinitions: (Handle<IFC4.IfcSectionReinforcementProperties> | IFC4.IfcSectionReinforcementProperties)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.DefinitionType = DefinitionType;
			this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcementDefinitionProperties
		{
			return new IfcReinforcementDefinitionProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.DefinitionType, this.ReinforcementSectionDefinitions);
			return args;
		}
	}
	export class IfcRelAssigns extends IFC4.IfcRelationship {
		RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] ;
		RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssigns
		{
			return new IfcRelAssigns(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType);
			return args;
		}
	}
	export class IfcRelAssignsToActor extends IFC4.IfcRelAssigns {
		RelatingActor: (Handle<IFC4.IfcActor> | IFC4.IfcActor) ;
		ActingRole: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingActor: (Handle<IFC4.IfcActor> | IFC4.IfcActor) , ActingRole: (Handle<IFC4.IfcActorRole> | IFC4.IfcActorRole) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingActor = RelatingActor;
			this.ActingRole = ActingRole;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToActor
		{
			return new IfcRelAssignsToActor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingActor, this.ActingRole);
			return args;
		}
	}
	export class IfcRelAssignsToControl extends IFC4.IfcRelAssigns {
		RelatingControl: (Handle<IFC4.IfcControl> | IFC4.IfcControl) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingControl: (Handle<IFC4.IfcControl> | IFC4.IfcControl) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingControl = RelatingControl;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToControl
		{
			return new IfcRelAssignsToControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingControl);
			return args;
		}
	}
	export class IfcRelAssignsToGroup extends IFC4.IfcRelAssigns {
		RelatingGroup: (Handle<IFC4.IfcGroup> | IFC4.IfcGroup) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingGroup: (Handle<IFC4.IfcGroup> | IFC4.IfcGroup) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingGroup = RelatingGroup;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToGroup
		{
			return new IfcRelAssignsToGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingGroup);
			return args;
		}
	}
	export class IfcRelAssignsToGroupByFactor extends IFC4.IfcRelAssignsToGroup {
		Factor: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingGroup: (Handle<IFC4.IfcGroup> | IFC4.IfcGroup) , Factor: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingGroup);
			this.Factor = Factor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToGroupByFactor
		{
			return new IfcRelAssignsToGroupByFactor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingGroup, this.Factor);
			return args;
		}
	}
	export class IfcRelAssignsToProcess extends IFC4.IfcRelAssigns {
		RelatingProcess: (Handle<IFC4.IfcProcessSelect> | IFC4.IfcProcessSelect) ;
		QuantityInProcess: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingProcess: (Handle<IFC4.IfcProcessSelect> | IFC4.IfcProcessSelect) , QuantityInProcess: (Handle<IFC4.IfcMeasureWithUnit> | IFC4.IfcMeasureWithUnit) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingProcess = RelatingProcess;
			this.QuantityInProcess = QuantityInProcess;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProcess
		{
			return new IfcRelAssignsToProcess(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingProcess, this.QuantityInProcess);
			return args;
		}
	}
	export class IfcRelAssignsToProduct extends IFC4.IfcRelAssigns {
		RelatingProduct: (Handle<IFC4.IfcProductSelect> | IFC4.IfcProductSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingProduct: (Handle<IFC4.IfcProductSelect> | IFC4.IfcProductSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingProduct = RelatingProduct;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProduct
		{
			return new IfcRelAssignsToProduct(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingProduct);
			return args;
		}
	}
	export class IfcRelAssignsToResource extends IFC4.IfcRelAssigns {
		RelatingResource: (Handle<IFC4.IfcResourceSelect> | IFC4.IfcResourceSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatedObjectsType: (Handle<IFC4.IfcObjectTypeEnum> | IFC4.IfcObjectTypeEnum) | null, RelatingResource: (Handle<IFC4.IfcResourceSelect> | IFC4.IfcResourceSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
			this.RelatingResource = RelatingResource;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToResource
		{
			return new IfcRelAssignsToResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatedObjectsType, this.RelatingResource);
			return args;
		}
	}
	export class IfcRelAssociates extends IFC4.IfcRelationship {
		RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociates
		{
			return new IfcRelAssociates(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelAssociatesApproval extends IFC4.IfcRelAssociates {
		RelatingApproval: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] , RelatingApproval: (Handle<IFC4.IfcApproval> | IFC4.IfcApproval) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingApproval = RelatingApproval;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesApproval
		{
			return new IfcRelAssociatesApproval(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingApproval);
			return args;
		}
	}
	export class IfcRelAssociatesClassification extends IFC4.IfcRelAssociates {
		RelatingClassification: (Handle<IFC4.IfcClassificationSelect> | IFC4.IfcClassificationSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] , RelatingClassification: (Handle<IFC4.IfcClassificationSelect> | IFC4.IfcClassificationSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingClassification = RelatingClassification;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesClassification
		{
			return new IfcRelAssociatesClassification(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingClassification);
			return args;
		}
	}
	export class IfcRelAssociatesConstraint extends IFC4.IfcRelAssociates {
		Intent: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		RelatingConstraint: (Handle<IFC4.IfcConstraint> | IFC4.IfcConstraint) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] , Intent: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, RelatingConstraint: (Handle<IFC4.IfcConstraint> | IFC4.IfcConstraint) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.Intent = Intent;
			this.RelatingConstraint = RelatingConstraint;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesConstraint
		{
			return new IfcRelAssociatesConstraint(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.Intent, this.RelatingConstraint);
			return args;
		}
	}
	export class IfcRelAssociatesDocument extends IFC4.IfcRelAssociates {
		RelatingDocument: (Handle<IFC4.IfcDocumentSelect> | IFC4.IfcDocumentSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] , RelatingDocument: (Handle<IFC4.IfcDocumentSelect> | IFC4.IfcDocumentSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingDocument = RelatingDocument;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesDocument
		{
			return new IfcRelAssociatesDocument(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingDocument);
			return args;
		}
	}
	export class IfcRelAssociatesLibrary extends IFC4.IfcRelAssociates {
		RelatingLibrary: (Handle<IFC4.IfcLibrarySelect> | IFC4.IfcLibrarySelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] , RelatingLibrary: (Handle<IFC4.IfcLibrarySelect> | IFC4.IfcLibrarySelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingLibrary = RelatingLibrary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesLibrary
		{
			return new IfcRelAssociatesLibrary(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingLibrary);
			return args;
		}
	}
	export class IfcRelAssociatesMaterial extends IFC4.IfcRelAssociates {
		RelatingMaterial: (Handle<IFC4.IfcMaterialSelect> | IFC4.IfcMaterialSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] , RelatingMaterial: (Handle<IFC4.IfcMaterialSelect> | IFC4.IfcMaterialSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatedObjects);
			this.RelatingMaterial = RelatingMaterial;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesMaterial
		{
			return new IfcRelAssociatesMaterial(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingMaterial);
			return args;
		}
	}
	export class IfcRelConnects extends IFC4.IfcRelationship {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnects
		{
			return new IfcRelConnects(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcRelConnectsElements extends IFC4.IfcRelConnects {
		ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null;
		RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		RelatedElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsElements
		{
			return new IfcRelConnectsElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ConnectionGeometry, this.RelatingElement, this.RelatedElement);
			return args;
		}
	}
	export class IfcRelConnectsPathElements extends IFC4.IfcRelConnectsElements {
		RelatingPriorities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] ;
		RelatedPriorities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] ;
		RelatedConnectionType: (Handle<IFC4.IfcConnectionTypeEnum> | IFC4.IfcConnectionTypeEnum) ;
		RelatingConnectionType: (Handle<IFC4.IfcConnectionTypeEnum> | IFC4.IfcConnectionTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatingPriorities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , RelatedPriorities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , RelatedConnectionType: (Handle<IFC4.IfcConnectionTypeEnum> | IFC4.IfcConnectionTypeEnum) , RelatingConnectionType: (Handle<IFC4.IfcConnectionTypeEnum> | IFC4.IfcConnectionTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement);
			this.RelatingPriorities = RelatingPriorities;
			this.RelatedPriorities = RelatedPriorities;
			this.RelatedConnectionType = RelatedConnectionType;
			this.RelatingConnectionType = RelatingConnectionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPathElements
		{
			return new IfcRelConnectsPathElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ConnectionGeometry, this.RelatingElement, this.RelatedElement, this.RelatingPriorities, this.RelatedPriorities, this.RelatedConnectionType, this.RelatingConnectionType);
			return args;
		}
	}
	export class IfcRelConnectsPortToElement extends IFC4.IfcRelConnects {
		RelatingPort: (Handle<IFC4.IfcPort> | IFC4.IfcPort) ;
		RelatedElement: (Handle<IFC4.IfcDistributionElement> | IFC4.IfcDistributionElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingPort: (Handle<IFC4.IfcPort> | IFC4.IfcPort) , RelatedElement: (Handle<IFC4.IfcDistributionElement> | IFC4.IfcDistributionElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingPort = RelatingPort;
			this.RelatedElement = RelatedElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPortToElement
		{
			return new IfcRelConnectsPortToElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingPort, this.RelatedElement);
			return args;
		}
	}
	export class IfcRelConnectsPorts extends IFC4.IfcRelConnects {
		RelatingPort: (Handle<IFC4.IfcPort> | IFC4.IfcPort) ;
		RelatedPort: (Handle<IFC4.IfcPort> | IFC4.IfcPort) ;
		RealizingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingPort: (Handle<IFC4.IfcPort> | IFC4.IfcPort) , RelatedPort: (Handle<IFC4.IfcPort> | IFC4.IfcPort) , RealizingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingPort = RelatingPort;
			this.RelatedPort = RelatedPort;
			this.RealizingElement = RealizingElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPorts
		{
			return new IfcRelConnectsPorts(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingPort, this.RelatedPort, this.RealizingElement);
			return args;
		}
	}
	export class IfcRelConnectsStructuralActivity extends IFC4.IfcRelConnects {
		RelatingElement: (Handle<IFC4.IfcStructuralActivityAssignmentSelect> | IFC4.IfcStructuralActivityAssignmentSelect) ;
		RelatedStructuralActivity: (Handle<IFC4.IfcStructuralActivity> | IFC4.IfcStructuralActivity) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingElement: (Handle<IFC4.IfcStructuralActivityAssignmentSelect> | IFC4.IfcStructuralActivityAssignmentSelect) , RelatedStructuralActivity: (Handle<IFC4.IfcStructuralActivity> | IFC4.IfcStructuralActivity) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralActivity = RelatedStructuralActivity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralActivity
		{
			return new IfcRelConnectsStructuralActivity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingElement, this.RelatedStructuralActivity);
			return args;
		}
	}
	export class IfcRelConnectsStructuralMember extends IFC4.IfcRelConnects {
		RelatingStructuralMember: (Handle<IFC4.IfcStructuralMember> | IFC4.IfcStructuralMember) ;
		RelatedStructuralConnection: (Handle<IFC4.IfcStructuralConnection> | IFC4.IfcStructuralConnection) ;
		AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null;
		AdditionalConditions: (Handle<IFC4.IfcStructuralConnectionCondition> | IFC4.IfcStructuralConnectionCondition) | null;
		SupportedLength: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		ConditionCoordinateSystem: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingStructuralMember: (Handle<IFC4.IfcStructuralMember> | IFC4.IfcStructuralMember) , RelatedStructuralConnection: (Handle<IFC4.IfcStructuralConnection> | IFC4.IfcStructuralConnection) , AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null, AdditionalConditions: (Handle<IFC4.IfcStructuralConnectionCondition> | IFC4.IfcStructuralConnectionCondition) | null, SupportedLength: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, ConditionCoordinateSystem: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralMember
		{
			return new IfcRelConnectsStructuralMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingStructuralMember, this.RelatedStructuralConnection, this.AppliedCondition, this.AdditionalConditions, this.SupportedLength, this.ConditionCoordinateSystem);
			return args;
		}
	}
	export class IfcRelConnectsWithEccentricity extends IFC4.IfcRelConnectsStructuralMember {
		ConnectionConstraint: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingStructuralMember: (Handle<IFC4.IfcStructuralMember> | IFC4.IfcStructuralMember) , RelatedStructuralConnection: (Handle<IFC4.IfcStructuralConnection> | IFC4.IfcStructuralConnection) , AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null, AdditionalConditions: (Handle<IFC4.IfcStructuralConnectionCondition> | IFC4.IfcStructuralConnectionCondition) | null, SupportedLength: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, ConditionCoordinateSystem: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, ConnectionConstraint: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem);
			this.ConnectionConstraint = ConnectionConstraint;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsWithEccentricity
		{
			return new IfcRelConnectsWithEccentricity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingStructuralMember, this.RelatedStructuralConnection, this.AppliedCondition, this.AdditionalConditions, this.SupportedLength, this.ConditionCoordinateSystem, this.ConnectionConstraint);
			return args;
		}
	}
	export class IfcRelConnectsWithRealizingElements extends IFC4.IfcRelConnectsElements {
		RealizingElements: (Handle<IFC4.IfcElement> | IFC4.IfcElement)[] ;
		ConnectionType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RealizingElements: (Handle<IFC4.IfcElement> | IFC4.IfcElement)[] , ConnectionType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement);
			this.RealizingElements = RealizingElements;
			this.ConnectionType = ConnectionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsWithRealizingElements
		{
			return new IfcRelConnectsWithRealizingElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ConnectionGeometry, this.RelatingElement, this.RelatedElement, this.RealizingElements, this.ConnectionType);
			return args;
		}
	}
	export class IfcRelContainedInSpatialStructure extends IFC4.IfcRelConnects {
		RelatedElements: (Handle<IFC4.IfcProduct> | IFC4.IfcProduct)[] ;
		RelatingStructure: (Handle<IFC4.IfcSpatialElement> | IFC4.IfcSpatialElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedElements: (Handle<IFC4.IfcProduct> | IFC4.IfcProduct)[] , RelatingStructure: (Handle<IFC4.IfcSpatialElement> | IFC4.IfcSpatialElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelContainedInSpatialStructure
		{
			return new IfcRelContainedInSpatialStructure(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedElements, this.RelatingStructure);
			return args;
		}
	}
	export class IfcRelCoversBldgElements extends IFC4.IfcRelConnects {
		RelatingBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		RelatedCoverings: (Handle<IFC4.IfcCovering> | IFC4.IfcCovering)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedCoverings: (Handle<IFC4.IfcCovering> | IFC4.IfcCovering)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedCoverings = RelatedCoverings;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelCoversBldgElements
		{
			return new IfcRelCoversBldgElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingBuildingElement, this.RelatedCoverings);
			return args;
		}
	}
	export class IfcRelCoversSpaces extends IFC4.IfcRelConnects {
		RelatingSpace: (Handle<IFC4.IfcSpace> | IFC4.IfcSpace) ;
		RelatedCoverings: (Handle<IFC4.IfcCovering> | IFC4.IfcCovering)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingSpace: (Handle<IFC4.IfcSpace> | IFC4.IfcSpace) , RelatedCoverings: (Handle<IFC4.IfcCovering> | IFC4.IfcCovering)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingSpace = RelatingSpace;
			this.RelatedCoverings = RelatedCoverings;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelCoversSpaces
		{
			return new IfcRelCoversSpaces(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSpace, this.RelatedCoverings);
			return args;
		}
	}
	export class IfcRelDeclares extends IFC4.IfcRelationship {
		RelatingContext: (Handle<IFC4.IfcContext> | IFC4.IfcContext) ;
		RelatedDefinitions: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingContext: (Handle<IFC4.IfcContext> | IFC4.IfcContext) , RelatedDefinitions: (Handle<IFC4.IfcDefinitionSelect> | IFC4.IfcDefinitionSelect)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingContext = RelatingContext;
			this.RelatedDefinitions = RelatedDefinitions;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDeclares
		{
			return new IfcRelDeclares(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingContext, this.RelatedDefinitions);
			return args;
		}
	}
	export class IfcRelDecomposes extends IFC4.IfcRelationship {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDecomposes
		{
			return new IfcRelDecomposes(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcRelDefines extends IFC4.IfcRelationship {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefines
		{
			return new IfcRelDefines(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description);
			return args;
		}
	}
	export class IfcRelDefinesByObject extends IFC4.IfcRelDefines {
		RelatedObjects: (Handle<IFC4.IfcObject> | IFC4.IfcObject)[] ;
		RelatingObject: (Handle<IFC4.IfcObject> | IFC4.IfcObject) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObject> | IFC4.IfcObject)[] , RelatingObject: (Handle<IFC4.IfcObject> | IFC4.IfcObject) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
			this.RelatingObject = RelatingObject;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByObject
		{
			return new IfcRelDefinesByObject(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingObject);
			return args;
		}
	}
	export class IfcRelDefinesByProperties extends IFC4.IfcRelDefines {
		RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] ;
		RelatingPropertyDefinition: (Handle<IFC4.IfcPropertySetDefinitionSelect> | IFC4.IfcPropertySetDefinitionSelect) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] , RelatingPropertyDefinition: (Handle<IFC4.IfcPropertySetDefinitionSelect> | IFC4.IfcPropertySetDefinitionSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
			this.RelatingPropertyDefinition = RelatingPropertyDefinition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByProperties
		{
			return new IfcRelDefinesByProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingPropertyDefinition);
			return args;
		}
	}
	export class IfcRelDefinesByTemplate extends IFC4.IfcRelDefines {
		RelatedPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] ;
		RelatingTemplate: (Handle<IFC4.IfcPropertySetTemplate> | IFC4.IfcPropertySetTemplate) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] , RelatingTemplate: (Handle<IFC4.IfcPropertySetTemplate> | IFC4.IfcPropertySetTemplate) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedPropertySets = RelatedPropertySets;
			this.RelatingTemplate = RelatingTemplate;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByTemplate
		{
			return new IfcRelDefinesByTemplate(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedPropertySets, this.RelatingTemplate);
			return args;
		}
	}
	export class IfcRelDefinesByType extends IFC4.IfcRelDefines {
		RelatedObjects: (Handle<IFC4.IfcObject> | IFC4.IfcObject)[] ;
		RelatingType: (Handle<IFC4.IfcTypeObject> | IFC4.IfcTypeObject) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedObjects: (Handle<IFC4.IfcObject> | IFC4.IfcObject)[] , RelatingType: (Handle<IFC4.IfcTypeObject> | IFC4.IfcTypeObject) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedObjects = RelatedObjects;
			this.RelatingType = RelatingType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByType
		{
			return new IfcRelDefinesByType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedObjects, this.RelatingType);
			return args;
		}
	}
	export class IfcRelFillsElement extends IFC4.IfcRelConnects {
		RelatingOpeningElement: (Handle<IFC4.IfcOpeningElement> | IFC4.IfcOpeningElement) ;
		RelatedBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingOpeningElement: (Handle<IFC4.IfcOpeningElement> | IFC4.IfcOpeningElement) , RelatedBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingOpeningElement = RelatingOpeningElement;
			this.RelatedBuildingElement = RelatedBuildingElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelFillsElement
		{
			return new IfcRelFillsElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingOpeningElement, this.RelatedBuildingElement);
			return args;
		}
	}
	export class IfcRelFlowControlElements extends IFC4.IfcRelConnects {
		RelatedControlElements: (Handle<IFC4.IfcDistributionControlElement> | IFC4.IfcDistributionControlElement)[] ;
		RelatingFlowElement: (Handle<IFC4.IfcDistributionFlowElement> | IFC4.IfcDistributionFlowElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedControlElements: (Handle<IFC4.IfcDistributionControlElement> | IFC4.IfcDistributionControlElement)[] , RelatingFlowElement: (Handle<IFC4.IfcDistributionFlowElement> | IFC4.IfcDistributionFlowElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedControlElements = RelatedControlElements;
			this.RelatingFlowElement = RelatingFlowElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelFlowControlElements
		{
			return new IfcRelFlowControlElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedControlElements, this.RelatingFlowElement);
			return args;
		}
	}
	export class IfcRelInterferesElements extends IFC4.IfcRelConnects {
		RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		RelatedElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		InterferenceGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null;
		InterferenceType: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		ImpliedOrder: boolean ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , InterferenceGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, InterferenceType: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, ImpliedOrder: boolean )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
			this.InterferenceGeometry = InterferenceGeometry;
			this.InterferenceType = InterferenceType;
			this.ImpliedOrder = ImpliedOrder;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelInterferesElements
		{
			return new IfcRelInterferesElements(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingElement, this.RelatedElement, this.InterferenceGeometry, this.InterferenceType, this.ImpliedOrder);
			return args;
		}
	}
	export class IfcRelNests extends IFC4.IfcRelDecomposes {
		RelatingObject: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition) ;
		RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingObject: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition) , RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelNests
		{
			return new IfcRelNests(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingObject, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRelProjectsElement extends IFC4.IfcRelDecomposes {
		RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		RelatedFeatureElement: (Handle<IFC4.IfcFeatureElementAddition> | IFC4.IfcFeatureElementAddition) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedFeatureElement: (Handle<IFC4.IfcFeatureElementAddition> | IFC4.IfcFeatureElementAddition) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingElement = RelatingElement;
			this.RelatedFeatureElement = RelatedFeatureElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelProjectsElement
		{
			return new IfcRelProjectsElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingElement, this.RelatedFeatureElement);
			return args;
		}
	}
	export class IfcRelReferencedInSpatialStructure extends IFC4.IfcRelConnects {
		RelatedElements: (Handle<IFC4.IfcProduct> | IFC4.IfcProduct)[] ;
		RelatingStructure: (Handle<IFC4.IfcSpatialElement> | IFC4.IfcSpatialElement) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatedElements: (Handle<IFC4.IfcProduct> | IFC4.IfcProduct)[] , RelatingStructure: (Handle<IFC4.IfcSpatialElement> | IFC4.IfcSpatialElement) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelReferencedInSpatialStructure
		{
			return new IfcRelReferencedInSpatialStructure(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatedElements, this.RelatingStructure);
			return args;
		}
	}
	export class IfcRelSequence extends IFC4.IfcRelConnects {
		RelatingProcess: (Handle<IFC4.IfcProcess> | IFC4.IfcProcess) ;
		RelatedProcess: (Handle<IFC4.IfcProcess> | IFC4.IfcProcess) ;
		TimeLag: (Handle<IFC4.IfcLagTime> | IFC4.IfcLagTime) | null;
		SequenceType: (Handle<IFC4.IfcSequenceEnum> | IFC4.IfcSequenceEnum) | null;
		UserDefinedSequenceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingProcess: (Handle<IFC4.IfcProcess> | IFC4.IfcProcess) , RelatedProcess: (Handle<IFC4.IfcProcess> | IFC4.IfcProcess) , TimeLag: (Handle<IFC4.IfcLagTime> | IFC4.IfcLagTime) | null, SequenceType: (Handle<IFC4.IfcSequenceEnum> | IFC4.IfcSequenceEnum) | null, UserDefinedSequenceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingProcess = RelatingProcess;
			this.RelatedProcess = RelatedProcess;
			this.TimeLag = TimeLag;
			this.SequenceType = SequenceType;
			this.UserDefinedSequenceType = UserDefinedSequenceType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSequence
		{
			return new IfcRelSequence(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingProcess, this.RelatedProcess, this.TimeLag, this.SequenceType, this.UserDefinedSequenceType);
			return args;
		}
	}
	export class IfcRelServicesBuildings extends IFC4.IfcRelConnects {
		RelatingSystem: (Handle<IFC4.IfcSystem> | IFC4.IfcSystem) ;
		RelatedBuildings: (Handle<IFC4.IfcSpatialElement> | IFC4.IfcSpatialElement)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingSystem: (Handle<IFC4.IfcSystem> | IFC4.IfcSystem) , RelatedBuildings: (Handle<IFC4.IfcSpatialElement> | IFC4.IfcSpatialElement)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingSystem = RelatingSystem;
			this.RelatedBuildings = RelatedBuildings;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelServicesBuildings
		{
			return new IfcRelServicesBuildings(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSystem, this.RelatedBuildings);
			return args;
		}
	}
	export class IfcRelSpaceBoundary extends IFC4.IfcRelConnects {
		RelatingSpace: (Handle<IFC4.IfcSpaceBoundarySelect> | IFC4.IfcSpaceBoundarySelect) ;
		RelatedBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null;
		PhysicalOrVirtualBoundary: (Handle<IFC4.IfcPhysicalOrVirtualEnum> | IFC4.IfcPhysicalOrVirtualEnum) ;
		InternalOrExternalBoundary: (Handle<IFC4.IfcInternalOrExternalEnum> | IFC4.IfcInternalOrExternalEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingSpace: (Handle<IFC4.IfcSpaceBoundarySelect> | IFC4.IfcSpaceBoundarySelect) , RelatedBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, PhysicalOrVirtualBoundary: (Handle<IFC4.IfcPhysicalOrVirtualEnum> | IFC4.IfcPhysicalOrVirtualEnum) , InternalOrExternalBoundary: (Handle<IFC4.IfcInternalOrExternalEnum> | IFC4.IfcInternalOrExternalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary
		{
			return new IfcRelSpaceBoundary(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSpace, this.RelatedBuildingElement, this.ConnectionGeometry, this.PhysicalOrVirtualBoundary, this.InternalOrExternalBoundary);
			return args;
		}
	}
	export class IfcRelSpaceBoundary1stLevel extends IFC4.IfcRelSpaceBoundary {
		ParentBoundary: (Handle<IFC4.IfcRelSpaceBoundary1stLevel> | IFC4.IfcRelSpaceBoundary1stLevel) | null;
		InnerBoundaries!: (Handle<IFC4.IfcRelSpaceBoundary1stLevel> | IFC4.IfcRelSpaceBoundary1stLevel)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingSpace: (Handle<IFC4.IfcSpaceBoundarySelect> | IFC4.IfcSpaceBoundarySelect) , RelatedBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, PhysicalOrVirtualBoundary: (Handle<IFC4.IfcPhysicalOrVirtualEnum> | IFC4.IfcPhysicalOrVirtualEnum) , InternalOrExternalBoundary: (Handle<IFC4.IfcInternalOrExternalEnum> | IFC4.IfcInternalOrExternalEnum) , ParentBoundary: (Handle<IFC4.IfcRelSpaceBoundary1stLevel> | IFC4.IfcRelSpaceBoundary1stLevel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary);
			this.ParentBoundary = ParentBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary1stLevel
		{
			return new IfcRelSpaceBoundary1stLevel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSpace, this.RelatedBuildingElement, this.ConnectionGeometry, this.PhysicalOrVirtualBoundary, this.InternalOrExternalBoundary, this.ParentBoundary);
			return args;
		}
	}
	export class IfcRelSpaceBoundary2ndLevel extends IFC4.IfcRelSpaceBoundary1stLevel {
		CorrespondingBoundary: (Handle<IFC4.IfcRelSpaceBoundary2ndLevel> | IFC4.IfcRelSpaceBoundary2ndLevel) | null;
		Corresponds!: (Handle<IFC4.IfcRelSpaceBoundary2ndLevel> | IFC4.IfcRelSpaceBoundary2ndLevel)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingSpace: (Handle<IFC4.IfcSpaceBoundarySelect> | IFC4.IfcSpaceBoundarySelect) , RelatedBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , ConnectionGeometry: (Handle<IFC4.IfcConnectionGeometry> | IFC4.IfcConnectionGeometry) | null, PhysicalOrVirtualBoundary: (Handle<IFC4.IfcPhysicalOrVirtualEnum> | IFC4.IfcPhysicalOrVirtualEnum) , InternalOrExternalBoundary: (Handle<IFC4.IfcInternalOrExternalEnum> | IFC4.IfcInternalOrExternalEnum) , ParentBoundary: (Handle<IFC4.IfcRelSpaceBoundary1stLevel> | IFC4.IfcRelSpaceBoundary1stLevel) | null, CorrespondingBoundary: (Handle<IFC4.IfcRelSpaceBoundary2ndLevel> | IFC4.IfcRelSpaceBoundary2ndLevel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary, ParentBoundary);
			this.CorrespondingBoundary = CorrespondingBoundary;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary2ndLevel
		{
			return new IfcRelSpaceBoundary2ndLevel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingSpace, this.RelatedBuildingElement, this.ConnectionGeometry, this.PhysicalOrVirtualBoundary, this.InternalOrExternalBoundary, this.ParentBoundary, this.CorrespondingBoundary);
			return args;
		}
	}
	export class IfcRelVoidsElement extends IFC4.IfcRelDecomposes {
		RelatingBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) ;
		RelatedOpeningElement: (Handle<IFC4.IfcFeatureElementSubtraction> | IFC4.IfcFeatureElementSubtraction) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingBuildingElement: (Handle<IFC4.IfcElement> | IFC4.IfcElement) , RelatedOpeningElement: (Handle<IFC4.IfcFeatureElementSubtraction> | IFC4.IfcFeatureElementSubtraction) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedOpeningElement = RelatedOpeningElement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelVoidsElement
		{
			return new IfcRelVoidsElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingBuildingElement, this.RelatedOpeningElement);
			return args;
		}
	}
	export class IfcReparametrisedCompositeCurveSegment extends IFC4.IfcCompositeCurveSegment {
		ParamLength: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) ;
		constructor(expressID: number, type: number, Transition: (Handle<IFC4.IfcTransitionCode> | IFC4.IfcTransitionCode) , SameSense: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , ParentCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , ParamLength: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) )
		{
			super(expressID,type,Transition, SameSense, ParentCurve);
			this.ParamLength = ParamLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReparametrisedCompositeCurveSegment
		{
			return new IfcReparametrisedCompositeCurveSegment(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Transition, this.SameSense, this.ParentCurve, this.ParamLength);
			return args;
		}
	}
	export class IfcResource extends IFC4.IfcObject {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		ResourceOf!: (Handle<IFC4.IfcRelAssignsToResource> | IFC4.IfcRelAssignsToResource)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Identification = Identification;
			this.LongDescription = LongDescription;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcResource
		{
			return new IfcResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription);
			return args;
		}
	}
	export class IfcRevolvedAreaSolid extends IFC4.IfcSweptAreaSolid {
		Axis: (Handle<IFC4.IfcAxis1Placement> | IFC4.IfcAxis1Placement) ;
		Angle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, Axis: (Handle<IFC4.IfcAxis1Placement> | IFC4.IfcAxis1Placement) , Angle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) )
		{
			super(expressID,type,SweptArea, Position);
			this.Axis = Axis;
			this.Angle = Angle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRevolvedAreaSolid
		{
			return new IfcRevolvedAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.Axis, this.Angle);
			return args;
		}
	}
	export class IfcRevolvedAreaSolidTapered extends IFC4.IfcRevolvedAreaSolid {
		EndSweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, Axis: (Handle<IFC4.IfcAxis1Placement> | IFC4.IfcAxis1Placement) , Angle: (Handle<IFC4.IfcPlaneAngleMeasure> | IFC4.IfcPlaneAngleMeasure) , EndSweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) )
		{
			super(expressID,type,SweptArea, Position, Axis, Angle);
			this.EndSweptArea = EndSweptArea;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRevolvedAreaSolidTapered
		{
			return new IfcRevolvedAreaSolidTapered(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.Axis, this.Angle, this.EndSweptArea);
			return args;
		}
	}
	export class IfcRightCircularCone extends IFC4.IfcCsgPrimitive3D {
		Height: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		BottomRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , Height: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , BottomRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Height = Height;
			this.BottomRadius = BottomRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRightCircularCone
		{
			return new IfcRightCircularCone(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Height, this.BottomRadius);
			return args;
		}
	}
	export class IfcRightCircularCylinder extends IFC4.IfcCsgPrimitive3D {
		Height: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , Height: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Height = Height;
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRightCircularCylinder
		{
			return new IfcRightCircularCylinder(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Height, this.Radius);
			return args;
		}
	}
	export class IfcSimplePropertyTemplate extends IFC4.IfcPropertyTemplate {
		TemplateType: (Handle<IFC4.IfcSimplePropertyTemplateTypeEnum> | IFC4.IfcSimplePropertyTemplateTypeEnum) | null;
		PrimaryMeasureType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		SecondaryMeasureType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Enumerators: (Handle<IFC4.IfcPropertyEnumeration> | IFC4.IfcPropertyEnumeration) | null;
		PrimaryUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		SecondaryUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null;
		Expression: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		AccessState: (Handle<IFC4.IfcStateEnum> | IFC4.IfcStateEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, TemplateType: (Handle<IFC4.IfcSimplePropertyTemplateTypeEnum> | IFC4.IfcSimplePropertyTemplateTypeEnum) | null, PrimaryMeasureType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, SecondaryMeasureType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Enumerators: (Handle<IFC4.IfcPropertyEnumeration> | IFC4.IfcPropertyEnumeration) | null, PrimaryUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, SecondaryUnit: (Handle<IFC4.IfcUnit> | IFC4.IfcUnit) | null, Expression: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, AccessState: (Handle<IFC4.IfcStateEnum> | IFC4.IfcStateEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.TemplateType = TemplateType;
			this.PrimaryMeasureType = PrimaryMeasureType;
			this.SecondaryMeasureType = SecondaryMeasureType;
			this.Enumerators = Enumerators;
			this.PrimaryUnit = PrimaryUnit;
			this.SecondaryUnit = SecondaryUnit;
			this.Expression = Expression;
			this.AccessState = AccessState;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSimplePropertyTemplate
		{
			return new IfcSimplePropertyTemplate(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.TemplateType, this.PrimaryMeasureType, this.SecondaryMeasureType, this.Enumerators, this.PrimaryUnit, this.SecondaryUnit, this.Expression, this.AccessState);
			return args;
		}
	}
	export class IfcSpatialElement extends IFC4.IfcProduct {
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		ContainsElements!: (Handle<IFC4.IfcRelContainedInSpatialStructure> | IFC4.IfcRelContainedInSpatialStructure)[] | null;
		ServicedBySystems!: (Handle<IFC4.IfcRelServicesBuildings> | IFC4.IfcRelServicesBuildings)[] | null;
		ReferencesElements!: (Handle<IFC4.IfcRelReferencedInSpatialStructure> | IFC4.IfcRelReferencedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.LongName = LongName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialElement
		{
			return new IfcSpatialElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName);
			return args;
		}
	}
	export class IfcSpatialElementType extends IFC4.IfcTypeProduct {
		ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
			this.ElementType = ElementType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialElementType
		{
			return new IfcSpatialElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcSpatialStructureElement extends IFC4.IfcSpatialElement {
		CompositionType: (Handle<IFC4.IfcElementCompositionEnum> | IFC4.IfcElementCompositionEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CompositionType: (Handle<IFC4.IfcElementCompositionEnum> | IFC4.IfcElementCompositionEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
			this.CompositionType = CompositionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialStructureElement
		{
			return new IfcSpatialStructureElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType);
			return args;
		}
	}
	export class IfcSpatialStructureElementType extends IFC4.IfcSpatialElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialStructureElementType
		{
			return new IfcSpatialStructureElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcSpatialZone extends IFC4.IfcSpatialElement {
		PredefinedType: (Handle<IFC4.IfcSpatialZoneTypeEnum> | IFC4.IfcSpatialZoneTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSpatialZoneTypeEnum> | IFC4.IfcSpatialZoneTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialZone
		{
			return new IfcSpatialZone(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.PredefinedType);
			return args;
		}
	}
	export class IfcSpatialZoneType extends IFC4.IfcSpatialElementType {
		PredefinedType: (Handle<IFC4.IfcSpatialZoneTypeEnum> | IFC4.IfcSpatialZoneTypeEnum) ;
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSpatialZoneTypeEnum> | IFC4.IfcSpatialZoneTypeEnum) , LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialZoneType
		{
			return new IfcSpatialZoneType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.LongName);
			return args;
		}
	}
	export class IfcSphere extends IFC4.IfcCsgPrimitive3D {
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSphere
		{
			return new IfcSphere(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Radius);
			return args;
		}
	}
	export class IfcSphericalSurface extends IFC4.IfcElementarySurface {
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSphericalSurface
		{
			return new IfcSphericalSurface(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Radius);
			return args;
		}
	}
	export class IfcStructuralActivity extends IFC4.IfcProduct {
		AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) ;
		GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) ;
		AssignedToStructuralItem!: (Handle<IFC4.IfcRelConnectsStructuralActivity> | IFC4.IfcRelConnectsStructuralActivity)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralActivity
		{
			return new IfcStructuralActivity(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcStructuralItem extends IFC4.IfcProduct {
		AssignedStructuralActivity!: (Handle<IFC4.IfcRelConnectsStructuralActivity> | IFC4.IfcRelConnectsStructuralActivity)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralItem
		{
			return new IfcStructuralItem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcStructuralMember extends IFC4.IfcStructuralItem {
		ConnectedBy!: (Handle<IFC4.IfcRelConnectsStructuralMember> | IFC4.IfcRelConnectsStructuralMember)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralMember
		{
			return new IfcStructuralMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcStructuralReaction extends IFC4.IfcStructuralActivity {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralReaction
		{
			return new IfcStructuralReaction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcStructuralSurfaceMember extends IFC4.IfcStructuralMember {
		PredefinedType: (Handle<IFC4.IfcStructuralSurfaceMemberTypeEnum> | IFC4.IfcStructuralSurfaceMemberTypeEnum) ;
		Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC4.IfcStructuralSurfaceMemberTypeEnum> | IFC4.IfcStructuralSurfaceMemberTypeEnum) , Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceMember
		{
			return new IfcStructuralSurfaceMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType, this.Thickness);
			return args;
		}
	}
	export class IfcStructuralSurfaceMemberVarying extends IFC4.IfcStructuralSurfaceMember {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC4.IfcStructuralSurfaceMemberTypeEnum> | IFC4.IfcStructuralSurfaceMemberTypeEnum) , Thickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceMemberVarying
		{
			return new IfcStructuralSurfaceMemberVarying(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType, this.Thickness);
			return args;
		}
	}
	export class IfcStructuralSurfaceReaction extends IFC4.IfcStructuralReaction {
		PredefinedType: (Handle<IFC4.IfcStructuralSurfaceActivityTypeEnum> | IFC4.IfcStructuralSurfaceActivityTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , PredefinedType: (Handle<IFC4.IfcStructuralSurfaceActivityTypeEnum> | IFC4.IfcStructuralSurfaceActivityTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceReaction
		{
			return new IfcStructuralSurfaceReaction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.PredefinedType);
			return args;
		}
	}
	export class IfcSubContractResourceType extends IFC4.IfcConstructionResourceType {
		PredefinedType: (Handle<IFC4.IfcSubContractResourceTypeEnum> | IFC4.IfcSubContractResourceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcSubContractResourceTypeEnum> | IFC4.IfcSubContractResourceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSubContractResourceType
		{
			return new IfcSubContractResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcSurfaceCurve extends IFC4.IfcCurve {
		Curve3D: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		AssociatedGeometry: (Handle<IFC4.IfcPcurve> | IFC4.IfcPcurve)[] ;
		MasterRepresentation: (Handle<IFC4.IfcPreferredSurfaceCurveRepresentation> | IFC4.IfcPreferredSurfaceCurveRepresentation) ;
		constructor(expressID: number, type: number, Curve3D: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , AssociatedGeometry: (Handle<IFC4.IfcPcurve> | IFC4.IfcPcurve)[] , MasterRepresentation: (Handle<IFC4.IfcPreferredSurfaceCurveRepresentation> | IFC4.IfcPreferredSurfaceCurveRepresentation) )
		{
			super(expressID,type);
			this.Curve3D = Curve3D;
			this.AssociatedGeometry = AssociatedGeometry;
			this.MasterRepresentation = MasterRepresentation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceCurve
		{
			return new IfcSurfaceCurve(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Curve3D, this.AssociatedGeometry, this.MasterRepresentation);
			return args;
		}
	}
	export class IfcSurfaceCurveSweptAreaSolid extends IFC4.IfcSweptAreaSolid {
		Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null;
		EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null;
		ReferenceSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) ;
		constructor(expressID: number, type: number, SweptArea: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, Directrix: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , StartParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, EndParam: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue) | null, ReferenceSurface: (Handle<IFC4.IfcSurface> | IFC4.IfcSurface) )
		{
			super(expressID,type,SweptArea, Position);
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.ReferenceSurface = ReferenceSurface;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceCurveSweptAreaSolid
		{
			return new IfcSurfaceCurveSweptAreaSolid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptArea, this.Position, this.Directrix, this.StartParam, this.EndParam, this.ReferenceSurface);
			return args;
		}
	}
	export class IfcSurfaceOfLinearExtrusion extends IFC4.IfcSweptSurface {
		ExtrudedDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		Depth: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) ;
		constructor(expressID: number, type: number, SweptCurve: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, ExtrudedDirection: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) , Depth: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) )
		{
			super(expressID,type,SweptCurve, Position);
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceOfLinearExtrusion
		{
			return new IfcSurfaceOfLinearExtrusion(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptCurve, this.Position, this.ExtrudedDirection, this.Depth);
			return args;
		}
	}
	export class IfcSurfaceOfRevolution extends IFC4.IfcSweptSurface {
		AxisPosition: (Handle<IFC4.IfcAxis1Placement> | IFC4.IfcAxis1Placement) ;
		constructor(expressID: number, type: number, SweptCurve: (Handle<IFC4.IfcProfileDef> | IFC4.IfcProfileDef) , Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, AxisPosition: (Handle<IFC4.IfcAxis1Placement> | IFC4.IfcAxis1Placement) )
		{
			super(expressID,type,SweptCurve, Position);
			this.AxisPosition = AxisPosition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceOfRevolution
		{
			return new IfcSurfaceOfRevolution(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.SweptCurve, this.Position, this.AxisPosition);
			return args;
		}
	}
	export class IfcSystemFurnitureElementType extends IFC4.IfcFurnishingElementType {
		PredefinedType: (Handle<IFC4.IfcSystemFurnitureElementTypeEnum> | IFC4.IfcSystemFurnitureElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSystemFurnitureElementTypeEnum> | IFC4.IfcSystemFurnitureElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSystemFurnitureElementType
		{
			return new IfcSystemFurnitureElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTask extends IFC4.IfcProcess {
		Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		WorkMethod: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		IsMilestone: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		TaskTime: (Handle<IFC4.IfcTaskTime> | IFC4.IfcTaskTime) | null;
		PredefinedType: (Handle<IFC4.IfcTaskTypeEnum> | IFC4.IfcTaskTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, WorkMethod: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, IsMilestone: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , Priority: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, TaskTime: (Handle<IFC4.IfcTaskTime> | IFC4.IfcTaskTime) | null, PredefinedType: (Handle<IFC4.IfcTaskTypeEnum> | IFC4.IfcTaskTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription);
			this.Status = Status;
			this.WorkMethod = WorkMethod;
			this.IsMilestone = IsMilestone;
			this.Priority = Priority;
			this.TaskTime = TaskTime;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTask
		{
			return new IfcTask(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Status, this.WorkMethod, this.IsMilestone, this.Priority, this.TaskTime, this.PredefinedType);
			return args;
		}
	}
	export class IfcTaskType extends IFC4.IfcTypeProcess {
		PredefinedType: (Handle<IFC4.IfcTaskTypeEnum> | IFC4.IfcTaskTypeEnum) ;
		WorkMethod: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ProcessType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTaskTypeEnum> | IFC4.IfcTaskTypeEnum) , WorkMethod: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType);
			this.PredefinedType = PredefinedType;
			this.WorkMethod = WorkMethod;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTaskType
		{
			return new IfcTaskType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ProcessType, this.PredefinedType, this.WorkMethod);
			return args;
		}
	}
	export class IfcTessellatedFaceSet extends IFC4.IfcTessellatedItem {
		Coordinates: (Handle<IFC4.IfcCartesianPointList3D> | IFC4.IfcCartesianPointList3D) ;
		HasColours!: (Handle<IFC4.IfcIndexedColourMap> | IFC4.IfcIndexedColourMap)[] | null;
		HasTextures!: (Handle<IFC4.IfcIndexedTextureMap> | IFC4.IfcIndexedTextureMap)[] | null;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC4.IfcCartesianPointList3D> | IFC4.IfcCartesianPointList3D) )
		{
			super(expressID,type);
			this.Coordinates = Coordinates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTessellatedFaceSet
		{
			return new IfcTessellatedFaceSet(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates);
			return args;
		}
	}
	export class IfcToroidalSurface extends IFC4.IfcElementarySurface {
		MajorRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		MinorRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , MajorRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , MinorRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.MajorRadius = MajorRadius;
			this.MinorRadius = MinorRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcToroidalSurface
		{
			return new IfcToroidalSurface(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.MajorRadius, this.MinorRadius);
			return args;
		}
	}
	export class IfcTransportElementType extends IFC4.IfcElementType {
		PredefinedType: (Handle<IFC4.IfcTransportElementTypeEnum> | IFC4.IfcTransportElementTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTransportElementTypeEnum> | IFC4.IfcTransportElementTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransportElementType
		{
			return new IfcTransportElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTriangulatedFaceSet extends IFC4.IfcTessellatedFaceSet {
		Normals: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] | null;
		Closed: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		CoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] ;
		PnIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] | null;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC4.IfcCartesianPointList3D> | IFC4.IfcCartesianPointList3D) , Normals: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] | null, Closed: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, CoordIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] , PnIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] | null)
		{
			super(expressID,type,Coordinates);
			this.Normals = Normals;
			this.Closed = Closed;
			this.CoordIndex = CoordIndex;
			this.PnIndex = PnIndex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTriangulatedFaceSet
		{
			return new IfcTriangulatedFaceSet(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates, this.Normals, this.Closed, this.CoordIndex, this.PnIndex);
			return args;
		}
	}
	export class IfcWindowLiningProperties extends IFC4.IfcPreDefinedPropertySet {
		LiningDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		LiningThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		TransomThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		MullionThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		FirstTransomOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		SecondTransomOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		FirstMullionOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		SecondMullionOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null;
		LiningOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		LiningToPanelOffsetX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		LiningToPanelOffsetY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, LiningDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, LiningThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, TransomThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, MullionThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, FirstTransomOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, SecondTransomOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, FirstMullionOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, SecondMullionOffset: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null, LiningOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, LiningToPanelOffsetX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, LiningToPanelOffsetY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.TransomThickness = TransomThickness;
			this.MullionThickness = MullionThickness;
			this.FirstTransomOffset = FirstTransomOffset;
			this.SecondTransomOffset = SecondTransomOffset;
			this.FirstMullionOffset = FirstMullionOffset;
			this.SecondMullionOffset = SecondMullionOffset;
			this.ShapeAspectStyle = ShapeAspectStyle;
			this.LiningOffset = LiningOffset;
			this.LiningToPanelOffsetX = LiningToPanelOffsetX;
			this.LiningToPanelOffsetY = LiningToPanelOffsetY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowLiningProperties
		{
			return new IfcWindowLiningProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.LiningDepth, this.LiningThickness, this.TransomThickness, this.MullionThickness, this.FirstTransomOffset, this.SecondTransomOffset, this.FirstMullionOffset, this.SecondMullionOffset, this.ShapeAspectStyle, this.LiningOffset, this.LiningToPanelOffsetX, this.LiningToPanelOffsetY);
			return args;
		}
	}
	export class IfcWindowPanelProperties extends IFC4.IfcPreDefinedPropertySet {
		OperationType: (Handle<IFC4.IfcWindowPanelOperationEnum> | IFC4.IfcWindowPanelOperationEnum) ;
		PanelPosition: (Handle<IFC4.IfcWindowPanelPositionEnum> | IFC4.IfcWindowPanelPositionEnum) ;
		FrameDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		FrameThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, OperationType: (Handle<IFC4.IfcWindowPanelOperationEnum> | IFC4.IfcWindowPanelOperationEnum) , PanelPosition: (Handle<IFC4.IfcWindowPanelPositionEnum> | IFC4.IfcWindowPanelPositionEnum) , FrameDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, FrameThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowPanelProperties
		{
			return new IfcWindowPanelProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.OperationType, this.PanelPosition, this.FrameDepth, this.FrameThickness, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcActor extends IFC4.IfcObject {
		TheActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) ;
		IsActingUpon!: (Handle<IFC4.IfcRelAssignsToActor> | IFC4.IfcRelAssignsToActor)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TheActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.TheActor = TheActor;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActor
		{
			return new IfcActor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TheActor);
			return args;
		}
	}
	export class IfcAdvancedBrep extends IFC4.IfcManifoldSolidBrep {
		constructor(expressID: number, type: number, Outer: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell) )
		{
			super(expressID,type,Outer);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAdvancedBrep
		{
			return new IfcAdvancedBrep(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer);
			return args;
		}
	}
	export class IfcAdvancedBrepWithVoids extends IFC4.IfcAdvancedBrep {
		Voids: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell)[] ;
		constructor(expressID: number, type: number, Outer: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell) , Voids: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell)[] )
		{
			super(expressID,type,Outer);
			this.Voids = Voids;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAdvancedBrepWithVoids
		{
			return new IfcAdvancedBrepWithVoids(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer, this.Voids);
			return args;
		}
	}
	export class IfcAnnotation extends IFC4.IfcProduct {
		ContainedInStructure!: (Handle<IFC4.IfcRelContainedInSpatialStructure> | IFC4.IfcRelContainedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotation
		{
			return new IfcAnnotation(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcBSplineSurface extends IFC4.IfcBoundedSurface {
		UDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) ;
		VDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) ;
		ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] ;
		SurfaceForm: (Handle<IFC4.IfcBSplineSurfaceForm> | IFC4.IfcBSplineSurfaceForm) ;
		UClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		VClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		constructor(expressID: number, type: number, UDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , VDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] , SurfaceForm: (Handle<IFC4.IfcBSplineSurfaceForm> | IFC4.IfcBSplineSurfaceForm) , UClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , VClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type);
			this.UDegree = UDegree;
			this.VDegree = VDegree;
			this.ControlPointsList = ControlPointsList;
			this.SurfaceForm = SurfaceForm;
			this.UClosed = UClosed;
			this.VClosed = VClosed;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineSurface
		{
			return new IfcBSplineSurface(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.UDegree, this.VDegree, this.ControlPointsList, this.SurfaceForm, this.UClosed, this.VClosed, this.SelfIntersect);
			return args;
		}
	}
	export class IfcBSplineSurfaceWithKnots extends IFC4.IfcBSplineSurface {
		UMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] ;
		VMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] ;
		UKnots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] ;
		VKnots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] ;
		KnotSpec: (Handle<IFC4.IfcKnotType> | IFC4.IfcKnotType) ;
		constructor(expressID: number, type: number, UDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , VDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] , SurfaceForm: (Handle<IFC4.IfcBSplineSurfaceForm> | IFC4.IfcBSplineSurfaceForm) , UClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , VClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , UMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , VMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , UKnots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] , VKnots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] , KnotSpec: (Handle<IFC4.IfcKnotType> | IFC4.IfcKnotType) )
		{
			super(expressID,type,UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect);
			this.UMultiplicities = UMultiplicities;
			this.VMultiplicities = VMultiplicities;
			this.UKnots = UKnots;
			this.VKnots = VKnots;
			this.KnotSpec = KnotSpec;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineSurfaceWithKnots
		{
			return new IfcBSplineSurfaceWithKnots(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.UDegree, this.VDegree, this.ControlPointsList, this.SurfaceForm, this.UClosed, this.VClosed, this.SelfIntersect, this.UMultiplicities, this.VMultiplicities, this.UKnots, this.VKnots, this.KnotSpec);
			return args;
		}
	}
	export class IfcBlock extends IFC4.IfcCsgPrimitive3D {
		XLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		YLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		ZLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , XLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , YLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , ZLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.XLength = XLength;
			this.YLength = YLength;
			this.ZLength = ZLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBlock
		{
			return new IfcBlock(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.XLength, this.YLength, this.ZLength);
			return args;
		}
	}
	export class IfcBooleanClippingResult extends IFC4.IfcBooleanResult {
		constructor(expressID: number, type: number, Operator: (Handle<IFC4.IfcBooleanOperator> | IFC4.IfcBooleanOperator) , FirstOperand: (Handle<IFC4.IfcBooleanOperand> | IFC4.IfcBooleanOperand) , SecondOperand: (Handle<IFC4.IfcBooleanOperand> | IFC4.IfcBooleanOperand) )
		{
			super(expressID,type,Operator, FirstOperand, SecondOperand);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBooleanClippingResult
		{
			return new IfcBooleanClippingResult(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Operator, this.FirstOperand, this.SecondOperand);
			return args;
		}
	}
	export class IfcBoundedCurve extends IFC4.IfcCurve {
		constructor(expressID: number, type: number, )
		{
			super(expressID,type);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundedCurve
		{
			return new IfcBoundedCurve(expressID, type, );
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push();
			return args;
		}
	}
	export class IfcBuilding extends IFC4.IfcSpatialStructureElement {
		ElevationOfRefHeight: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		ElevationOfTerrain: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		BuildingAddress: (Handle<IFC4.IfcPostalAddress> | IFC4.IfcPostalAddress) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CompositionType: (Handle<IFC4.IfcElementCompositionEnum> | IFC4.IfcElementCompositionEnum) | null, ElevationOfRefHeight: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, ElevationOfTerrain: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, BuildingAddress: (Handle<IFC4.IfcPostalAddress> | IFC4.IfcPostalAddress) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.ElevationOfRefHeight = ElevationOfRefHeight;
			this.ElevationOfTerrain = ElevationOfTerrain;
			this.BuildingAddress = BuildingAddress;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuilding
		{
			return new IfcBuilding(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.ElevationOfRefHeight, this.ElevationOfTerrain, this.BuildingAddress);
			return args;
		}
	}
	export class IfcBuildingElementType extends IFC4.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementType
		{
			return new IfcBuildingElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcBuildingStorey extends IFC4.IfcSpatialStructureElement {
		Elevation: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CompositionType: (Handle<IFC4.IfcElementCompositionEnum> | IFC4.IfcElementCompositionEnum) | null, Elevation: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.Elevation = Elevation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingStorey
		{
			return new IfcBuildingStorey(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.Elevation);
			return args;
		}
	}
	export class IfcChimneyType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcChimneyTypeEnum> | IFC4.IfcChimneyTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcChimneyTypeEnum> | IFC4.IfcChimneyTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcChimneyType
		{
			return new IfcChimneyType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCircleHollowProfileDef extends IFC4.IfcCircleProfileDef {
		WallThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, ProfileType: (Handle<IFC4.IfcProfileTypeEnum> | IFC4.IfcProfileTypeEnum) , ProfileName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Position: (Handle<IFC4.IfcAxis2Placement2D> | IFC4.IfcAxis2Placement2D) | null, Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , WallThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,ProfileType, ProfileName, Position, Radius);
			this.WallThickness = WallThickness;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCircleHollowProfileDef
		{
			return new IfcCircleHollowProfileDef(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.ProfileType, this.ProfileName, this.Position, this.Radius, this.WallThickness);
			return args;
		}
	}
	export class IfcCivilElementType extends IFC4.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCivilElementType
		{
			return new IfcCivilElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcColumnType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcColumnTypeEnum> | IFC4.IfcColumnTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcColumnTypeEnum> | IFC4.IfcColumnTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColumnType
		{
			return new IfcColumnType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcComplexPropertyTemplate extends IFC4.IfcPropertyTemplate {
		UsageName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		TemplateType: (Handle<IFC4.IfcComplexPropertyTemplateTypeEnum> | IFC4.IfcComplexPropertyTemplateTypeEnum) | null;
		HasPropertyTemplates: (Handle<IFC4.IfcPropertyTemplate> | IFC4.IfcPropertyTemplate)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, UsageName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TemplateType: (Handle<IFC4.IfcComplexPropertyTemplateTypeEnum> | IFC4.IfcComplexPropertyTemplateTypeEnum) | null, HasPropertyTemplates: (Handle<IFC4.IfcPropertyTemplate> | IFC4.IfcPropertyTemplate)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.UsageName = UsageName;
			this.TemplateType = TemplateType;
			this.HasPropertyTemplates = HasPropertyTemplates;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcComplexPropertyTemplate
		{
			return new IfcComplexPropertyTemplate(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.UsageName, this.TemplateType, this.HasPropertyTemplates);
			return args;
		}
	}
	export class IfcCompositeCurve extends IFC4.IfcBoundedCurve {
		Segments: (Handle<IFC4.IfcCompositeCurveSegment> | IFC4.IfcCompositeCurveSegment)[] ;
		SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		constructor(expressID: number, type: number, Segments: (Handle<IFC4.IfcCompositeCurveSegment> | IFC4.IfcCompositeCurveSegment)[] , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type);
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurve
		{
			return new IfcCompositeCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcCompositeCurveOnSurface extends IFC4.IfcCompositeCurve {
		constructor(expressID: number, type: number, Segments: (Handle<IFC4.IfcCompositeCurveSegment> | IFC4.IfcCompositeCurveSegment)[] , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type,Segments, SelfIntersect);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurveOnSurface
		{
			return new IfcCompositeCurveOnSurface(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcConic extends IFC4.IfcCurve {
		Position: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) )
		{
			super(expressID,type);
			this.Position = Position;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConic
		{
			return new IfcConic(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position);
			return args;
		}
	}
	export class IfcConstructionEquipmentResourceType extends IFC4.IfcConstructionResourceType {
		PredefinedType: (Handle<IFC4.IfcConstructionEquipmentResourceTypeEnum> | IFC4.IfcConstructionEquipmentResourceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcConstructionEquipmentResourceTypeEnum> | IFC4.IfcConstructionEquipmentResourceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionEquipmentResourceType
		{
			return new IfcConstructionEquipmentResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcConstructionMaterialResourceType extends IFC4.IfcConstructionResourceType {
		PredefinedType: (Handle<IFC4.IfcConstructionMaterialResourceTypeEnum> | IFC4.IfcConstructionMaterialResourceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcConstructionMaterialResourceTypeEnum> | IFC4.IfcConstructionMaterialResourceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionMaterialResourceType
		{
			return new IfcConstructionMaterialResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcConstructionProductResourceType extends IFC4.IfcConstructionResourceType {
		PredefinedType: (Handle<IFC4.IfcConstructionProductResourceTypeEnum> | IFC4.IfcConstructionProductResourceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ResourceType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcConstructionProductResourceTypeEnum> | IFC4.IfcConstructionProductResourceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionProductResourceType
		{
			return new IfcConstructionProductResourceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.Identification, this.LongDescription, this.ResourceType, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcConstructionResource extends IFC4.IfcResource {
		Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null;
		BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null;
		BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription);
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionResource
		{
			return new IfcConstructionResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity);
			return args;
		}
	}
	export class IfcControl extends IFC4.IfcObject {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		Controls!: (Handle<IFC4.IfcRelAssignsToControl> | IFC4.IfcRelAssignsToControl)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Identification = Identification;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcControl
		{
			return new IfcControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification);
			return args;
		}
	}
	export class IfcCostItem extends IFC4.IfcControl {
		PredefinedType: (Handle<IFC4.IfcCostItemTypeEnum> | IFC4.IfcCostItemTypeEnum) | null;
		CostValues: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue)[] | null;
		CostQuantities: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCostItemTypeEnum> | IFC4.IfcCostItemTypeEnum) | null, CostValues: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue)[] | null, CostQuantities: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.PredefinedType = PredefinedType;
			this.CostValues = CostValues;
			this.CostQuantities = CostQuantities;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCostItem
		{
			return new IfcCostItem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.PredefinedType, this.CostValues, this.CostQuantities);
			return args;
		}
	}
	export class IfcCostSchedule extends IFC4.IfcControl {
		PredefinedType: (Handle<IFC4.IfcCostScheduleTypeEnum> | IFC4.IfcCostScheduleTypeEnum) | null;
		Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		SubmittedOn: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		UpdateDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCostScheduleTypeEnum> | IFC4.IfcCostScheduleTypeEnum) | null, Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, SubmittedOn: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, UpdateDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.SubmittedOn = SubmittedOn;
			this.UpdateDate = UpdateDate;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCostSchedule
		{
			return new IfcCostSchedule(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.PredefinedType, this.Status, this.SubmittedOn, this.UpdateDate);
			return args;
		}
	}
	export class IfcCoveringType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcCoveringTypeEnum> | IFC4.IfcCoveringTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCoveringTypeEnum> | IFC4.IfcCoveringTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoveringType
		{
			return new IfcCoveringType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCrewResource extends IFC4.IfcConstructionResource {
		PredefinedType: (Handle<IFC4.IfcCrewResourceTypeEnum> | IFC4.IfcCrewResourceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcCrewResourceTypeEnum> | IFC4.IfcCrewResourceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCrewResource
		{
			return new IfcCrewResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcCurtainWallType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcCurtainWallTypeEnum> | IFC4.IfcCurtainWallTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCurtainWallTypeEnum> | IFC4.IfcCurtainWallTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurtainWallType
		{
			return new IfcCurtainWallType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCylindricalSurface extends IFC4.IfcElementarySurface {
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCylindricalSurface
		{
			return new IfcCylindricalSurface(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Radius);
			return args;
		}
	}
	export class IfcDistributionElementType extends IFC4.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionElementType
		{
			return new IfcDistributionElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcDistributionFlowElementType extends IFC4.IfcDistributionElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionFlowElementType
		{
			return new IfcDistributionFlowElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcDoorLiningProperties extends IFC4.IfcPreDefinedPropertySet {
		LiningDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		LiningThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		ThresholdDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		ThresholdThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		TransomThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null;
		TransomOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		LiningOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		ThresholdOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		CasingThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		CasingDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null;
		LiningToPanelOffsetX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		LiningToPanelOffsetY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, LiningDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, LiningThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, ThresholdDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, ThresholdThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, TransomThickness: (Handle<IFC4.IfcNonNegativeLengthMeasure> | IFC4.IfcNonNegativeLengthMeasure) | null, TransomOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, LiningOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, ThresholdOffset: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, CasingThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, CasingDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null, LiningToPanelOffsetX: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, LiningToPanelOffsetY: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.ThresholdDepth = ThresholdDepth;
			this.ThresholdThickness = ThresholdThickness;
			this.TransomThickness = TransomThickness;
			this.TransomOffset = TransomOffset;
			this.LiningOffset = LiningOffset;
			this.ThresholdOffset = ThresholdOffset;
			this.CasingThickness = CasingThickness;
			this.CasingDepth = CasingDepth;
			this.ShapeAspectStyle = ShapeAspectStyle;
			this.LiningToPanelOffsetX = LiningToPanelOffsetX;
			this.LiningToPanelOffsetY = LiningToPanelOffsetY;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorLiningProperties
		{
			return new IfcDoorLiningProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.LiningDepth, this.LiningThickness, this.ThresholdDepth, this.ThresholdThickness, this.TransomThickness, this.TransomOffset, this.LiningOffset, this.ThresholdOffset, this.CasingThickness, this.CasingDepth, this.ShapeAspectStyle, this.LiningToPanelOffsetX, this.LiningToPanelOffsetY);
			return args;
		}
	}
	export class IfcDoorPanelProperties extends IFC4.IfcPreDefinedPropertySet {
		PanelDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PanelOperation: (Handle<IFC4.IfcDoorPanelOperationEnum> | IFC4.IfcDoorPanelOperationEnum) ;
		PanelWidth: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		PanelPosition: (Handle<IFC4.IfcDoorPanelPositionEnum> | IFC4.IfcDoorPanelPositionEnum) ;
		ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, PanelDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PanelOperation: (Handle<IFC4.IfcDoorPanelOperationEnum> | IFC4.IfcDoorPanelOperationEnum) , PanelWidth: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, PanelPosition: (Handle<IFC4.IfcDoorPanelPositionEnum> | IFC4.IfcDoorPanelPositionEnum) , ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.PanelDepth = PanelDepth;
			this.PanelOperation = PanelOperation;
			this.PanelWidth = PanelWidth;
			this.PanelPosition = PanelPosition;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorPanelProperties
		{
			return new IfcDoorPanelProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.PanelDepth, this.PanelOperation, this.PanelWidth, this.PanelPosition, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcDoorType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcDoorTypeEnum> | IFC4.IfcDoorTypeEnum) ;
		OperationType: (Handle<IFC4.IfcDoorTypeOperationEnum> | IFC4.IfcDoorTypeOperationEnum) ;
		ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		UserDefinedOperationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDoorTypeEnum> | IFC4.IfcDoorTypeEnum) , OperationType: (Handle<IFC4.IfcDoorTypeOperationEnum> | IFC4.IfcDoorTypeOperationEnum) , ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, UserDefinedOperationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorType
		{
			return new IfcDoorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.OperationType, this.ParameterTakesPrecedence, this.UserDefinedOperationType);
			return args;
		}
	}
	export class IfcDraughtingPreDefinedColour extends IFC4.IfcPreDefinedColour {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedColour
		{
			return new IfcDraughtingPreDefinedColour(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcDraughtingPreDefinedCurveFont extends IFC4.IfcPreDefinedCurveFont {
		constructor(expressID: number, type: number, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) )
		{
			super(expressID,type,Name);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedCurveFont
		{
			return new IfcDraughtingPreDefinedCurveFont(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Name);
			return args;
		}
	}
	export class IfcElement extends IFC4.IfcProduct {
		Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		FillsVoids!: (Handle<IFC4.IfcRelFillsElement> | IFC4.IfcRelFillsElement)[] | null;
		ConnectedTo!: (Handle<IFC4.IfcRelConnectsElements> | IFC4.IfcRelConnectsElements)[] | null;
		IsInterferedByElements!: (Handle<IFC4.IfcRelInterferesElements> | IFC4.IfcRelInterferesElements)[] | null;
		InterferesElements!: (Handle<IFC4.IfcRelInterferesElements> | IFC4.IfcRelInterferesElements)[] | null;
		HasProjections!: (Handle<IFC4.IfcRelProjectsElement> | IFC4.IfcRelProjectsElement)[] | null;
		ReferencedInStructures!: (Handle<IFC4.IfcRelReferencedInSpatialStructure> | IFC4.IfcRelReferencedInSpatialStructure)[] | null;
		HasOpenings!: (Handle<IFC4.IfcRelVoidsElement> | IFC4.IfcRelVoidsElement)[] | null;
		IsConnectionRealization!: (Handle<IFC4.IfcRelConnectsWithRealizingElements> | IFC4.IfcRelConnectsWithRealizingElements)[] | null;
		ProvidesBoundaries!: (Handle<IFC4.IfcRelSpaceBoundary> | IFC4.IfcRelSpaceBoundary)[] | null;
		ConnectedFrom!: (Handle<IFC4.IfcRelConnectsElements> | IFC4.IfcRelConnectsElements)[] | null;
		ContainedInStructure!: (Handle<IFC4.IfcRelContainedInSpatialStructure> | IFC4.IfcRelContainedInSpatialStructure)[] | null;
		HasCoverings!: (Handle<IFC4.IfcRelCoversBldgElements> | IFC4.IfcRelCoversBldgElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.Tag = Tag;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElement
		{
			return new IfcElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcElementAssembly extends IFC4.IfcElement {
		AssemblyPlace: (Handle<IFC4.IfcAssemblyPlaceEnum> | IFC4.IfcAssemblyPlaceEnum) | null;
		PredefinedType: (Handle<IFC4.IfcElementAssemblyTypeEnum> | IFC4.IfcElementAssemblyTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, AssemblyPlace: (Handle<IFC4.IfcAssemblyPlaceEnum> | IFC4.IfcAssemblyPlaceEnum) | null, PredefinedType: (Handle<IFC4.IfcElementAssemblyTypeEnum> | IFC4.IfcElementAssemblyTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementAssembly
		{
			return new IfcElementAssembly(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.AssemblyPlace, this.PredefinedType);
			return args;
		}
	}
	export class IfcElementAssemblyType extends IFC4.IfcElementType {
		PredefinedType: (Handle<IFC4.IfcElementAssemblyTypeEnum> | IFC4.IfcElementAssemblyTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElementAssemblyTypeEnum> | IFC4.IfcElementAssemblyTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementAssemblyType
		{
			return new IfcElementAssemblyType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElementComponent extends IFC4.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementComponent
		{
			return new IfcElementComponent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcElementComponentType extends IFC4.IfcElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElementComponentType
		{
			return new IfcElementComponentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcEllipse extends IFC4.IfcConic {
		SemiAxis1: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		SemiAxis2: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , SemiAxis1: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) , SemiAxis2: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEllipse
		{
			return new IfcEllipse(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.SemiAxis1, this.SemiAxis2);
			return args;
		}
	}
	export class IfcEnergyConversionDeviceType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyConversionDeviceType
		{
			return new IfcEnergyConversionDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcEngineType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcEngineTypeEnum> | IFC4.IfcEngineTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcEngineTypeEnum> | IFC4.IfcEngineTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEngineType
		{
			return new IfcEngineType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcEvaporativeCoolerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcEvaporativeCoolerTypeEnum> | IFC4.IfcEvaporativeCoolerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcEvaporativeCoolerTypeEnum> | IFC4.IfcEvaporativeCoolerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporativeCoolerType
		{
			return new IfcEvaporativeCoolerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcEvaporatorType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcEvaporatorTypeEnum> | IFC4.IfcEvaporatorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcEvaporatorTypeEnum> | IFC4.IfcEvaporatorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporatorType
		{
			return new IfcEvaporatorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcEvent extends IFC4.IfcProcess {
		PredefinedType: (Handle<IFC4.IfcEventTypeEnum> | IFC4.IfcEventTypeEnum) | null;
		EventTriggerType: (Handle<IFC4.IfcEventTriggerTypeEnum> | IFC4.IfcEventTriggerTypeEnum) | null;
		UserDefinedEventTriggerType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		EventOccurenceTime: (Handle<IFC4.IfcEventTime> | IFC4.IfcEventTime) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, PredefinedType: (Handle<IFC4.IfcEventTypeEnum> | IFC4.IfcEventTypeEnum) | null, EventTriggerType: (Handle<IFC4.IfcEventTriggerTypeEnum> | IFC4.IfcEventTriggerTypeEnum) | null, UserDefinedEventTriggerType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, EventOccurenceTime: (Handle<IFC4.IfcEventTime> | IFC4.IfcEventTime) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription);
			this.PredefinedType = PredefinedType;
			this.EventTriggerType = EventTriggerType;
			this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
			this.EventOccurenceTime = EventOccurenceTime;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvent
		{
			return new IfcEvent(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.PredefinedType, this.EventTriggerType, this.UserDefinedEventTriggerType, this.EventOccurenceTime);
			return args;
		}
	}
	export class IfcExternalSpatialStructureElement extends IFC4.IfcSpatialElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternalSpatialStructureElement
		{
			return new IfcExternalSpatialStructureElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName);
			return args;
		}
	}
	export class IfcFacetedBrep extends IFC4.IfcManifoldSolidBrep {
		constructor(expressID: number, type: number, Outer: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell) )
		{
			super(expressID,type,Outer);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFacetedBrep
		{
			return new IfcFacetedBrep(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer);
			return args;
		}
	}
	export class IfcFacetedBrepWithVoids extends IFC4.IfcFacetedBrep {
		Voids: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell)[] ;
		constructor(expressID: number, type: number, Outer: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell) , Voids: (Handle<IFC4.IfcClosedShell> | IFC4.IfcClosedShell)[] )
		{
			super(expressID,type,Outer);
			this.Voids = Voids;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFacetedBrepWithVoids
		{
			return new IfcFacetedBrepWithVoids(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Outer, this.Voids);
			return args;
		}
	}
	export class IfcFastener extends IFC4.IfcElementComponent {
		PredefinedType: (Handle<IFC4.IfcFastenerTypeEnum> | IFC4.IfcFastenerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFastenerTypeEnum> | IFC4.IfcFastenerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFastener
		{
			return new IfcFastener(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcFastenerType extends IFC4.IfcElementComponentType {
		PredefinedType: (Handle<IFC4.IfcFastenerTypeEnum> | IFC4.IfcFastenerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFastenerTypeEnum> | IFC4.IfcFastenerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFastenerType
		{
			return new IfcFastenerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFeatureElement extends IFC4.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElement
		{
			return new IfcFeatureElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFeatureElementAddition extends IFC4.IfcFeatureElement {
		ProjectsElements!: (Handle<IFC4.IfcRelProjectsElement> | IFC4.IfcRelProjectsElement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElementAddition
		{
			return new IfcFeatureElementAddition(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFeatureElementSubtraction extends IFC4.IfcFeatureElement {
		VoidsElements!: (Handle<IFC4.IfcRelVoidsElement> | IFC4.IfcRelVoidsElement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElementSubtraction
		{
			return new IfcFeatureElementSubtraction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowControllerType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowControllerType
		{
			return new IfcFlowControllerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowFittingType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowFittingType
		{
			return new IfcFlowFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowMeterType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcFlowMeterTypeEnum> | IFC4.IfcFlowMeterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFlowMeterTypeEnum> | IFC4.IfcFlowMeterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMeterType
		{
			return new IfcFlowMeterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowMovingDeviceType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMovingDeviceType
		{
			return new IfcFlowMovingDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowSegmentType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowSegmentType
		{
			return new IfcFlowSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowStorageDeviceType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowStorageDeviceType
		{
			return new IfcFlowStorageDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowTerminalType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTerminalType
		{
			return new IfcFlowTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFlowTreatmentDeviceType extends IFC4.IfcDistributionFlowElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTreatmentDeviceType
		{
			return new IfcFlowTreatmentDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcFootingType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcFootingTypeEnum> | IFC4.IfcFootingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFootingTypeEnum> | IFC4.IfcFootingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFootingType
		{
			return new IfcFootingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFurnishingElement extends IFC4.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurnishingElement
		{
			return new IfcFurnishingElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFurniture extends IFC4.IfcFurnishingElement {
		PredefinedType: (Handle<IFC4.IfcFurnitureTypeEnum> | IFC4.IfcFurnitureTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFurnitureTypeEnum> | IFC4.IfcFurnitureTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFurniture
		{
			return new IfcFurniture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcGeographicElement extends IFC4.IfcElement {
		PredefinedType: (Handle<IFC4.IfcGeographicElementTypeEnum> | IFC4.IfcGeographicElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcGeographicElementTypeEnum> | IFC4.IfcGeographicElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGeographicElement
		{
			return new IfcGeographicElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcGrid extends IFC4.IfcProduct {
		UAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] ;
		VAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] ;
		WAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] | null;
		PredefinedType: (Handle<IFC4.IfcGridTypeEnum> | IFC4.IfcGridTypeEnum) | null;
		ContainedInStructure!: (Handle<IFC4.IfcRelContainedInSpatialStructure> | IFC4.IfcRelContainedInSpatialStructure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, UAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] , VAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] , WAxes: (Handle<IFC4.IfcGridAxis> | IFC4.IfcGridAxis)[] | null, PredefinedType: (Handle<IFC4.IfcGridTypeEnum> | IFC4.IfcGridTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.UAxes = UAxes;
			this.VAxes = VAxes;
			this.WAxes = WAxes;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGrid
		{
			return new IfcGrid(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.UAxes, this.VAxes, this.WAxes, this.PredefinedType);
			return args;
		}
	}
	export class IfcGroup extends IFC4.IfcObject {
		IsGroupedBy!: (Handle<IFC4.IfcRelAssignsToGroup> | IFC4.IfcRelAssignsToGroup)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcGroup
		{
			return new IfcGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcHeatExchangerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcHeatExchangerTypeEnum> | IFC4.IfcHeatExchangerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcHeatExchangerTypeEnum> | IFC4.IfcHeatExchangerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHeatExchangerType
		{
			return new IfcHeatExchangerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcHumidifierType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcHumidifierTypeEnum> | IFC4.IfcHumidifierTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcHumidifierTypeEnum> | IFC4.IfcHumidifierTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHumidifierType
		{
			return new IfcHumidifierType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcIndexedPolyCurve extends IFC4.IfcBoundedCurve {
		Points: (Handle<IFC4.IfcCartesianPointList> | IFC4.IfcCartesianPointList) ;
		Segments: (Handle<IFC4.IfcSegmentIndexSelect> | IFC4.IfcSegmentIndexSelect)[] | null;
		SelfIntersect: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		constructor(expressID: number, type: number, Points: (Handle<IFC4.IfcCartesianPointList> | IFC4.IfcCartesianPointList) , Segments: (Handle<IFC4.IfcSegmentIndexSelect> | IFC4.IfcSegmentIndexSelect)[] | null, SelfIntersect: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			super(expressID,type);
			this.Points = Points;
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedPolyCurve
		{
			return new IfcIndexedPolyCurve(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Points, this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcInterceptorType extends IFC4.IfcFlowTreatmentDeviceType {
		PredefinedType: (Handle<IFC4.IfcInterceptorTypeEnum> | IFC4.IfcInterceptorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcInterceptorTypeEnum> | IFC4.IfcInterceptorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcInterceptorType
		{
			return new IfcInterceptorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcIntersectionCurve extends IFC4.IfcSurfaceCurve {
		constructor(expressID: number, type: number, Curve3D: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , AssociatedGeometry: (Handle<IFC4.IfcPcurve> | IFC4.IfcPcurve)[] , MasterRepresentation: (Handle<IFC4.IfcPreferredSurfaceCurveRepresentation> | IFC4.IfcPreferredSurfaceCurveRepresentation) )
		{
			super(expressID,type,Curve3D, AssociatedGeometry, MasterRepresentation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcIntersectionCurve
		{
			return new IfcIntersectionCurve(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Curve3D, this.AssociatedGeometry, this.MasterRepresentation);
			return args;
		}
	}
	export class IfcInventory extends IFC4.IfcGroup {
		PredefinedType: (Handle<IFC4.IfcInventoryTypeEnum> | IFC4.IfcInventoryTypeEnum) | null;
		Jurisdiction: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		ResponsiblePersons: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null;
		LastUpdateDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		CurrentValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null;
		OriginalValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcInventoryTypeEnum> | IFC4.IfcInventoryTypeEnum) | null, Jurisdiction: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, ResponsiblePersons: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null, LastUpdateDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, CurrentValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null, OriginalValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PredefinedType = PredefinedType;
			this.Jurisdiction = Jurisdiction;
			this.ResponsiblePersons = ResponsiblePersons;
			this.LastUpdateDate = LastUpdateDate;
			this.CurrentValue = CurrentValue;
			this.OriginalValue = OriginalValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcInventory
		{
			return new IfcInventory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.Jurisdiction, this.ResponsiblePersons, this.LastUpdateDate, this.CurrentValue, this.OriginalValue);
			return args;
		}
	}
	export class IfcJunctionBoxType extends IFC4.IfcFlowFittingType {
		PredefinedType: (Handle<IFC4.IfcJunctionBoxTypeEnum> | IFC4.IfcJunctionBoxTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcJunctionBoxTypeEnum> | IFC4.IfcJunctionBoxTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcJunctionBoxType
		{
			return new IfcJunctionBoxType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcLaborResource extends IFC4.IfcConstructionResource {
		PredefinedType: (Handle<IFC4.IfcLaborResourceTypeEnum> | IFC4.IfcLaborResourceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcLaborResourceTypeEnum> | IFC4.IfcLaborResourceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLaborResource
		{
			return new IfcLaborResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcLampType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcLampTypeEnum> | IFC4.IfcLampTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcLampTypeEnum> | IFC4.IfcLampTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLampType
		{
			return new IfcLampType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcLightFixtureType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcLightFixtureTypeEnum> | IFC4.IfcLightFixtureTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcLightFixtureTypeEnum> | IFC4.IfcLightFixtureTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightFixtureType
		{
			return new IfcLightFixtureType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcMechanicalFastener extends IFC4.IfcElementComponent {
		NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		NominalLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PredefinedType: (Handle<IFC4.IfcMechanicalFastenerTypeEnum> | IFC4.IfcMechanicalFastenerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, NominalLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcMechanicalFastenerTypeEnum> | IFC4.IfcMechanicalFastenerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalFastener
		{
			return new IfcMechanicalFastener(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.NominalDiameter, this.NominalLength, this.PredefinedType);
			return args;
		}
	}
	export class IfcMechanicalFastenerType extends IFC4.IfcElementComponentType {
		PredefinedType: (Handle<IFC4.IfcMechanicalFastenerTypeEnum> | IFC4.IfcMechanicalFastenerTypeEnum) ;
		NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		NominalLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcMechanicalFastenerTypeEnum> | IFC4.IfcMechanicalFastenerTypeEnum) , NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, NominalLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalFastenerType
		{
			return new IfcMechanicalFastenerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.NominalDiameter, this.NominalLength);
			return args;
		}
	}
	export class IfcMedicalDeviceType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcMedicalDeviceTypeEnum> | IFC4.IfcMedicalDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcMedicalDeviceTypeEnum> | IFC4.IfcMedicalDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMedicalDeviceType
		{
			return new IfcMedicalDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcMemberType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcMemberTypeEnum> | IFC4.IfcMemberTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcMemberTypeEnum> | IFC4.IfcMemberTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMemberType
		{
			return new IfcMemberType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcMotorConnectionType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcMotorConnectionTypeEnum> | IFC4.IfcMotorConnectionTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcMotorConnectionTypeEnum> | IFC4.IfcMotorConnectionTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMotorConnectionType
		{
			return new IfcMotorConnectionType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcOccupant extends IFC4.IfcActor {
		PredefinedType: (Handle<IFC4.IfcOccupantTypeEnum> | IFC4.IfcOccupantTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TheActor: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) , PredefinedType: (Handle<IFC4.IfcOccupantTypeEnum> | IFC4.IfcOccupantTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOccupant
		{
			return new IfcOccupant(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TheActor, this.PredefinedType);
			return args;
		}
	}
	export class IfcOpeningElement extends IFC4.IfcFeatureElementSubtraction {
		PredefinedType: (Handle<IFC4.IfcOpeningElementTypeEnum> | IFC4.IfcOpeningElementTypeEnum) | null;
		HasFillings!: (Handle<IFC4.IfcRelFillsElement> | IFC4.IfcRelFillsElement)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcOpeningElementTypeEnum> | IFC4.IfcOpeningElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOpeningElement
		{
			return new IfcOpeningElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcOpeningStandardCase extends IFC4.IfcOpeningElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcOpeningElementTypeEnum> | IFC4.IfcOpeningElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOpeningStandardCase
		{
			return new IfcOpeningStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcOutletType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcOutletTypeEnum> | IFC4.IfcOutletTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcOutletTypeEnum> | IFC4.IfcOutletTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOutletType
		{
			return new IfcOutletType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPerformanceHistory extends IFC4.IfcControl {
		LifeCyclePhase: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) ;
		PredefinedType: (Handle<IFC4.IfcPerformanceHistoryTypeEnum> | IFC4.IfcPerformanceHistoryTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LifeCyclePhase: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) , PredefinedType: (Handle<IFC4.IfcPerformanceHistoryTypeEnum> | IFC4.IfcPerformanceHistoryTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.LifeCyclePhase = LifeCyclePhase;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPerformanceHistory
		{
			return new IfcPerformanceHistory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LifeCyclePhase, this.PredefinedType);
			return args;
		}
	}
	export class IfcPermeableCoveringProperties extends IFC4.IfcPreDefinedPropertySet {
		OperationType: (Handle<IFC4.IfcPermeableCoveringOperationEnum> | IFC4.IfcPermeableCoveringOperationEnum) ;
		PanelPosition: (Handle<IFC4.IfcWindowPanelPositionEnum> | IFC4.IfcWindowPanelPositionEnum) ;
		FrameDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		FrameThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, OperationType: (Handle<IFC4.IfcPermeableCoveringOperationEnum> | IFC4.IfcPermeableCoveringOperationEnum) , PanelPosition: (Handle<IFC4.IfcWindowPanelPositionEnum> | IFC4.IfcWindowPanelPositionEnum) , FrameDepth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, FrameThickness: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, ShapeAspectStyle: (Handle<IFC4.IfcShapeAspect> | IFC4.IfcShapeAspect) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPermeableCoveringProperties
		{
			return new IfcPermeableCoveringProperties(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.OperationType, this.PanelPosition, this.FrameDepth, this.FrameThickness, this.ShapeAspectStyle);
			return args;
		}
	}
	export class IfcPermit extends IFC4.IfcControl {
		PredefinedType: (Handle<IFC4.IfcPermitTypeEnum> | IFC4.IfcPermitTypeEnum) | null;
		Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPermitTypeEnum> | IFC4.IfcPermitTypeEnum) | null, Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPermit
		{
			return new IfcPermit(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.PredefinedType, this.Status, this.LongDescription);
			return args;
		}
	}
	export class IfcPileType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcPileTypeEnum> | IFC4.IfcPileTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcPileTypeEnum> | IFC4.IfcPileTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPileType
		{
			return new IfcPileType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPipeFittingType extends IFC4.IfcFlowFittingType {
		PredefinedType: (Handle<IFC4.IfcPipeFittingTypeEnum> | IFC4.IfcPipeFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcPipeFittingTypeEnum> | IFC4.IfcPipeFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPipeFittingType
		{
			return new IfcPipeFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPipeSegmentType extends IFC4.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC4.IfcPipeSegmentTypeEnum> | IFC4.IfcPipeSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcPipeSegmentTypeEnum> | IFC4.IfcPipeSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPipeSegmentType
		{
			return new IfcPipeSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPlateType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcPlateTypeEnum> | IFC4.IfcPlateTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcPlateTypeEnum> | IFC4.IfcPlateTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlateType
		{
			return new IfcPlateType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPolygonalFaceSet extends IFC4.IfcTessellatedFaceSet {
		Closed: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		Faces: (Handle<IFC4.IfcIndexedPolygonalFace> | IFC4.IfcIndexedPolygonalFace)[] ;
		PnIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] | null;
		constructor(expressID: number, type: number, Coordinates: (Handle<IFC4.IfcCartesianPointList3D> | IFC4.IfcCartesianPointList3D) , Closed: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, Faces: (Handle<IFC4.IfcIndexedPolygonalFace> | IFC4.IfcIndexedPolygonalFace)[] , PnIndex: (Handle<IFC4.IfcPositiveInteger> | IFC4.IfcPositiveInteger)[] | null)
		{
			super(expressID,type,Coordinates);
			this.Closed = Closed;
			this.Faces = Faces;
			this.PnIndex = PnIndex;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolygonalFaceSet
		{
			return new IfcPolygonalFaceSet(expressID, type, tape[0], tape[1], tape[2], tape[3]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Coordinates, this.Closed, this.Faces, this.PnIndex);
			return args;
		}
	}
	export class IfcPolyline extends IFC4.IfcBoundedCurve {
		Points: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] ;
		constructor(expressID: number, type: number, Points: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] )
		{
			super(expressID,type);
			this.Points = Points;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPolyline
		{
			return new IfcPolyline(expressID, type, tape[0]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Points);
			return args;
		}
	}
	export class IfcPort extends IFC4.IfcProduct {
		ContainedIn!: (Handle<IFC4.IfcRelConnectsPortToElement> | IFC4.IfcRelConnectsPortToElement)[] | null;
		ConnectedFrom!: (Handle<IFC4.IfcRelConnectsPorts> | IFC4.IfcRelConnectsPorts)[] | null;
		ConnectedTo!: (Handle<IFC4.IfcRelConnectsPorts> | IFC4.IfcRelConnectsPorts)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPort
		{
			return new IfcPort(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation);
			return args;
		}
	}
	export class IfcProcedure extends IFC4.IfcProcess {
		PredefinedType: (Handle<IFC4.IfcProcedureTypeEnum> | IFC4.IfcProcedureTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, PredefinedType: (Handle<IFC4.IfcProcedureTypeEnum> | IFC4.IfcProcedureTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProcedure
		{
			return new IfcProcedure(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.PredefinedType);
			return args;
		}
	}
	export class IfcProjectOrder extends IFC4.IfcControl {
		PredefinedType: (Handle<IFC4.IfcProjectOrderTypeEnum> | IFC4.IfcProjectOrderTypeEnum) | null;
		Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcProjectOrderTypeEnum> | IFC4.IfcProjectOrderTypeEnum) | null, Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectOrder
		{
			return new IfcProjectOrder(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.PredefinedType, this.Status, this.LongDescription);
			return args;
		}
	}
	export class IfcProjectionElement extends IFC4.IfcFeatureElementAddition {
		PredefinedType: (Handle<IFC4.IfcProjectionElementTypeEnum> | IFC4.IfcProjectionElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcProjectionElementTypeEnum> | IFC4.IfcProjectionElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProjectionElement
		{
			return new IfcProjectionElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcProtectiveDeviceType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTypeEnum> | IFC4.IfcProtectiveDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTypeEnum> | IFC4.IfcProtectiveDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceType
		{
			return new IfcProtectiveDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPumpType extends IFC4.IfcFlowMovingDeviceType {
		PredefinedType: (Handle<IFC4.IfcPumpTypeEnum> | IFC4.IfcPumpTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcPumpTypeEnum> | IFC4.IfcPumpTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPumpType
		{
			return new IfcPumpType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRailingType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcRailingTypeEnum> | IFC4.IfcRailingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcRailingTypeEnum> | IFC4.IfcRailingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRailingType
		{
			return new IfcRailingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRampFlightType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcRampFlightTypeEnum> | IFC4.IfcRampFlightTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcRampFlightTypeEnum> | IFC4.IfcRampFlightTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRampFlightType
		{
			return new IfcRampFlightType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRampType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcRampTypeEnum> | IFC4.IfcRampTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcRampTypeEnum> | IFC4.IfcRampTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRampType
		{
			return new IfcRampType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcRationalBSplineSurfaceWithKnots extends IFC4.IfcBSplineSurfaceWithKnots {
		WeightsData: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] ;
		constructor(expressID: number, type: number, UDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , VDegree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] , SurfaceForm: (Handle<IFC4.IfcBSplineSurfaceForm> | IFC4.IfcBSplineSurfaceForm) , UClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , VClosed: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , UMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , VMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , UKnots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] , VKnots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] , KnotSpec: (Handle<IFC4.IfcKnotType> | IFC4.IfcKnotType) , WeightsData: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] )
		{
			super(expressID,type,UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect, UMultiplicities, VMultiplicities, UKnots, VKnots, KnotSpec);
			this.WeightsData = WeightsData;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRationalBSplineSurfaceWithKnots
		{
			return new IfcRationalBSplineSurfaceWithKnots(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.UDegree, this.VDegree, this.ControlPointsList, this.SurfaceForm, this.UClosed, this.VClosed, this.SelfIntersect, this.UMultiplicities, this.VMultiplicities, this.UKnots, this.VKnots, this.KnotSpec, this.WeightsData);
			return args;
		}
	}
	export class IfcReinforcingElement extends IFC4.IfcElementComponent {
		SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.SteelGrade = SteelGrade;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingElement
		{
			return new IfcReinforcingElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade);
			return args;
		}
	}
	export class IfcReinforcingElementType extends IFC4.IfcElementComponentType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingElementType
		{
			return new IfcReinforcingElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcReinforcingMesh extends IFC4.IfcReinforcingElement {
		MeshLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		MeshWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		LongitudinalBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		TransverseBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		LongitudinalBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		TransverseBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		LongitudinalBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		TransverseBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PredefinedType: (Handle<IFC4.IfcReinforcingMeshTypeEnum> | IFC4.IfcReinforcingMeshTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, MeshLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, MeshWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, LongitudinalBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, TransverseBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, LongitudinalBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, TransverseBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, LongitudinalBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, TransverseBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcReinforcingMeshTypeEnum> | IFC4.IfcReinforcingMeshTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingMesh
		{
			return new IfcReinforcingMesh(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.MeshLength, this.MeshWidth, this.LongitudinalBarNominalDiameter, this.TransverseBarNominalDiameter, this.LongitudinalBarCrossSectionArea, this.TransverseBarCrossSectionArea, this.LongitudinalBarSpacing, this.TransverseBarSpacing, this.PredefinedType);
			return args;
		}
	}
	export class IfcReinforcingMeshType extends IFC4.IfcReinforcingElementType {
		PredefinedType: (Handle<IFC4.IfcReinforcingMeshTypeEnum> | IFC4.IfcReinforcingMeshTypeEnum) ;
		MeshLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		MeshWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		LongitudinalBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		TransverseBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		LongitudinalBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		TransverseBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		LongitudinalBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		TransverseBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		BendingShapeCode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		BendingParameters: (Handle<IFC4.IfcBendingParameterSelect> | IFC4.IfcBendingParameterSelect)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcReinforcingMeshTypeEnum> | IFC4.IfcReinforcingMeshTypeEnum) , MeshLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, MeshWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, LongitudinalBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, TransverseBarNominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, LongitudinalBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, TransverseBarCrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, LongitudinalBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, TransverseBarSpacing: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, BendingShapeCode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BendingParameters: (Handle<IFC4.IfcBendingParameterSelect> | IFC4.IfcBendingParameterSelect)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
			this.BendingShapeCode = BendingShapeCode;
			this.BendingParameters = BendingParameters;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingMeshType
		{
			return new IfcReinforcingMeshType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16], tape[17], tape[18], tape[19]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.MeshLength, this.MeshWidth, this.LongitudinalBarNominalDiameter, this.TransverseBarNominalDiameter, this.LongitudinalBarCrossSectionArea, this.TransverseBarCrossSectionArea, this.LongitudinalBarSpacing, this.TransverseBarSpacing, this.BendingShapeCode, this.BendingParameters);
			return args;
		}
	}
	export class IfcRelAggregates extends IFC4.IfcRelDecomposes {
		RelatingObject: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition) ;
		RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, RelatingObject: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition) , RelatedObjects: (Handle<IFC4.IfcObjectDefinition> | IFC4.IfcObjectDefinition)[] )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description);
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRelAggregates
		{
			return new IfcRelAggregates(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.RelatingObject, this.RelatedObjects);
			return args;
		}
	}
	export class IfcRoofType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcRoofTypeEnum> | IFC4.IfcRoofTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcRoofTypeEnum> | IFC4.IfcRoofTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoofType
		{
			return new IfcRoofType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSanitaryTerminalType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcSanitaryTerminalTypeEnum> | IFC4.IfcSanitaryTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSanitaryTerminalTypeEnum> | IFC4.IfcSanitaryTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSanitaryTerminalType
		{
			return new IfcSanitaryTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSeamCurve extends IFC4.IfcSurfaceCurve {
		constructor(expressID: number, type: number, Curve3D: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , AssociatedGeometry: (Handle<IFC4.IfcPcurve> | IFC4.IfcPcurve)[] , MasterRepresentation: (Handle<IFC4.IfcPreferredSurfaceCurveRepresentation> | IFC4.IfcPreferredSurfaceCurveRepresentation) )
		{
			super(expressID,type,Curve3D, AssociatedGeometry, MasterRepresentation);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSeamCurve
		{
			return new IfcSeamCurve(expressID, type, tape[0], tape[1], tape[2]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Curve3D, this.AssociatedGeometry, this.MasterRepresentation);
			return args;
		}
	}
	export class IfcShadingDeviceType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcShadingDeviceTypeEnum> | IFC4.IfcShadingDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcShadingDeviceTypeEnum> | IFC4.IfcShadingDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShadingDeviceType
		{
			return new IfcShadingDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSite extends IFC4.IfcSpatialStructureElement {
		RefLatitude: (Handle<IFC4.IfcCompoundPlaneAngleMeasure> | IFC4.IfcCompoundPlaneAngleMeasure) | null;
		RefLongitude: (Handle<IFC4.IfcCompoundPlaneAngleMeasure> | IFC4.IfcCompoundPlaneAngleMeasure) | null;
		RefElevation: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		LandTitleNumber: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		SiteAddress: (Handle<IFC4.IfcPostalAddress> | IFC4.IfcPostalAddress) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CompositionType: (Handle<IFC4.IfcElementCompositionEnum> | IFC4.IfcElementCompositionEnum) | null, RefLatitude: (Handle<IFC4.IfcCompoundPlaneAngleMeasure> | IFC4.IfcCompoundPlaneAngleMeasure) | null, RefLongitude: (Handle<IFC4.IfcCompoundPlaneAngleMeasure> | IFC4.IfcCompoundPlaneAngleMeasure) | null, RefElevation: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null, LandTitleNumber: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, SiteAddress: (Handle<IFC4.IfcPostalAddress> | IFC4.IfcPostalAddress) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.RefLatitude = RefLatitude;
			this.RefLongitude = RefLongitude;
			this.RefElevation = RefElevation;
			this.LandTitleNumber = LandTitleNumber;
			this.SiteAddress = SiteAddress;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSite
		{
			return new IfcSite(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.RefLatitude, this.RefLongitude, this.RefElevation, this.LandTitleNumber, this.SiteAddress);
			return args;
		}
	}
	export class IfcSlabType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcSlabTypeEnum> | IFC4.IfcSlabTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSlabTypeEnum> | IFC4.IfcSlabTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlabType
		{
			return new IfcSlabType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSolarDeviceType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcSolarDeviceTypeEnum> | IFC4.IfcSolarDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSolarDeviceTypeEnum> | IFC4.IfcSolarDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSolarDeviceType
		{
			return new IfcSolarDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSpace extends IFC4.IfcSpatialStructureElement {
		PredefinedType: (Handle<IFC4.IfcSpaceTypeEnum> | IFC4.IfcSpaceTypeEnum) | null;
		ElevationWithFlooring: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null;
		HasCoverings!: (Handle<IFC4.IfcRelCoversSpaces> | IFC4.IfcRelCoversSpaces)[] | null;
		BoundedBy!: (Handle<IFC4.IfcRelSpaceBoundary> | IFC4.IfcRelSpaceBoundary)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, CompositionType: (Handle<IFC4.IfcElementCompositionEnum> | IFC4.IfcElementCompositionEnum) | null, PredefinedType: (Handle<IFC4.IfcSpaceTypeEnum> | IFC4.IfcSpaceTypeEnum) | null, ElevationWithFlooring: (Handle<IFC4.IfcLengthMeasure> | IFC4.IfcLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
			this.PredefinedType = PredefinedType;
			this.ElevationWithFlooring = ElevationWithFlooring;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpace
		{
			return new IfcSpace(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.CompositionType, this.PredefinedType, this.ElevationWithFlooring);
			return args;
		}
	}
	export class IfcSpaceHeaterType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcSpaceHeaterTypeEnum> | IFC4.IfcSpaceHeaterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSpaceHeaterTypeEnum> | IFC4.IfcSpaceHeaterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceHeaterType
		{
			return new IfcSpaceHeaterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSpaceType extends IFC4.IfcSpatialStructureElementType {
		PredefinedType: (Handle<IFC4.IfcSpaceTypeEnum> | IFC4.IfcSpaceTypeEnum) ;
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSpaceTypeEnum> | IFC4.IfcSpaceTypeEnum) , LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceType
		{
			return new IfcSpaceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.LongName);
			return args;
		}
	}
	export class IfcStackTerminalType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcStackTerminalTypeEnum> | IFC4.IfcStackTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcStackTerminalTypeEnum> | IFC4.IfcStackTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStackTerminalType
		{
			return new IfcStackTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcStairFlightType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcStairFlightTypeEnum> | IFC4.IfcStairFlightTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcStairFlightTypeEnum> | IFC4.IfcStairFlightTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStairFlightType
		{
			return new IfcStairFlightType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcStairType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcStairTypeEnum> | IFC4.IfcStairTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcStairTypeEnum> | IFC4.IfcStairTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStairType
		{
			return new IfcStairType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralAction extends IFC4.IfcStructuralActivity {
		DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
			this.DestabilizingLoad = DestabilizingLoad;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralAction
		{
			return new IfcStructuralAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad);
			return args;
		}
	}
	export class IfcStructuralConnection extends IFC4.IfcStructuralItem {
		AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null;
		ConnectsStructuralMembers!: (Handle<IFC4.IfcRelConnectsStructuralMember> | IFC4.IfcRelConnectsStructuralMember)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.AppliedCondition = AppliedCondition;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralConnection
		{
			return new IfcStructuralConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition);
			return args;
		}
	}
	export class IfcStructuralCurveAction extends IFC4.IfcStructuralAction {
		ProjectedOrTrue: (Handle<IFC4.IfcProjectedOrTrueLengthEnum> | IFC4.IfcProjectedOrTrueLengthEnum) | null;
		PredefinedType: (Handle<IFC4.IfcStructuralCurveActivityTypeEnum> | IFC4.IfcStructuralCurveActivityTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, ProjectedOrTrue: (Handle<IFC4.IfcProjectedOrTrueLengthEnum> | IFC4.IfcProjectedOrTrueLengthEnum) | null, PredefinedType: (Handle<IFC4.IfcStructuralCurveActivityTypeEnum> | IFC4.IfcStructuralCurveActivityTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad);
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveAction
		{
			return new IfcStructuralCurveAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.ProjectedOrTrue, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralCurveConnection extends IFC4.IfcStructuralConnection {
		Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null, Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
			this.Axis = Axis;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveConnection
		{
			return new IfcStructuralCurveConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition, this.Axis);
			return args;
		}
	}
	export class IfcStructuralCurveMember extends IFC4.IfcStructuralMember {
		PredefinedType: (Handle<IFC4.IfcStructuralCurveMemberTypeEnum> | IFC4.IfcStructuralCurveMemberTypeEnum) ;
		Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC4.IfcStructuralCurveMemberTypeEnum> | IFC4.IfcStructuralCurveMemberTypeEnum) , Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.PredefinedType = PredefinedType;
			this.Axis = Axis;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveMember
		{
			return new IfcStructuralCurveMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType, this.Axis);
			return args;
		}
	}
	export class IfcStructuralCurveMemberVarying extends IFC4.IfcStructuralCurveMember {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, PredefinedType: (Handle<IFC4.IfcStructuralCurveMemberTypeEnum> | IFC4.IfcStructuralCurveMemberTypeEnum) , Axis: (Handle<IFC4.IfcDirection> | IFC4.IfcDirection) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Axis);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveMemberVarying
		{
			return new IfcStructuralCurveMemberVarying(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.PredefinedType, this.Axis);
			return args;
		}
	}
	export class IfcStructuralCurveReaction extends IFC4.IfcStructuralReaction {
		PredefinedType: (Handle<IFC4.IfcStructuralCurveActivityTypeEnum> | IFC4.IfcStructuralCurveActivityTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , PredefinedType: (Handle<IFC4.IfcStructuralCurveActivityTypeEnum> | IFC4.IfcStructuralCurveActivityTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveReaction
		{
			return new IfcStructuralCurveReaction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralLinearAction extends IFC4.IfcStructuralCurveAction {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, ProjectedOrTrue: (Handle<IFC4.IfcProjectedOrTrueLengthEnum> | IFC4.IfcProjectedOrTrueLengthEnum) | null, PredefinedType: (Handle<IFC4.IfcStructuralCurveActivityTypeEnum> | IFC4.IfcStructuralCurveActivityTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLinearAction
		{
			return new IfcStructuralLinearAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.ProjectedOrTrue, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralLoadGroup extends IFC4.IfcGroup {
		PredefinedType: (Handle<IFC4.IfcLoadGroupTypeEnum> | IFC4.IfcLoadGroupTypeEnum) ;
		ActionType: (Handle<IFC4.IfcActionTypeEnum> | IFC4.IfcActionTypeEnum) ;
		ActionSource: (Handle<IFC4.IfcActionSourceTypeEnum> | IFC4.IfcActionSourceTypeEnum) ;
		Coefficient: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) | null;
		Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		SourceOfResultGroup!: (Handle<IFC4.IfcStructuralResultGroup> | IFC4.IfcStructuralResultGroup)[] | null;
		LoadGroupFor!: (Handle<IFC4.IfcStructuralAnalysisModel> | IFC4.IfcStructuralAnalysisModel)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcLoadGroupTypeEnum> | IFC4.IfcLoadGroupTypeEnum) , ActionType: (Handle<IFC4.IfcActionTypeEnum> | IFC4.IfcActionTypeEnum) , ActionSource: (Handle<IFC4.IfcActionSourceTypeEnum> | IFC4.IfcActionSourceTypeEnum) , Coefficient: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) | null, Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadGroup
		{
			return new IfcStructuralLoadGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.ActionType, this.ActionSource, this.Coefficient, this.Purpose);
			return args;
		}
	}
	export class IfcStructuralPointAction extends IFC4.IfcStructuralAction {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointAction
		{
			return new IfcStructuralPointAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad);
			return args;
		}
	}
	export class IfcStructuralPointConnection extends IFC4.IfcStructuralConnection {
		ConditionCoordinateSystem: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null, ConditionCoordinateSystem: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointConnection
		{
			return new IfcStructuralPointConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition, this.ConditionCoordinateSystem);
			return args;
		}
	}
	export class IfcStructuralPointReaction extends IFC4.IfcStructuralReaction {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointReaction
		{
			return new IfcStructuralPointReaction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal);
			return args;
		}
	}
	export class IfcStructuralResultGroup extends IFC4.IfcGroup {
		TheoryType: (Handle<IFC4.IfcAnalysisTheoryTypeEnum> | IFC4.IfcAnalysisTheoryTypeEnum) ;
		ResultForLoadGroup: (Handle<IFC4.IfcStructuralLoadGroup> | IFC4.IfcStructuralLoadGroup) | null;
		IsLinear: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		ResultGroupFor!: (Handle<IFC4.IfcStructuralAnalysisModel> | IFC4.IfcStructuralAnalysisModel)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, TheoryType: (Handle<IFC4.IfcAnalysisTheoryTypeEnum> | IFC4.IfcAnalysisTheoryTypeEnum) , ResultForLoadGroup: (Handle<IFC4.IfcStructuralLoadGroup> | IFC4.IfcStructuralLoadGroup) | null, IsLinear: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.TheoryType = TheoryType;
			this.ResultForLoadGroup = ResultForLoadGroup;
			this.IsLinear = IsLinear;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralResultGroup
		{
			return new IfcStructuralResultGroup(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.TheoryType, this.ResultForLoadGroup, this.IsLinear);
			return args;
		}
	}
	export class IfcStructuralSurfaceAction extends IFC4.IfcStructuralAction {
		ProjectedOrTrue: (Handle<IFC4.IfcProjectedOrTrueLengthEnum> | IFC4.IfcProjectedOrTrueLengthEnum) | null;
		PredefinedType: (Handle<IFC4.IfcStructuralSurfaceActivityTypeEnum> | IFC4.IfcStructuralSurfaceActivityTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, ProjectedOrTrue: (Handle<IFC4.IfcProjectedOrTrueLengthEnum> | IFC4.IfcProjectedOrTrueLengthEnum) | null, PredefinedType: (Handle<IFC4.IfcStructuralSurfaceActivityTypeEnum> | IFC4.IfcStructuralSurfaceActivityTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad);
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceAction
		{
			return new IfcStructuralSurfaceAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.ProjectedOrTrue, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralSurfaceConnection extends IFC4.IfcStructuralConnection {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedCondition: (Handle<IFC4.IfcBoundaryCondition> | IFC4.IfcBoundaryCondition) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceConnection
		{
			return new IfcStructuralSurfaceConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedCondition);
			return args;
		}
	}
	export class IfcSubContractResource extends IFC4.IfcConstructionResource {
		PredefinedType: (Handle<IFC4.IfcSubContractResourceTypeEnum> | IFC4.IfcSubContractResourceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcSubContractResourceTypeEnum> | IFC4.IfcSubContractResourceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSubContractResource
		{
			return new IfcSubContractResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcSurfaceFeature extends IFC4.IfcFeatureElement {
		PredefinedType: (Handle<IFC4.IfcSurfaceFeatureTypeEnum> | IFC4.IfcSurfaceFeatureTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSurfaceFeatureTypeEnum> | IFC4.IfcSurfaceFeatureTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceFeature
		{
			return new IfcSurfaceFeature(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSwitchingDeviceType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcSwitchingDeviceTypeEnum> | IFC4.IfcSwitchingDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSwitchingDeviceTypeEnum> | IFC4.IfcSwitchingDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSwitchingDeviceType
		{
			return new IfcSwitchingDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcSystem extends IFC4.IfcGroup {
		ServicesBuildings!: (Handle<IFC4.IfcRelServicesBuildings> | IFC4.IfcRelServicesBuildings)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSystem
		{
			return new IfcSystem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType);
			return args;
		}
	}
	export class IfcSystemFurnitureElement extends IFC4.IfcFurnishingElement {
		PredefinedType: (Handle<IFC4.IfcSystemFurnitureElementTypeEnum> | IFC4.IfcSystemFurnitureElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSystemFurnitureElementTypeEnum> | IFC4.IfcSystemFurnitureElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSystemFurnitureElement
		{
			return new IfcSystemFurnitureElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcTankType extends IFC4.IfcFlowStorageDeviceType {
		PredefinedType: (Handle<IFC4.IfcTankTypeEnum> | IFC4.IfcTankTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTankTypeEnum> | IFC4.IfcTankTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTankType
		{
			return new IfcTankType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTendon extends IFC4.IfcReinforcingElement {
		PredefinedType: (Handle<IFC4.IfcTendonTypeEnum> | IFC4.IfcTendonTypeEnum) | null;
		NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		TensionForce: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null;
		PreStress: (Handle<IFC4.IfcPressureMeasure> | IFC4.IfcPressureMeasure) | null;
		FrictionCoefficient: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null;
		AnchorageSlip: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		MinCurvatureRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTendonTypeEnum> | IFC4.IfcTendonTypeEnum) | null, NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, TensionForce: (Handle<IFC4.IfcForceMeasure> | IFC4.IfcForceMeasure) | null, PreStress: (Handle<IFC4.IfcPressureMeasure> | IFC4.IfcPressureMeasure) | null, FrictionCoefficient: (Handle<IFC4.IfcNormalisedRatioMeasure> | IFC4.IfcNormalisedRatioMeasure) | null, AnchorageSlip: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, MinCurvatureRadius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.TensionForce = TensionForce;
			this.PreStress = PreStress;
			this.FrictionCoefficient = FrictionCoefficient;
			this.AnchorageSlip = AnchorageSlip;
			this.MinCurvatureRadius = MinCurvatureRadius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTendon
		{
			return new IfcTendon(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15], tape[16]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.PredefinedType, this.NominalDiameter, this.CrossSectionArea, this.TensionForce, this.PreStress, this.FrictionCoefficient, this.AnchorageSlip, this.MinCurvatureRadius);
			return args;
		}
	}
	export class IfcTendonAnchor extends IFC4.IfcReinforcingElement {
		PredefinedType: (Handle<IFC4.IfcTendonAnchorTypeEnum> | IFC4.IfcTendonAnchorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTendonAnchorTypeEnum> | IFC4.IfcTendonAnchorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTendonAnchor
		{
			return new IfcTendonAnchor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.PredefinedType);
			return args;
		}
	}
	export class IfcTendonAnchorType extends IFC4.IfcReinforcingElementType {
		PredefinedType: (Handle<IFC4.IfcTendonAnchorTypeEnum> | IFC4.IfcTendonAnchorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTendonAnchorTypeEnum> | IFC4.IfcTendonAnchorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTendonAnchorType
		{
			return new IfcTendonAnchorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTendonType extends IFC4.IfcReinforcingElementType {
		PredefinedType: (Handle<IFC4.IfcTendonTypeEnum> | IFC4.IfcTendonTypeEnum) ;
		NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		SheathDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTendonTypeEnum> | IFC4.IfcTendonTypeEnum) , NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, SheathDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.SheathDiameter = SheathDiameter;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTendonType
		{
			return new IfcTendonType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.NominalDiameter, this.CrossSectionArea, this.SheathDiameter);
			return args;
		}
	}
	export class IfcTransformerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcTransformerTypeEnum> | IFC4.IfcTransformerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTransformerTypeEnum> | IFC4.IfcTransformerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransformerType
		{
			return new IfcTransformerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcTransportElement extends IFC4.IfcElement {
		PredefinedType: (Handle<IFC4.IfcTransportElementTypeEnum> | IFC4.IfcTransportElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcTransportElementTypeEnum> | IFC4.IfcTransportElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransportElement
		{
			return new IfcTransportElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcTrimmedCurve extends IFC4.IfcBoundedCurve {
		BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) ;
		Trim1: (Handle<IFC4.IfcTrimmingSelect> | IFC4.IfcTrimmingSelect)[] ;
		Trim2: (Handle<IFC4.IfcTrimmingSelect> | IFC4.IfcTrimmingSelect)[] ;
		SenseAgreement: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) ;
		MasterRepresentation: (Handle<IFC4.IfcTrimmingPreference> | IFC4.IfcTrimmingPreference) ;
		constructor(expressID: number, type: number, BasisCurve: (Handle<IFC4.IfcCurve> | IFC4.IfcCurve) , Trim1: (Handle<IFC4.IfcTrimmingSelect> | IFC4.IfcTrimmingSelect)[] , Trim2: (Handle<IFC4.IfcTrimmingSelect> | IFC4.IfcTrimmingSelect)[] , SenseAgreement: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) , MasterRepresentation: (Handle<IFC4.IfcTrimmingPreference> | IFC4.IfcTrimmingPreference) )
		{
			super(expressID,type);
			this.BasisCurve = BasisCurve;
			this.Trim1 = Trim1;
			this.Trim2 = Trim2;
			this.SenseAgreement = SenseAgreement;
			this.MasterRepresentation = MasterRepresentation;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTrimmedCurve
		{
			return new IfcTrimmedCurve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.BasisCurve, this.Trim1, this.Trim2, this.SenseAgreement, this.MasterRepresentation);
			return args;
		}
	}
	export class IfcTubeBundleType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcTubeBundleTypeEnum> | IFC4.IfcTubeBundleTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcTubeBundleTypeEnum> | IFC4.IfcTubeBundleTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTubeBundleType
		{
			return new IfcTubeBundleType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcUnitaryEquipmentType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcUnitaryEquipmentTypeEnum> | IFC4.IfcUnitaryEquipmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcUnitaryEquipmentTypeEnum> | IFC4.IfcUnitaryEquipmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryEquipmentType
		{
			return new IfcUnitaryEquipmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcValveType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcValveTypeEnum> | IFC4.IfcValveTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcValveTypeEnum> | IFC4.IfcValveTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcValveType
		{
			return new IfcValveType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcVibrationIsolator extends IFC4.IfcElementComponent {
		PredefinedType: (Handle<IFC4.IfcVibrationIsolatorTypeEnum> | IFC4.IfcVibrationIsolatorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcVibrationIsolatorTypeEnum> | IFC4.IfcVibrationIsolatorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationIsolator
		{
			return new IfcVibrationIsolator(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcVibrationIsolatorType extends IFC4.IfcElementComponentType {
		PredefinedType: (Handle<IFC4.IfcVibrationIsolatorTypeEnum> | IFC4.IfcVibrationIsolatorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcVibrationIsolatorTypeEnum> | IFC4.IfcVibrationIsolatorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationIsolatorType
		{
			return new IfcVibrationIsolatorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcVirtualElement extends IFC4.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVirtualElement
		{
			return new IfcVirtualElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcVoidingFeature extends IFC4.IfcFeatureElementSubtraction {
		PredefinedType: (Handle<IFC4.IfcVoidingFeatureTypeEnum> | IFC4.IfcVoidingFeatureTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcVoidingFeatureTypeEnum> | IFC4.IfcVoidingFeatureTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcVoidingFeature
		{
			return new IfcVoidingFeature(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcWallType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcWallTypeEnum> | IFC4.IfcWallTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcWallTypeEnum> | IFC4.IfcWallTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWallType
		{
			return new IfcWallType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcWasteTerminalType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcWasteTerminalTypeEnum> | IFC4.IfcWasteTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcWasteTerminalTypeEnum> | IFC4.IfcWasteTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWasteTerminalType
		{
			return new IfcWasteTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcWindowType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcWindowTypeEnum> | IFC4.IfcWindowTypeEnum) ;
		PartitioningType: (Handle<IFC4.IfcWindowTypePartitioningEnum> | IFC4.IfcWindowTypePartitioningEnum) ;
		ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null;
		UserDefinedPartitioningType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcWindowTypeEnum> | IFC4.IfcWindowTypeEnum) , PartitioningType: (Handle<IFC4.IfcWindowTypePartitioningEnum> | IFC4.IfcWindowTypePartitioningEnum) , ParameterTakesPrecedence: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, UserDefinedPartitioningType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowType
		{
			return new IfcWindowType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.PartitioningType, this.ParameterTakesPrecedence, this.UserDefinedPartitioningType);
			return args;
		}
	}
	export class IfcWorkCalendar extends IFC4.IfcControl {
		WorkingTimes: (Handle<IFC4.IfcWorkTime> | IFC4.IfcWorkTime)[] | null;
		ExceptionTimes: (Handle<IFC4.IfcWorkTime> | IFC4.IfcWorkTime)[] | null;
		PredefinedType: (Handle<IFC4.IfcWorkCalendarTypeEnum> | IFC4.IfcWorkCalendarTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, WorkingTimes: (Handle<IFC4.IfcWorkTime> | IFC4.IfcWorkTime)[] | null, ExceptionTimes: (Handle<IFC4.IfcWorkTime> | IFC4.IfcWorkTime)[] | null, PredefinedType: (Handle<IFC4.IfcWorkCalendarTypeEnum> | IFC4.IfcWorkCalendarTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.WorkingTimes = WorkingTimes;
			this.ExceptionTimes = ExceptionTimes;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkCalendar
		{
			return new IfcWorkCalendar(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.WorkingTimes, this.ExceptionTimes, this.PredefinedType);
			return args;
		}
	}
	export class IfcWorkControl extends IFC4.IfcControl {
		CreationDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) ;
		Creators: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null;
		Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		Duration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null;
		StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) ;
		FinishTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, CreationDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , Creators: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null, Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Duration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , FinishTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkControl
		{
			return new IfcWorkControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.CreationDate, this.Creators, this.Purpose, this.Duration, this.TotalFloat, this.StartTime, this.FinishTime);
			return args;
		}
	}
	export class IfcWorkPlan extends IFC4.IfcWorkControl {
		PredefinedType: (Handle<IFC4.IfcWorkPlanTypeEnum> | IFC4.IfcWorkPlanTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, CreationDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , Creators: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null, Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Duration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , FinishTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, PredefinedType: (Handle<IFC4.IfcWorkPlanTypeEnum> | IFC4.IfcWorkPlanTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkPlan
		{
			return new IfcWorkPlan(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.CreationDate, this.Creators, this.Purpose, this.Duration, this.TotalFloat, this.StartTime, this.FinishTime, this.PredefinedType);
			return args;
		}
	}
	export class IfcWorkSchedule extends IFC4.IfcWorkControl {
		PredefinedType: (Handle<IFC4.IfcWorkScheduleTypeEnum> | IFC4.IfcWorkScheduleTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, CreationDate: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , Creators: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson)[] | null, Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Duration: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, TotalFloat: (Handle<IFC4.IfcDuration> | IFC4.IfcDuration) | null, StartTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) , FinishTime: (Handle<IFC4.IfcDateTime> | IFC4.IfcDateTime) | null, PredefinedType: (Handle<IFC4.IfcWorkScheduleTypeEnum> | IFC4.IfcWorkScheduleTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWorkSchedule
		{
			return new IfcWorkSchedule(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.CreationDate, this.Creators, this.Purpose, this.Duration, this.TotalFloat, this.StartTime, this.FinishTime, this.PredefinedType);
			return args;
		}
	}
	export class IfcZone extends IFC4.IfcSystem {
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.LongName = LongName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcZone
		{
			return new IfcZone(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName);
			return args;
		}
	}
	export class IfcActionRequest extends IFC4.IfcControl {
		PredefinedType: (Handle<IFC4.IfcActionRequestTypeEnum> | IFC4.IfcActionRequestTypeEnum) | null;
		Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcActionRequestTypeEnum> | IFC4.IfcActionRequestTypeEnum) | null, Status: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActionRequest
		{
			return new IfcActionRequest(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.PredefinedType, this.Status, this.LongDescription);
			return args;
		}
	}
	export class IfcAirTerminalBoxType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcAirTerminalBoxTypeEnum> | IFC4.IfcAirTerminalBoxTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcAirTerminalBoxTypeEnum> | IFC4.IfcAirTerminalBoxTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalBoxType
		{
			return new IfcAirTerminalBoxType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirTerminalType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcAirTerminalTypeEnum> | IFC4.IfcAirTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcAirTerminalTypeEnum> | IFC4.IfcAirTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalType
		{
			return new IfcAirTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirToAirHeatRecoveryType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcAirToAirHeatRecoveryTypeEnum> | IFC4.IfcAirToAirHeatRecoveryTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcAirToAirHeatRecoveryTypeEnum> | IFC4.IfcAirToAirHeatRecoveryTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirToAirHeatRecoveryType
		{
			return new IfcAirToAirHeatRecoveryType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAsset extends IFC4.IfcGroup {
		Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null;
		OriginalValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null;
		CurrentValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null;
		TotalReplacementCost: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null;
		Owner: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		User: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null;
		ResponsiblePerson: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson) | null;
		IncorporationDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null;
		DepreciatedValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, OriginalValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null, CurrentValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null, TotalReplacementCost: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null, Owner: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, User: (Handle<IFC4.IfcActorSelect> | IFC4.IfcActorSelect) | null, ResponsiblePerson: (Handle<IFC4.IfcPerson> | IFC4.IfcPerson) | null, IncorporationDate: (Handle<IFC4.IfcDate> | IFC4.IfcDate) | null, DepreciatedValue: (Handle<IFC4.IfcCostValue> | IFC4.IfcCostValue) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.Identification = Identification;
			this.OriginalValue = OriginalValue;
			this.CurrentValue = CurrentValue;
			this.TotalReplacementCost = TotalReplacementCost;
			this.Owner = Owner;
			this.User = User;
			this.ResponsiblePerson = ResponsiblePerson;
			this.IncorporationDate = IncorporationDate;
			this.DepreciatedValue = DepreciatedValue;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAsset
		{
			return new IfcAsset(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.OriginalValue, this.CurrentValue, this.TotalReplacementCost, this.Owner, this.User, this.ResponsiblePerson, this.IncorporationDate, this.DepreciatedValue);
			return args;
		}
	}
	export class IfcAudioVisualApplianceType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcAudioVisualApplianceTypeEnum> | IFC4.IfcAudioVisualApplianceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcAudioVisualApplianceTypeEnum> | IFC4.IfcAudioVisualApplianceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAudioVisualApplianceType
		{
			return new IfcAudioVisualApplianceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBSplineCurve extends IFC4.IfcBoundedCurve {
		Degree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) ;
		ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] ;
		CurveForm: (Handle<IFC4.IfcBSplineCurveForm> | IFC4.IfcBSplineCurveForm) ;
		ClosedCurve: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) ;
		constructor(expressID: number, type: number, Degree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] , CurveForm: (Handle<IFC4.IfcBSplineCurveForm> | IFC4.IfcBSplineCurveForm) , ClosedCurve: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type);
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineCurve
		{
			return new IfcBSplineCurve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Degree, this.ControlPointsList, this.CurveForm, this.ClosedCurve, this.SelfIntersect);
			return args;
		}
	}
	export class IfcBSplineCurveWithKnots extends IFC4.IfcBSplineCurve {
		KnotMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] ;
		Knots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] ;
		KnotSpec: (Handle<IFC4.IfcKnotType> | IFC4.IfcKnotType) ;
		constructor(expressID: number, type: number, Degree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] , CurveForm: (Handle<IFC4.IfcBSplineCurveForm> | IFC4.IfcBSplineCurveForm) , ClosedCurve: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , KnotMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , Knots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] , KnotSpec: (Handle<IFC4.IfcKnotType> | IFC4.IfcKnotType) )
		{
			super(expressID,type,Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect);
			this.KnotMultiplicities = KnotMultiplicities;
			this.Knots = Knots;
			this.KnotSpec = KnotSpec;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineCurveWithKnots
		{
			return new IfcBSplineCurveWithKnots(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Degree, this.ControlPointsList, this.CurveForm, this.ClosedCurve, this.SelfIntersect, this.KnotMultiplicities, this.Knots, this.KnotSpec);
			return args;
		}
	}
	export class IfcBeamType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcBeamTypeEnum> | IFC4.IfcBeamTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcBeamTypeEnum> | IFC4.IfcBeamTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBeamType
		{
			return new IfcBeamType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBoilerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcBoilerTypeEnum> | IFC4.IfcBoilerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcBoilerTypeEnum> | IFC4.IfcBoilerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoilerType
		{
			return new IfcBoilerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBoundaryCurve extends IFC4.IfcCompositeCurveOnSurface {
		constructor(expressID: number, type: number, Segments: (Handle<IFC4.IfcCompositeCurveSegment> | IFC4.IfcCompositeCurveSegment)[] , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type,Segments, SelfIntersect);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryCurve
		{
			return new IfcBoundaryCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcBuildingElement extends IFC4.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElement
		{
			return new IfcBuildingElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcBuildingElementPart extends IFC4.IfcElementComponent {
		PredefinedType: (Handle<IFC4.IfcBuildingElementPartTypeEnum> | IFC4.IfcBuildingElementPartTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcBuildingElementPartTypeEnum> | IFC4.IfcBuildingElementPartTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementPart
		{
			return new IfcBuildingElementPart(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcBuildingElementPartType extends IFC4.IfcElementComponentType {
		PredefinedType: (Handle<IFC4.IfcBuildingElementPartTypeEnum> | IFC4.IfcBuildingElementPartTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcBuildingElementPartTypeEnum> | IFC4.IfcBuildingElementPartTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementPartType
		{
			return new IfcBuildingElementPartType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBuildingElementProxy extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcBuildingElementProxyTypeEnum> | IFC4.IfcBuildingElementProxyTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcBuildingElementProxyTypeEnum> | IFC4.IfcBuildingElementProxyTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementProxy
		{
			return new IfcBuildingElementProxy(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcBuildingElementProxyType extends IFC4.IfcBuildingElementType {
		PredefinedType: (Handle<IFC4.IfcBuildingElementProxyTypeEnum> | IFC4.IfcBuildingElementProxyTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcBuildingElementProxyTypeEnum> | IFC4.IfcBuildingElementProxyTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementProxyType
		{
			return new IfcBuildingElementProxyType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcBuildingSystem extends IFC4.IfcSystem {
		PredefinedType: (Handle<IFC4.IfcBuildingSystemTypeEnum> | IFC4.IfcBuildingSystemTypeEnum) | null;
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcBuildingSystemTypeEnum> | IFC4.IfcBuildingSystemTypeEnum) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingSystem
		{
			return new IfcBuildingSystem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.LongName);
			return args;
		}
	}
	export class IfcBurnerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcBurnerTypeEnum> | IFC4.IfcBurnerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcBurnerTypeEnum> | IFC4.IfcBurnerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBurnerType
		{
			return new IfcBurnerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableCarrierFittingType extends IFC4.IfcFlowFittingType {
		PredefinedType: (Handle<IFC4.IfcCableCarrierFittingTypeEnum> | IFC4.IfcCableCarrierFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCableCarrierFittingTypeEnum> | IFC4.IfcCableCarrierFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierFittingType
		{
			return new IfcCableCarrierFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableCarrierSegmentType extends IFC4.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC4.IfcCableCarrierSegmentTypeEnum> | IFC4.IfcCableCarrierSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCableCarrierSegmentTypeEnum> | IFC4.IfcCableCarrierSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierSegmentType
		{
			return new IfcCableCarrierSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableFittingType extends IFC4.IfcFlowFittingType {
		PredefinedType: (Handle<IFC4.IfcCableFittingTypeEnum> | IFC4.IfcCableFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCableFittingTypeEnum> | IFC4.IfcCableFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableFittingType
		{
			return new IfcCableFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableSegmentType extends IFC4.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC4.IfcCableSegmentTypeEnum> | IFC4.IfcCableSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCableSegmentTypeEnum> | IFC4.IfcCableSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableSegmentType
		{
			return new IfcCableSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcChillerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcChillerTypeEnum> | IFC4.IfcChillerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcChillerTypeEnum> | IFC4.IfcChillerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcChillerType
		{
			return new IfcChillerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcChimney extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcChimneyTypeEnum> | IFC4.IfcChimneyTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcChimneyTypeEnum> | IFC4.IfcChimneyTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcChimney
		{
			return new IfcChimney(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCircle extends IFC4.IfcConic {
		Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) ;
		constructor(expressID: number, type: number, Position: (Handle<IFC4.IfcAxis2Placement> | IFC4.IfcAxis2Placement) , Radius: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) )
		{
			super(expressID,type,Position);
			this.Radius = Radius;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCircle
		{
			return new IfcCircle(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Position, this.Radius);
			return args;
		}
	}
	export class IfcCivilElement extends IFC4.IfcElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCivilElement
		{
			return new IfcCivilElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcCoilType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcCoilTypeEnum> | IFC4.IfcCoilTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCoilTypeEnum> | IFC4.IfcCoilTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoilType
		{
			return new IfcCoilType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcColumn extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcColumnTypeEnum> | IFC4.IfcColumnTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcColumnTypeEnum> | IFC4.IfcColumnTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColumn
		{
			return new IfcColumn(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcColumnStandardCase extends IFC4.IfcColumn {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcColumnTypeEnum> | IFC4.IfcColumnTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcColumnStandardCase
		{
			return new IfcColumnStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCommunicationsApplianceType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcCommunicationsApplianceTypeEnum> | IFC4.IfcCommunicationsApplianceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCommunicationsApplianceTypeEnum> | IFC4.IfcCommunicationsApplianceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCommunicationsApplianceType
		{
			return new IfcCommunicationsApplianceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCompressorType extends IFC4.IfcFlowMovingDeviceType {
		PredefinedType: (Handle<IFC4.IfcCompressorTypeEnum> | IFC4.IfcCompressorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCompressorTypeEnum> | IFC4.IfcCompressorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompressorType
		{
			return new IfcCompressorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCondenserType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcCondenserTypeEnum> | IFC4.IfcCondenserTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCondenserTypeEnum> | IFC4.IfcCondenserTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCondenserType
		{
			return new IfcCondenserType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcConstructionEquipmentResource extends IFC4.IfcConstructionResource {
		PredefinedType: (Handle<IFC4.IfcConstructionEquipmentResourceTypeEnum> | IFC4.IfcConstructionEquipmentResourceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcConstructionEquipmentResourceTypeEnum> | IFC4.IfcConstructionEquipmentResourceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionEquipmentResource
		{
			return new IfcConstructionEquipmentResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcConstructionMaterialResource extends IFC4.IfcConstructionResource {
		PredefinedType: (Handle<IFC4.IfcConstructionMaterialResourceTypeEnum> | IFC4.IfcConstructionMaterialResourceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcConstructionMaterialResourceTypeEnum> | IFC4.IfcConstructionMaterialResourceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionMaterialResource
		{
			return new IfcConstructionMaterialResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcConstructionProductResource extends IFC4.IfcConstructionResource {
		PredefinedType: (Handle<IFC4.IfcConstructionProductResourceTypeEnum> | IFC4.IfcConstructionProductResourceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Identification: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, LongDescription: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, Usage: (Handle<IFC4.IfcResourceTime> | IFC4.IfcResourceTime) | null, BaseCosts: (Handle<IFC4.IfcAppliedValue> | IFC4.IfcAppliedValue)[] | null, BaseQuantity: (Handle<IFC4.IfcPhysicalQuantity> | IFC4.IfcPhysicalQuantity) | null, PredefinedType: (Handle<IFC4.IfcConstructionProductResourceTypeEnum> | IFC4.IfcConstructionProductResourceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionProductResource
		{
			return new IfcConstructionProductResource(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.Identification, this.LongDescription, this.Usage, this.BaseCosts, this.BaseQuantity, this.PredefinedType);
			return args;
		}
	}
	export class IfcCooledBeamType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcCooledBeamTypeEnum> | IFC4.IfcCooledBeamTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCooledBeamTypeEnum> | IFC4.IfcCooledBeamTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCooledBeamType
		{
			return new IfcCooledBeamType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCoolingTowerType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcCoolingTowerTypeEnum> | IFC4.IfcCoolingTowerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcCoolingTowerTypeEnum> | IFC4.IfcCoolingTowerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoolingTowerType
		{
			return new IfcCoolingTowerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCovering extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcCoveringTypeEnum> | IFC4.IfcCoveringTypeEnum) | null;
		CoversSpaces!: (Handle<IFC4.IfcRelCoversSpaces> | IFC4.IfcRelCoversSpaces)[] | null;
		CoversElements!: (Handle<IFC4.IfcRelCoversBldgElements> | IFC4.IfcRelCoversBldgElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCoveringTypeEnum> | IFC4.IfcCoveringTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCovering
		{
			return new IfcCovering(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCurtainWall extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcCurtainWallTypeEnum> | IFC4.IfcCurtainWallTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCurtainWallTypeEnum> | IFC4.IfcCurtainWallTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCurtainWall
		{
			return new IfcCurtainWall(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDamperType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcDamperTypeEnum> | IFC4.IfcDamperTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDamperTypeEnum> | IFC4.IfcDamperTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDamperType
		{
			return new IfcDamperType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDiscreteAccessory extends IFC4.IfcElementComponent {
		PredefinedType: (Handle<IFC4.IfcDiscreteAccessoryTypeEnum> | IFC4.IfcDiscreteAccessoryTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcDiscreteAccessoryTypeEnum> | IFC4.IfcDiscreteAccessoryTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDiscreteAccessory
		{
			return new IfcDiscreteAccessory(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDiscreteAccessoryType extends IFC4.IfcElementComponentType {
		PredefinedType: (Handle<IFC4.IfcDiscreteAccessoryTypeEnum> | IFC4.IfcDiscreteAccessoryTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDiscreteAccessoryTypeEnum> | IFC4.IfcDiscreteAccessoryTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDiscreteAccessoryType
		{
			return new IfcDiscreteAccessoryType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionChamberElementType extends IFC4.IfcDistributionFlowElementType {
		PredefinedType: (Handle<IFC4.IfcDistributionChamberElementTypeEnum> | IFC4.IfcDistributionChamberElementTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDistributionChamberElementTypeEnum> | IFC4.IfcDistributionChamberElementTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionChamberElementType
		{
			return new IfcDistributionChamberElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionControlElementType extends IFC4.IfcDistributionElementType {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionControlElementType
		{
			return new IfcDistributionControlElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType);
			return args;
		}
	}
	export class IfcDistributionElement extends IFC4.IfcElement {
		HasPorts!: (Handle<IFC4.IfcRelConnectsPortToElement> | IFC4.IfcRelConnectsPortToElement)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionElement
		{
			return new IfcDistributionElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDistributionFlowElement extends IFC4.IfcDistributionElement {
		HasControlElements!: (Handle<IFC4.IfcRelFlowControlElements> | IFC4.IfcRelFlowControlElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionFlowElement
		{
			return new IfcDistributionFlowElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDistributionPort extends IFC4.IfcPort {
		FlowDirection: (Handle<IFC4.IfcFlowDirectionEnum> | IFC4.IfcFlowDirectionEnum) | null;
		PredefinedType: (Handle<IFC4.IfcDistributionPortTypeEnum> | IFC4.IfcDistributionPortTypeEnum) | null;
		SystemType: (Handle<IFC4.IfcDistributionSystemEnum> | IFC4.IfcDistributionSystemEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, FlowDirection: (Handle<IFC4.IfcFlowDirectionEnum> | IFC4.IfcFlowDirectionEnum) | null, PredefinedType: (Handle<IFC4.IfcDistributionPortTypeEnum> | IFC4.IfcDistributionPortTypeEnum) | null, SystemType: (Handle<IFC4.IfcDistributionSystemEnum> | IFC4.IfcDistributionSystemEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
			this.FlowDirection = FlowDirection;
			this.PredefinedType = PredefinedType;
			this.SystemType = SystemType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionPort
		{
			return new IfcDistributionPort(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.FlowDirection, this.PredefinedType, this.SystemType);
			return args;
		}
	}
	export class IfcDistributionSystem extends IFC4.IfcSystem {
		LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		PredefinedType: (Handle<IFC4.IfcDistributionSystemEnum> | IFC4.IfcDistributionSystemEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDistributionSystemEnum> | IFC4.IfcDistributionSystemEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.LongName = LongName;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionSystem
		{
			return new IfcDistributionSystem(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName, this.PredefinedType);
			return args;
		}
	}
	export class IfcDoor extends IFC4.IfcBuildingElement {
		OverallHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PredefinedType: (Handle<IFC4.IfcDoorTypeEnum> | IFC4.IfcDoorTypeEnum) | null;
		OperationType: (Handle<IFC4.IfcDoorTypeOperationEnum> | IFC4.IfcDoorTypeOperationEnum) | null;
		UserDefinedOperationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, OverallHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcDoorTypeEnum> | IFC4.IfcDoorTypeEnum) | null, OperationType: (Handle<IFC4.IfcDoorTypeOperationEnum> | IFC4.IfcDoorTypeOperationEnum) | null, UserDefinedOperationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoor
		{
			return new IfcDoor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OverallHeight, this.OverallWidth, this.PredefinedType, this.OperationType, this.UserDefinedOperationType);
			return args;
		}
	}
	export class IfcDoorStandardCase extends IFC4.IfcDoor {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, OverallHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcDoorTypeEnum> | IFC4.IfcDoorTypeEnum) | null, OperationType: (Handle<IFC4.IfcDoorTypeOperationEnum> | IFC4.IfcDoorTypeOperationEnum) | null, UserDefinedOperationType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDoorStandardCase
		{
			return new IfcDoorStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OverallHeight, this.OverallWidth, this.PredefinedType, this.OperationType, this.UserDefinedOperationType);
			return args;
		}
	}
	export class IfcDuctFittingType extends IFC4.IfcFlowFittingType {
		PredefinedType: (Handle<IFC4.IfcDuctFittingTypeEnum> | IFC4.IfcDuctFittingTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDuctFittingTypeEnum> | IFC4.IfcDuctFittingTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctFittingType
		{
			return new IfcDuctFittingType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDuctSegmentType extends IFC4.IfcFlowSegmentType {
		PredefinedType: (Handle<IFC4.IfcDuctSegmentTypeEnum> | IFC4.IfcDuctSegmentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDuctSegmentTypeEnum> | IFC4.IfcDuctSegmentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSegmentType
		{
			return new IfcDuctSegmentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcDuctSilencerType extends IFC4.IfcFlowTreatmentDeviceType {
		PredefinedType: (Handle<IFC4.IfcDuctSilencerTypeEnum> | IFC4.IfcDuctSilencerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDuctSilencerTypeEnum> | IFC4.IfcDuctSilencerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSilencerType
		{
			return new IfcDuctSilencerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricApplianceType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcElectricApplianceTypeEnum> | IFC4.IfcElectricApplianceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElectricApplianceTypeEnum> | IFC4.IfcElectricApplianceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricApplianceType
		{
			return new IfcElectricApplianceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricDistributionBoardType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcElectricDistributionBoardTypeEnum> | IFC4.IfcElectricDistributionBoardTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElectricDistributionBoardTypeEnum> | IFC4.IfcElectricDistributionBoardTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricDistributionBoardType
		{
			return new IfcElectricDistributionBoardType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricFlowStorageDeviceType extends IFC4.IfcFlowStorageDeviceType {
		PredefinedType: (Handle<IFC4.IfcElectricFlowStorageDeviceTypeEnum> | IFC4.IfcElectricFlowStorageDeviceTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElectricFlowStorageDeviceTypeEnum> | IFC4.IfcElectricFlowStorageDeviceTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricFlowStorageDeviceType
		{
			return new IfcElectricFlowStorageDeviceType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricGeneratorType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcElectricGeneratorTypeEnum> | IFC4.IfcElectricGeneratorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElectricGeneratorTypeEnum> | IFC4.IfcElectricGeneratorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricGeneratorType
		{
			return new IfcElectricGeneratorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricMotorType extends IFC4.IfcEnergyConversionDeviceType {
		PredefinedType: (Handle<IFC4.IfcElectricMotorTypeEnum> | IFC4.IfcElectricMotorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElectricMotorTypeEnum> | IFC4.IfcElectricMotorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricMotorType
		{
			return new IfcElectricMotorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricTimeControlType extends IFC4.IfcFlowControllerType {
		PredefinedType: (Handle<IFC4.IfcElectricTimeControlTypeEnum> | IFC4.IfcElectricTimeControlTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcElectricTimeControlTypeEnum> | IFC4.IfcElectricTimeControlTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricTimeControlType
		{
			return new IfcElectricTimeControlType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcEnergyConversionDevice extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyConversionDevice
		{
			return new IfcEnergyConversionDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcEngine extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcEngineTypeEnum> | IFC4.IfcEngineTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcEngineTypeEnum> | IFC4.IfcEngineTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEngine
		{
			return new IfcEngine(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcEvaporativeCooler extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcEvaporativeCoolerTypeEnum> | IFC4.IfcEvaporativeCoolerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcEvaporativeCoolerTypeEnum> | IFC4.IfcEvaporativeCoolerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporativeCooler
		{
			return new IfcEvaporativeCooler(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcEvaporator extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcEvaporatorTypeEnum> | IFC4.IfcEvaporatorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcEvaporatorTypeEnum> | IFC4.IfcEvaporatorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporator
		{
			return new IfcEvaporator(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcExternalSpatialElement extends IFC4.IfcExternalSpatialStructureElement {
		PredefinedType: (Handle<IFC4.IfcExternalSpatialElementTypeEnum> | IFC4.IfcExternalSpatialElementTypeEnum) | null;
		BoundedBy!: (Handle<IFC4.IfcRelSpaceBoundary> | IFC4.IfcRelSpaceBoundary)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcExternalSpatialElementTypeEnum> | IFC4.IfcExternalSpatialElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcExternalSpatialElement
		{
			return new IfcExternalSpatialElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.LongName, this.PredefinedType);
			return args;
		}
	}
	export class IfcFanType extends IFC4.IfcFlowMovingDeviceType {
		PredefinedType: (Handle<IFC4.IfcFanTypeEnum> | IFC4.IfcFanTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFanTypeEnum> | IFC4.IfcFanTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFanType
		{
			return new IfcFanType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFilterType extends IFC4.IfcFlowTreatmentDeviceType {
		PredefinedType: (Handle<IFC4.IfcFilterTypeEnum> | IFC4.IfcFilterTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFilterTypeEnum> | IFC4.IfcFilterTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFilterType
		{
			return new IfcFilterType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFireSuppressionTerminalType extends IFC4.IfcFlowTerminalType {
		PredefinedType: (Handle<IFC4.IfcFireSuppressionTerminalTypeEnum> | IFC4.IfcFireSuppressionTerminalTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFireSuppressionTerminalTypeEnum> | IFC4.IfcFireSuppressionTerminalTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFireSuppressionTerminalType
		{
			return new IfcFireSuppressionTerminalType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowController extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowController
		{
			return new IfcFlowController(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowFitting extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowFitting
		{
			return new IfcFlowFitting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowInstrumentType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcFlowInstrumentTypeEnum> | IFC4.IfcFlowInstrumentTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcFlowInstrumentTypeEnum> | IFC4.IfcFlowInstrumentTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowInstrumentType
		{
			return new IfcFlowInstrumentType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowMeter extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcFlowMeterTypeEnum> | IFC4.IfcFlowMeterTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFlowMeterTypeEnum> | IFC4.IfcFlowMeterTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMeter
		{
			return new IfcFlowMeter(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowMovingDevice extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMovingDevice
		{
			return new IfcFlowMovingDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowSegment extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowSegment
		{
			return new IfcFlowSegment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowStorageDevice extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowStorageDevice
		{
			return new IfcFlowStorageDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowTerminal extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTerminal
		{
			return new IfcFlowTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFlowTreatmentDevice extends IFC4.IfcDistributionFlowElement {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTreatmentDevice
		{
			return new IfcFlowTreatmentDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcFooting extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcFootingTypeEnum> | IFC4.IfcFootingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFootingTypeEnum> | IFC4.IfcFootingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFooting
		{
			return new IfcFooting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcHeatExchanger extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcHeatExchangerTypeEnum> | IFC4.IfcHeatExchangerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcHeatExchangerTypeEnum> | IFC4.IfcHeatExchangerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHeatExchanger
		{
			return new IfcHeatExchanger(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcHumidifier extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcHumidifierTypeEnum> | IFC4.IfcHumidifierTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcHumidifierTypeEnum> | IFC4.IfcHumidifierTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcHumidifier
		{
			return new IfcHumidifier(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcInterceptor extends IFC4.IfcFlowTreatmentDevice {
		PredefinedType: (Handle<IFC4.IfcInterceptorTypeEnum> | IFC4.IfcInterceptorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcInterceptorTypeEnum> | IFC4.IfcInterceptorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcInterceptor
		{
			return new IfcInterceptor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcJunctionBox extends IFC4.IfcFlowFitting {
		PredefinedType: (Handle<IFC4.IfcJunctionBoxTypeEnum> | IFC4.IfcJunctionBoxTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcJunctionBoxTypeEnum> | IFC4.IfcJunctionBoxTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcJunctionBox
		{
			return new IfcJunctionBox(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcLamp extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcLampTypeEnum> | IFC4.IfcLampTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcLampTypeEnum> | IFC4.IfcLampTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLamp
		{
			return new IfcLamp(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcLightFixture extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcLightFixtureTypeEnum> | IFC4.IfcLightFixtureTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcLightFixtureTypeEnum> | IFC4.IfcLightFixtureTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcLightFixture
		{
			return new IfcLightFixture(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcMedicalDevice extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcMedicalDeviceTypeEnum> | IFC4.IfcMedicalDeviceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcMedicalDeviceTypeEnum> | IFC4.IfcMedicalDeviceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMedicalDevice
		{
			return new IfcMedicalDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcMember extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcMemberTypeEnum> | IFC4.IfcMemberTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcMemberTypeEnum> | IFC4.IfcMemberTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMember
		{
			return new IfcMember(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcMemberStandardCase extends IFC4.IfcMember {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcMemberTypeEnum> | IFC4.IfcMemberTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMemberStandardCase
		{
			return new IfcMemberStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcMotorConnection extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcMotorConnectionTypeEnum> | IFC4.IfcMotorConnectionTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcMotorConnectionTypeEnum> | IFC4.IfcMotorConnectionTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcMotorConnection
		{
			return new IfcMotorConnection(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcOuterBoundaryCurve extends IFC4.IfcBoundaryCurve {
		constructor(expressID: number, type: number, Segments: (Handle<IFC4.IfcCompositeCurveSegment> | IFC4.IfcCompositeCurveSegment)[] , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) )
		{
			super(expressID,type,Segments, SelfIntersect);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOuterBoundaryCurve
		{
			return new IfcOuterBoundaryCurve(expressID, type, tape[0], tape[1]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Segments, this.SelfIntersect);
			return args;
		}
	}
	export class IfcOutlet extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcOutletTypeEnum> | IFC4.IfcOutletTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcOutletTypeEnum> | IFC4.IfcOutletTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcOutlet
		{
			return new IfcOutlet(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcPile extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcPileTypeEnum> | IFC4.IfcPileTypeEnum) | null;
		ConstructionType: (Handle<IFC4.IfcPileConstructionEnum> | IFC4.IfcPileConstructionEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPileTypeEnum> | IFC4.IfcPileTypeEnum) | null, ConstructionType: (Handle<IFC4.IfcPileConstructionEnum> | IFC4.IfcPileConstructionEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
			this.ConstructionType = ConstructionType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPile
		{
			return new IfcPile(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType, this.ConstructionType);
			return args;
		}
	}
	export class IfcPipeFitting extends IFC4.IfcFlowFitting {
		PredefinedType: (Handle<IFC4.IfcPipeFittingTypeEnum> | IFC4.IfcPipeFittingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPipeFittingTypeEnum> | IFC4.IfcPipeFittingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPipeFitting
		{
			return new IfcPipeFitting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcPipeSegment extends IFC4.IfcFlowSegment {
		PredefinedType: (Handle<IFC4.IfcPipeSegmentTypeEnum> | IFC4.IfcPipeSegmentTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPipeSegmentTypeEnum> | IFC4.IfcPipeSegmentTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPipeSegment
		{
			return new IfcPipeSegment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcPlate extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcPlateTypeEnum> | IFC4.IfcPlateTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPlateTypeEnum> | IFC4.IfcPlateTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlate
		{
			return new IfcPlate(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcPlateStandardCase extends IFC4.IfcPlate {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPlateTypeEnum> | IFC4.IfcPlateTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPlateStandardCase
		{
			return new IfcPlateStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcProtectiveDevice extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTypeEnum> | IFC4.IfcProtectiveDeviceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTypeEnum> | IFC4.IfcProtectiveDeviceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDevice
		{
			return new IfcProtectiveDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcProtectiveDeviceTrippingUnitType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum> | IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum> | IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceTrippingUnitType
		{
			return new IfcProtectiveDeviceTrippingUnitType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcPump extends IFC4.IfcFlowMovingDevice {
		PredefinedType: (Handle<IFC4.IfcPumpTypeEnum> | IFC4.IfcPumpTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcPumpTypeEnum> | IFC4.IfcPumpTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcPump
		{
			return new IfcPump(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcRailing extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcRailingTypeEnum> | IFC4.IfcRailingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcRailingTypeEnum> | IFC4.IfcRailingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRailing
		{
			return new IfcRailing(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcRamp extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcRampTypeEnum> | IFC4.IfcRampTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcRampTypeEnum> | IFC4.IfcRampTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRamp
		{
			return new IfcRamp(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcRampFlight extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcRampFlightTypeEnum> | IFC4.IfcRampFlightTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcRampFlightTypeEnum> | IFC4.IfcRampFlightTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRampFlight
		{
			return new IfcRampFlight(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcRationalBSplineCurveWithKnots extends IFC4.IfcBSplineCurveWithKnots {
		WeightsData: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] ;
		constructor(expressID: number, type: number, Degree: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) , ControlPointsList: (Handle<IFC4.IfcCartesianPoint> | IFC4.IfcCartesianPoint)[] , CurveForm: (Handle<IFC4.IfcBSplineCurveForm> | IFC4.IfcBSplineCurveForm) , ClosedCurve: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , SelfIntersect: (Handle<IFC4.IfcLogical> | IFC4.IfcLogical) , KnotMultiplicities: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger)[] , Knots: (Handle<IFC4.IfcParameterValue> | IFC4.IfcParameterValue)[] , KnotSpec: (Handle<IFC4.IfcKnotType> | IFC4.IfcKnotType) , WeightsData: (Handle<IFC4.IfcReal> | IFC4.IfcReal)[] )
		{
			super(expressID,type,Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect, KnotMultiplicities, Knots, KnotSpec);
			this.WeightsData = WeightsData;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRationalBSplineCurveWithKnots
		{
			return new IfcRationalBSplineCurveWithKnots(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.Degree, this.ControlPointsList, this.CurveForm, this.ClosedCurve, this.SelfIntersect, this.KnotMultiplicities, this.Knots, this.KnotSpec, this.WeightsData);
			return args;
		}
	}
	export class IfcReinforcingBar extends IFC4.IfcReinforcingElement {
		NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		BarLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PredefinedType: (Handle<IFC4.IfcReinforcingBarTypeEnum> | IFC4.IfcReinforcingBarTypeEnum) | null;
		BarSurface: (Handle<IFC4.IfcReinforcingBarSurfaceEnum> | IFC4.IfcReinforcingBarSurfaceEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, SteelGrade: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, BarLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcReinforcingBarTypeEnum> | IFC4.IfcReinforcingBarTypeEnum) | null, BarSurface: (Handle<IFC4.IfcReinforcingBarSurfaceEnum> | IFC4.IfcReinforcingBarSurfaceEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.PredefinedType = PredefinedType;
			this.BarSurface = BarSurface;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingBar
		{
			return new IfcReinforcingBar(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.SteelGrade, this.NominalDiameter, this.CrossSectionArea, this.BarLength, this.PredefinedType, this.BarSurface);
			return args;
		}
	}
	export class IfcReinforcingBarType extends IFC4.IfcReinforcingElementType {
		PredefinedType: (Handle<IFC4.IfcReinforcingBarTypeEnum> | IFC4.IfcReinforcingBarTypeEnum) ;
		NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null;
		BarLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		BarSurface: (Handle<IFC4.IfcReinforcingBarSurfaceEnum> | IFC4.IfcReinforcingBarSurfaceEnum) | null;
		BendingShapeCode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		BendingParameters: (Handle<IFC4.IfcBendingParameterSelect> | IFC4.IfcBendingParameterSelect)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcReinforcingBarTypeEnum> | IFC4.IfcReinforcingBarTypeEnum) , NominalDiameter: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, CrossSectionArea: (Handle<IFC4.IfcAreaMeasure> | IFC4.IfcAreaMeasure) | null, BarLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, BarSurface: (Handle<IFC4.IfcReinforcingBarSurfaceEnum> | IFC4.IfcReinforcingBarSurfaceEnum) | null, BendingShapeCode: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, BendingParameters: (Handle<IFC4.IfcBendingParameterSelect> | IFC4.IfcBendingParameterSelect)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.BarSurface = BarSurface;
			this.BendingShapeCode = BendingShapeCode;
			this.BendingParameters = BendingParameters;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingBarType
		{
			return new IfcReinforcingBarType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12], tape[13], tape[14], tape[15]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType, this.NominalDiameter, this.CrossSectionArea, this.BarLength, this.BarSurface, this.BendingShapeCode, this.BendingParameters);
			return args;
		}
	}
	export class IfcRoof extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcRoofTypeEnum> | IFC4.IfcRoofTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcRoofTypeEnum> | IFC4.IfcRoofTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcRoof
		{
			return new IfcRoof(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSanitaryTerminal extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcSanitaryTerminalTypeEnum> | IFC4.IfcSanitaryTerminalTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSanitaryTerminalTypeEnum> | IFC4.IfcSanitaryTerminalTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSanitaryTerminal
		{
			return new IfcSanitaryTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSensorType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcSensorTypeEnum> | IFC4.IfcSensorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcSensorTypeEnum> | IFC4.IfcSensorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSensorType
		{
			return new IfcSensorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcShadingDevice extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcShadingDeviceTypeEnum> | IFC4.IfcShadingDeviceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcShadingDeviceTypeEnum> | IFC4.IfcShadingDeviceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcShadingDevice
		{
			return new IfcShadingDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSlab extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcSlabTypeEnum> | IFC4.IfcSlabTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSlabTypeEnum> | IFC4.IfcSlabTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlab
		{
			return new IfcSlab(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSlabElementedCase extends IFC4.IfcSlab {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSlabTypeEnum> | IFC4.IfcSlabTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlabElementedCase
		{
			return new IfcSlabElementedCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSlabStandardCase extends IFC4.IfcSlab {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSlabTypeEnum> | IFC4.IfcSlabTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSlabStandardCase
		{
			return new IfcSlabStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSolarDevice extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcSolarDeviceTypeEnum> | IFC4.IfcSolarDeviceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSolarDeviceTypeEnum> | IFC4.IfcSolarDeviceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSolarDevice
		{
			return new IfcSolarDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSpaceHeater extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcSpaceHeaterTypeEnum> | IFC4.IfcSpaceHeaterTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSpaceHeaterTypeEnum> | IFC4.IfcSpaceHeaterTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceHeater
		{
			return new IfcSpaceHeater(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcStackTerminal extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcStackTerminalTypeEnum> | IFC4.IfcStackTerminalTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcStackTerminalTypeEnum> | IFC4.IfcStackTerminalTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStackTerminal
		{
			return new IfcStackTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcStair extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcStairTypeEnum> | IFC4.IfcStairTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcStairTypeEnum> | IFC4.IfcStairTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStair
		{
			return new IfcStair(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcStairFlight extends IFC4.IfcBuildingElement {
		NumberOfRisers: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		NumberOfTreads: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null;
		RiserHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		TreadLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PredefinedType: (Handle<IFC4.IfcStairFlightTypeEnum> | IFC4.IfcStairFlightTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, NumberOfRisers: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, NumberOfTreads: (Handle<IFC4.IfcInteger> | IFC4.IfcInteger) | null, RiserHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, TreadLength: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcStairFlightTypeEnum> | IFC4.IfcStairFlightTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.NumberOfRisers = NumberOfRisers;
			this.NumberOfTreads = NumberOfTreads;
			this.RiserHeight = RiserHeight;
			this.TreadLength = TreadLength;
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStairFlight
		{
			return new IfcStairFlight(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.NumberOfRisers, this.NumberOfTreads, this.RiserHeight, this.TreadLength, this.PredefinedType);
			return args;
		}
	}
	export class IfcStructuralAnalysisModel extends IFC4.IfcSystem {
		PredefinedType: (Handle<IFC4.IfcAnalysisModelTypeEnum> | IFC4.IfcAnalysisModelTypeEnum) ;
		OrientationOf2DPlane: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null;
		LoadedBy: (Handle<IFC4.IfcStructuralLoadGroup> | IFC4.IfcStructuralLoadGroup)[] | null;
		HasResults: (Handle<IFC4.IfcStructuralResultGroup> | IFC4.IfcStructuralResultGroup)[] | null;
		SharedPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcAnalysisModelTypeEnum> | IFC4.IfcAnalysisModelTypeEnum) , OrientationOf2DPlane: (Handle<IFC4.IfcAxis2Placement3D> | IFC4.IfcAxis2Placement3D) | null, LoadedBy: (Handle<IFC4.IfcStructuralLoadGroup> | IFC4.IfcStructuralLoadGroup)[] | null, HasResults: (Handle<IFC4.IfcStructuralResultGroup> | IFC4.IfcStructuralResultGroup)[] | null, SharedPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType);
			this.PredefinedType = PredefinedType;
			this.OrientationOf2DPlane = OrientationOf2DPlane;
			this.LoadedBy = LoadedBy;
			this.HasResults = HasResults;
			this.SharedPlacement = SharedPlacement;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralAnalysisModel
		{
			return new IfcStructuralAnalysisModel(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.OrientationOf2DPlane, this.LoadedBy, this.HasResults, this.SharedPlacement);
			return args;
		}
	}
	export class IfcStructuralLoadCase extends IFC4.IfcStructuralLoadGroup {
		SelfWeightCoefficients: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcLoadGroupTypeEnum> | IFC4.IfcLoadGroupTypeEnum) , ActionType: (Handle<IFC4.IfcActionTypeEnum> | IFC4.IfcActionTypeEnum) , ActionSource: (Handle<IFC4.IfcActionSourceTypeEnum> | IFC4.IfcActionSourceTypeEnum) , Coefficient: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure) | null, Purpose: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, SelfWeightCoefficients: (Handle<IFC4.IfcRatioMeasure> | IFC4.IfcRatioMeasure)[] | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, ActionType, ActionSource, Coefficient, Purpose);
			this.SelfWeightCoefficients = SelfWeightCoefficients;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadCase
		{
			return new IfcStructuralLoadCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.PredefinedType, this.ActionType, this.ActionSource, this.Coefficient, this.Purpose, this.SelfWeightCoefficients);
			return args;
		}
	}
	export class IfcStructuralPlanarAction extends IFC4.IfcStructuralSurfaceAction {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, AppliedLoad: (Handle<IFC4.IfcStructuralLoad> | IFC4.IfcStructuralLoad) , GlobalOrLocal: (Handle<IFC4.IfcGlobalOrLocalEnum> | IFC4.IfcGlobalOrLocalEnum) , DestabilizingLoad: (Handle<IFC4.IfcBoolean> | IFC4.IfcBoolean) | null, ProjectedOrTrue: (Handle<IFC4.IfcProjectedOrTrueLengthEnum> | IFC4.IfcProjectedOrTrueLengthEnum) | null, PredefinedType: (Handle<IFC4.IfcStructuralSurfaceActivityTypeEnum> | IFC4.IfcStructuralSurfaceActivityTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPlanarAction
		{
			return new IfcStructuralPlanarAction(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.AppliedLoad, this.GlobalOrLocal, this.DestabilizingLoad, this.ProjectedOrTrue, this.PredefinedType);
			return args;
		}
	}
	export class IfcSwitchingDevice extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcSwitchingDeviceTypeEnum> | IFC4.IfcSwitchingDeviceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSwitchingDeviceTypeEnum> | IFC4.IfcSwitchingDeviceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSwitchingDevice
		{
			return new IfcSwitchingDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcTank extends IFC4.IfcFlowStorageDevice {
		PredefinedType: (Handle<IFC4.IfcTankTypeEnum> | IFC4.IfcTankTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcTankTypeEnum> | IFC4.IfcTankTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTank
		{
			return new IfcTank(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcTransformer extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcTransformerTypeEnum> | IFC4.IfcTransformerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcTransformerTypeEnum> | IFC4.IfcTransformerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTransformer
		{
			return new IfcTransformer(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcTubeBundle extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcTubeBundleTypeEnum> | IFC4.IfcTubeBundleTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcTubeBundleTypeEnum> | IFC4.IfcTubeBundleTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcTubeBundle
		{
			return new IfcTubeBundle(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcUnitaryControlElementType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcUnitaryControlElementTypeEnum> | IFC4.IfcUnitaryControlElementTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcUnitaryControlElementTypeEnum> | IFC4.IfcUnitaryControlElementTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryControlElementType
		{
			return new IfcUnitaryControlElementType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcUnitaryEquipment extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcUnitaryEquipmentTypeEnum> | IFC4.IfcUnitaryEquipmentTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcUnitaryEquipmentTypeEnum> | IFC4.IfcUnitaryEquipmentTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryEquipment
		{
			return new IfcUnitaryEquipment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcValve extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcValveTypeEnum> | IFC4.IfcValveTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcValveTypeEnum> | IFC4.IfcValveTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcValve
		{
			return new IfcValve(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcWall extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcWallTypeEnum> | IFC4.IfcWallTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcWallTypeEnum> | IFC4.IfcWallTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWall
		{
			return new IfcWall(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcWallElementedCase extends IFC4.IfcWall {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcWallTypeEnum> | IFC4.IfcWallTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWallElementedCase
		{
			return new IfcWallElementedCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcWallStandardCase extends IFC4.IfcWall {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcWallTypeEnum> | IFC4.IfcWallTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWallStandardCase
		{
			return new IfcWallStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcWasteTerminal extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcWasteTerminalTypeEnum> | IFC4.IfcWasteTerminalTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcWasteTerminalTypeEnum> | IFC4.IfcWasteTerminalTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWasteTerminal
		{
			return new IfcWasteTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcWindow extends IFC4.IfcBuildingElement {
		OverallHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null;
		PredefinedType: (Handle<IFC4.IfcWindowTypeEnum> | IFC4.IfcWindowTypeEnum) | null;
		PartitioningType: (Handle<IFC4.IfcWindowTypePartitioningEnum> | IFC4.IfcWindowTypePartitioningEnum) | null;
		UserDefinedPartitioningType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, OverallHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcWindowTypeEnum> | IFC4.IfcWindowTypeEnum) | null, PartitioningType: (Handle<IFC4.IfcWindowTypePartitioningEnum> | IFC4.IfcWindowTypePartitioningEnum) | null, UserDefinedPartitioningType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindow
		{
			return new IfcWindow(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OverallHeight, this.OverallWidth, this.PredefinedType, this.PartitioningType, this.UserDefinedPartitioningType);
			return args;
		}
	}
	export class IfcWindowStandardCase extends IFC4.IfcWindow {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, OverallHeight: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, OverallWidth: (Handle<IFC4.IfcPositiveLengthMeasure> | IFC4.IfcPositiveLengthMeasure) | null, PredefinedType: (Handle<IFC4.IfcWindowTypeEnum> | IFC4.IfcWindowTypeEnum) | null, PartitioningType: (Handle<IFC4.IfcWindowTypePartitioningEnum> | IFC4.IfcWindowTypePartitioningEnum) | null, UserDefinedPartitioningType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, PartitioningType, UserDefinedPartitioningType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcWindowStandardCase
		{
			return new IfcWindowStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9], tape[10], tape[11], tape[12]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.OverallHeight, this.OverallWidth, this.PredefinedType, this.PartitioningType, this.UserDefinedPartitioningType);
			return args;
		}
	}
	export class IfcActuatorType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcActuatorTypeEnum> | IFC4.IfcActuatorTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcActuatorTypeEnum> | IFC4.IfcActuatorTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActuatorType
		{
			return new IfcActuatorType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirTerminal extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcAirTerminalTypeEnum> | IFC4.IfcAirTerminalTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcAirTerminalTypeEnum> | IFC4.IfcAirTerminalTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminal
		{
			return new IfcAirTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirTerminalBox extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcAirTerminalBoxTypeEnum> | IFC4.IfcAirTerminalBoxTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcAirTerminalBoxTypeEnum> | IFC4.IfcAirTerminalBoxTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalBox
		{
			return new IfcAirTerminalBox(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcAirToAirHeatRecovery extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcAirToAirHeatRecoveryTypeEnum> | IFC4.IfcAirToAirHeatRecoveryTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcAirToAirHeatRecoveryTypeEnum> | IFC4.IfcAirToAirHeatRecoveryTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAirToAirHeatRecovery
		{
			return new IfcAirToAirHeatRecovery(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcAlarmType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcAlarmTypeEnum> | IFC4.IfcAlarmTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcAlarmTypeEnum> | IFC4.IfcAlarmTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAlarmType
		{
			return new IfcAlarmType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcAudioVisualAppliance extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcAudioVisualApplianceTypeEnum> | IFC4.IfcAudioVisualApplianceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcAudioVisualApplianceTypeEnum> | IFC4.IfcAudioVisualApplianceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAudioVisualAppliance
		{
			return new IfcAudioVisualAppliance(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcBeam extends IFC4.IfcBuildingElement {
		PredefinedType: (Handle<IFC4.IfcBeamTypeEnum> | IFC4.IfcBeamTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcBeamTypeEnum> | IFC4.IfcBeamTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBeam
		{
			return new IfcBeam(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcBeamStandardCase extends IFC4.IfcBeam {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcBeamTypeEnum> | IFC4.IfcBeamTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBeamStandardCase
		{
			return new IfcBeamStandardCase(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcBoiler extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcBoilerTypeEnum> | IFC4.IfcBoilerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcBoilerTypeEnum> | IFC4.IfcBoilerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBoiler
		{
			return new IfcBoiler(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcBurner extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcBurnerTypeEnum> | IFC4.IfcBurnerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcBurnerTypeEnum> | IFC4.IfcBurnerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcBurner
		{
			return new IfcBurner(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableCarrierFitting extends IFC4.IfcFlowFitting {
		PredefinedType: (Handle<IFC4.IfcCableCarrierFittingTypeEnum> | IFC4.IfcCableCarrierFittingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCableCarrierFittingTypeEnum> | IFC4.IfcCableCarrierFittingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierFitting
		{
			return new IfcCableCarrierFitting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableCarrierSegment extends IFC4.IfcFlowSegment {
		PredefinedType: (Handle<IFC4.IfcCableCarrierSegmentTypeEnum> | IFC4.IfcCableCarrierSegmentTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCableCarrierSegmentTypeEnum> | IFC4.IfcCableCarrierSegmentTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierSegment
		{
			return new IfcCableCarrierSegment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableFitting extends IFC4.IfcFlowFitting {
		PredefinedType: (Handle<IFC4.IfcCableFittingTypeEnum> | IFC4.IfcCableFittingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCableFittingTypeEnum> | IFC4.IfcCableFittingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableFitting
		{
			return new IfcCableFitting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCableSegment extends IFC4.IfcFlowSegment {
		PredefinedType: (Handle<IFC4.IfcCableSegmentTypeEnum> | IFC4.IfcCableSegmentTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCableSegmentTypeEnum> | IFC4.IfcCableSegmentTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCableSegment
		{
			return new IfcCableSegment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcChiller extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcChillerTypeEnum> | IFC4.IfcChillerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcChillerTypeEnum> | IFC4.IfcChillerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcChiller
		{
			return new IfcChiller(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCoil extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcCoilTypeEnum> | IFC4.IfcCoilTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCoilTypeEnum> | IFC4.IfcCoilTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoil
		{
			return new IfcCoil(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCommunicationsAppliance extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcCommunicationsApplianceTypeEnum> | IFC4.IfcCommunicationsApplianceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCommunicationsApplianceTypeEnum> | IFC4.IfcCommunicationsApplianceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCommunicationsAppliance
		{
			return new IfcCommunicationsAppliance(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCompressor extends IFC4.IfcFlowMovingDevice {
		PredefinedType: (Handle<IFC4.IfcCompressorTypeEnum> | IFC4.IfcCompressorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCompressorTypeEnum> | IFC4.IfcCompressorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCompressor
		{
			return new IfcCompressor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCondenser extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcCondenserTypeEnum> | IFC4.IfcCondenserTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCondenserTypeEnum> | IFC4.IfcCondenserTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCondenser
		{
			return new IfcCondenser(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcControllerType extends IFC4.IfcDistributionControlElementType {
		PredefinedType: (Handle<IFC4.IfcControllerTypeEnum> | IFC4.IfcControllerTypeEnum) ;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ApplicableOccurrence: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, HasPropertySets: (Handle<IFC4.IfcPropertySetDefinition> | IFC4.IfcPropertySetDefinition)[] | null, RepresentationMaps: (Handle<IFC4.IfcRepresentationMap> | IFC4.IfcRepresentationMap)[] | null, Tag: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ElementType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcControllerTypeEnum> | IFC4.IfcControllerTypeEnum) )
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcControllerType
		{
			return new IfcControllerType(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8], tape[9]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ApplicableOccurrence, this.HasPropertySets, this.RepresentationMaps, this.Tag, this.ElementType, this.PredefinedType);
			return args;
		}
	}
	export class IfcCooledBeam extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcCooledBeamTypeEnum> | IFC4.IfcCooledBeamTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCooledBeamTypeEnum> | IFC4.IfcCooledBeamTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCooledBeam
		{
			return new IfcCooledBeam(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcCoolingTower extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcCoolingTowerTypeEnum> | IFC4.IfcCoolingTowerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcCoolingTowerTypeEnum> | IFC4.IfcCoolingTowerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcCoolingTower
		{
			return new IfcCoolingTower(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDamper extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcDamperTypeEnum> | IFC4.IfcDamperTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcDamperTypeEnum> | IFC4.IfcDamperTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDamper
		{
			return new IfcDamper(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionChamberElement extends IFC4.IfcDistributionFlowElement {
		PredefinedType: (Handle<IFC4.IfcDistributionChamberElementTypeEnum> | IFC4.IfcDistributionChamberElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcDistributionChamberElementTypeEnum> | IFC4.IfcDistributionChamberElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionChamberElement
		{
			return new IfcDistributionChamberElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionCircuit extends IFC4.IfcDistributionSystem {
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, LongName: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, PredefinedType: (Handle<IFC4.IfcDistributionSystemEnum> | IFC4.IfcDistributionSystemEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionCircuit
		{
			return new IfcDistributionCircuit(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.LongName, this.PredefinedType);
			return args;
		}
	}
	export class IfcDistributionControlElement extends IFC4.IfcDistributionElement {
		AssignedToFlowElement!: (Handle<IFC4.IfcRelFlowControlElements> | IFC4.IfcRelFlowControlElements)[] | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionControlElement
		{
			return new IfcDistributionControlElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag);
			return args;
		}
	}
	export class IfcDuctFitting extends IFC4.IfcFlowFitting {
		PredefinedType: (Handle<IFC4.IfcDuctFittingTypeEnum> | IFC4.IfcDuctFittingTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcDuctFittingTypeEnum> | IFC4.IfcDuctFittingTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctFitting
		{
			return new IfcDuctFitting(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDuctSegment extends IFC4.IfcFlowSegment {
		PredefinedType: (Handle<IFC4.IfcDuctSegmentTypeEnum> | IFC4.IfcDuctSegmentTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcDuctSegmentTypeEnum> | IFC4.IfcDuctSegmentTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSegment
		{
			return new IfcDuctSegment(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcDuctSilencer extends IFC4.IfcFlowTreatmentDevice {
		PredefinedType: (Handle<IFC4.IfcDuctSilencerTypeEnum> | IFC4.IfcDuctSilencerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcDuctSilencerTypeEnum> | IFC4.IfcDuctSilencerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSilencer
		{
			return new IfcDuctSilencer(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricAppliance extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcElectricApplianceTypeEnum> | IFC4.IfcElectricApplianceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcElectricApplianceTypeEnum> | IFC4.IfcElectricApplianceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricAppliance
		{
			return new IfcElectricAppliance(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricDistributionBoard extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcElectricDistributionBoardTypeEnum> | IFC4.IfcElectricDistributionBoardTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcElectricDistributionBoardTypeEnum> | IFC4.IfcElectricDistributionBoardTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricDistributionBoard
		{
			return new IfcElectricDistributionBoard(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricFlowStorageDevice extends IFC4.IfcFlowStorageDevice {
		PredefinedType: (Handle<IFC4.IfcElectricFlowStorageDeviceTypeEnum> | IFC4.IfcElectricFlowStorageDeviceTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcElectricFlowStorageDeviceTypeEnum> | IFC4.IfcElectricFlowStorageDeviceTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricFlowStorageDevice
		{
			return new IfcElectricFlowStorageDevice(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricGenerator extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcElectricGeneratorTypeEnum> | IFC4.IfcElectricGeneratorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcElectricGeneratorTypeEnum> | IFC4.IfcElectricGeneratorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricGenerator
		{
			return new IfcElectricGenerator(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricMotor extends IFC4.IfcEnergyConversionDevice {
		PredefinedType: (Handle<IFC4.IfcElectricMotorTypeEnum> | IFC4.IfcElectricMotorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcElectricMotorTypeEnum> | IFC4.IfcElectricMotorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricMotor
		{
			return new IfcElectricMotor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcElectricTimeControl extends IFC4.IfcFlowController {
		PredefinedType: (Handle<IFC4.IfcElectricTimeControlTypeEnum> | IFC4.IfcElectricTimeControlTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcElectricTimeControlTypeEnum> | IFC4.IfcElectricTimeControlTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcElectricTimeControl
		{
			return new IfcElectricTimeControl(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcFan extends IFC4.IfcFlowMovingDevice {
		PredefinedType: (Handle<IFC4.IfcFanTypeEnum> | IFC4.IfcFanTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFanTypeEnum> | IFC4.IfcFanTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFan
		{
			return new IfcFan(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcFilter extends IFC4.IfcFlowTreatmentDevice {
		PredefinedType: (Handle<IFC4.IfcFilterTypeEnum> | IFC4.IfcFilterTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFilterTypeEnum> | IFC4.IfcFilterTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFilter
		{
			return new IfcFilter(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcFireSuppressionTerminal extends IFC4.IfcFlowTerminal {
		PredefinedType: (Handle<IFC4.IfcFireSuppressionTerminalTypeEnum> | IFC4.IfcFireSuppressionTerminalTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFireSuppressionTerminalTypeEnum> | IFC4.IfcFireSuppressionTerminalTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFireSuppressionTerminal
		{
			return new IfcFireSuppressionTerminal(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcFlowInstrument extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcFlowInstrumentTypeEnum> | IFC4.IfcFlowInstrumentTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcFlowInstrumentTypeEnum> | IFC4.IfcFlowInstrumentTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcFlowInstrument
		{
			return new IfcFlowInstrument(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcProtectiveDeviceTrippingUnit extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum> | IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum> | IFC4.IfcProtectiveDeviceTrippingUnitTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceTrippingUnit
		{
			return new IfcProtectiveDeviceTrippingUnit(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcSensor extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcSensorTypeEnum> | IFC4.IfcSensorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcSensorTypeEnum> | IFC4.IfcSensorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcSensor
		{
			return new IfcSensor(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcUnitaryControlElement extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcUnitaryControlElementTypeEnum> | IFC4.IfcUnitaryControlElementTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcUnitaryControlElementTypeEnum> | IFC4.IfcUnitaryControlElementTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryControlElement
		{
			return new IfcUnitaryControlElement(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcActuator extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcActuatorTypeEnum> | IFC4.IfcActuatorTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcActuatorTypeEnum> | IFC4.IfcActuatorTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcActuator
		{
			return new IfcActuator(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcAlarm extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcAlarmTypeEnum> | IFC4.IfcAlarmTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcAlarmTypeEnum> | IFC4.IfcAlarmTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcAlarm
		{
			return new IfcAlarm(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
	export class IfcController extends IFC4.IfcDistributionControlElement {
		PredefinedType: (Handle<IFC4.IfcControllerTypeEnum> | IFC4.IfcControllerTypeEnum) | null;
		constructor(expressID: number, type: number, GlobalId: (Handle<IFC4.IfcGloballyUniqueId> | IFC4.IfcGloballyUniqueId) , OwnerHistory: (Handle<IFC4.IfcOwnerHistory> | IFC4.IfcOwnerHistory) | null, Name: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, Description: (Handle<IFC4.IfcText> | IFC4.IfcText) | null, ObjectType: (Handle<IFC4.IfcLabel> | IFC4.IfcLabel) | null, ObjectPlacement: (Handle<IFC4.IfcObjectPlacement> | IFC4.IfcObjectPlacement) | null, Representation: (Handle<IFC4.IfcProductRepresentation> | IFC4.IfcProductRepresentation) | null, Tag: (Handle<IFC4.IfcIdentifier> | IFC4.IfcIdentifier) | null, PredefinedType: (Handle<IFC4.IfcControllerTypeEnum> | IFC4.IfcControllerTypeEnum) | null)
		{
			super(expressID,type,GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
			this.PredefinedType = PredefinedType;
		}
		static FromTape(expressID: number, type: number, tape: any[]): IfcController
		{
			return new IfcController(expressID, type, tape[0], tape[1], tape[2], tape[3], tape[4], tape[5], tape[6], tape[7], tape[8]);
		}
		ToTape(): unknown[]
		{
			const args: unknown[] = [];
			args.push(this.GlobalId, this.OwnerHistory, this.Name, this.Description, this.ObjectType, this.ObjectPlacement, this.Representation, this.Tag, this.PredefinedType);
			return args;
		}
	}
}